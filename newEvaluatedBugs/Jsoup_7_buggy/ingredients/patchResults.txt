org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.SelfClosingStartTag	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.Data	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.Comment	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.BogusDoctype	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.Data	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.AttributeName	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.Comment	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.ScriptDataEscaped	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.BeforeAttributeName	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.BogusDoctype	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.ScriptDataDoubleEscaped	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.AttributeName	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.AttributeValue_unquoted	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.ScriptDataEscaped	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.ScriptData	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.DoctypeSystemIdentifier_singleQuoted	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.DoctypeSystemIdentifier_doubleQuoted	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.ScriptDataDoubleEscaped	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.AttributeValue_unquoted	false
org.jsoup.parser.Token::::110::::3700::::3721::::hasEmptyAttributeValue::::hasPendingAttributeValue	false
org.jsoup.parser.Parser::::157::::5965::::5972::::bodyHtml::::baseUri	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.ScriptData	false
org.jsoup.nodes.Document::::46::::1367::::1370::::html::::this	false
org.jsoup.nodes.Document::::45::::1331::::1334::::html::::this	false
org.jsoup.nodes.Document::::44::::1296::::1298::::doc::::this	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.DoctypeSystemIdentifier_singleQuoted	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.DoctypeSystemIdentifier_doubleQuoted	false
org.jsoup.nodes.Element::::378::::13134::::13144::::appendChild::::prependChild	false
org.jsoup.parser.Parser::::115::::3818::::3829::::fragmentHtml::::baseUri	false
org.jsoup.parser.HtmlTreeBuilder::::96::::4984::::4989::::parent::::context	false
org.jsoup.parser.HtmlTreeBuilder::::86::::4524::::4552::::org.jsoup.parser.Tag.valueOf("html", settings)::::org.jsoup.parser.Tag.valueOf(baseUri, settings)	false
org.jsoup.parser.HtmlTreeBuilder::::81::::4314::::4323::::contextTag::::context	false
org.jsoup.parser.HtmlTreeBuilder::::79::::4168::::4177::::contextTag::::context	false
org.jsoup.parser.HtmlTreeBuilder::::77::::4053::::4062::::contextTag::::context	false
org.jsoup.parser.HtmlTreeBuilder::::62::::3343::::3355::::inputFragment::::baseUri	false
org.jsoup.parser.HtmlTreeBuilder::::61::::3289::::3316::::org.jsoup.parser.HtmlTreeBuilderState.Initial::::state	false
org.jsoup.parser.HtmlTreeBuilder::::63::::3394::::3407::::contextElement::::context	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.Data	false
org.jsoup.parser.TokeniserState::::595::::19750::::19773::::org.jsoup.parser.TokeniserState.attributeNameCharsSorted::::org.jsoup.parser.TokeniserState.attributeValueUnquoted	false
org.jsoup.parser.Token::::120::::4152::::4173::::pendingAttributeValueS::::pendingAttributeName	false
org.jsoup.parser.CharacterReader::::171::::4625::::4633::::remaining::::length	false
org.jsoup.parser.HtmlTreeBuilder::::81::::4314::::4323::::contextTag::::contextElement	false
org.jsoup.parser.HtmlTreeBuilder::::79::::4168::::4177::::contextTag::::contextElement	false
org.jsoup.parser.HtmlTreeBuilder::::77::::4053::::4062::::contextTag::::contextElement	false
org.jsoup.nodes.Element::::191::::5855::::5856::::el::::parent()	false
org.jsoup.parser.HtmlTreeBuilder::::69::::3595::::3597::::doc::::context	false
org.jsoup.nodes.Element::::191::::5855::::5856::::el::::this	false
org.jsoup.parser.HtmlTreeBuilder::::87::::4577::::4579::::doc::::context	false
org.jsoup.nodes.Element::::191::::5855::::5860::::parent::::toString	false
org.jsoup.nodes.Element::::191::::5855::::5860::::parent::::tagName	false
org.jsoup.nodes.Element::::191::::5855::::5860::::parent::::classNames	false
org.jsoup.parser.CharacterReader::::172::::4674::::4678::::chars::::input	false
org.jsoup.parser.CharacterReader::::168::::4561::::4566::::length::::pos	false
org.jsoup.parser.HtmlTreeBuilder::::96::::4984::::4989::::parent::::root	false
org.jsoup.nodes.Element::::192::::5899::::5904::::parent::::this	false
org.jsoup.nodes.Element::::192::::5899::::5904::::parent::::parent()	false
org.jsoup.parser.CharacterReader::::177::::4791::::4795::::start::::pos	false
org.jsoup.parser.HtmlTreeBuilder::::88::::4622::::4625::::root::::context	false
org.jsoup.parser.HtmlTreeBuilder::::87::::4593::::4596::::root::::context	false
org.jsoup.parser.HtmlTreeBuilder::::86::::4505::::4508::::root::::context	false
org.jsoup.parser.Token::::166::::5713::::5718::::append::::pendingAttributeName	false
org.jsoup.nodes.Element::::192::::5899::::5905::::tagName::::isBlock	false
org.jsoup.nodes.Document::::45::::1331::::1334::::html::::doc	false
org.jsoup.parser.HtmlTreeBuilder::::391::::13879::::13882::::node::::contextElement	false
org.jsoup.parser.HtmlTreeBuilder::::68::::3529::::3559::::(context.ownerDocument()) != null::::context != null	false
org.jsoup.nodes.Document::::44::::1296::::1298::::doc::::html	false
org.jsoup.parser.Token::::166::::5676::::5681::::append::::pendingAttributeName	false
org.jsoup.parser.Token::::117::::4020::::4041::::hasEmptyAttributeValue::::hasPendingAttributeValue	false
org.jsoup.nodes.Document::::46::::1367::::1370::::html::::doc	false
org.jsoup.parser.CharacterReader::::172::::4674::::4678::::chars::::val	false
org.jsoup.parser.Token::::166::::5713::::5718::::append::::tagName	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.ScriptDataDoubleEscapedLessthanSign	false
org.jsoup.parser.CharacterReader::::172::::4681::::4683::::val::::input	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.Comment	false
org.jsoup.parser.HtmlTreeBuilder::::96::::4984::::4989::::parent::::contextElement	false
org.jsoup.parser.Token::::166::::5676::::5681::::append::::tagName	false
org.jsoup.parser.CharacterReader::::171::::4625::::4633::::remaining::::start	false
org.jsoup.parser.HtmlTreeBuilder::::69::::3595::::3597::::doc::::contextElement	false
org.jsoup.parser.HtmlTreeBuilder::::87::::4577::::4579::::doc::::contextElement	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.ScriptDataEscapedLessthanSign	false
org.jsoup.nodes.Element::::192::::5899::::5905::::tagName::::toString	false
org.jsoup.nodes.Element::::192::::5899::::5905::::tagName::::parent	false
org.jsoup.nodes.Document::::46::::1367::::1370::::html::::body()	false
org.jsoup.nodes.Document::::45::::1331::::1334::::html::::body()	false
org.jsoup.parser.HtmlTreeBuilder::::86::::4524::::4552::::org.jsoup.parser.Tag.valueOf("html", settings)::::org.jsoup.parser.Tag.valueOf(inputFragment, settings)	false
org.jsoup.parser.HtmlTreeBuilder::::185::::7562::::7599::::org.jsoup.parser.Tag.valueOf(startTag.name(), settings)::::org.jsoup.parser.Tag.valueOf(baseUri, settings)	false
org.jsoup.parser.Token::::118::::4064::::4087::::hasPendingAttributeValue::::hasEmptyAttributeValue	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.SelfClosingStartTag	false
org.jsoup.parser.Tokeniser::::75::::2915::::2919::::(org.jsoup.parser.Token.StartTag) (token)::::token	false
org.jsoup.parser.Tokeniser::::75::::2915::::2919::::(org.jsoup.parser.Token.StartTag) (token)::::emitPending	false
org.jsoup.parser.Tokeniser::::207::::8033::::8049::::emit(tagPending)::::emit(org.jsoup.parser.Tokeniser.notCharRefCharsSorted)	false
org.jsoup.parser.Tokeniser::::207::::8033::::8049::::emit(tagPending)::::emit(multipointHolder)	false
org.jsoup.parser.Tokeniser::::207::::8033::::8049::::emit(tagPending)::::emit(charsString)	false
org.jsoup.parser.Token::::137::::4791::::4800::::normalName::::tagName	false
org.jsoup.parser.Token::::107::::3448::::3471::::hasPendingAttributeValue::::hasEmptyAttributeValue	false
org.jsoup.parser.HtmlTreeBuilder::::69::::3595::::3597::::doc::::root	false
org.jsoup.parser.Parser::::156::::5909::::5911::::doc::::body	false
org.jsoup.parser.HtmlTreeBuilder::::87::::4577::::4579::::doc::::root	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.DoctypeName	false
org.jsoup.nodes.Element::::192::::5899::::5905::::tagName::::classNames	false
org.jsoup.parser.HtmlTreeBuilder::::393::::13942::::13945::::node::::contextElement	false
org.jsoup.parser.HtmlTreeBuilder::::81::::4314::::4323::::contextTag::::baseUri	false
org.jsoup.parser.HtmlTreeBuilder::::79::::4168::::4177::::contextTag::::baseUri	false
org.jsoup.parser.HtmlTreeBuilder::::77::::4053::::4062::::contextTag::::baseUri	false
org.jsoup.parser.HtmlTreeBuilder::::599::::21246::::21274::::last == null) || (onStack(last)::::onStack(last)	false
org.jsoup.parser.HtmlTreeBuilder::::599::::21246::::21257::::last == null::::onStack(last)	false
org.jsoup.nodes.Document::::46::::1367::::1370::::html::::head()	false
org.jsoup.nodes.Document::::45::::1331::::1334::::html::::head()	false
org.jsoup.parser.Tokeniser::::207::::8033::::8049::::emit(tagPending)::::emit(lastStartTag)	false
org.jsoup.parser.HtmlTreeBuilder::::389::::13822::::13829::::pos == 0::::pos >= 0	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.BogusDoctype	false
org.jsoup.parser.HtmlTreeBuilder::::599::::21246::::21257::::last == null::::last == null) || (onStack(last)	false
org.jsoup.nodes.Document::::44::::1296::::1298::::doc::::new org.jsoup.nodes.Document(baseUri)	false
org.jsoup.parser.Token::::113::::3883::::3902::::pendingAttributeName::::tagName	false
org.jsoup.parser.TokeniserState::::595::::19750::::19773::::org.jsoup.parser.TokeniserState.attributeNameCharsSorted::::org.jsoup.parser.TokeniserState.attributeSingleValueCharsSorted	false
org.jsoup.parser.TokeniserState::::595::::19750::::19773::::org.jsoup.parser.TokeniserState.attributeNameCharsSorted::::org.jsoup.parser.TokeniserState.attributeDoubleValueCharsSorted	false
org.jsoup.nodes.Document::::45::::1331::::1334::::html::::findFirstElementByTagName("html", this)	false
org.jsoup.parser.HtmlTreeBuilder::::73::::3778::::3787::::contextTag::::baseUri	false
org.jsoup.nodes.Document::::46::::1367::::1370::::html::::findFirstElementByTagName("html", this)	false
org.jsoup.parser.Token::::113::::3850::::3904::::attribute = new org.jsoup.nodes.BooleanAttribute(pendingAttributeName)::::attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, "")	false
org.jsoup.nodes.Element::::192::::5899::::5904::::parent::::el	false
org.jsoup.nodes.Attributes::::100::::3024::::3032::::attribute::::attr	false
org.jsoup.parser.HtmlTreeBuilder::::86::::4524::::4552::::org.jsoup.parser.Tag.valueOf("html", settings)::::org.jsoup.parser.Tag.valueOf(contextTag, settings)	false
org.jsoup.parser.CharacterReader::::171::::4625::::4633::::remaining::::(pos) - start	false
org.jsoup.nodes.Element::::194::::5998::::6003::::parent::::el	false
org.jsoup.nodes.Attributes::::100::::3004::::3012::::attribute::::attr	false
org.jsoup.nodes.Document::::44::::1296::::1298::::doc::::body()	false
org.jsoup.parser.HtmlTreeBuilder::::81::::4314::::4323::::contextTag::::root	false
org.jsoup.parser.HtmlTreeBuilder::::79::::4168::::4177::::contextTag::::root	false
org.jsoup.parser.HtmlTreeBuilder::::77::::4053::::4062::::contextTag::::root	false
org.jsoup.parser.Token::::120::::4152::::4173::::pendingAttributeValueS::::tagName	false
org.jsoup.parser.CharacterReader::::177::::4802::::4806::::start::::length	false
org.jsoup.parser.HtmlTreeBuilder::::62::::3343::::3355::::inputFragment::::contextTag	false
org.jsoup.parser.HtmlTreeBuilder::::599::::21246::::21249::::last::::entry	false
org.jsoup.nodes.Document::::46::::1367::::1370::::html::::new org.jsoup.nodes.Document(baseUri)	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.BeforeAttributeName	false
org.jsoup.parser.HtmlTreeBuilder::::75::::3908::::3917::::contextTag::::baseUri	false
org.jsoup.nodes.Attributes::::97::::2870::::2878::::attribute::::attr	false
org.jsoup.parser.HtmlTreeBuilder::::63::::3394::::3407::::contextElement::::root	false
org.jsoup.parser.Token::::166::::5645::::5672::::(pendingAttributeName) == null::::(pendingAttributeName) != null	false
org.jsoup.parser.CharacterReader::::177::::4771::::4775::::start::::length	false
org.jsoup.parser.Token::::137::::4791::::4800::::normalName::::pendingAttributeName	false
org.jsoup.parser.HtmlTreeBuilder::::599::::21246::::21249::::last::::contextElement	false
org.jsoup.parser.CharacterReader::::177::::4791::::4795::::start::::length	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.BeforeAttributeValue	false
org.jsoup.parser.Token::::137::::4791::::4800::::normalName::::pendingAttributeValueS	false
org.jsoup.parser.Token::::166::::5713::::5718::::append::::pendingAttributeValueS	false
org.jsoup.parser.HtmlTreeBuilder::::599::::21270::::21273::::last::::entry	false
org.jsoup.parser.Parser::::115::::3879::::3889::::treeBuilder::::new org.jsoup.parser.HtmlTreeBuilder()	false
org.jsoup.parser.Parser::::115::::3792::::3802::::treeBuilder::::new org.jsoup.parser.HtmlTreeBuilder()	false
org.jsoup.parser.Token::::166::::5676::::5681::::append::::pendingAttributeValueS	false
org.jsoup.nodes.Element::::191::::5855::::5856::::el::::parent	false
org.jsoup.parser.HtmlTreeBuilder::::81::::4314::::4323::::contextTag::::"select"	false
org.jsoup.parser.HtmlTreeBuilder::::79::::4168::::4177::::contextTag::::"select"	false
org.jsoup.parser.HtmlTreeBuilder::::77::::4053::::4062::::contextTag::::"select"	false
org.jsoup.nodes.Element::::193::::5959::::5964::::parent::::el	false
org.jsoup.parser.HtmlTreeBuilder::::599::::21270::::21273::::last::::contextElement	false
org.jsoup.nodes.Element::::192::::5880::::5885::::parent::::el	false
org.jsoup.nodes.Document::::45::::1331::::1334::::html::::new org.jsoup.nodes.Document(baseUri)	false
org.jsoup.nodes.Document::::44::::1296::::1298::::doc::::head()	false
org.jsoup.parser.CharacterReader::::168::::4561::::4566::::length::::start	false
org.jsoup.parser.HtmlTreeBuilder::::81::::4314::::4323::::contextTag::::"th"	false
org.jsoup.parser.HtmlTreeBuilder::::81::::4314::::4323::::contextTag::::"td"	false
org.jsoup.parser.HtmlTreeBuilder::::81::::4314::::4323::::contextTag::::"table"	false
org.jsoup.parser.Tokeniser::::76::::2934::::2945::::lastStartTag::::charsString	false
org.jsoup.parser.HtmlTreeBuilder::::79::::4168::::4177::::contextTag::::"th"	false
org.jsoup.parser.HtmlTreeBuilder::::79::::4168::::4177::::contextTag::::"td"	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.ScriptDataDoubleEscapedLessthanSign	false
org.jsoup.parser.HtmlTreeBuilderState::::276::::11349::::11390::::(tb.getActiveFormattingElement("a")) != null::::tb.process(t)	false
org.jsoup.parser.HtmlTreeBuilderState::::276::::11349::::11390::::(tb.getActiveFormattingElement("a")) != null::::anythingElse(t, tb)	false
org.jsoup.parser.HtmlTreeBuilder::::79::::4168::::4177::::contextTag::::"table"	false
org.jsoup.parser.HtmlTreeBuilder::::77::::4053::::4062::::contextTag::::"th"	false
org.jsoup.parser.HtmlTreeBuilder::::77::::4053::::4062::::contextTag::::"td"	false
org.jsoup.nodes.Element::::192::::5899::::5905::::tagName::::id	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.ScriptDataEscapedLessthanSign	false
org.jsoup.nodes.Element::::192::::5899::::5905::::tagName::::elementSiblingIndex	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.DoctypePublicIdentifier_singleQuoted	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.DoctypePublicIdentifier_doubleQuoted	false
org.jsoup.parser.Token::::113::::3883::::3902::::pendingAttributeName::::pendingAttributeValueS	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.AttributeValue_unquoted	false
org.jsoup.nodes.Document::::44::::1296::::1298::::doc::::findFirstElementByTagName("html", this)	false
org.jsoup.parser.HtmlTreeBuilder::::77::::4053::::4062::::contextTag::::"table"	false
org.jsoup.nodes.Element::::378::::13134::::13152::::appendChild(child)::::INSERT::::STATEMENT::::tagName()	false
org.jsoup.nodes.Element::::378::::13134::::13152::::appendChild(child)::::INSERT::::STATEMENT::::prependChild(child)	false
org.jsoup.nodes.Element::::378::::13134::::13152::::appendChild(child)::::INSERT::::STATEMENT::::appendChild(child)	false
org.jsoup.nodes.Element::::187::::5733::::5747::::return parents::::INSERT::::STATEMENT::::tagName()	false
org.jsoup.nodes.Element::::186::::5691::::5723::::org.jsoup.nodes.Element.accumulateParents(this, parents)::::INSERT::::STATEMENT::::org.jsoup.nodes.Element.accumulateParents(this, parents)	false
org.jsoup.parser.CharacterReader::::177::::4765::::4775::::(pos) > start::::(pos) < remaining	false
org.jsoup.parser.Token::::119::::4110::::4138::::org.jsoup.parser.Token.reset(pendingAttributeValue)::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(pendingAttributeValue)	false
org.jsoup.parser.HtmlTreeBuilder::::81::::4314::::4323::::contextTag::::"tr"	false
org.jsoup.parser.HtmlTreeBuilder::::103::::5151::::5162::::runParser()::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.CharacterReader::::177::::4798::::4806::::(pos) - start::::start	false
org.jsoup.parser.CharacterReader::::177::::4798::::4806::::(pos) - start::::pos	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.ScriptDataEscaped	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.DoctypeName	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted	false
org.jsoup.parser.HtmlTreeBuilder::::81::::4314::::4323::::contextTag::::"html"	false
org.jsoup.parser.HtmlTreeBuilder::::79::::4168::::4177::::contextTag::::"html"	false
org.jsoup.parser.HtmlTreeBuilder::::77::::4053::::4062::::contextTag::::"html"	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.ScriptDataDoubleEscaped	false
org.jsoup.nodes.Element::::192::::5876::::6024::::if ((parent != null) && (!(parent.tagName().equals("#root")))) {    parents.add(parent);    org.jsoup.nodes.Element.accumulateParents(parent, parents);}::::INSERT::::STATEMENT::::tagName()	false
org.jsoup.nodes.Element::::191::::5838::::5866::::org.jsoup.nodes.Element parent = el.parent()::::INSERT::::STATEMENT::::tagName()	false
org.jsoup.parser.HtmlTreeBuilder::::79::::4168::::4177::::contextTag::::"tr"	false
org.jsoup.parser.CharacterReader::::172::::4654::::4694::::(java.util.Arrays.binarySearch(chars, val[pos])) >= 0::::(pos) < remaining	false
org.jsoup.parser.HtmlTreeBuilder::::77::::4053::::4062::::contextTag::::"tr"	false
org.jsoup.parser.CharacterReader::::172::::4654::::4694::::(java.util.Arrays.binarySearch(chars, val[pos])) >= 0::::pos) < (length	false
org.jsoup.nodes.Element::::379::::13162::::13174::::return child::::INSERT::::STATEMENT::::tagName()	false
org.jsoup.nodes.Element::::191::::5855::::5860::::parent::::id	false
org.jsoup.nodes.Element::::187::::5733::::5747::::return parents::::INSERT::::STATEMENT::::org.jsoup.nodes.Element.accumulateParents(this, parents)	false
org.jsoup.parser.Tokeniser::::76::::2949::::2964::::startTag.tagName::::lastStartTag	false
org.jsoup.parser.Tokeniser::::207::::8033::::8049::::emit(tagPending)::::emit(codepointHolder)	false
org.jsoup.parser.Tokeniser::::207::::8033::::8036::::emit::::characterReferenceError	false
org.jsoup.parser.Token::::166::::5685::::5704::::pendingAttributeName::::tagName	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.CommentStartDash	false
org.jsoup.parser.Token::::166::::5645::::5664::::pendingAttributeName::::tagName	false
org.jsoup.parser.Token::::166::::5622::::5641::::pendingAttributeName::::tagName	false
org.jsoup.parser.Token::::104::::3203::::3222::::pendingAttributeName::::tagName	false
org.jsoup.parser.HtmlTreeBuilder::::81::::4314::::4323::::contextTag::::"thead"	false
org.jsoup.parser.HtmlTreeBuilder::::81::::4314::::4323::::contextTag::::"tfoot"	false
org.jsoup.parser.HtmlTreeBuilder::::81::::4314::::4323::::contextTag::::"tbody"	false
org.jsoup.parser.CharacterReader::::171::::4625::::4633::::remaining::::(length) - (pos)	false
org.jsoup.parser.Token::::166::::5713::::5718::::append::::normalName	false
org.jsoup.parser.CharacterReader::::171::::4619::::4633::::(pos) < remaining::::pos) < (length	false
org.jsoup.parser.HtmlTreeBuilder::::397::::14135::::14160::::("th".equals(name)) && (!last)::::!last	false
org.jsoup.parser.HtmlTreeBuilder::::397::::14113::::14161::::"td".equals(name)) || (("th".equals(name)) && (!last)::::last	false
org.jsoup.parser.HtmlTreeBuilder::::397::::14113::::14161::::"td".equals(name)) || (("th".equals(name)) && (!last)::::!last	false
org.jsoup.parser.Token::::116::::3979::::3998::::pendingAttributeName::::tagName	false
org.jsoup.nodes.Element::::186::::5691::::5723::::org.jsoup.nodes.Element.accumulateParents(this, parents)::::INSERT::::STATEMENT::::tagName()	false
org.jsoup.nodes.Element::::185::::5648::::5681::::org.jsoup.select.Elements parents = new org.jsoup.select.Elements()::::INSERT::::STATEMENT::::tagName()	false
org.jsoup.nodes.Element::::377::::13064::::13124::::org.jsoup.nodes.Element child = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(tagName), baseUri())::::INSERT::::STATEMENT::::tagName()	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.AfterDoctypeSystemIdentifier	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.AfterDoctypePublicIdentifier	false
org.jsoup.parser.Token::::166::::5676::::5681::::append::::normalName	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.CommentEndDash	false
org.jsoup.parser.HtmlTreeBuilder::::79::::4168::::4177::::contextTag::::"thead"	false
org.jsoup.parser.HtmlTreeBuilder::::79::::4168::::4177::::contextTag::::"tfoot"	false
org.jsoup.parser.HtmlTreeBuilder::::79::::4168::::4177::::contextTag::::"tbody"	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.BeforeDoctypeName	false
org.jsoup.parser.HtmlTreeBuilder::::185::::7537::::7661::::org.jsoup.nodes.Element el = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(startTag.name(), settings), baseUri, settings.normalizeAttributes(startTag.attributes))::::INSERT::::STATEMENT::::insertNode(el)	false
org.jsoup.parser.Tokeniser::::207::::8033::::8049::::emit(tagPending)::::INSERT::::STATEMENT::::emit(tagPending)	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.BeforeAttributeValue	false
org.jsoup.parser.HtmlTreeBuilder::::77::::4053::::4062::::contextTag::::"thead"	false
org.jsoup.parser.HtmlTreeBuilder::::77::::4053::::4062::::contextTag::::"tfoot"	false
org.jsoup.parser.HtmlTreeBuilder::::77::::4053::::4062::::contextTag::::"tbody"	false
org.jsoup.parser.HtmlTreeBuilder::::185::::7537::::7661::::org.jsoup.nodes.Element el = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(startTag.name(), settings), baseUri, settings.normalizeAttributes(startTag.attributes))::::INSERT::::STATEMENT::::insert(el)	false
org.jsoup.parser.HtmlTreeBuilder::::419::::15161::::15187::::org.jsoup.parser.HtmlTreeBuilderState.InBody::::state	false
org.jsoup.parser.CharacterReader::::177::::4765::::4775::::(pos) > start::::pos) < (length	false
org.jsoup.nodes.Element::::185::::5648::::5681::::org.jsoup.select.Elements parents = new org.jsoup.select.Elements()::::INSERT::::STATEMENT::::org.jsoup.nodes.Element.accumulateParents(this, parents)	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.DoctypeSystemIdentifier_singleQuoted	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.DoctypeSystemIdentifier_doubleQuoted	false
org.jsoup.parser.Tokeniser::::76::::2949::::2964::::startTag.tagName::::charsString	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.BogusComment	false
org.jsoup.parser.CharacterReader::::172::::4654::::4694::::(java.util.Arrays.binarySearch(chars, val[pos])) >= 0::::(pos) > start	false
org.jsoup.parser.HtmlTreeBuilderState::::276::::11349::::11390::::(tb.getActiveFormattingElement("a")) != null::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InBody)	false
org.jsoup.parser.HtmlTreeBuilderState::::276::::11349::::11390::::(tb.getActiveFormattingElement("a")) != null::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.Token::::125::::4279::::4298::::pendingAttributeName::::tagName	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.ScriptData	false
org.jsoup.parser.HtmlTreeBuilder::::88::::4612::::4616::::stack::::formattingElements	false
org.jsoup.nodes.Element::::191::::5855::::5860::::parent::::isBlock	false
org.jsoup.parser.HtmlTreeBuilder::::86::::4505::::4508::::root::::contextElement	false
org.jsoup.parser.HtmlTreeBuilder::::87::::4593::::4596::::root::::contextElement	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.DoctypePublicIdentifier_singleQuoted	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.DoctypePublicIdentifier_doubleQuoted	false
org.jsoup.parser.HtmlTreeBuilder::::81::::4314::::4323::::contextTag::::"caption"	false
org.jsoup.parser.HtmlTreeBuilder::::81::::4314::::4323::::contextTag::::"title"	false
org.jsoup.parser.HtmlTreeBuilder::::81::::4314::::4323::::contextTag::::"textarea"	false
org.jsoup.nodes.Element::::192::::5899::::5905::::tagName::::data	false
org.jsoup.parser.HtmlTreeBuilderState::::276::::11349::::11390::::(tb.getActiveFormattingElement("a")) != null::::tb.process(startTag)	false
org.jsoup.parser.Token::::166::::5685::::5704::::pendingAttributeName::::pendingAttributeValueS	false
org.jsoup.parser.Token::::166::::5645::::5664::::pendingAttributeName::::pendingAttributeValueS	false
org.jsoup.parser.Token::::166::::5622::::5641::::pendingAttributeName::::pendingAttributeValueS	false
org.jsoup.parser.Token::::104::::3203::::3222::::pendingAttributeName::::pendingAttributeValueS	false
org.jsoup.parser.Token::::116::::3979::::3998::::pendingAttributeName::::pendingAttributeValueS	false
org.jsoup.nodes.Element::::379::::13162::::13174::::return child::::INSERT::::STATEMENT::::prependChild(child)	false
org.jsoup.nodes.Element::::379::::13162::::13174::::return child::::INSERT::::STATEMENT::::appendChild(child)	false
org.jsoup.parser.HtmlTreeBuilder::::79::::4168::::4177::::contextTag::::"caption"	false
org.jsoup.parser.HtmlTreeBuilder::::69::::3595::::3597::::doc::::lastFormattingElement()	false
org.jsoup.parser.HtmlTreeBuilder::::79::::4168::::4177::::contextTag::::"title"	false
org.jsoup.parser.HtmlTreeBuilder::::79::::4168::::4177::::contextTag::::"textarea"	false
org.jsoup.parser.Token::::120::::4152::::4173::::pendingAttributeValueS::::normalName	false
org.jsoup.parser.HtmlTreeBuilder::::87::::4577::::4579::::doc::::lastFormattingElement()	false
org.jsoup.parser.HtmlTreeBuilder::::88::::4622::::4625::::root::::contextElement	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted	false
org.jsoup.parser.CharacterReader::::171::::4619::::4633::::(pos) < remaining::::(pos) > start	false
org.jsoup.parser.HtmlTreeBuilder::::64::::3428::::3442::::fragmentParsing::::baseUriSetFromDoc	false
org.jsoup.parser.HtmlTreeBuilder::::81::::4314::::4323::::contextTag::::"style"	false
org.jsoup.nodes.Element::::192::::5899::::5904::::parent::::parents	false
org.jsoup.nodes.Element::::192::::5899::::5905::::tagName::::className	false
org.jsoup.parser.HtmlTreeBuilder::::103::::5151::::5162::::runParser()::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.HtmlTreeBuilder::::77::::4053::::4062::::contextTag::::"title"	false
org.jsoup.parser.HtmlTreeBuilder::::77::::4053::::4062::::contextTag::::"textarea"	false
org.jsoup.parser.HtmlTreeBuilder::::77::::4053::::4062::::contextTag::::"caption"	false
org.jsoup.nodes.Element::::378::::13134::::13144::::appendChild::::preserveWhitespace	false
org.jsoup.parser.HtmlTreeBuilderState::::288::::11950::::11981::::org.jsoup.nodes.Element a = tb.insert(startTag)::::INSERT::::STATEMENT::::org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb)	false
org.jsoup.parser.HtmlTreeBuilder::::89::::4641::::4658::::resetInsertionMode::::lastFormattingElement	false
org.jsoup.parser.HtmlTreeBuilder::::69::::3595::::3597::::doc::::getFromStack("table")	false
org.jsoup.parser.HtmlTreeBuilder::::87::::4577::::4579::::doc::::getFromStack("table")	false
org.jsoup.parser.Token::::101::::3119::::3136::::(attributes) == null::::(attributes) != null	false
org.jsoup.parser.HtmlTreeBuilder::::79::::4168::::4177::::contextTag::::"style"	false
org.jsoup.parser.Tokeniser::::206::::7999::::8023::::tagPending.finaliseTag()::::INSERT::::STATEMENT::::emit(tagPending)	false
org.jsoup.parser.Tokeniser::::206::::7999::::8023::::tagPending.finaliseTag()::::INSERT::::STATEMENT::::emit(doctypePending)	false
org.jsoup.parser.Tokeniser::::206::::7999::::8023::::tagPending.finaliseTag()::::INSERT::::STATEMENT::::emit(commentPending)	false
org.jsoup.parser.Tokeniser::::241::::8728::::8880::::if (errors.canAddError())    errors.add(new org.jsoup.parser.ParseError(reader.pos(), "Unexpected character '%s' in input state [%s]", reader.current(), state));::::INSERT::::STATEMENT::::characterReferenceError("missing semicolon")	false
org.jsoup.nodes.Document::::46::::1367::::1370::::html::::body().prependChild(new org.jsoup.nodes.TextNode(" ", ""))	false
org.jsoup.parser.HtmlTreeBuilderState::::276::::11349::::11390::::(tb.getActiveFormattingElement("a")) != null::::anyOtherEndTag(t, tb)	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.CommentStartDash	false
org.jsoup.parser.HtmlTreeBuilder::::77::::4053::::4062::::contextTag::::"style"	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.BogusComment	false
org.jsoup.parser.HtmlTreeBuilderState::::288::::11950::::11981::::org.jsoup.nodes.Element a = tb.insert(startTag)::::INSERT::::STATEMENT::::tb.process(startTag)	false
org.jsoup.nodes.Document::::45::::1331::::1334::::html::::body().prependChild(new org.jsoup.nodes.TextNode(" ", ""))	false
org.jsoup.parser.HtmlTreeBuilder::::81::::4314::::4323::::contextTag::::"colgroup"	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.CommentEndDash	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.AfterDoctypeSystemIdentifier	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.AfterDoctypePublicIdentifier	false
org.jsoup.parser.HtmlTreeBuilderState::::287::::11890::::11924::::tb.reconstructFormattingElements()::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.CharacterReader::::172::::4685::::4687::::pos::::start	false
org.jsoup.parser.HtmlTreeBuilder::::599::::21246::::21249::::last::::newEl	false
org.jsoup.parser.CharacterReader::::172::::4685::::4687::::pos::::length	false
org.jsoup.parser.Token::::125::::4279::::4298::::pendingAttributeName::::pendingAttributeValueS	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.BeforeDoctypeName	false
org.jsoup.parser.HtmlTreeBuilderState::::276::::11345::::11864::::if ((tb.getActiveFormattingElement("a")) != null) {    tb.error(this);    tb.processEndTag("a");    org.jsoup.nodes.Element remainingA = tb.getFromStack("a");    if (remainingA != null) {        tb.removeFromActiveFormattingElements(remainingA);        tb.removeFromStack(remainingA);    }}::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.nodes.Document::::46::::1367::::1393::::html.appendElement("body")::::INSERT::::STATEMENT::::body().prependChild(new org.jsoup.nodes.TextNode(" ", ""))	false
org.jsoup.parser.HtmlTreeBuilder::::79::::4168::::4177::::contextTag::::"colgroup"	false
org.jsoup.parser.HtmlTreeBuilderState::::276::::11349::::11390::::(tb.getActiveFormattingElement("a")) != null::::tb.process(endTag)	false
org.jsoup.parser.CharacterReader::::167::::4526::::4528::::pos::::length	false
org.jsoup.parser.HtmlTreeBuilderState::::288::::11950::::11981::::org.jsoup.nodes.Element a = tb.insert(startTag)::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.HtmlTreeBuilderState::::288::::11950::::11981::::org.jsoup.nodes.Element a = tb.insert(startTag)::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.CharacterReader::::177::::4798::::4800::::pos::::length	false
org.jsoup.parser.HtmlTreeBuilder::::388::::13790::::13794::::stack::::formattingElements	false
org.jsoup.parser.HtmlTreeBuilder::::393::::13942::::13945::::node::::lastFormattingElement()	false
org.jsoup.parser.HtmlTreeBuilder::::599::::21270::::21273::::last::::newEl	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.ScriptDataEscapedDashDash	false
org.jsoup.parser.HtmlTreeBuilder::::69::::3610::::3616::::context::::root	false
org.jsoup.nodes.Document::::44::::1296::::1298::::doc::::body().prependChild(new org.jsoup.nodes.TextNode(" ", ""))	false
org.jsoup.parser.HtmlTreeBuilder::::81::::4314::::4323::::contextTag::::lastFormattingElement()	false
org.jsoup.parser.HtmlTreeBuilder::::387::::13727::::13731::::stack::::formattingElements	false
org.jsoup.parser.CharacterReader::::58::::1377::::1379::::pos::::length	false
org.jsoup.parser.CharacterReader::::174::::4732::::4734::::pos::::start	false
org.jsoup.parser.HtmlTreeBuilder::::68::::3529::::3535::::context::::root	false
org.jsoup.parser.Tokeniser::::207::::8033::::8036::::emit::::error	false
org.jsoup.parser.HtmlTreeBuilder::::77::::4053::::4062::::contextTag::::"colgroup"	false
org.jsoup.parser.CharacterReader::::174::::4732::::4734::::pos::::length	false
org.jsoup.parser.HtmlTreeBuilder::::93::::4854::::4860::::context::::root	false
org.jsoup.parser.HtmlTreeBuilder::::67::::3494::::3500::::context::::root	false
org.jsoup.parser.CharacterReader::::177::::4765::::4767::::pos::::length	false
org.jsoup.parser.HtmlTreeBuilder::::79::::4168::::4177::::contextTag::::lastFormattingElement()	false
org.jsoup.parser.HtmlTreeBuilder::::72::::3729::::3735::::context::::root	false
org.jsoup.nodes.Element::::191::::5855::::5860::::parent::::empty	false
org.jsoup.parser.HtmlTreeBuilderState::::288::::11950::::11981::::org.jsoup.nodes.Element a = tb.insert(startTag)::::INSERT::::STATEMENT::::closeCell(tb)	false
org.jsoup.parser.Tokeniser::::207::::8033::::8049::::emit(tagPending)::::INSERT::::STATEMENT::::characterReferenceError("numeric reference with no numerals")	false
org.jsoup.parser.Tokeniser::::207::::8033::::8049::::emit(tagPending)::::INSERT::::STATEMENT::::characterReferenceError("missing semicolon")	false
org.jsoup.parser.Tokeniser::::206::::7999::::8023::::tagPending.finaliseTag()::::INSERT::::STATEMENT::::characterReferenceError("missing semicolon")	false
org.jsoup.parser.Token::::137::::4784::::4801::::return normalName::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(systemIdentifier)	false
org.jsoup.parser.Token::::137::::4784::::4801::::return normalName::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(publicIdentifier)	false
org.jsoup.parser.Token::::137::::4784::::4801::::return normalName::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(pendingAttributeValue)	false
org.jsoup.parser.Token::::137::::4784::::4801::::return normalName::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(name)	false
org.jsoup.parser.Token::::137::::4784::::4801::::return normalName::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(data)	false
org.jsoup.parser.HtmlTreeBuilder::::177::::7107::::7518::::if (startTag.isSelfClosing()) {    org.jsoup.nodes.Element el = insertEmpty(startTag);    stack.add(el);    tokeniser.transition(org.jsoup.parser.TokeniserState.Data);    tokeniser.emit(emptyEnd.reset().name(el.tagName()));    return el;}::::INSERT::::STATEMENT::::insertNode(el)	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.AttributeValue_doubleQuoted	false
org.jsoup.parser.HtmlTreeBuilder::::81::::4314::::4323::::contextTag::::"script"	false
org.jsoup.parser.HtmlTreeBuilder::::94::::4905::::4911::::context::::root	false
org.jsoup.parser.HtmlTreeBuilder::::89::::4641::::4661::::resetInsertionMode()::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.HtmlTreeBuilder::::77::::4053::::4062::::contextTag::::lastFormattingElement()	false
org.jsoup.nodes.Document::::45::::1331::::1357::::html.appendElement("head")::::INSERT::::STATEMENT::::body().prependChild(new org.jsoup.nodes.TextNode(" ", ""))	false
org.jsoup.parser.CharacterReader::::167::::4526::::4528::::pos::::start	false
org.jsoup.nodes.Element::::194::::5980::::6014::::org.jsoup.nodes.Element.accumulateParents(parent, parents)::::INSERT::::STATEMENT::::tagName()	false
org.jsoup.nodes.Element::::194::::5980::::6014::::org.jsoup.nodes.Element.accumulateParents(parent, parents)::::INSERT::::STATEMENT::::org.jsoup.nodes.Element.accumulateParents(parent, parents)	false
org.jsoup.nodes.Element::::193::::5947::::5966::::parents.add(parent)::::INSERT::::STATEMENT::::tagName()	false
org.jsoup.nodes.Document::::43::::1235::::1271::::org.jsoup.nodes.Document doc = new org.jsoup.nodes.Document(baseUri)::::INSERT::::STATEMENT::::body().prependChild(new org.jsoup.nodes.TextNode(" ", ""))	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.Rcdata	false
org.jsoup.nodes.Element::::192::::5899::::5904::::parent::::el.parent()	false
org.jsoup.parser.Token::::127::::4406::::4420::::newAttribute()::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(pendingAttributeValue)	false
org.jsoup.parser.Token::::127::::4406::::4420::::newAttribute()::::INSERT::::STATEMENT::::newAttribute()	false
org.jsoup.parser.Token::::127::::4406::::4420::::newAttribute()::::INSERT::::STATEMENT::::ensureAttributeValue()	false
org.jsoup.parser.Tokeniser::::207::::8033::::8049::::emit(tagPending)::::emit(emitPending)	false
org.jsoup.nodes.Element::::192::::5899::::5905::::tagName::::hasText	false
org.jsoup.parser.HtmlTreeBuilder::::79::::4168::::4177::::contextTag::::"script"	false
org.jsoup.parser.Token::::110::::3700::::3721::::hasEmptyAttributeValue::::selfClosing	false
org.jsoup.nodes.Element::::191::::5838::::5866::::org.jsoup.nodes.Element parent = el.parent()::::INSERT::::STATEMENT::::org.jsoup.nodes.Element.accumulateParents(parent, parents)	false
org.jsoup.parser.HtmlTreeBuilder::::393::::13942::::13945::::node::::getFromStack("table")	false
org.jsoup.parser.HtmlTreeBuilder::::63::::3411::::3417::::context::::root	false
org.jsoup.nodes.Element::::194::::5998::::6003::::parent::::el.parent()	false
org.jsoup.parser.HtmlTreeBuilder::::77::::4053::::4062::::contextTag::::"script"	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.ScriptDataDoubleEscapedLessthanSign	false
org.jsoup.parser.Tokeniser::::207::::8033::::8049::::emit(tagPending)::::INSERT::::STATEMENT::::emit(doctypePending)	false
org.jsoup.parser.Tokeniser::::207::::8033::::8049::::emit(tagPending)::::INSERT::::STATEMENT::::emit(commentPending)	false
org.jsoup.parser.Token::::127::::4406::::4420::::newAttribute()::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(systemIdentifier)	false
org.jsoup.parser.Token::::127::::4406::::4420::::newAttribute()::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(publicIdentifier)	false
org.jsoup.parser.Token::::127::::4406::::4420::::newAttribute()::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(name)	false
org.jsoup.parser.Token::::127::::4406::::4420::::newAttribute()::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(data)	false
org.jsoup.parser.HtmlTreeBuilderState::::288::::11950::::11981::::org.jsoup.nodes.Element a = tb.insert(startTag)::::INSERT::::STATEMENT::::if (lastNode == furthestBlock) {}	false
org.jsoup.parser.TokeniserState::::596::::19789::::19827::::t.tagPending.appendAttributeName(name)::::INSERT::::STATEMENT::::anythingElse(t, r)	false
org.jsoup.parser.CharacterReader::::171::::4625::::4633::::remaining::::org.jsoup.parser.CharacterReader.maxCacheLen	false
org.jsoup.nodes.Element::::191::::5855::::5856::::el::::el.parent()	false
org.jsoup.nodes.Element::::191::::5855::::5860::::parent::::data	false
org.jsoup.parser.CharacterReader::::177::::4765::::4812::::(pos) > start ? cacheString(start, ((pos) - start)) : ""::::cacheString(start, ((pos) - start))	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.ScriptDataEscapedLessthanSign	false
org.jsoup.parser.Token::::113::::3850::::3904::::attribute = new org.jsoup.nodes.BooleanAttribute(pendingAttributeName)::::INSERT::::STATEMENT::::if (hasEmptyAttributeValue)    attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, "");else    attribute = new org.jsoup.nodes.BooleanAttribute(pendingAttributeName);	false
org.jsoup.nodes.Element::::191::::5838::::5866::::org.jsoup.nodes.Element parent = el.parent()::::INSERT::::STATEMENT::::org.jsoup.nodes.Element.accumulateParents(this, parents)	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.AfterAttributeName	false
org.jsoup.parser.CharacterReader::::171::::4619::::4621::::pos::::start	false
org.jsoup.parser.Tokeniser::::77::::2983::::3002::::startTag.selfClosing::::selfClosingFlagAcknowledged	false
org.jsoup.parser.Tokeniser::::77::::2983::::3002::::startTag.selfClosing::::!(selfClosingFlagAcknowledged)	false
org.jsoup.nodes.Element::::192::::5880::::5885::::parent::::el.parent()	false
org.jsoup.parser.CharacterReader::::171::::4619::::4621::::pos::::length	false
org.jsoup.nodes.Document::::44::::1281::::1321::::org.jsoup.nodes.Element html = doc.appendElement("html")::::INSERT::::STATEMENT::::body().prependChild(new org.jsoup.nodes.TextNode(" ", ""))	false
org.jsoup.parser.Tokeniser::::241::::8728::::8880::::if (errors.canAddError())    errors.add(new org.jsoup.parser.ParseError(reader.pos(), "Unexpected character '%s' in input state [%s]", reader.current(), state));::::INSERT::::STATEMENT::::error("Attributes incorrectly present on end tag")	false
org.jsoup.nodes.Element::::193::::5947::::5953::::parents::::new org.jsoup.select.Elements()	false
org.jsoup.nodes.Element::::193::::5947::::5966::::parents.add(parent)::::INSERT::::STATEMENT::::org.jsoup.nodes.Element.accumulateParents(parent, parents)	false
org.jsoup.nodes.Element::::191::::5855::::5860::::parent::::hasText	false
org.jsoup.parser.HtmlTreeBuilderState::::276::::11345::::11864::::if ((tb.getActiveFormattingElement("a")) != null) {    tb.error(this);    tb.processEndTag("a");    org.jsoup.nodes.Element remainingA = tb.getFromStack("a");    if (remainingA != null) {        tb.removeFromActiveFormattingElements(remainingA);        tb.removeFromStack(remainingA);    }}::::INSERT::::STATEMENT::::if (lastNode == furthestBlock) {}	false
org.jsoup.parser.HtmlTreeBuilder::::62::::3358::::3364::::baseUri::::contextTag	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.Rcdata	false
org.jsoup.parser.TokeniserState::::595::::19715::::19775::::java.lang.String name = r.consumeToAnySorted(org.jsoup.parser.TokeniserState.attributeNameCharsSorted)::::INSERT::::STATEMENT::::anythingElse(t, r)	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.BeforeDoctypeSystemIdentifier	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.BeforeDoctypePublicIdentifier	false
org.jsoup.parser.HtmlTreeBuilder::::599::::21262::::21268::::onStack::::insert	false
org.jsoup.parser.Tokeniser::::79::::3077::::3081::::token::::emitPending	false
org.jsoup.parser.HtmlTreeBuilder::::68::::3529::::3559::::(context.ownerDocument()) != null::::context != null) && (root != null	false
org.jsoup.parser.HtmlTreeBuilderState::::288::::11950::::11981::::org.jsoup.nodes.Element a = tb.insert(startTag)::::INSERT::::STATEMENT::::if (notIgnored)    return tb.process(endTag);	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.BetweenDoctypePublicAndSystemIdentifiers	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.DoctypeName	false
org.jsoup.nodes.Element::::191::::5855::::5860::::parent::::className	false
org.jsoup.parser.Token::::113::::3883::::3902::::pendingAttributeName::::normalName	false
org.jsoup.parser.Token::::113::::3850::::3904::::attribute = new org.jsoup.nodes.BooleanAttribute(pendingAttributeName)::::INSERT::::STATEMENT::::if ((attributes) == null)    attributes = new org.jsoup.nodes.Attributes();	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.CommentEndBang	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.AfterDoctypeName	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.ScriptDataEscapedDashDash	false
org.jsoup.parser.Token::::110::::3696::::3904::::if (hasEmptyAttributeValue)    attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, "");else    attribute = new org.jsoup.nodes.BooleanAttribute(pendingAttributeName);::::INSERT::::STATEMENT::::if (hasEmptyAttributeValue)    attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, "");else    attribute = new org.jsoup.nodes.BooleanAttribute(pendingAttributeName);	false
org.jsoup.nodes.Attributes::::100::::2989::::3034::::attributes.put(attribute.getKey(), attribute)::::INSERT::::STATEMENT::::put(attr)	false
org.jsoup.parser.HtmlTreeBuilder::::81::::4314::::4323::::contextTag::::"head"	false
org.jsoup.nodes.Element::::191::::5855::::5860::::parent::::elementSiblingIndex	false
org.jsoup.nodes.Element::::378::::13134::::13152::::appendChild(child)::::INSERT::::STATEMENT::::empty()	false
org.jsoup.parser.HtmlTreeBuilder::::81::::4314::::4323::::contextTag::::getFromStack("table")	false
org.jsoup.parser.Tokeniser::::206::::7999::::8023::::tagPending.finaliseTag()::::INSERT::::STATEMENT::::error("Self closing flag not acknowledged")	false
org.jsoup.parser.Tokeniser::::206::::7999::::8023::::tagPending.finaliseTag()::::INSERT::::STATEMENT::::error("Attributes incorrectly present on end tag")	false
org.jsoup.parser.Tokeniser::::206::::7999::::8023::::tagPending.finaliseTag()::::INSERT::::STATEMENT::::characterReferenceError("numeric reference with no numerals")	false
org.jsoup.parser.Tokeniser::::206::::7999::::8023::::tagPending.finaliseTag()::::INSERT::::STATEMENT::::characterReferenceError("character outside of valid range")	false
org.jsoup.parser.Token::::125::::4275::::4434::::if ((pendingAttributeName) != null) {    newAttribute();}::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(pendingAttributeValue)	false
org.jsoup.nodes.Element::::194::::5980::::6014::::org.jsoup.nodes.Element.accumulateParents(parent, parents)::::INSERT::::STATEMENT::::org.jsoup.nodes.Element.accumulateParents(this, parents)	false
org.jsoup.nodes.Element::::192::::5899::::5905::::tagName::::empty	false
org.jsoup.nodes.Document::::559::::18910::::18938::::this.quirksMode = quirksMode::::INSERT::::STATEMENT::::normaliseTextNodes(this)	false
org.jsoup.nodes.Document::::45::::1331::::1357::::html.appendElement("head")::::INSERT::::STATEMENT::::ensureMetaCharsetElement()	false
org.jsoup.parser.HtmlTreeBuilder::::86::::4555::::4561::::baseUri::::contextTag	false
org.jsoup.parser.CharacterReader::::177::::4798::::4806::::(pos) - start::::(length) - (pos)	false
org.jsoup.parser.HtmlTreeBuilder::::79::::4168::::4177::::contextTag::::"head"	false
org.jsoup.nodes.Document::::41::::1199::::1224::::org.jsoup.helper.Validate.notNull(baseUri)::::INSERT::::STATEMENT::::body().prependChild(new org.jsoup.nodes.TextNode(" ", ""))	false
org.jsoup.parser.Token::::166::::5622::::5720::::pendingAttributeName = ((pendingAttributeName) == null) ? append : pendingAttributeName.concat(append)::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(systemIdentifier)	false
org.jsoup.parser.Token::::166::::5622::::5720::::pendingAttributeName = ((pendingAttributeName) == null) ? append : pendingAttributeName.concat(append)::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(publicIdentifier)	false
org.jsoup.parser.Token::::166::::5622::::5720::::pendingAttributeName = ((pendingAttributeName) == null) ? append : pendingAttributeName.concat(append)::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(pendingAttributeValue)	false
org.jsoup.parser.Token::::166::::5622::::5720::::pendingAttributeName = ((pendingAttributeName) == null) ? append : pendingAttributeName.concat(append)::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(name)	false
org.jsoup.parser.Token::::166::::5622::::5720::::pendingAttributeName = ((pendingAttributeName) == null) ? append : pendingAttributeName.concat(append)::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(data)	false
org.jsoup.parser.Token::::101::::3115::::3184::::if ((attributes) == null)    attributes = new org.jsoup.nodes.Attributes();::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(pendingAttributeValue)	false
org.jsoup.parser.HtmlTreeBuilder::::79::::4168::::4177::::contextTag::::getFromStack("table")	false
org.jsoup.nodes.Document::::48::::1404::::1414::::return doc::::INSERT::::STATEMENT::::body().prependChild(new org.jsoup.nodes.TextNode(" ", ""))	false
org.jsoup.parser.HtmlTreeBuilder::::177::::7111::::7134::::startTag.isSelfClosing()::::INSERT::::STATEMENT::::insertNode(el)	false
org.jsoup.parser.Parser::::115::::3792::::3908::::treeBuilder.parseFragment(fragmentHtml, context, baseUri, org.jsoup.parser.ParseErrorList.noTracking(), treeBuilder.defaultSettings())::::INSERT::::PARAMETER::::parseFragment(fragmentHtml, context, baseUri,errors, org.jsoup.parser.ParseErrorList.noTracking(), treeBuilder.defaultSettings())	false
org.jsoup.parser.CharacterReader::::171::::4625::::4633::::remaining::::(pos)++	false
org.jsoup.parser.TokeniserState::::599::::19884::::19884::::c::::org.jsoup.parser.TokeniserState.nullChar	false
org.jsoup.parser.HtmlTreeBuilder::::77::::4053::::4062::::contextTag::::"head"	false
org.jsoup.parser.TokeniserState::::552::::18275::::18275::::c::::org.jsoup.parser.TokeniserState.nullChar	false
org.jsoup.parser.CharacterReader::::177::::4802::::4806::::start::::(pos) - start	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.BeforeAttributeValue	false
org.jsoup.parser.HtmlTreeBuilder::::77::::4053::::4062::::contextTag::::getFromStack("table")	false
org.jsoup.parser.TokeniserState::::873::::29358::::29358::::c::::org.jsoup.parser.TokeniserState.nullChar	false
org.jsoup.parser.HtmlTreeBuilder::::68::::3529::::3535::::context::::contextElement	false
org.jsoup.nodes.Document::::46::::1367::::1393::::html.appendElement("body")::::INSERT::::STATEMENT::::ensureMetaCharsetElement()	false
org.jsoup.parser.TokeniserState::::552::::18275::::18275::::c::::org.jsoup.parser.TokeniserState.replacementChar	false
org.jsoup.parser.HtmlTreeBuilder::::72::::3729::::3735::::context::::contextElement	false
org.jsoup.parser.TokeniserState::::599::::19884::::19884::::c::::org.jsoup.parser.TokeniserState.replacementChar	false
org.jsoup.parser.HtmlTreeBuilder::::177::::7107::::7518::::if (startTag.isSelfClosing()) {    org.jsoup.nodes.Element el = insertEmpty(startTag);    stack.add(el);    tokeniser.transition(org.jsoup.parser.TokeniserState.Data);    tokeniser.emit(emptyEnd.reset().name(el.tagName()));    return el;}::::INSERT::::STATEMENT::::insert(el)	false
org.jsoup.parser.HtmlTreeBuilder::::69::::3610::::3616::::context::::contextElement	false
org.jsoup.parser.Token::::110::::3700::::3721::::hasEmptyAttributeValue::::forceQuirks	false
org.jsoup.nodes.Element::::192::::5899::::5905::::tagName::::children	false
org.jsoup.parser.HtmlTreeBuilder::::81::::4314::::4323::::contextTag::::"xmp"	false
org.jsoup.parser.HtmlTreeBuilder::::81::::4314::::4323::::contextTag::::"noframes"	false
org.jsoup.parser.HtmlTreeBuilder::::81::::4314::::4323::::contextTag::::"noembed"	false
org.jsoup.parser.HtmlTreeBuilder::::81::::4314::::4323::::contextTag::::"iframe"	false
org.jsoup.parser.TokeniserState::::873::::29358::::29358::::c::::org.jsoup.parser.TokeniserState.replacementChar	false
org.jsoup.nodes.Document::::46::::1367::::1393::::html.appendElement("body")::::DELETE::::STATEMENT	false
org.jsoup.nodes.Document::::45::::1331::::1357::::html.appendElement("head")::::DELETE::::STATEMENT	false
org.jsoup.nodes.Document::::41::::1199::::1224::::org.jsoup.helper.Validate.notNull(baseUri)::::DELETE::::STATEMENT	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.AttributeValue_doubleQuoted	false
org.jsoup.parser.CharacterReader::::177::::4771::::4775::::start::::(pos) - start	false
org.jsoup.parser.Token::::117::::4020::::4041::::hasEmptyAttributeValue::::selfClosing	false
org.jsoup.parser.CharacterReader::::177::::4791::::4795::::start::::(pos) - start	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.ScriptDataDoubleEscapedDash	false
org.jsoup.parser.Token::::137::::4791::::4800::::normalName::::data	false
org.jsoup.parser.HtmlTreeBuilder::::391::::13886::::13899::::contextElement::::node	false
org.jsoup.parser.CharacterReader::::171::::4612::::4747::::while ((pos) < remaining) {    if ((java.util.Arrays.binarySearch(chars, val[pos])) >= 0)        break;    (pos)++;} ::::INSERT::::STATEMENT::::(pos)++	false
org.jsoup.parser.HtmlTreeBuilder::::67::::3494::::3500::::context::::contextElement	false
org.jsoup.nodes.Document::::44::::1281::::1321::::org.jsoup.nodes.Element html = doc.appendElement("html")::::INSERT::::STATEMENT::::ensureMetaCharsetElement()	false
org.jsoup.parser.Tokeniser::::241::::8728::::8880::::if (errors.canAddError())    errors.add(new org.jsoup.parser.ParseError(reader.pos(), "Unexpected character '%s' in input state [%s]", reader.current(), state));::::INSERT::::STATEMENT::::error("Self closing flag not acknowledged")	false
org.jsoup.parser.Tokeniser::::241::::8728::::8880::::if (errors.canAddError())    errors.add(new org.jsoup.parser.ParseError(reader.pos(), "Unexpected character '%s' in input state [%s]", reader.current(), state));::::INSERT::::STATEMENT::::characterReferenceError("numeric reference with no numerals")	false
org.jsoup.parser.Tokeniser::::241::::8728::::8880::::if (errors.canAddError())    errors.add(new org.jsoup.parser.ParseError(reader.pos(), "Unexpected character '%s' in input state [%s]", reader.current(), state));::::INSERT::::STATEMENT::::characterReferenceError("character outside of valid range")	false
org.jsoup.parser.HtmlTreeBuilder::::79::::4168::::4177::::contextTag::::"xmp"	false
org.jsoup.parser.HtmlTreeBuilder::::79::::4168::::4177::::contextTag::::"noframes"	false
org.jsoup.parser.HtmlTreeBuilder::::79::::4168::::4177::::contextTag::::"noembed"	false
org.jsoup.parser.HtmlTreeBuilder::::79::::4168::::4177::::contextTag::::"iframe"	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.ScriptDataDoubleEscapedDashDash	false
org.jsoup.parser.Parser::::115::::3792::::3802::::treeBuilder::::this	false
org.jsoup.nodes.Element::::378::::13134::::13152::::appendChild(child)::::DELETE::::STATEMENT	false
org.jsoup.parser.HtmlTreeBuilder::::77::::4053::::4062::::contextTag::::inputFragment	false
org.jsoup.parser.HtmlTreeBuilder::::79::::4168::::4177::::contextTag::::inputFragment	false
org.jsoup.parser.TokeniserState::::599::::19884::::19884::::c::::org.jsoup.parser.TokeniserState.eof	false
org.jsoup.parser.HtmlTreeBuilder::::81::::4314::::4323::::contextTag::::inputFragment	false
org.jsoup.parser.TokeniserState::::552::::18275::::18275::::c::::org.jsoup.parser.TokeniserState.eof	false
org.jsoup.parser.Token::::107::::3448::::3471::::hasPendingAttributeValue::::selfClosing	false
org.jsoup.nodes.Element::::377::::13064::::13124::::org.jsoup.nodes.Element child = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(tagName), baseUri())::::INSERT::::STATEMENT::::prependChild(child)	false
org.jsoup.nodes.Element::::377::::13064::::13124::::org.jsoup.nodes.Element child = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(tagName), baseUri())::::INSERT::::STATEMENT::::appendChild(child)	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.ScriptDataEscapedDash	false
org.jsoup.parser.Token::::118::::4064::::4087::::hasPendingAttributeValue::::selfClosing	false
org.jsoup.parser.TokeniserState::::873::::29358::::29358::::c::::org.jsoup.parser.TokeniserState.eof	false
org.jsoup.parser.HtmlTreeBuilder::::77::::4053::::4062::::contextTag::::"xmp"	false
org.jsoup.parser.HtmlTreeBuilder::::77::::4053::::4062::::contextTag::::"noframes"	false
org.jsoup.parser.HtmlTreeBuilder::::77::::4053::::4062::::contextTag::::"noembed"	false
org.jsoup.parser.HtmlTreeBuilder::::77::::4053::::4062::::contextTag::::"iframe"	false
org.jsoup.parser.HtmlTreeBuilder::::62::::3327::::3384::::initialiseParse(inputFragment, baseUri, errors, settings)::::DELETE::::STATEMENT	false
org.jsoup.parser.HtmlTreeBuilder::::103::::5151::::5162::::runParser()::::DELETE::::STATEMENT	false
org.jsoup.parser.Tokeniser::::207::::8033::::8049::::emit(tagPending)::::INSERT::::STATEMENT::::error("Self closing flag not acknowledged")	false
org.jsoup.parser.Tokeniser::::207::::8033::::8049::::emit(tagPending)::::INSERT::::STATEMENT::::error("Attributes incorrectly present on end tag")	false
org.jsoup.parser.Tokeniser::::207::::8033::::8049::::emit(tagPending)::::INSERT::::STATEMENT::::characterReferenceError("character outside of valid range")	false
org.jsoup.nodes.Element::::186::::5691::::5723::::org.jsoup.nodes.Element.accumulateParents(this, parents)::::DELETE::::STATEMENT	false
org.jsoup.parser.CharacterReader::::168::::4561::::4566::::length::::(pos) - start	false
org.jsoup.parser.TokeniserState::::596::::19789::::19827::::t.tagPending.appendAttributeName(name)::::DELETE::::STATEMENT	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.TagOpen	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.RcdataLessthanSign	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.CommentEnd	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.CharacterReferenceInRcdata	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.CharacterReferenceInData	false
org.jsoup.parser.HtmlTreeBuilder::::93::::4854::::4860::::context::::contextElement	false
org.jsoup.parser.CharacterReader::::58::::1377::::1382::::(pos)--::::DELETE::::STATEMENT	false
org.jsoup.parser.HtmlTreeBuilder::::63::::3411::::3417::::context::::contextElement	false
org.jsoup.parser.Token::::113::::3850::::3904::::attribute = new org.jsoup.nodes.BooleanAttribute(pendingAttributeName)::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(pendingAttributeValue)	false
org.jsoup.nodes.Attributes::::180::::5305::::5342::::return attributes.values().iterator()::::INSERT::::STATEMENT::::put(attr)	false
org.jsoup.nodes.Element::::193::::5959::::5964::::parent::::el.parent()	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.DoctypePublicIdentifier_singleQuoted	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.DoctypePublicIdentifier_doubleQuoted	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.AfterAttributeName	false
org.jsoup.parser.HtmlTreeBuilder::::81::::4314::::4323::::contextTag::::"body"	false
org.jsoup.nodes.Element::::191::::5838::::5866::::org.jsoup.nodes.Element parent = el.parent()::::INSERT::::STATEMENT::::empty()	false
org.jsoup.parser.HtmlTreeBuilder::::73::::3778::::3787::::contextTag::::inputFragment	false
org.jsoup.parser.HtmlTreeBuilderState::::276::::11349::::11390::::(tb.getActiveFormattingElement("a")) != null::::handleMissingTr(t, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::276::::11349::::11390::::(tb.getActiveFormattingElement("a")) != null::::exitTableBody(t, tb)	false
org.jsoup.parser.Parser::::157::::5981::::5987::::baseUri::::bodyHtml	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.MarkupDeclarationOpen	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.EndTagOpen	false
org.jsoup.parser.HtmlTreeBuilder::::391::::13879::::13900::::node = contextElement::::INSERT::::STATEMENT::::if (pos == 0) {    last = true;    node = contextElement;}	false
org.jsoup.parser.HtmlTreeBuilder::::390::::13850::::13861::::last = true::::INSERT::::STATEMENT::::if (pos == 0) {    last = true;    node = contextElement;}	false
org.jsoup.nodes.Element::::193::::5947::::5966::::parents.add(parent)::::INSERT::::STATEMENT::::org.jsoup.nodes.Element.accumulateParents(this, parents)	false
org.jsoup.parser.HtmlTreeBuilder::::61::::3289::::3316::::org.jsoup.parser.HtmlTreeBuilderState.Initial::::this.state	false
org.jsoup.nodes.Document::::46::::1367::::1393::::html.appendElement("body")::::INSERT::::STATEMENT::::updateMetaCharsetElement(true)	false
org.jsoup.nodes.Document::::46::::1367::::1393::::html.appendElement("body")::::INSERT::::STATEMENT::::outputSettings.charset(charset)	false
org.jsoup.nodes.Attributes::::97::::2853::::2880::::org.jsoup.helper.Validate.notNull(attribute)::::DELETE::::STATEMENT	false
org.jsoup.nodes.Attributes::::100::::2989::::3034::::attributes.put(attribute.getKey(), attribute)::::DELETE::::STATEMENT	false
org.jsoup.parser.Token::::127::::4406::::4420::::newAttribute()::::INSERT::::STATEMENT::::if ((pendingAttributeName) != null) {    newAttribute();}	false
org.jsoup.parser.Token::::127::::4406::::4420::::newAttribute()::::INSERT::::STATEMENT::::if ((attributes) == null)    attributes = new org.jsoup.nodes.Attributes();	false
org.jsoup.parser.HtmlTreeBuilder::::79::::4168::::4177::::contextTag::::"body"	false
org.jsoup.nodes.Document::::41::::1199::::1224::::org.jsoup.helper.Validate.notNull(baseUri)::::INSERT::::STATEMENT::::ensureMetaCharsetElement()	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted	false
org.jsoup.parser.HtmlTreeBuilder::::94::::4905::::4911::::context::::contextElement	false
org.jsoup.nodes.Document::::45::::1331::::1334::::html::::head().appendElement("title")	false
org.jsoup.parser.HtmlTreeBuilder::::177::::7111::::7134::::startTag.isSelfClosing()::::INSERT::::STATEMENT::::insert(el)	false
org.jsoup.parser.Tokeniser::::241::::8728::::8880::::if (errors.canAddError())    errors.add(new org.jsoup.parser.ParseError(reader.pos(), "Unexpected character '%s' in input state [%s]", reader.current(), state));::::INSERT::::STATEMENT::::emit(tagPending)	false
org.jsoup.parser.Tokeniser::::241::::8728::::8880::::if (errors.canAddError())    errors.add(new org.jsoup.parser.ParseError(reader.pos(), "Unexpected character '%s' in input state [%s]", reader.current(), state));::::INSERT::::STATEMENT::::emit(doctypePending)	false
org.jsoup.parser.Tokeniser::::241::::8728::::8880::::if (errors.canAddError())    errors.add(new org.jsoup.parser.ParseError(reader.pos(), "Unexpected character '%s' in input state [%s]", reader.current(), state));::::INSERT::::STATEMENT::::emit(commentPending)	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.BeforeDoctypeSystemIdentifier	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.BeforeDoctypePublicIdentifier	false
org.jsoup.nodes.Document::::48::::1404::::1414::::return doc::::INSERT::::STATEMENT::::outputSettings.charset(charset)	false
org.jsoup.nodes.Document::::43::::1235::::1271::::org.jsoup.nodes.Document doc = new org.jsoup.nodes.Document(baseUri)::::INSERT::::STATEMENT::::ensureMetaCharsetElement()	false
org.jsoup.parser.Token::::166::::5685::::5704::::pendingAttributeName::::normalName	false
org.jsoup.parser.Token::::166::::5676::::5681::::append::::this.tagName	false
org.jsoup.parser.HtmlTreeBuilder::::77::::4053::::4062::::contextTag::::"body"	false
org.jsoup.parser.Token::::166::::5645::::5664::::pendingAttributeName::::normalName	false
org.jsoup.parser.Token::::166::::5622::::5641::::pendingAttributeName::::normalName	false
org.jsoup.parser.Token::::104::::3203::::3222::::pendingAttributeName::::normalName	false
org.jsoup.parser.Token::::166::::5676::::5681::::append::::pubSysKey	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.CommentEndBang	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.BetweenDoctypePublicAndSystemIdentifiers	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.AfterDoctypeName	false
org.jsoup.parser.HtmlTreeBuilder::::75::::3908::::3917::::contextTag::::inputFragment	false
org.jsoup.parser.Tokeniser::::77::::2983::::3002::::startTag.selfClosing::::isEmitPending	false
org.jsoup.parser.Tokeniser::::77::::2983::::3002::::startTag.selfClosing::::!(isEmitPending)	false
org.jsoup.nodes.Attributes::::99::::2927::::2979::::attributes = new java.util.LinkedHashMap<java.lang.String, org.jsoup.nodes.Attribute>(2)::::INSERT::::STATEMENT::::if ((attributes) == null)    attributes = new java.util.LinkedHashMap<java.lang.String, org.jsoup.nodes.Attribute>(2);	false
org.jsoup.parser.Token::::116::::3979::::3998::::pendingAttributeName::::normalName	false
org.jsoup.nodes.Document::::46::::1367::::1370::::html::::head().appendElement("title")	false
org.jsoup.nodes.Element::::186::::5691::::5723::::org.jsoup.nodes.Element.accumulateParents(this, parents)::::INSERT::::STATEMENT::::empty()	false
org.jsoup.nodes.Document::::46::::1367::::1393::::html.appendElement("body")::::INSERT::::STATEMENT::::normaliseTextNodes(this)	false
org.jsoup.nodes.Document::::46::::1367::::1393::::html.appendElement("body")::::INSERT::::STATEMENT::::normaliseTextNodes(head())	false
org.jsoup.nodes.Element::::192::::5876::::6024::::if ((parent != null) && (!(parent.tagName().equals("#root")))) {    parents.add(parent);    org.jsoup.nodes.Element.accumulateParents(parent, parents);}::::INSERT::::STATEMENT::::org.jsoup.nodes.Element.accumulateParents(this, parents)	false
org.jsoup.parser.Tokeniser::::207::::8033::::8049::::emit(tagPending)::::DELETE::::STATEMENT	false
org.jsoup.parser.Tokeniser::::206::::7999::::8023::::tagPending.finaliseTag()::::DELETE::::STATEMENT	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.CommentStartDash	false
org.jsoup.parser.TokeniserState::::873::::29350::::29842::::switch (c) {    case '>' :        t.tagPending.selfClosing = true;        t.emitTagPending();        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case org.jsoup.parser.TokeniserState.eof :        t.eofError(this);        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    default :        t.error(this);        r.unconsume();        t.transition(org.jsoup.parser.TokeniserState.BeforeAttributeName);}::::INSERT::::STATEMENT::::anythingElse(t, r)	false
org.jsoup.parser.CharacterReader::::172::::4681::::4683::::val::::chars	false
org.jsoup.nodes.Element::::193::::5947::::5953::::parents::::children()	false
org.jsoup.nodes.Document::::45::::1331::::1357::::html.appendElement("head")::::INSERT::::STATEMENT::::updateMetaCharsetElement(true)	false
org.jsoup.nodes.Document::::45::::1331::::1357::::html.appendElement("head")::::INSERT::::STATEMENT::::outputSettings.charset(charset)	false
org.jsoup.parser.HtmlTreeBuilder::::400::::14269::::14285::::"tr".equals(name)::::INSERT::::STATEMENT::::if (pos == 0) {    last = true;    node = contextElement;}	false
org.jsoup.parser.HtmlTreeBuilder::::394::::13975::::13995::::"select".equals(name)::::INSERT::::STATEMENT::::if (pos == 0) {    last = true;    node = contextElement;}	false
org.jsoup.nodes.Element::::192::::5876::::6024::::if ((parent != null) && (!(parent.tagName().equals("#root")))) {    parents.add(parent);    org.jsoup.nodes.Element.accumulateParents(parent, parents);}::::INSERT::::STATEMENT::::org.jsoup.nodes.Element.accumulateParents(parent, parents)	false
org.jsoup.parser.HtmlTreeBuilder::::406::::14572::::14593::::"caption".equals(name)::::INSERT::::STATEMENT::::if (pos == 0) {    last = true;    node = contextElement;}	false
org.jsoup.parser.HtmlTreeBuilder::::409::::14704::::14726::::"colgroup".equals(name)::::INSERT::::STATEMENT::::if (pos == 0) {    last = true;    node = contextElement;}	false
org.jsoup.parser.Token::::110::::3696::::3904::::if (hasEmptyAttributeValue)    attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, "");else    attribute = new org.jsoup.nodes.BooleanAttribute(pendingAttributeName);::::INSERT::::STATEMENT::::if ((attributes) == null)    attributes = new org.jsoup.nodes.Attributes();	false
org.jsoup.parser.HtmlTreeBuilder::::412::::14849::::14868::::"table".equals(name)::::INSERT::::STATEMENT::::if (pos == 0) {    last = true;    node = contextElement;}	false
org.jsoup.parser.HtmlTreeBuilder::::415::::14977::::14995::::"head".equals(name)::::INSERT::::STATEMENT::::if (pos == 0) {    last = true;    node = contextElement;}	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.CommentEndDash	false
org.jsoup.parser.Token::::119::::4110::::4138::::org.jsoup.parser.Token.reset(pendingAttributeValue)::::INSERT::::STATEMENT::::ensureAttributeValue()	false
org.jsoup.parser.Token::::137::::4791::::4800::::normalName::::pubSysKey	false
org.jsoup.parser.HtmlTreeBuilder::::418::::15111::::15129::::"body".equals(name)::::INSERT::::STATEMENT::::if (pos == 0) {    last = true;    node = contextElement;}	false
org.jsoup.parser.Token::::166::::5713::::5718::::append::::this.tagName	false
org.jsoup.parser.Token::::166::::5713::::5718::::append::::pubSysKey	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.AfterDoctypeSystemIdentifier	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.AfterDoctypePublicIdentifier	false
org.jsoup.parser.Token::::117::::4020::::4041::::hasEmptyAttributeValue::::forceQuirks	false
org.jsoup.parser.Tokeniser::::77::::2979::::3056::::if (startTag.selfClosing)    selfClosingFlagAcknowledged = false;::::INSERT::::STATEMENT::::if (startTag.selfClosing)    selfClosingFlagAcknowledged = false;	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.BeforeDoctypeName	false
org.jsoup.nodes.Element::::377::::13064::::13124::::org.jsoup.nodes.Element child = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(tagName), baseUri())::::INSERT::::STATEMENT::::empty()	false
org.jsoup.parser.Token::::125::::4275::::4434::::if ((pendingAttributeName) != null) {    newAttribute();}::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(systemIdentifier)	false
org.jsoup.parser.Token::::125::::4275::::4434::::if ((pendingAttributeName) != null) {    newAttribute();}::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(publicIdentifier)	false
org.jsoup.parser.Token::::125::::4275::::4434::::if ((pendingAttributeName) != null) {    newAttribute();}::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(name)	false
org.jsoup.parser.Token::::166::::5676::::5681::::append::::data	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.Rawtext	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.ScriptDataEscapeStart	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.ScriptDataEndTagOpen	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11316::::name.equals("a")::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.nodes.Document::::45::::1331::::1357::::html.appendElement("head")::::INSERT::::STATEMENT::::normaliseTextNodes(this)	false
org.jsoup.nodes.Document::::45::::1331::::1357::::html.appendElement("head")::::INSERT::::STATEMENT::::normaliseTextNodes(head())	false
org.jsoup.nodes.Element::::194::::5980::::6014::::org.jsoup.nodes.Element.accumulateParents(parent, parents)::::INSERT::::STATEMENT::::empty()	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.ScriptDataDoubleEscapedDash	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.BogusComment	false
org.jsoup.nodes.Document::::43::::1235::::1271::::org.jsoup.nodes.Document doc = new org.jsoup.nodes.Document(baseUri)::::INSERT::::STATEMENT::::updateMetaCharsetElement(true)	false
org.jsoup.nodes.Document::::43::::1235::::1271::::org.jsoup.nodes.Document doc = new org.jsoup.nodes.Document(baseUri)::::INSERT::::STATEMENT::::outputSettings.charset(charset)	false
org.jsoup.nodes.Element::::191::::5855::::5860::::parent::::children	false
org.jsoup.parser.Token::::125::::4275::::4434::::if ((pendingAttributeName) != null) {    newAttribute();}::::INSERT::::STATEMENT::::ensureAttributeValue()	false
org.jsoup.parser.Token::::114::::3926::::3935::::attributes::::new org.jsoup.nodes.Attributes()	false
org.jsoup.parser.Token::::125::::4279::::4298::::pendingAttributeName::::normalName	false
org.jsoup.parser.Token::::166::::5622::::5720::::pendingAttributeName = ((pendingAttributeName) == null) ? append : pendingAttributeName.concat(append)::::INSERT::::STATEMENT::::ensureAttributeValue()	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.ScriptDataDoubleEscapedDashDash	false
org.jsoup.parser.Token::::118::::4064::::4087::::hasPendingAttributeValue::::forceQuirks	false
org.jsoup.parser.HtmlTreeBuilderState::::276::::11349::::11390::::(tb.getActiveFormattingElement("a")) != null::::org.jsoup.parser.HtmlTreeBuilderState.InBody.process(t, tb)	false
org.jsoup.parser.Token::::107::::3448::::3471::::hasPendingAttributeValue::::forceQuirks	false
org.jsoup.nodes.Document::::44::::1296::::1298::::doc::::head().appendElement("title")	false
org.jsoup.nodes.Document::::44::::1281::::1321::::org.jsoup.nodes.Element html = doc.appendElement("html")::::INSERT::::STATEMENT::::updateMetaCharsetElement(true)	false
org.jsoup.nodes.Document::::44::::1281::::1321::::org.jsoup.nodes.Element html = doc.appendElement("html")::::INSERT::::STATEMENT::::outputSettings.charset(charset)	false
org.jsoup.parser.Token::::166::::5685::::5704::::pendingAttributeName::::append	false
org.jsoup.parser.Token::::125::::4275::::4434::::if ((pendingAttributeName) != null) {    newAttribute();}::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(data)	false
org.jsoup.parser.HtmlTreeBuilder::::81::::4314::::4323::::contextTag::::"Should not be reachable"	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.ScriptDataEscapedDash	false
org.jsoup.parser.HtmlTreeBuilder::::61::::3289::::3316::::org.jsoup.parser.HtmlTreeBuilderState.Initial::::originalState	false
org.jsoup.parser.CharacterReader::::177::::4758::::4813::::return (pos) > start ? cacheString(start, ((pos) - start)) : ""::::INSERT::::STATEMENT::::(pos)++	false
org.jsoup.parser.HtmlTreeBuilderState::::276::::11345::::11864::::if ((tb.getActiveFormattingElement("a")) != null) {    tb.error(this);    tb.processEndTag("a");    org.jsoup.nodes.Element remainingA = tb.getFromStack("a");    if (remainingA != null) {        tb.removeFromActiveFormattingElements(remainingA);        tb.removeFromStack(remainingA);    }}::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.CharacterReader::::173::::4713::::4718::::break::::INSERT::::STATEMENT::::(pos)++	false
org.jsoup.nodes.Element::::192::::5899::::5904::::parent::::empty()	false
org.jsoup.parser.CharacterReader::::169::::4596::::4600::::input::::val	false
org.jsoup.parser.Tokeniser::::77::::2983::::3002::::startTag.selfClosing::::INSERT::::STATEMENT::::if (startTag.selfClosing)    selfClosingFlagAcknowledged = false;	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.TagOpen	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.RcdataLessthanSign	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.CommentEnd	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.CharacterReferenceInRcdata	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.CharacterReferenceInData	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.Rawtext	false
org.jsoup.parser.HtmlTreeBuilder::::67::::3494::::3508::::context != null::::context != null) && (root != null	false
org.jsoup.parser.HtmlTreeBuilder::::79::::4168::::4177::::contextTag::::"Should not be reachable"	false
org.jsoup.parser.Tokeniser::::76::::2934::::2965::::lastStartTag = startTag.tagName::::INSERT::::STATEMENT::::if (startTag.selfClosing)    selfClosingFlagAcknowledged = false;	false
org.jsoup.parser.Parser::::155::::5876::::5882::::baseUri::::bodyHtml	false
org.jsoup.nodes.Document::::43::::1235::::1271::::org.jsoup.nodes.Document doc = new org.jsoup.nodes.Document(baseUri)::::INSERT::::STATEMENT::::normaliseTextNodes(this)	false
org.jsoup.nodes.Document::::43::::1235::::1271::::org.jsoup.nodes.Document doc = new org.jsoup.nodes.Document(baseUri)::::INSERT::::STATEMENT::::normaliseTextNodes(head())	false
org.jsoup.parser.CharacterReader::::168::::4539::::4567::::final int remaining = length::::INSERT::::STATEMENT::::(pos)++	false
org.jsoup.parser.CharacterReader::::167::::4508::::4529::::final int start = pos::::INSERT::::STATEMENT::::(pos)++	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.MarkupDeclarationOpen	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.EndTagOpen	false
org.jsoup.parser.HtmlTreeBuilder::::77::::4053::::4062::::contextTag::::"Should not be reachable"	false
org.jsoup.parser.HtmlTreeBuilder::::81::::4314::::4323::::contextTag::::"frameset"	false
org.jsoup.parser.HtmlTreeBuilderState::::288::::11950::::11981::::org.jsoup.nodes.Element a = tb.insert(startTag)::::INSERT::::STATEMENT::::if (node == formatEl)    break;	false
org.jsoup.nodes.Element::::379::::13162::::13174::::return child::::INSERT::::STATEMENT::::empty()	false
org.jsoup.nodes.Document::::44::::1281::::1321::::org.jsoup.nodes.Element html = doc.appendElement("html")::::INSERT::::STATEMENT::::normaliseTextNodes(this)	false
org.jsoup.nodes.Document::::44::::1281::::1321::::org.jsoup.nodes.Element html = doc.appendElement("html")::::INSERT::::STATEMENT::::normaliseTextNodes(head())	false
org.jsoup.parser.Token::::166::::5713::::5718::::append::::data	false
org.jsoup.parser.Token::::137::::4791::::4800::::normalName::::this.tagName	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.TagName	false
org.jsoup.parser.HtmlTreeBuilder::::559::::19892::::19989::::return (formattingElements.size()) > 0 ? formattingElements.get(((formattingElements.size()) - 1)) : null::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.HtmlTreeBuilder::::559::::19892::::19989::::return (formattingElements.size()) > 0 ? formattingElements.get(((formattingElements.size()) - 1)) : null::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.Token::::110::::3700::::3721::::hasEmptyAttributeValue::::INSERT::::STATEMENT::::if ((attributes) == null)    attributes = new org.jsoup.nodes.Attributes();	false
org.jsoup.parser.HtmlTreeBuilder::::418::::15107::::15625::::if ("body".equals(name)) {    transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);    break;}else    if ("frameset".equals(name)) {        transition(org.jsoup.parser.HtmlTreeBuilderState.InFrameset);        break;    }else        if ("html".equals(name)) {            transition(org.jsoup.parser.HtmlTreeBuilderState.BeforeHead);            break;        }else            if (last) {                transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                break;            }::::INSERT::::STATEMENT::::if (pos == 0) {    last = true;    node = contextElement;}	false
org.jsoup.nodes.Element::::193::::5947::::5966::::parents.add(parent)::::INSERT::::STATEMENT::::empty()	false
org.jsoup.parser.HtmlTreeBuilder::::79::::4168::::4177::::contextTag::::"frameset"	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.TagName	false
org.jsoup.nodes.Attributes::::97::::2853::::2880::::org.jsoup.helper.Validate.notNull(attribute)::::INSERT::::STATEMENT::::put(attr)	false
org.jsoup.parser.Token::::119::::4110::::4138::::org.jsoup.parser.Token.reset(pendingAttributeValue)::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(systemIdentifier)	false
org.jsoup.parser.Token::::119::::4110::::4138::::org.jsoup.parser.Token.reset(pendingAttributeValue)::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(publicIdentifier)	false
org.jsoup.parser.Token::::119::::4110::::4138::::org.jsoup.parser.Token.reset(pendingAttributeValue)::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(name)	false
org.jsoup.parser.Token::::114::::3926::::3951::::attributes.put(attribute)::::INSERT::::STATEMENT::::if ((attributes) == null)    attributes = new org.jsoup.nodes.Attributes();	false
org.jsoup.parser.HtmlTreeBuilder::::77::::4053::::4062::::contextTag::::"frameset"	false
org.jsoup.parser.HtmlTreeBuilderState::::276::::11345::::11864::::if ((tb.getActiveFormattingElement("a")) != null) {    tb.error(this);    tb.processEndTag("a");    org.jsoup.nodes.Element remainingA = tb.getFromStack("a");    if (remainingA != null) {        tb.removeFromActiveFormattingElements(remainingA);        tb.removeFromStack(remainingA);    }}::::INSERT::::STATEMENT::::if (node == formatEl)    break;	false
org.jsoup.parser.CharacterReader::::169::::4577::::4601::::final char[] val = input::::INSERT::::STATEMENT::::(pos)++	false
org.jsoup.parser.Token::::110::::3696::::3904::::if (hasEmptyAttributeValue)    attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, "");else    attribute = new org.jsoup.nodes.BooleanAttribute(pendingAttributeName);::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(pendingAttributeValue)	false
org.jsoup.parser.HtmlTreeBuilder::::598::::21209::::21229::::lastFormattingElement::::resetInsertionMode	false
org.jsoup.nodes.Element::::185::::5648::::5681::::org.jsoup.select.Elements parents = new org.jsoup.select.Elements()::::INSERT::::STATEMENT::::empty()	false
org.jsoup.parser.HtmlTreeBuilder::::69::::3595::::3647::::doc.quirksMode(context.ownerDocument().quirksMode())::::DELETE::::STATEMENT	false
org.jsoup.parser.Token::::119::::4110::::4138::::org.jsoup.parser.Token.reset(pendingAttributeValue)::::DELETE::::STATEMENT	false
org.jsoup.parser.CharacterReader::::177::::4802::::4806::::start::::remaining	false
org.jsoup.parser.HtmlTreeBuilder::::89::::4641::::4658::::resetInsertionMode::::isFosterInserts	false
org.jsoup.parser.Tokeniser::::241::::8732::::8751::::errors.canAddError()::::INSERT::::STATEMENT::::characterReferenceError("missing semicolon")	false
org.jsoup.parser.Token::::114::::3926::::3951::::attributes.put(attribute)::::INSERT::::STATEMENT::::if (hasEmptyAttributeValue)    attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, "");else    attribute = new org.jsoup.nodes.BooleanAttribute(pendingAttributeName);	false
org.jsoup.parser.HtmlTreeBuilder::::94::::4885::::4913::::contextChain.add(0, context)::::DELETE::::STATEMENT	false
org.jsoup.parser.HtmlTreeBuilder::::89::::4641::::4661::::resetInsertionMode()::::DELETE::::STATEMENT	false
org.jsoup.parser.HtmlTreeBuilder::::88::::4612::::4627::::stack.add(root)::::DELETE::::STATEMENT	false
org.jsoup.parser.HtmlTreeBuilder::::87::::4577::::4598::::doc.appendChild(root)::::DELETE::::STATEMENT	false
org.jsoup.nodes.Element::::194::::5980::::6014::::org.jsoup.nodes.Element.accumulateParents(parent, parents)::::DELETE::::STATEMENT	false
org.jsoup.nodes.Element::::193::::5947::::5966::::parents.add(parent)::::DELETE::::STATEMENT	false
org.jsoup.parser.HtmlTreeBuilder::::600::::21289::::21295::::return ::::INSERT::::STATEMENT::::if ((last == null) || (onStack(last)))    return ;	false
org.jsoup.parser.HtmlTreeBuilder::::415::::14973::::15625::::if ("head".equals(name)) {    transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);    break;}else    if ("body".equals(name)) {        transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);        break;    }else        if ("frameset".equals(name)) {            transition(org.jsoup.parser.HtmlTreeBuilderState.InFrameset);            break;        }else            if ("html".equals(name)) {                transition(org.jsoup.parser.HtmlTreeBuilderState.BeforeHead);                break;            }else                if (last) {                    transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                    break;                }::::INSERT::::STATEMENT::::if (pos == 0) {    last = true;    node = contextElement;}	false
org.jsoup.parser.Token::::127::::4406::::4420::::newAttribute()::::DELETE::::STATEMENT	false
org.jsoup.parser.Token::::114::::3926::::3951::::attributes.put(attribute)::::DELETE::::STATEMENT	false
org.jsoup.parser.CharacterReader::::168::::4561::::4566::::length::::remaining	false
org.jsoup.nodes.Element::::192::::5876::::6024::::if ((parent != null) && (!(parent.tagName().equals("#root")))) {    parents.add(parent);    org.jsoup.nodes.Element.accumulateParents(parent, parents);}::::INSERT::::STATEMENT::::empty()	false
org.jsoup.parser.Token::::166::::5645::::5664::::pendingAttributeName::::append	false
org.jsoup.parser.Token::::110::::3700::::3721::::hasEmptyAttributeValue::::bogus	false
org.jsoup.nodes.Element::::191::::5855::::5856::::el::::empty()	false
org.jsoup.nodes.Attributes::::180::::5305::::5342::::return attributes.values().iterator()::::INSERT::::STATEMENT::::if ((attributes) == null)    return false;	false
org.jsoup.nodes.Attributes::::180::::5305::::5342::::return attributes.values().iterator()::::INSERT::::STATEMENT::::if ((attributes) == null)    return ;	false
org.jsoup.nodes.Attributes::::180::::5305::::5342::::return attributes.values().iterator()::::INSERT::::STATEMENT::::if ((attributes) == null)    return "";	false
org.jsoup.parser.Tokeniser::::77::::2979::::3056::::if (startTag.selfClosing)    selfClosingFlagAcknowledged = false;::::INSERT::::STATEMENT::::if (!(selfClosingFlagAcknowledged)) {    error("Self closing flag not acknowledged");    selfClosingFlagAcknowledged = true;}	false
org.jsoup.nodes.Document::::41::::1199::::1224::::org.jsoup.helper.Validate.notNull(baseUri)::::INSERT::::STATEMENT::::updateMetaCharsetElement(true)	false
org.jsoup.nodes.Document::::41::::1199::::1224::::org.jsoup.helper.Validate.notNull(baseUri)::::INSERT::::STATEMENT::::outputSettings.charset(charset)	false
org.jsoup.nodes.Document::::41::::1199::::1224::::org.jsoup.helper.Validate.notNull(baseUri)::::INSERT::::STATEMENT::::normaliseTextNodes(this)	false
org.jsoup.nodes.Document::::41::::1199::::1224::::org.jsoup.helper.Validate.notNull(baseUri)::::INSERT::::STATEMENT::::normaliseTextNodes(head())	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.Comment	false
org.jsoup.parser.HtmlTreeBuilder::::84::::4438::::4446::::tokeniser::::this	false
org.jsoup.nodes.Element::::193::::5947::::5966::::parents.add(parent)::::INSERT::::STATEMENT::::if (el.hasText())    return true;	false
org.jsoup.parser.Token::::166::::5645::::5719::::(pendingAttributeName) == null) ? append : pendingAttributeName.concat(append::::pendingAttributeName	false
org.jsoup.parser.Token::::166::::5645::::5719::::(pendingAttributeName) == null) ? append : pendingAttributeName.concat(append::::append	false
org.jsoup.parser.HtmlTreeBuilder::::64::::3428::::3442::::fragmentParsing::::framesetOk	false
org.jsoup.parser.HtmlTreeBuilder::::64::::3428::::3442::::fragmentParsing::::fosterInserts	false
org.jsoup.parser.CharacterReader::::177::::4791::::4795::::start::::remaining	false
org.jsoup.parser.CharacterReader::::177::::4771::::4775::::start::::remaining	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.ScriptDataEscapeStart	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.ScriptDataEndTagOpen	false
org.jsoup.parser.Tokeniser::::77::::2983::::2990::::startTag::::startPending	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.BogusDoctype	false
org.jsoup.parser.HtmlTreeBuilder::::87::::4577::::4579::::doc::::parent	false
org.jsoup.parser.HtmlTreeBuilder::::89::::4641::::4658::::resetInsertionMode::::pop	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.ScriptDataEscapedDashDash	false
org.jsoup.parser.Token::::101::::3115::::3184::::if ((attributes) == null)    attributes = new org.jsoup.nodes.Attributes();::::INSERT::::STATEMENT::::if ((attributes) == null)    attributes = new org.jsoup.nodes.Attributes();	false
org.jsoup.parser.Token::::166::::5622::::5720::::pendingAttributeName = ((pendingAttributeName) == null) ? append : pendingAttributeName.concat(append)::::pendingAttributeName = null	false
org.jsoup.parser.Tokeniser::::76::::2949::::2956::::startTag::::startPending	false
org.jsoup.parser.HtmlTreeBuilder::::62::::3327::::3384::::initialiseParse(inputFragment, baseUri, errors, settings)::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.Token::::114::::3926::::3951::::attributes.put(attribute)::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(pendingAttributeValue)	false
org.jsoup.parser.HtmlTreeBuilder::::412::::14845::::15625::::if ("table".equals(name)) {    transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);    break;}else    if ("head".equals(name)) {        transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);        break;    }else        if ("body".equals(name)) {            transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);            break;        }else            if ("frameset".equals(name)) {                transition(org.jsoup.parser.HtmlTreeBuilderState.InFrameset);                break;            }else                if ("html".equals(name)) {                    transition(org.jsoup.parser.HtmlTreeBuilderState.BeforeHead);                    break;                }else                    if (last) {                        transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                        break;                    }::::INSERT::::STATEMENT::::if (pos == 0) {    last = true;    node = contextElement;}	false
org.jsoup.parser.HtmlTreeBuilder::::69::::3595::::3597::::doc::::parent	false
org.jsoup.parser.HtmlTreeBuilder::::185::::7611::::7618::::settings::::this	false
org.jsoup.parser.HtmlTreeBuilder::::89::::4641::::4658::::resetInsertionMode::::removeLastFormattingElement	false
org.jsoup.parser.HtmlTreeBuilder::::600::::21289::::21295::::return ::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.HtmlTreeBuilderState::::276::::11345::::11864::::if ((tb.getActiveFormattingElement("a")) != null) {    tb.error(this);    tb.processEndTag("a");    org.jsoup.nodes.Element remainingA = tb.getFromStack("a");    if (remainingA != null) {        tb.removeFromActiveFormattingElements(remainingA);        tb.removeFromStack(remainingA);    }}::::INSERT::::STATEMENT::::org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb)	false
org.jsoup.parser.CharacterReader::::177::::4765::::4775::::(pos) > start::::pos) >= (length	false
org.jsoup.parser.HtmlTreeBuilder::::81::::4314::::4323::::contextTag::::"noscript"	false
org.jsoup.parser.HtmlTreeBuilder::::72::::3729::::3735::::context::::contextChain	false
org.jsoup.parser.HtmlTreeBuilder::::65::::3460::::3479::::org.jsoup.nodes.Element root = null::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.HtmlTreeBuilder::::93::::4854::::4860::::context::::contextChain	false
org.jsoup.parser.HtmlTreeBuilder::::185::::7537::::7661::::org.jsoup.nodes.Element el = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(startTag.name(), settings), baseUri, settings.normalizeAttributes(startTag.attributes))::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.nodes.Attributes::::98::::2890::::2979::::if ((attributes) == null)    attributes = new java.util.LinkedHashMap<java.lang.String, org.jsoup.nodes.Attribute>(2);::::INSERT::::STATEMENT::::if ((attributes) == null)    attributes = new java.util.LinkedHashMap<java.lang.String, org.jsoup.nodes.Attribute>(2);	false
org.jsoup.nodes.Attributes::::100::::2989::::3034::::attributes.put(attribute.getKey(), attribute)::::INSERT::::STATEMENT::::if ((attributes) == null)    attributes = new java.util.LinkedHashMap<java.lang.String, org.jsoup.nodes.Attribute>(2);	false
org.jsoup.nodes.Element::::194::::5980::::6014::::org.jsoup.nodes.Element.accumulateParents(parent, parents)::::INSERT::::STATEMENT::::if (el.hasText())    return true;	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.Rcdata	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.AttributeValue_doubleQuoted	false
org.jsoup.parser.HtmlTreeBuilderState::::276::::11349::::11382::::tb.getActiveFormattingElement("a")::::DELETE::::INFIX	false
org.jsoup.parser.Tokeniser::::76::::2934::::2945::::lastStartTag::::startTag.tagName	false
org.jsoup.parser.HtmlTreeBuilder::::77::::4053::::4062::::contextTag::::"noscript"	false
org.jsoup.parser.Token::::166::::5622::::5720::::pendingAttributeName = ((pendingAttributeName) == null) ? append : pendingAttributeName.concat(append)::::INSERT::::STATEMENT::::if ((attributes) == null)    attributes = new org.jsoup.nodes.Attributes();	false
org.jsoup.parser.HtmlTreeBuilder::::79::::4168::::4177::::contextTag::::"noscript"	false
org.jsoup.parser.HtmlTreeBuilder::::393::::13942::::13945::::node::::removeLastFormattingElement()	false
org.jsoup.parser.Token::::125::::4275::::4434::::if ((pendingAttributeName) != null) {    newAttribute();}::::INSERT::::STATEMENT::::newAttribute()	false
org.jsoup.parser.HtmlTreeBuilder::::81::::4314::::4323::::contextTag::::"href"	false
org.jsoup.parser.HtmlTreeBuilder::::386::::13682::::13702::::boolean last = false::::INSERT::::STATEMENT::::if (pos == 0) {    last = true;    node = contextElement;}	false
org.jsoup.parser.Token::::166::::5622::::5641::::pendingAttributeName::::append	false
org.jsoup.parser.HtmlTreeBuilder::::599::::21242::::21295::::if ((last == null) || (onStack(last)))    return ;::::INSERT::::STATEMENT::::if ((last == null) || (onStack(last)))    return ;	false
org.jsoup.parser.HtmlTreeBuilder::::598::::21209::::21229::::lastFormattingElement::::removeLastFormattingElement	false
org.jsoup.parser.CharacterReader::::177::::4802::::4806::::start::::(length) - (pos)	false
org.jsoup.nodes.Element::::193::::5947::::5953::::parents::::new org.jsoup.select.Elements(0)	false
org.jsoup.nodes.Attributes::::180::::5305::::5342::::return attributes.values().iterator()::::INSERT::::STATEMENT::::if ((attributes) == null)    return 0;	false
org.jsoup.parser.Token::::166::::5622::::5720::::pendingAttributeName = ((pendingAttributeName) == null) ? append : pendingAttributeName.concat(append)::::INSERT::::STATEMENT::::newAttribute()	false
org.jsoup.parser.HtmlTreeBuilder::::93::::4854::::4860::::context::::doc	false
org.jsoup.parser.Tokeniser::::207::::8033::::8049::::emit(tagPending)::::emit(org.jsoup.parser.Tokeniser.replacementChar)	false
org.jsoup.parser.HtmlTreeBuilder::::599::::21262::::21268::::onStack::::aboveOnStack	false
org.jsoup.parser.HtmlTreeBuilder::::79::::4168::::4177::::contextTag::::"href"	false
org.jsoup.parser.Parser::::157::::5951::::5988::::org.jsoup.parser.Parser.parseFragment(bodyHtml, body, baseUri)::::INSERT::::PARAMETER::::parseFragment(bodyHtml, body, baseUri,errors)	false
org.jsoup.parser.HtmlTreeBuilder::::409::::14700::::15625::::if ("colgroup".equals(name)) {    transition(org.jsoup.parser.HtmlTreeBuilderState.InColumnGroup);    break;}else    if ("table".equals(name)) {        transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);        break;    }else        if ("head".equals(name)) {            transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);            break;        }else            if ("body".equals(name)) {                transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                break;            }else                if ("frameset".equals(name)) {                    transition(org.jsoup.parser.HtmlTreeBuilderState.InFrameset);                    break;                }else                    if ("html".equals(name)) {                        transition(org.jsoup.parser.HtmlTreeBuilderState.BeforeHead);                        break;                    }else                        if (last) {                            transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                            break;                        }::::INSERT::::STATEMENT::::if (pos == 0) {    last = true;    node = contextElement;}	false
org.jsoup.parser.Tokeniser::::207::::8033::::8049::::emit(tagPending)::::INSERT::::STATEMENT::::if (!(selfClosingFlagAcknowledged)) {    error("Self closing flag not acknowledged");    selfClosingFlagAcknowledged = true;}	false
org.jsoup.parser.Token::::125::::4275::::4434::::if ((pendingAttributeName) != null) {    newAttribute();}::::INSERT::::STATEMENT::::if ((pendingAttributeName) != null) {    newAttribute();}	false
org.jsoup.parser.Token::::125::::4275::::4434::::if ((pendingAttributeName) != null) {    newAttribute();}::::INSERT::::STATEMENT::::if ((attributes) == null)    attributes = new org.jsoup.nodes.Attributes();	false
org.jsoup.parser.HtmlTreeBuilder::::598::::21194::::21232::::org.jsoup.nodes.Element last = lastFormattingElement()::::INSERT::::STATEMENT::::if ((last == null) || (onStack(last)))    return ;	false
org.jsoup.parser.TokeniserState::::599::::19876::::20990::::switch (c) {    case '\t' :    case '\n' :    case '\r' :    case '\f' :    case ' ' :        t.transition(org.jsoup.parser.TokeniserState.AfterAttributeName);        break;    case '/' :        t.transition(org.jsoup.parser.TokeniserState.SelfClosingStartTag);        break;    case '=' :        t.transition(org.jsoup.parser.TokeniserState.BeforeAttributeValue);        break;    case '>' :        t.emitTagPending();        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case org.jsoup.parser.TokeniserState.nullChar :        t.error(this);        t.tagPending.appendAttributeName(org.jsoup.parser.TokeniserState.replacementChar);        break;    case org.jsoup.parser.TokeniserState.eof :        t.eofError(this);        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case '"' :    case '\'' :    case '<' :        t.error(this);        t.tagPending.appendAttributeName(c);}::::INSERT::::STATEMENT::::anythingElse(t, r)	false
org.jsoup.parser.Token::::117::::4020::::4041::::hasEmptyAttributeValue::::bogus	false
org.jsoup.parser.HtmlTreeBuilder::::62::::3358::::3364::::baseUri::::inputFragment	false
org.jsoup.parser.HtmlTreeBuilder::::77::::4053::::4062::::contextTag::::"href"	false
org.jsoup.parser.CharacterReader::::177::::4771::::4775::::start::::(length) - (pos)	false
org.jsoup.parser.Token::::107::::3448::::3471::::hasPendingAttributeValue::::INSERT::::STATEMENT::::if ((attributes) == null)    attributes = new org.jsoup.nodes.Attributes();	false
org.jsoup.nodes.Attributes::::180::::5305::::5342::::return attributes.values().iterator()::::INSERT::::STATEMENT::::if ((attributes) == null)    return new org.jsoup.nodes.Attributes();	false
org.jsoup.parser.CharacterReader::::177::::4791::::4795::::start::::(length) - (pos)	false
org.jsoup.parser.CharacterReader::::168::::4561::::4566::::length::::(length) - (pos)	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.ScriptDataEscapedEndTagName	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.ScriptDataDoubleEscapeStart	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.RCDATAEndTagName	false
org.jsoup.parser.Tokeniser::::76::::2934::::2965::::lastStartTag = startTag.tagName::::INSERT::::STATEMENT::::if (!(selfClosingFlagAcknowledged)) {    error("Self closing flag not acknowledged");    selfClosingFlagAcknowledged = true;}	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.AfterAttributeName	false
org.jsoup.parser.HtmlTreeBuilder::::185::::7537::::7661::::org.jsoup.nodes.Element el = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(startTag.name(), settings), baseUri, settings.normalizeAttributes(startTag.attributes))::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.Token::::119::::4110::::4138::::org.jsoup.parser.Token.reset(pendingAttributeValue)::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(data)	false
org.jsoup.parser.HtmlTreeBuilder::::81::::4314::::4343::::contextTag.equals("plaintext")::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.Token::::113::::3850::::3904::::attribute = new org.jsoup.nodes.BooleanAttribute(pendingAttributeName)::::INSERT::::STATEMENT::::if ((pendingAttributeName) != null) {    newAttribute();}	false
org.jsoup.parser.HtmlTreeBuilder::::419::::15150::::15189::::transition(org.jsoup.parser.HtmlTreeBuilderState.InBody)::::INSERT::::STATEMENT::::if (pos == 0) {    last = true;    node = contextElement;}	false
org.jsoup.parser.HtmlTreeBuilder::::390::::13850::::13853::::last::::fragmentParsing	false
org.jsoup.parser.Token::::104::::3203::::3230::::(pendingAttributeName) != null::::(pendingAttributeName) == null	false
org.jsoup.parser.Tokeniser::::241::::8732::::8751::::errors.canAddError()::::INSERT::::STATEMENT::::if (!(selfClosingFlagAcknowledged)) {    error("Self closing flag not acknowledged");    selfClosingFlagAcknowledged = true;}	false
org.jsoup.parser.CharacterReader::::172::::4674::::4678::::chars::::this.input	false
org.jsoup.parser.Parser::::115::::3841::::3847::::baseUri::::fragmentHtml	false
org.jsoup.parser.HtmlTreeBuilder::::96::::4984::::4989::::parent::::this.headElement	false
org.jsoup.parser.HtmlTreeBuilder::::96::::4984::::4989::::parent::::headElement	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.SelfClosingStartTag	false
org.jsoup.parser.HtmlTreeBuilder::::406::::14568::::15625::::if ("caption".equals(name)) {    transition(org.jsoup.parser.HtmlTreeBuilderState.InCaption);    break;}else    if ("colgroup".equals(name)) {        transition(org.jsoup.parser.HtmlTreeBuilderState.InColumnGroup);        break;    }else        if ("table".equals(name)) {            transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);            break;        }else            if ("head".equals(name)) {                transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                break;            }else                if ("body".equals(name)) {                    transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                    break;                }else                    if ("frameset".equals(name)) {                        transition(org.jsoup.parser.HtmlTreeBuilderState.InFrameset);                        break;                    }else                        if ("html".equals(name)) {                            transition(org.jsoup.parser.HtmlTreeBuilderState.BeforeHead);                            break;                        }else                            if (last) {                                transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                                break;                            }::::INSERT::::STATEMENT::::if (pos == 0) {    last = true;    node = contextElement;}	false
org.jsoup.parser.HtmlTreeBuilder::::81::::4314::::4343::::contextTag.equals("plaintext")::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.Token::::113::::3850::::3904::::attribute = new org.jsoup.nodes.BooleanAttribute(pendingAttributeName)::::pendingAttributeName = null	false
org.jsoup.parser.Token::::166::::5622::::5720::::pendingAttributeName = ((pendingAttributeName) == null) ? append : pendingAttributeName.concat(append)::::pendingAttributeValueS = append	false
org.jsoup.nodes.Element::::192::::5898::::5930::::!(parent.tagName().equals("#root"))::::DELETE::::INFIX	false
org.jsoup.parser.Tokeniser::::77::::2983::::3002::::startTag.selfClosing::::INSERT::::STATEMENT::::if (!(selfClosingFlagAcknowledged)) {    error("Self closing flag not acknowledged");    selfClosingFlagAcknowledged = true;}	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.AfterDoctypeSystemKeyword	false
org.jsoup.parser.Token::::110::::3700::::3721::::hasEmptyAttributeValue::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(pendingAttributeValue)	false
org.jsoup.parser.Token::::101::::3115::::3184::::if ((attributes) == null)    attributes = new org.jsoup.nodes.Attributes();::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(systemIdentifier)	false
org.jsoup.parser.Token::::101::::3115::::3184::::if ((attributes) == null)    attributes = new org.jsoup.nodes.Attributes();::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(publicIdentifier)	false
org.jsoup.parser.Token::::101::::3115::::3184::::if ((attributes) == null)    attributes = new org.jsoup.nodes.Attributes();::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(name)	false
org.jsoup.parser.HtmlTreeBuilder::::86::::4555::::4561::::baseUri::::inputFragment	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.CommentEndBang	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.BeforeDoctypeSystemIdentifier	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.BeforeDoctypePublicIdentifier	false
org.jsoup.parser.Token::::118::::4064::::4087::::hasPendingAttributeValue::::bogus	false
org.jsoup.parser.HtmlTreeBuilderState::::276::::11345::::11864::::if ((tb.getActiveFormattingElement("a")) != null) {    tb.error(this);    tb.processEndTag("a");    org.jsoup.nodes.Element remainingA = tb.getFromStack("a");    if (remainingA != null) {        tb.removeFromActiveFormattingElements(remainingA);        tb.removeFromStack(remainingA);    }}::::INSERT::::STATEMENT::::tb.process(startTag)	false
org.jsoup.parser.CharacterReader::::171::::4619::::4633::::(pos) < remaining::::pos) >= (length	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.BetweenDoctypePublicAndSystemIdentifiers	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.AfterDoctypeName	false
org.jsoup.parser.Parser::::156::::5909::::5911::::doc::::org.jsoup.parser.Parser.parse(bodyHtml, baseUri)	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.AttributeName	false
org.jsoup.parser.Token::::107::::3448::::3471::::hasPendingAttributeValue::::bogus	false
org.jsoup.parser.HtmlTreeBuilder::::390::::13850::::13853::::last::::baseUriSetFromDoc	false
org.jsoup.nodes.Element::::192::::5899::::5904::::parent::::new org.jsoup.select.Elements()	false
org.jsoup.parser.HtmlTreeBuilder::::87::::4577::::4579::::doc::::removeLastFormattingElement()	false
org.jsoup.parser.Tokeniser::::241::::8732::::8737::::errors::::this.errors	false
org.jsoup.parser.Token::::104::::3199::::3965::::if ((pendingAttributeName) != null) {    org.jsoup.nodes.Attribute attribute;    if (hasPendingAttributeValue)        attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, ((pendingAttributeValue.length()) > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS));    else        if (hasEmptyAttributeValue)            attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, "");        else            attribute = new org.jsoup.nodes.BooleanAttribute(pendingAttributeName);    attributes.put(attribute);}::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(pendingAttributeValue)	false
org.jsoup.parser.Token::::104::::3199::::3965::::if ((pendingAttributeName) != null) {    org.jsoup.nodes.Attribute attribute;    if (hasPendingAttributeValue)        attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, ((pendingAttributeValue.length()) > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS));    else        if (hasEmptyAttributeValue)            attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, "");        else            attribute = new org.jsoup.nodes.BooleanAttribute(pendingAttributeName);    attributes.put(attribute);}::::INSERT::::STATEMENT::::ensureAttributeValue()	false
org.jsoup.parser.Tokeniser::::75::::2872::::2920::::org.jsoup.parser.Token.StartTag startTag = ((org.jsoup.parser.Token.StartTag) (token))::::INSERT::::STATEMENT::::if (!(selfClosingFlagAcknowledged)) {    error("Self closing flag not acknowledged");    selfClosingFlagAcknowledged = true;}	false
org.jsoup.parser.HtmlTreeBuilder::::177::::7111::::7134::::startTag.isSelfClosing()::::INSERT::::STATEMENT::::if (el == null)    break;	false
org.jsoup.parser.HtmlTreeBuilder::::72::::3729::::3735::::context::::doc	false
org.jsoup.parser.Parser::::115::::3792::::3802::::treeBuilder::::this.treeBuilder	false
org.jsoup.parser.HtmlTreeBuilder::::69::::3595::::3597::::doc::::removeLastFormattingElement()	false
org.jsoup.nodes.Document::::560::::18948::::18959::::return this::::INSERT::::STATEMENT::::normaliseTextNodes(this)	false
org.jsoup.parser.HtmlTreeBuilder::::403::::14388::::15625::::if ((("tbody".equals(name)) || ("thead".equals(name))) || ("tfoot".equals(name))) {    transition(org.jsoup.parser.HtmlTreeBuilderState.InTableBody);    break;}else    if ("caption".equals(name)) {        transition(org.jsoup.parser.HtmlTreeBuilderState.InCaption);        break;    }else        if ("colgroup".equals(name)) {            transition(org.jsoup.parser.HtmlTreeBuilderState.InColumnGroup);            break;        }else            if ("table".equals(name)) {                transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                break;            }else                if ("head".equals(name)) {                    transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                    break;                }else                    if ("body".equals(name)) {                        transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                        break;                    }else                        if ("frameset".equals(name)) {                            transition(org.jsoup.parser.HtmlTreeBuilderState.InFrameset);                            break;                        }else                            if ("html".equals(name)) {                                transition(org.jsoup.parser.HtmlTreeBuilderState.BeforeHead);                                break;                            }else                                if (last) {                                    transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                                    break;                                }::::INSERT::::STATEMENT::::if (pos == 0) {    last = true;    node = contextElement;}	false
org.jsoup.parser.HtmlTreeBuilderState::::287::::11890::::11924::::tb.reconstructFormattingElements()::::INSERT::::STATEMENT::::if (lastNode == furthestBlock) {}	false
org.jsoup.parser.Tokeniser::::241::::8728::::8880::::if (errors.canAddError())    errors.add(new org.jsoup.parser.ParseError(reader.pos(), "Unexpected character '%s' in input state [%s]", reader.current(), state));::::INSERT::::STATEMENT::::if (!(selfClosingFlagAcknowledged)) {    error("Self closing flag not acknowledged");    selfClosingFlagAcknowledged = true;}	false
org.jsoup.parser.HtmlTreeBuilder::::397::::14157::::14160::::last::::fragmentParsing	false
org.jsoup.parser.HtmlTreeBuilder::::598::::21194::::21232::::org.jsoup.nodes.Element last = lastFormattingElement()::::INSERT::::STATEMENT::::if (pos == (size - 1))    break;	false
org.jsoup.parser.HtmlTreeBuilder::::397::::14156::::14160::::!last::::DELETE::::INFIX	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.BeforeAttributeName	false
org.jsoup.nodes.Attributes::::97::::2853::::2880::::org.jsoup.helper.Validate.notNull(attribute)::::INSERT::::STATEMENT::::if ((attributes) == null)    return ;	false
org.jsoup.nodes.Attributes::::97::::2853::::2880::::org.jsoup.helper.Validate.notNull(attribute)::::INSERT::::STATEMENT::::if ((attributes) == null)    return "";	false
org.jsoup.nodes.Attributes::::180::::5305::::5342::::return attributes.values().iterator()::::INSERT::::STATEMENT::::if ((attributes) == null)    attributes = new java.util.LinkedHashMap<java.lang.String, org.jsoup.nodes.Attribute>(2);	false
org.jsoup.parser.HtmlTreeBuilder::::62::::3327::::3384::::initialiseParse(inputFragment, baseUri, errors, settings)::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.AfterDoctypeSystemKeyword	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.AfterDoctypePublicKeyword	false
org.jsoup.parser.Token::::125::::4279::::4306::::(pendingAttributeName) != null::::(pendingAttributeName) == null	false
org.jsoup.parser.TokeniserState::::596::::19822::::19825::::name::::org.jsoup.parser.TokeniserState.replacementStr	false
org.jsoup.nodes.Element::::191::::5838::::5866::::org.jsoup.nodes.Element parent = el.parent()::::INSERT::::STATEMENT::::if (el.hasText())    return true;	false
org.jsoup.parser.CharacterReader::::172::::4685::::4687::::pos::::(pos) - start	false
org.jsoup.parser.HtmlTreeBuilder::::598::::21194::::21232::::org.jsoup.nodes.Element last = lastFormattingElement()::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.HtmlTreeBuilder::::72::::3729::::3735::::context::::lastFormattingElement()	false
org.jsoup.nodes.Attributes::::100::::2989::::3034::::attributes.put(attribute.getKey(), attribute)::::INSERT::::STATEMENT::::if ((attributes) == null)    return ;	false
org.jsoup.nodes.Attributes::::100::::2989::::3034::::attributes.put(attribute.getKey(), attribute)::::INSERT::::STATEMENT::::if ((attributes) == null)    return "";	false
org.jsoup.parser.CharacterReader::::167::::4526::::4528::::pos::::(pos) - start	false
org.jsoup.parser.TokeniserState::::552::::18267::::19574::::switch (c) {    case '\t' :    case '\n' :    case '\r' :    case '\f' :    case ' ' :        break;    case '/' :        t.transition(org.jsoup.parser.TokeniserState.SelfClosingStartTag);        break;    case '>' :        t.emitTagPending();        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case org.jsoup.parser.TokeniserState.nullChar :        t.error(this);        t.tagPending.newAttribute();        r.unconsume();        t.transition(org.jsoup.parser.TokeniserState.AttributeName);        break;    case org.jsoup.parser.TokeniserState.eof :        t.eofError(this);        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case '"' :    case '\'' :    case '<' :    case '=' :        t.error(this);        t.tagPending.newAttribute();        t.tagPending.appendAttributeName(c);        t.transition(org.jsoup.parser.TokeniserState.AttributeName);        break;    default :        t.tagPending.newAttribute();        r.unconsume();        t.transition(org.jsoup.parser.TokeniserState.AttributeName);}::::INSERT::::STATEMENT::::anythingElse(t, r)	false
org.jsoup.parser.HtmlTreeBuilder::::68::::3529::::3535::::context::::lastFormattingElement()	false
org.jsoup.parser.Token::::107::::3444::::3904::::if (hasPendingAttributeValue)    attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, ((pendingAttributeValue.length()) > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS));else    if (hasEmptyAttributeValue)        attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, "");    else        attribute = new org.jsoup.nodes.BooleanAttribute(pendingAttributeName);::::INSERT::::STATEMENT::::if (hasEmptyAttributeValue)    attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, "");else    attribute = new org.jsoup.nodes.BooleanAttribute(pendingAttributeName);	false
org.jsoup.parser.CharacterReader::::177::::4798::::4800::::pos::::(pos) - start	false
org.jsoup.parser.HtmlTreeBuilderState::::276::::11345::::11864::::if ((tb.getActiveFormattingElement("a")) != null) {    tb.error(this);    tb.processEndTag("a");    org.jsoup.nodes.Element remainingA = tb.getFromStack("a");    if (remainingA != null) {        tb.removeFromActiveFormattingElements(remainingA);        tb.removeFromStack(remainingA);    }}::::INSERT::::STATEMENT::::closeCell(tb)	false
org.jsoup.parser.Token::::120::::4152::::4173::::pendingAttributeValueS::::this.tagName	false
org.jsoup.parser.HtmlTreeBuilder::::79::::4168::::4198::::contextTag.equals("noscript")::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.Tokeniser::::79::::3073::::3292::::if ((token.type) == (org.jsoup.parser.Token.TokenType.EndTag)) {    org.jsoup.parser.Token.EndTag endTag = ((org.jsoup.parser.Token.EndTag) (token));    if ((endTag.attributes) != null)        error("Attributes incorrectly present on end tag");}::::INSERT::::STATEMENT::::characterReferenceError("missing semicolon")	false
org.jsoup.parser.Tokeniser::::206::::7999::::8023::::tagPending.finaliseTag()::::INSERT::::STATEMENT::::if (!(selfClosingFlagAcknowledged)) {    error("Self closing flag not acknowledged");    selfClosingFlagAcknowledged = true;}	false
org.jsoup.parser.HtmlTreeBuilder::::65::::3460::::3479::::org.jsoup.nodes.Element root = null::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.Token::::107::::3444::::3904::::if (hasPendingAttributeValue)    attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, ((pendingAttributeValue.length()) > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS));else    if (hasEmptyAttributeValue)        attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, "");    else        attribute = new org.jsoup.nodes.BooleanAttribute(pendingAttributeName);::::INSERT::::STATEMENT::::if ((attributes) == null)    attributes = new org.jsoup.nodes.Attributes();	false
org.jsoup.parser.CharacterReader::::174::::4732::::4734::::pos::::(pos) - start	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.AfterDoctypePublicKeyword	false
org.jsoup.parser.HtmlTreeBuilder::::598::::21209::::21229::::lastFormattingElement::::isFosterInserts	false
org.jsoup.parser.HtmlTreeBuilder::::400::::14265::::15625::::if ("tr".equals(name)) {    transition(org.jsoup.parser.HtmlTreeBuilderState.InRow);    break;}else    if ((("tbody".equals(name)) || ("thead".equals(name))) || ("tfoot".equals(name))) {        transition(org.jsoup.parser.HtmlTreeBuilderState.InTableBody);        break;    }else        if ("caption".equals(name)) {            transition(org.jsoup.parser.HtmlTreeBuilderState.InCaption);            break;        }else            if ("colgroup".equals(name)) {                transition(org.jsoup.parser.HtmlTreeBuilderState.InColumnGroup);                break;            }else                if ("table".equals(name)) {                    transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                    break;                }else                    if ("head".equals(name)) {                        transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                        break;                    }else                        if ("body".equals(name)) {                            transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                            break;                        }else                            if ("frameset".equals(name)) {                                transition(org.jsoup.parser.HtmlTreeBuilderState.InFrameset);                                break;                            }else                                if ("html".equals(name)) {                                    transition(org.jsoup.parser.HtmlTreeBuilderState.BeforeHead);                                    break;                                }else                                    if (last) {                                        transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                                        break;                                    }::::INSERT::::STATEMENT::::if (pos == 0) {    last = true;    node = contextElement;}	false
org.jsoup.parser.Token::::120::::4152::::4173::::pendingAttributeValueS::::pubSysKey	false
org.jsoup.parser.HtmlTreeBuilder::::69::::3610::::3616::::context::::lastFormattingElement()	false
org.jsoup.nodes.Attributes::::97::::2853::::2880::::org.jsoup.helper.Validate.notNull(attribute)::::INSERT::::STATEMENT::::if ((attributes) == null)    attributes = new java.util.LinkedHashMap<java.lang.String, org.jsoup.nodes.Attribute>(2);	false
org.jsoup.parser.HtmlTreeBuilder::::88::::4612::::4627::::stack.add(root)::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.Tokeniser::::241::::8732::::8751::::errors.canAddError()::::INSERT::::STATEMENT::::error("Attributes incorrectly present on end tag")	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.ScriptDataDoubleEscapedDash	false
org.jsoup.parser.Token::::110::::3696::::3904::::if (hasEmptyAttributeValue)    attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, "");else    attribute = new org.jsoup.nodes.BooleanAttribute(pendingAttributeName);::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(systemIdentifier)	false
org.jsoup.parser.Token::::110::::3696::::3904::::if (hasEmptyAttributeValue)    attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, "");else    attribute = new org.jsoup.nodes.BooleanAttribute(pendingAttributeName);::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(publicIdentifier)	false
org.jsoup.parser.Token::::110::::3696::::3904::::if (hasEmptyAttributeValue)    attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, "");else    attribute = new org.jsoup.nodes.BooleanAttribute(pendingAttributeName);::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(name)	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.ScriptDataEscapedEndTagName	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.ScriptDataDoubleEscapeStart	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.RCDATAEndTagName	false
org.jsoup.parser.CharacterReader::::177::::4765::::4767::::pos::::(pos) - start	false
org.jsoup.parser.HtmlTreeBuilder::::79::::4168::::4198::::contextTag.equals("noscript")::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.Token::::120::::4152::::4173::::pendingAttributeValueS::::data	false
org.jsoup.parser.Parser::::115::::3879::::3889::::treeBuilder::::this.treeBuilder	false
org.jsoup.nodes.Attributes::::100::::2989::::3034::::attributes.put(attribute.getKey(), attribute)::::INSERT::::STATEMENT::::if ((attributes) == null)    return false;	false
org.jsoup.parser.Token::::116::::3979::::4006::::pendingAttributeName = null::::INSERT::::STATEMENT::::if ((attributes) == null)    attributes = new org.jsoup.nodes.Attributes();	false
org.jsoup.nodes.Attributes::::98::::2894::::2911::::(attributes) == null::::(attributes) != null	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.ScriptDataDoubleEscapedDashDash	false
org.jsoup.parser.HtmlTreeBuilder::::599::::21242::::21295::::if ((last == null) || (onStack(last)))    return ;::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.HtmlTreeBuilderState::::287::::11890::::11924::::tb.reconstructFormattingElements()::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.HtmlTreeBuilder::::397::::14157::::14160::::last::::baseUriSetFromDoc	false
org.jsoup.parser.HtmlTreeBuilder::::88::::4612::::4627::::stack.add(root)::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.Token::::113::::3850::::3904::::attribute = new org.jsoup.nodes.BooleanAttribute(pendingAttributeName)::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(systemIdentifier)	false
org.jsoup.parser.Token::::113::::3850::::3904::::attribute = new org.jsoup.nodes.BooleanAttribute(pendingAttributeName)::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(publicIdentifier)	false
org.jsoup.parser.Token::::113::::3850::::3904::::attribute = new org.jsoup.nodes.BooleanAttribute(pendingAttributeName)::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(name)	false
org.jsoup.parser.Token::::113::::3850::::3904::::attribute = new org.jsoup.nodes.BooleanAttribute(pendingAttributeName)::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(data)	false
org.jsoup.parser.Token::::113::::3850::::3904::::attribute = new org.jsoup.nodes.BooleanAttribute(pendingAttributeName)::::INSERT::::STATEMENT::::ensureAttributeValue()	false
org.jsoup.parser.TokeniserState::::873::::29350::::29842::::switch (c) {    case '>' :        t.tagPending.selfClosing = true;        t.emitTagPending();        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case org.jsoup.parser.TokeniserState.eof :        t.eofError(this);        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    default :        t.error(this);        r.unconsume();        t.transition(org.jsoup.parser.TokeniserState.BeforeAttributeName);}::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.readData(t, r, this, org.jsoup.parser.TokeniserState.ScriptDataLessthanSign)	false
org.jsoup.parser.TokeniserState::::873::::29350::::29842::::switch (c) {    case '>' :        t.tagPending.selfClosing = true;        t.emitTagPending();        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case org.jsoup.parser.TokeniserState.eof :        t.eofError(this);        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    default :        t.error(this);        r.unconsume();        t.transition(org.jsoup.parser.TokeniserState.BeforeAttributeName);}::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.readData(t, r, this, org.jsoup.parser.TokeniserState.RawtextLessthanSign)	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.ScriptDataEscapedDash	false
org.jsoup.nodes.Attributes::::100::::2989::::3034::::attributes.put(attribute.getKey(), attribute)::::INSERT::::STATEMENT::::if ((attributes) == null)    return new org.jsoup.nodes.Attributes();	false
org.jsoup.parser.CharacterReader::::172::::4654::::4689::::java.util.Arrays.binarySearch(chars, val[pos])::::DELETE::::INFIX	false
org.jsoup.nodes.Document::::41::::1216::::1222::::baseUri::::this.location	false
org.jsoup.parser.Token::::101::::3115::::3184::::if ((attributes) == null)    attributes = new org.jsoup.nodes.Attributes();::::INSERT::::STATEMENT::::ensureAttributeValue()	false
org.jsoup.parser.HtmlTreeBuilder::::87::::4577::::4598::::doc.appendChild(root)::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.HtmlTreeBuilder::::397::::14109::::15625::::if (("td".equals(name)) || (("th".equals(name)) && (!last))) {    transition(org.jsoup.parser.HtmlTreeBuilderState.InCell);    break;}else    if ("tr".equals(name)) {        transition(org.jsoup.parser.HtmlTreeBuilderState.InRow);        break;    }else        if ((("tbody".equals(name)) || ("thead".equals(name))) || ("tfoot".equals(name))) {            transition(org.jsoup.parser.HtmlTreeBuilderState.InTableBody);            break;        }else            if ("caption".equals(name)) {                transition(org.jsoup.parser.HtmlTreeBuilderState.InCaption);                break;            }else                if ("colgroup".equals(name)) {                    transition(org.jsoup.parser.HtmlTreeBuilderState.InColumnGroup);                    break;                }else                    if ("table".equals(name)) {                        transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                        break;                    }else                        if ("head".equals(name)) {                            transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                            break;                        }else                            if ("body".equals(name)) {                                transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                                break;                            }else                                if ("frameset".equals(name)) {                                    transition(org.jsoup.parser.HtmlTreeBuilderState.InFrameset);                                    break;                                }else                                    if ("html".equals(name)) {                                        transition(org.jsoup.parser.HtmlTreeBuilderState.BeforeHead);                                        break;                                    }else                                        if (last) {                                            transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                                            break;                                        }::::INSERT::::STATEMENT::::if (pos == 0) {    last = true;    node = contextElement;}	false
org.jsoup.parser.Token::::107::::3448::::3471::::hasPendingAttributeValue::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(pendingAttributeValue)	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.TagOpen	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.RcdataLessthanSign	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.CommentEnd	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.CharacterReferenceInRcdata	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.CharacterReferenceInData	false
org.jsoup.parser.Token::::137::::4791::::4800::::normalName::::this.data	false
org.jsoup.parser.Token::::117::::4020::::4050::::hasEmptyAttributeValue = false::::INSERT::::STATEMENT::::if ((attributes) == null)    attributes = new org.jsoup.nodes.Attributes();	false
org.jsoup.parser.Token::::119::::4110::::4138::::org.jsoup.parser.Token.reset(pendingAttributeValue)::::INSERT::::STATEMENT::::if ((attributes) == null)    attributes = new org.jsoup.nodes.Attributes();	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.ScriptDataEscaped	false
org.jsoup.parser.HtmlTreeBuilder::::77::::4053::::4079::::contextTag.equals("script")::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.Token::::114::::3926::::3951::::attributes.put(attribute)::::INSERT::::STATEMENT::::ensureAttributeValue()	false
org.jsoup.parser.HtmlTreeBuilder::::81::::4314::::4323::::contextTag::::"plaintext"	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.MarkupDeclarationOpen	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.EndTagOpen	false
org.jsoup.parser.HtmlTreeBuilder::::81::::4310::::4479::::if (contextTag.equals("plaintext"))    tokeniser.transition(org.jsoup.parser.TokeniserState.Data);else    tokeniser.transition(org.jsoup.parser.TokeniserState.Data);::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.HtmlTreeBuilder::::79::::4168::::4177::::contextTag::::"plaintext"	false
org.jsoup.parser.Token::::118::::4064::::4096::::hasPendingAttributeValue = false::::INSERT::::STATEMENT::::if ((attributes) == null)    attributes = new org.jsoup.nodes.Attributes();	false
org.jsoup.parser.Token::::107::::3444::::3904::::if (hasPendingAttributeValue)    attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, ((pendingAttributeValue.length()) > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS));else    if (hasEmptyAttributeValue)        attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, "");    else        attribute = new org.jsoup.nodes.BooleanAttribute(pendingAttributeName);::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(pendingAttributeValue)	false
org.jsoup.parser.Token::::107::::3444::::3904::::if (hasPendingAttributeValue)    attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, ((pendingAttributeValue.length()) > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS));else    if (hasEmptyAttributeValue)        attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, "");    else        attribute = new org.jsoup.nodes.BooleanAttribute(pendingAttributeName);::::INSERT::::STATEMENT::::ensureAttributeValue()	false
org.jsoup.parser.HtmlTreeBuilder::::87::::4577::::4598::::doc.appendChild(root)::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.ScriptDataDoubleEscapeEnd	false
org.jsoup.parser.HtmlTreeBuilderState::::276::::11349::::11390::::(tb.getActiveFormattingElement("a")) != null::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InTable)	false
org.jsoup.parser.Token::::118::::4064::::4096::::hasPendingAttributeValue = false::::hasPendingAttributeValue = true	false
org.jsoup.parser.HtmlTreeBuilder::::403::::14440::::14459::::"tfoot".equals(name)::::DELETE::::INFIX	false
org.jsoup.parser.HtmlTreeBuilder::::403::::14416::::14435::::"thead".equals(name)::::DELETE::::INFIX	false
org.jsoup.parser.HtmlTreeBuilder::::403::::14392::::14411::::"tbody".equals(name)::::DELETE::::INFIX	false
org.jsoup.parser.HtmlTreeBuilder::::397::::14135::::14151::::"th".equals(name)::::DELETE::::INFIX	false
org.jsoup.parser.HtmlTreeBuilder::::397::::14114::::14130::::"td".equals(name)::::DELETE::::INFIX	false
org.jsoup.parser.HtmlTreeBuilder::::77::::4053::::4079::::contextTag.equals("script")::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.HtmlTreeBuilder::::77::::4053::::4062::::contextTag::::"plaintext"	false
org.jsoup.parser.HtmlTreeBuilder::::81::::4314::::4323::::contextTag::::parent	false
org.jsoup.parser.Tokeniser::::241::::8732::::8751::::errors.canAddError()::::INSERT::::STATEMENT::::characterReferenceError("numeric reference with no numerals")	false
org.jsoup.nodes.Document::::43::::1263::::1269::::baseUri::::this.location	false
org.jsoup.parser.HtmlTreeBuilder::::88::::4612::::4616::::stack::::contextChain	false
org.jsoup.nodes.Attributes::::98::::2890::::2979::::if ((attributes) == null)    attributes = new java.util.LinkedHashMap<java.lang.String, org.jsoup.nodes.Attribute>(2);::::INSERT::::STATEMENT::::if ((attributes) == null)    return "";	false
org.jsoup.parser.HtmlTreeBuilder::::599::::21262::::21274::::onStack(last)::::DELETE::::INFIX	false
org.jsoup.parser.HtmlTreeBuilder::::79::::4168::::4177::::contextTag::::parent	false
org.jsoup.nodes.Element::::192::::5899::::5904::::parent::::children()	false
org.jsoup.parser.HtmlTreeBuilder::::598::::21194::::21232::::org.jsoup.nodes.Element last = lastFormattingElement()::::INSERT::::STATEMENT::::if (pos == 0) {    skip = true;    break;}	false
org.jsoup.parser.HtmlTreeBuilder::::598::::21194::::21232::::org.jsoup.nodes.Element last = lastFormattingElement()::::INSERT::::STATEMENT::::if ((entry == null) || (onStack(entry)))    break;	false
org.jsoup.parser.CharacterReader::::172::::4681::::4683::::val::::this.input	false
org.jsoup.parser.HtmlTreeBuilder::::86::::4505::::4563::::root = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("html", settings), baseUri)::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.Tokeniser::::79::::3073::::3292::::if ((token.type) == (org.jsoup.parser.Token.TokenType.EndTag)) {    org.jsoup.parser.Token.EndTag endTag = ((org.jsoup.parser.Token.EndTag) (token));    if ((endTag.attributes) != null)        error("Attributes incorrectly present on end tag");}::::INSERT::::STATEMENT::::if (startTag.selfClosing)    selfClosingFlagAcknowledged = false;	false
org.jsoup.parser.Tokeniser::::79::::3073::::3292::::if ((token.type) == (org.jsoup.parser.Token.TokenType.EndTag)) {    org.jsoup.parser.Token.EndTag endTag = ((org.jsoup.parser.Token.EndTag) (token));    if ((endTag.attributes) != null)        error("Attributes incorrectly present on end tag");}::::INSERT::::STATEMENT::::if (!(selfClosingFlagAcknowledged)) {    error("Self closing flag not acknowledged");    selfClosingFlagAcknowledged = true;}	false
org.jsoup.parser.HtmlTreeBuilder::::93::::4854::::4860::::context::::lastFormattingElement()	false
org.jsoup.parser.Token::::166::::5676::::5681::::append::::this.data	false
org.jsoup.nodes.Attributes::::98::::2890::::2979::::if ((attributes) == null)    attributes = new java.util.LinkedHashMap<java.lang.String, org.jsoup.nodes.Attribute>(2);::::INSERT::::STATEMENT::::if ((attributes) == null)    return ;	false
org.jsoup.parser.HtmlTreeBuilder::::419::::15150::::15189::::transition(org.jsoup.parser.HtmlTreeBuilderState.InBody)::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.HtmlTreeBuilder::::77::::4053::::4062::::contextTag::::parent	false
org.jsoup.parser.CharacterReader::::171::::4619::::4621::::pos::::(pos) - start	false
org.jsoup.parser.HtmlTreeBuilder::::177::::7111::::7134::::startTag.isSelfClosing()::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.HtmlTreeBuilder::::600::::21289::::21295::::return ::::INSERT::::STATEMENT::::if (pos == 0) {    skip = true;    break;}	false
org.jsoup.parser.HtmlTreeBuilder::::600::::21289::::21295::::return ::::INSERT::::STATEMENT::::if (pos == (size - 1))    break;	false
org.jsoup.parser.HtmlTreeBuilder::::600::::21289::::21295::::return ::::INSERT::::STATEMENT::::if ((entry == null) || (onStack(entry)))    break;	false
org.jsoup.parser.Token::::114::::3926::::3951::::attributes.put(attribute)::::INSERT::::STATEMENT::::if ((pendingAttributeName) != null) {    newAttribute();}	false
org.jsoup.parser.HtmlTreeBuilderState::::276::::11345::::11864::::if ((tb.getActiveFormattingElement("a")) != null) {    tb.error(this);    tb.processEndTag("a");    org.jsoup.nodes.Element remainingA = tb.getFromStack("a");    if (remainingA != null) {        tb.removeFromActiveFormattingElements(remainingA);        tb.removeFromStack(remainingA);    }}::::INSERT::::STATEMENT::::if (notIgnored)    return tb.process(endTag);	false
org.jsoup.parser.TokeniserState::::873::::29350::::29842::::switch (c) {    case '>' :        t.tagPending.selfClosing = true;        t.emitTagPending();        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case org.jsoup.parser.TokeniserState.eof :        t.eofError(this);        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    default :        t.error(this);        r.unconsume();        t.transition(org.jsoup.parser.TokeniserState.BeforeAttributeName);}::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.readEndTag(t, r, org.jsoup.parser.TokeniserState.ScriptDataEndTagName, org.jsoup.parser.TokeniserState.ScriptData)	false
org.jsoup.parser.TokeniserState::::873::::29350::::29842::::switch (c) {    case '>' :        t.tagPending.selfClosing = true;        t.emitTagPending();        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case org.jsoup.parser.TokeniserState.eof :        t.eofError(this);        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    default :        t.error(this);        r.unconsume();        t.transition(org.jsoup.parser.TokeniserState.BeforeAttributeName);}::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.readEndTag(t, r, org.jsoup.parser.TokeniserState.RawtextEndTagName, org.jsoup.parser.TokeniserState.Rawtext)	false
org.jsoup.parser.TokeniserState::::873::::29350::::29842::::switch (c) {    case '>' :        t.tagPending.selfClosing = true;        t.emitTagPending();        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case org.jsoup.parser.TokeniserState.eof :        t.eofError(this);        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    default :        t.error(this);        r.unconsume();        t.transition(org.jsoup.parser.TokeniserState.BeforeAttributeName);}::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.readCharRef(t, org.jsoup.parser.TokeniserState.Rcdata)	false
org.jsoup.parser.TokeniserState::::873::::29350::::29842::::switch (c) {    case '>' :        t.tagPending.selfClosing = true;        t.emitTagPending();        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case org.jsoup.parser.TokeniserState.eof :        t.eofError(this);        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    default :        t.error(this);        r.unconsume();        t.transition(org.jsoup.parser.TokeniserState.BeforeAttributeName);}::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.readCharRef(t, org.jsoup.parser.TokeniserState.Data)	false
org.jsoup.parser.TokeniserState::::873::::29350::::29842::::switch (c) {    case '>' :        t.tagPending.selfClosing = true;        t.emitTagPending();        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case org.jsoup.parser.TokeniserState.eof :        t.eofError(this);        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    default :        t.error(this);        r.unconsume();        t.transition(org.jsoup.parser.TokeniserState.BeforeAttributeName);}::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataEndTag(t, r, org.jsoup.parser.TokeniserState.ScriptDataEscaped)	false
org.jsoup.parser.TokeniserState::::873::::29350::::29842::::switch (c) {    case '>' :        t.tagPending.selfClosing = true;        t.emitTagPending();        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case org.jsoup.parser.TokeniserState.eof :        t.eofError(this);        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    default :        t.error(this);        r.unconsume();        t.transition(org.jsoup.parser.TokeniserState.BeforeAttributeName);}::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataEndTag(t, r, org.jsoup.parser.TokeniserState.ScriptData)	false
org.jsoup.parser.TokeniserState::::873::::29350::::29842::::switch (c) {    case '>' :        t.tagPending.selfClosing = true;        t.emitTagPending();        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case org.jsoup.parser.TokeniserState.eof :        t.eofError(this);        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    default :        t.error(this);        r.unconsume();        t.transition(org.jsoup.parser.TokeniserState.BeforeAttributeName);}::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataEndTag(t, r, org.jsoup.parser.TokeniserState.Rawtext)	false
org.jsoup.parser.TokeniserState::::873::::29350::::29842::::switch (c) {    case '>' :        t.tagPending.selfClosing = true;        t.emitTagPending();        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case org.jsoup.parser.TokeniserState.eof :        t.eofError(this);        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    default :        t.error(this);        r.unconsume();        t.transition(org.jsoup.parser.TokeniserState.BeforeAttributeName);}::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataDoubleEscapeTag(t, r, org.jsoup.parser.TokeniserState.ScriptDataEscaped, org.jsoup.parser.TokeniserState.ScriptDataDoubleEscaped)	false
org.jsoup.parser.TokeniserState::::873::::29350::::29842::::switch (c) {    case '>' :        t.tagPending.selfClosing = true;        t.emitTagPending();        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case org.jsoup.parser.TokeniserState.eof :        t.eofError(this);        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    default :        t.error(this);        r.unconsume();        t.transition(org.jsoup.parser.TokeniserState.BeforeAttributeName);}::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataDoubleEscapeTag(t, r, org.jsoup.parser.TokeniserState.ScriptDataDoubleEscaped, org.jsoup.parser.TokeniserState.ScriptDataEscaped)	false
org.jsoup.parser.HtmlTreeBuilder::::86::::4505::::4563::::root = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("html", settings), baseUri)::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.HtmlTreeBuilder::::94::::4885::::4913::::contextChain.add(0, context)::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.Tokeniser::::241::::8732::::8751::::errors.canAddError()::::INSERT::::STATEMENT::::emit(tagPending)	false
org.jsoup.parser.Token::::114::::3926::::3951::::attributes.put(attribute)::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(systemIdentifier)	false
org.jsoup.parser.Token::::114::::3926::::3951::::attributes.put(attribute)::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(publicIdentifier)	false
org.jsoup.parser.Token::::114::::3926::::3951::::attributes.put(attribute)::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(name)	false
org.jsoup.parser.Token::::114::::3926::::3951::::attributes.put(attribute)::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(data)	false
org.jsoup.parser.Token::::110::::3696::::3904::::if (hasEmptyAttributeValue)    attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, "");else    attribute = new org.jsoup.nodes.BooleanAttribute(pendingAttributeName);::::INSERT::::STATEMENT::::if ((pendingAttributeName) != null) {    newAttribute();}	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"html"	false
org.jsoup.parser.HtmlTreeBuilder::::93::::4830::::4871::::org.jsoup.select.Elements contextChain = context.parents()::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.HtmlTreeBuilder::::75::::3894::::3967::::org.jsoup.helper.StringUtil.in(contextTag, "iframe", "noembed", "noframes", "style", "xmp")::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.Token::::120::::4152::::4181::::pendingAttributeValueS = null::::INSERT::::STATEMENT::::if ((attributes) == null)    attributes = new org.jsoup.nodes.Attributes();	false
org.jsoup.parser.HtmlTreeBuilder::::63::::3394::::3418::::contextElement = context::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.Tokeniser::::79::::3073::::3292::::if ((token.type) == (org.jsoup.parser.Token.TokenType.EndTag)) {    org.jsoup.parser.Token.EndTag endTag = ((org.jsoup.parser.Token.EndTag) (token));    if ((endTag.attributes) != null)        error("Attributes incorrectly present on end tag");}::::INSERT::::STATEMENT::::error("Attributes incorrectly present on end tag")	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.Rawtext	false
org.jsoup.parser.HtmlTreeBuilder::::599::::21242::::21295::::if ((last == null) || (onStack(last)))    return ;::::INSERT::::STATEMENT::::if (pos == (size - 1))    break;	false
org.jsoup.parser.CharacterReader::::177::::4802::::4806::::start::::org.jsoup.parser.CharacterReader.maxCacheLen	false
org.jsoup.parser.HtmlTreeBuilderState::::287::::11890::::11924::::tb.reconstructFormattingElements()::::INSERT::::STATEMENT::::org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb)	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.ScriptDataEscapedEndTagOpen	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.ScriptDataDoubleEscaped	false
org.jsoup.parser.HtmlTreeBuilder::::665::::23665::::23676::::return null::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.Tokeniser::::241::::8732::::8751::::errors.canAddError()::::INSERT::::STATEMENT::::characterReferenceError("character outside of valid range")	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.ScriptDataEscapedEndTagOpen	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.ScriptDataDoubleEscapeEnd	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.CdataSection	false
org.jsoup.parser.HtmlTreeBuilder::::94::::4885::::4913::::contextChain.add(0, context)::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.HtmlTreeBuilder::::386::::13682::::13702::::boolean last = false::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.nodes.Attributes::::100::::2989::::3034::::attributes.put(attribute.getKey(), attribute)::::INSERT::::STATEMENT::::if ((attributes) == null)    return 0;	false
org.jsoup.parser.HtmlTreeBuilder::::75::::3894::::3967::::org.jsoup.helper.StringUtil.in(contextTag, "iframe", "noembed", "noframes", "style", "xmp")::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.AttributeValue_unquoted	false
org.jsoup.parser.HtmlTreeBuilder::::81::::4314::::4323::::contextTag::::removeLastFormattingElement()	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.ScriptDataEscapeStart	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.ScriptDataEndTagOpen	false
org.jsoup.parser.HtmlTreeBuilderState::::276::::11349::::11390::::(tb.getActiveFormattingElement("a")) != null::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InSelect)	false
org.jsoup.parser.HtmlTreeBuilder::::93::::4830::::4871::::org.jsoup.select.Elements contextChain = context.parents()::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.HtmlTreeBuilder::::81::::4310::::4479::::if (contextTag.equals("plaintext"))    tokeniser.transition(org.jsoup.parser.TokeniserState.Data);else    tokeniser.transition(org.jsoup.parser.TokeniserState.Data);::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.Token::::166::::5713::::5718::::append::::this.data	false
org.jsoup.parser.CharacterReader::::177::::4771::::4775::::start::::org.jsoup.parser.CharacterReader.maxCacheLen	false
org.jsoup.parser.Token::::110::::3700::::3721::::hasEmptyAttributeValue::::INSERT::::STATEMENT::::if (hasEmptyAttributeValue)    attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, "");else    attribute = new org.jsoup.nodes.BooleanAttribute(pendingAttributeName);	false
org.jsoup.parser.HtmlTreeBuilder::::73::::3764::::3809::::org.jsoup.helper.StringUtil.in(contextTag, "title", "textarea")::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.CharacterReader::::177::::4791::::4795::::start::::org.jsoup.parser.CharacterReader.maxCacheLen	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.ScriptDataEscapeStartDash	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.RawtextEndTagOpen	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.RCDATAEndTagOpen	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.CommentStart	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::furthestBlock	false
org.jsoup.parser.Token::::166::::5685::::5704::::pendingAttributeName::::name()	false
org.jsoup.parser.Token::::166::::5685::::5704::::pendingAttributeName::::">"	false
org.jsoup.parser.Token::::110::::3696::::3904::::if (hasEmptyAttributeValue)    attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, "");else    attribute = new org.jsoup.nodes.BooleanAttribute(pendingAttributeName);::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(data)	false
org.jsoup.parser.Tokeniser::::241::::8732::::8751::::errors.canAddError()::::INSERT::::STATEMENT::::error("Self closing flag not acknowledged")	false
org.jsoup.parser.HtmlTreeBuilder::::418::::15111::::15129::::"body".equals(name)::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.HtmlTreeBuilder::::79::::4168::::4177::::contextTag::::removeLastFormattingElement()	false
org.jsoup.parser.HtmlTreeBuilder::::559::::19892::::19989::::return (formattingElements.size()) > 0 ? formattingElements.get(((formattingElements.size()) - 1)) : null::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.HtmlTreeBuilder::::88::::4612::::4627::::stack.add(root)::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.Token::::166::::5685::::5704::::pendingAttributeName::::pendingAttributeValue.toString()	false
org.jsoup.parser.Tokeniser::::77::::2979::::3056::::if (startTag.selfClosing)    selfClosingFlagAcknowledged = false;::::INSERT::::STATEMENT::::error("Attributes incorrectly present on end tag")	false
org.jsoup.parser.TokeniserState::::595::::19715::::19775::::java.lang.String name = r.consumeToAnySorted(org.jsoup.parser.TokeniserState.attributeNameCharsSorted)::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.readData(t, r, this, org.jsoup.parser.TokeniserState.ScriptDataLessthanSign)	false
org.jsoup.parser.TokeniserState::::595::::19715::::19775::::java.lang.String name = r.consumeToAnySorted(org.jsoup.parser.TokeniserState.attributeNameCharsSorted)::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.readData(t, r, this, org.jsoup.parser.TokeniserState.RawtextLessthanSign)	false
org.jsoup.parser.CharacterReader::::168::::4561::::4566::::length::::(pos)++	false
org.jsoup.parser.HtmlTreeBuilder::::64::::3428::::3442::::fragmentParsing::::this.framesetOk	false
org.jsoup.parser.HtmlTreeBuilder::::64::::3428::::3442::::fragmentParsing::::this.fosterInserts	false
org.jsoup.parser.HtmlTreeBuilder::::69::::3595::::3597::::doc::::headElement	false
org.jsoup.parser.HtmlTreeBuilder::::77::::4053::::4062::::contextTag::::removeLastFormattingElement()	false
org.jsoup.parser.Token::::119::::4116::::4136::::pendingAttributeValue::::systemIdentifier	false
org.jsoup.parser.Token::::119::::4116::::4136::::pendingAttributeValue::::publicIdentifier	false
org.jsoup.parser.Token::::119::::4116::::4136::::pendingAttributeValue::::name	false
org.jsoup.parser.HtmlTreeBuilder::::87::::4577::::4579::::doc::::headElement	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::formatEl	false
org.jsoup.parser.HtmlTreeBuilder::::68::::3529::::3535::::context::::getFromStack("table")	false
org.jsoup.parser.HtmlTreeBuilder::::84::::4438::::4479::::tokeniser.transition(org.jsoup.parser.TokeniserState.Data)::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.HtmlTreeBuilder::::63::::3394::::3407::::contextElement::::parent	false
org.jsoup.parser.Token::::113::::3883::::3902::::pendingAttributeName::::data	false
org.jsoup.parser.Token::::101::::3115::::3184::::if ((attributes) == null)    attributes = new org.jsoup.nodes.Attributes();::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(data)	false
org.jsoup.parser.HtmlTreeBuilder::::418::::15111::::15129::::"body".equals(name)::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.CharacterReader::::177::::4798::::4806::::(pos) - start::::(pos)++	false
org.jsoup.parser.HtmlTreeBuilder::::73::::3764::::3809::::org.jsoup.helper.StringUtil.in(contextTag, "title", "textarea")::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.HtmlTreeBuilder::::72::::3729::::3735::::context::::getFromStack("table")	false
org.jsoup.parser.Token::::113::::3883::::3902::::pendingAttributeName::::this.tagName	false
org.jsoup.parser.HtmlTreeBuilder::::415::::14977::::14995::::"head".equals(name)::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.Token::::166::::5622::::5720::::pendingAttributeName = ((pendingAttributeName) == null) ? append : pendingAttributeName.concat(append)::::INSERT::::STATEMENT::::if ((pendingAttributeName) != null) {    newAttribute();}	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.TagName	false
org.jsoup.parser.HtmlTreeBuilder::::69::::3610::::3616::::context::::getFromStack("table")	false
org.jsoup.parser.Tokeniser::::77::::2979::::3056::::if (startTag.selfClosing)    selfClosingFlagAcknowledged = false;::::INSERT::::STATEMENT::::characterReferenceError("missing semicolon")	false
org.jsoup.parser.CharacterReader::::167::::4526::::4528::::pos::::remaining	false
org.jsoup.parser.HtmlTreeBuilder::::598::::21194::::21232::::org.jsoup.nodes.Element last = lastFormattingElement()::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.Token::::110::::3696::::3904::::if (hasEmptyAttributeValue)    attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, "");else    attribute = new org.jsoup.nodes.BooleanAttribute(pendingAttributeName);::::INSERT::::STATEMENT::::ensureAttributeValue()	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.ScriptDataEscapeStartDash	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.RawtextEndTagOpen	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.RCDATAEndTagOpen	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.Doctype	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.CommentStart	false
org.jsoup.parser.TokeniserState::::596::::19789::::19827::::t.tagPending.appendAttributeName(name)::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.readData(t, r, this, org.jsoup.parser.TokeniserState.ScriptDataLessthanSign)	false
org.jsoup.parser.TokeniserState::::596::::19789::::19827::::t.tagPending.appendAttributeName(name)::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.readData(t, r, this, org.jsoup.parser.TokeniserState.RawtextLessthanSign)	false
org.jsoup.parser.HtmlTreeBuilder::::84::::4438::::4479::::tokeniser.transition(org.jsoup.parser.TokeniserState.Data)::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.HtmlTreeBuilder::::69::::3595::::3647::::doc.quirksMode(context.ownerDocument().quirksMode())::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.nodes.Attributes::::97::::2853::::2880::::org.jsoup.helper.Validate.notNull(attribute)::::INSERT::::STATEMENT::::if ((attributes) == null)    return false;	false
org.jsoup.parser.HtmlTreeBuilder::::87::::4577::::4598::::doc.appendChild(root)::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.Tokeniser::::79::::3073::::3292::::if ((token.type) == (org.jsoup.parser.Token.TokenType.EndTag)) {    org.jsoup.parser.Token.EndTag endTag = ((org.jsoup.parser.Token.EndTag) (token));    if ((endTag.attributes) != null)        error("Attributes incorrectly present on end tag");}::::INSERT::::STATEMENT::::if ((lastStartTag) == null)    return null;	false
org.jsoup.parser.Tokeniser::::241::::8732::::8751::::errors.canAddError()::::INSERT::::STATEMENT::::if ((lastStartTag) == null)    return null;	false
org.jsoup.parser.Token::::113::::3883::::3902::::pendingAttributeName::::pubSysKey	false
org.jsoup.parser.CharacterReader::::177::::4798::::4800::::pos::::remaining	false
org.jsoup.parser.CharacterReader::::171::::4612::::4747::::while ((pos) < remaining) {    if ((java.util.Arrays.binarySearch(chars, val[pos])) >= 0)        break;    (pos)++;} ::::INSERT::::STATEMENT::::if (isEmpty())    return false;	false
org.jsoup.parser.Token::::166::::5685::::5704::::pendingAttributeName::::"<" + (name())	false
org.jsoup.parser.Token::::166::::5685::::5704::::pendingAttributeName::::"<"	false
org.jsoup.parser.Tokeniser::::241::::8732::::8751::::errors.canAddError()::::INSERT::::STATEMENT::::emit(doctypePending)	false
org.jsoup.parser.Tokeniser::::241::::8732::::8751::::errors.canAddError()::::INSERT::::STATEMENT::::emit(commentPending)	false
org.jsoup.parser.HtmlTreeBuilder::::658::::23374::::23655::::for (int pos = (formattingElements.size()) - 1; pos >= 0; pos--) {    org.jsoup.nodes.Element next = formattingElements.get(pos);    if (next == null)        break;    else        if (next.nodeName().equals(nodeName))            return next;}::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.HtmlTreeBuilder::::419::::15161::::15187::::org.jsoup.parser.HtmlTreeBuilderState.InBody::::this.state	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.CdataSection	false
org.jsoup.nodes.Attributes::::99::::2927::::2979::::attributes = new java.util.LinkedHashMap<java.lang.String, org.jsoup.nodes.Attribute>(2)::::INSERT::::STATEMENT::::if ((attributes) == null)    return new org.jsoup.nodes.Attributes();	false
org.jsoup.parser.HtmlTreeBuilder::::79::::4164::::4479::::if (contextTag.equals("noscript"))    tokeniser.transition(org.jsoup.parser.TokeniserState.Data);else    if (contextTag.equals("plaintext"))        tokeniser.transition(org.jsoup.parser.TokeniserState.Data);    else        tokeniser.transition(org.jsoup.parser.TokeniserState.Data);::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.ScriptData	false
org.jsoup.parser.HtmlTreeBuilder::::415::::14977::::14995::::"head".equals(name)::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.HtmlTreeBuilder::::79::::4168::::4198::::contextTag.equals("noscript")::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.DoctypeSystemIdentifier_singleQuoted	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.DoctypeSystemIdentifier_doubleQuoted	false
org.jsoup.nodes.Element::::192::::5876::::6024::::if ((parent != null) && (!(parent.tagName().equals("#root")))) {    parents.add(parent);    org.jsoup.nodes.Element.accumulateParents(parent, parents);}::::INSERT::::STATEMENT::::if (el.hasText())    return true;	false
org.jsoup.parser.HtmlTreeBuilder::::412::::14849::::14868::::"table".equals(name)::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.HtmlTreeBuilder::::81::::4314::::4343::::contextTag.equals("plaintext")::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.HtmlTreeBuilder::::185::::7537::::7661::::org.jsoup.nodes.Element el = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(startTag.name(), settings), baseUri, settings.normalizeAttributes(startTag.attributes))::::INSERT::::STATEMENT::::if (el == null)    break;	false
org.jsoup.parser.HtmlTreeBuilder::::599::::21242::::21295::::if ((last == null) || (onStack(last)))    return ;::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.HtmlTreeBuilder::::65::::3460::::3479::::org.jsoup.nodes.Element root = null::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.Token::::104::::3199::::3965::::if ((pendingAttributeName) != null) {    org.jsoup.nodes.Attribute attribute;    if (hasPendingAttributeValue)        attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, ((pendingAttributeValue.length()) > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS));    else        if (hasEmptyAttributeValue)            attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, "");        else            attribute = new org.jsoup.nodes.BooleanAttribute(pendingAttributeName);    attributes.put(attribute);}::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(systemIdentifier)	false
org.jsoup.parser.Token::::104::::3199::::3965::::if ((pendingAttributeName) != null) {    org.jsoup.nodes.Attribute attribute;    if (hasPendingAttributeValue)        attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, ((pendingAttributeValue.length()) > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS));    else        if (hasEmptyAttributeValue)            attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, "");        else            attribute = new org.jsoup.nodes.BooleanAttribute(pendingAttributeName);    attributes.put(attribute);}::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(publicIdentifier)	false
org.jsoup.parser.Token::::104::::3199::::3965::::if ((pendingAttributeName) != null) {    org.jsoup.nodes.Attribute attribute;    if (hasPendingAttributeValue)        attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, ((pendingAttributeValue.length()) > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS));    else        if (hasEmptyAttributeValue)            attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, "");        else            attribute = new org.jsoup.nodes.BooleanAttribute(pendingAttributeName);    attributes.put(attribute);}::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(name)	false
org.jsoup.parser.Token::::104::::3199::::3965::::if ((pendingAttributeName) != null) {    org.jsoup.nodes.Attribute attribute;    if (hasPendingAttributeValue)        attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, ((pendingAttributeValue.length()) > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS));    else        if (hasEmptyAttributeValue)            attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, "");        else            attribute = new org.jsoup.nodes.BooleanAttribute(pendingAttributeName);    attributes.put(attribute);}::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(data)	false
org.jsoup.parser.HtmlTreeBuilder::::77::::4053::::4079::::contextTag.equals("script")::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.HtmlTreeBuilder::::93::::4854::::4860::::context::::getFromStack("table")	false
org.jsoup.parser.HtmlTreeBuilder::::81::::4314::::4323::::contextTag::::"Unexpected token [%s] when in state [%s]"	false
org.jsoup.parser.HtmlTreeBuilder::::68::::3529::::3551::::context.ownerDocument()::::DELETE::::INFIX	false
org.jsoup.parser.CharacterReader::::168::::4561::::4566::::length::::org.jsoup.parser.CharacterReader.maxCacheLen	false
org.jsoup.parser.TokeniserState::::595::::19715::::19775::::java.lang.String name = r.consumeToAnySorted(org.jsoup.parser.TokeniserState.attributeNameCharsSorted)::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.readEndTag(t, r, org.jsoup.parser.TokeniserState.ScriptDataEndTagName, org.jsoup.parser.TokeniserState.ScriptData)	false
org.jsoup.parser.TokeniserState::::595::::19715::::19775::::java.lang.String name = r.consumeToAnySorted(org.jsoup.parser.TokeniserState.attributeNameCharsSorted)::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.readEndTag(t, r, org.jsoup.parser.TokeniserState.RawtextEndTagName, org.jsoup.parser.TokeniserState.Rawtext)	false
org.jsoup.parser.TokeniserState::::595::::19715::::19775::::java.lang.String name = r.consumeToAnySorted(org.jsoup.parser.TokeniserState.attributeNameCharsSorted)::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.readCharRef(t, org.jsoup.parser.TokeniserState.Rcdata)	false
org.jsoup.parser.TokeniserState::::595::::19715::::19775::::java.lang.String name = r.consumeToAnySorted(org.jsoup.parser.TokeniserState.attributeNameCharsSorted)::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.readCharRef(t, org.jsoup.parser.TokeniserState.Data)	false
org.jsoup.parser.TokeniserState::::595::::19715::::19775::::java.lang.String name = r.consumeToAnySorted(org.jsoup.parser.TokeniserState.attributeNameCharsSorted)::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataEndTag(t, r, org.jsoup.parser.TokeniserState.ScriptDataEscaped)	false
org.jsoup.parser.TokeniserState::::595::::19715::::19775::::java.lang.String name = r.consumeToAnySorted(org.jsoup.parser.TokeniserState.attributeNameCharsSorted)::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataEndTag(t, r, org.jsoup.parser.TokeniserState.ScriptData)	false
org.jsoup.parser.TokeniserState::::595::::19715::::19775::::java.lang.String name = r.consumeToAnySorted(org.jsoup.parser.TokeniserState.attributeNameCharsSorted)::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataEndTag(t, r, org.jsoup.parser.TokeniserState.Rawtext)	false
org.jsoup.parser.TokeniserState::::595::::19715::::19775::::java.lang.String name = r.consumeToAnySorted(org.jsoup.parser.TokeniserState.attributeNameCharsSorted)::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataDoubleEscapeTag(t, r, org.jsoup.parser.TokeniserState.ScriptDataEscaped, org.jsoup.parser.TokeniserState.ScriptDataDoubleEscaped)	false
org.jsoup.parser.TokeniserState::::595::::19715::::19775::::java.lang.String name = r.consumeToAnySorted(org.jsoup.parser.TokeniserState.attributeNameCharsSorted)::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataDoubleEscapeTag(t, r, org.jsoup.parser.TokeniserState.ScriptDataDoubleEscaped, org.jsoup.parser.TokeniserState.ScriptDataEscaped)	false
org.jsoup.parser.HtmlTreeBuilder::::177::::7107::::7518::::if (startTag.isSelfClosing()) {    org.jsoup.nodes.Element el = insertEmpty(startTag);    stack.add(el);    tokeniser.transition(org.jsoup.parser.TokeniserState.Data);    tokeniser.emit(emptyEnd.reset().name(el.tagName()));    return el;}::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.HtmlTreeBuilder::::86::::4505::::4563::::root = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("html", settings), baseUri)::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.Doctype	false
org.jsoup.parser.CharacterReader::::177::::4765::::4767::::pos::::remaining	false
org.jsoup.parser.HtmlTreeBuilder::::412::::14849::::14868::::"table".equals(name)::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.HtmlTreeBuilder::::79::::4168::::4177::::contextTag::::"Unexpected token [%s] when in state [%s]"	false
org.jsoup.parser.CharacterReader::::174::::4732::::4734::::pos::::remaining	false
org.jsoup.parser.HtmlTreeBuilder::::409::::14704::::14726::::"colgroup".equals(name)::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.Token::::114::::3926::::3935::::attributes::::this.attributes	false
org.jsoup.parser.HtmlTreeBuilder::::62::::3327::::3384::::initialiseParse(inputFragment, baseUri, errors, settings)::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.nodes.Attributes::::99::::2927::::2979::::attributes = new java.util.LinkedHashMap<java.lang.String, org.jsoup.nodes.Attribute>(2)::::INSERT::::STATEMENT::::if ((attributes) == null)    return ;	false
org.jsoup.parser.CharacterReader::::172::::4685::::4687::::pos::::remaining	false
org.jsoup.parser.CharacterReader::::177::::4758::::4813::::return (pos) > start ? cacheString(start, ((pos) - start)) : ""::::INSERT::::STATEMENT::::if (isEmpty())    return false;	false
org.jsoup.parser.HtmlTreeBuilder::::77::::4053::::4062::::contextTag::::"Unexpected token [%s] when in state [%s]"	false
org.jsoup.parser.TokeniserState::::596::::19789::::19827::::t.tagPending.appendAttributeName(name)::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.readEndTag(t, r, org.jsoup.parser.TokeniserState.ScriptDataEndTagName, org.jsoup.parser.TokeniserState.ScriptData)	false
org.jsoup.parser.TokeniserState::::596::::19789::::19827::::t.tagPending.appendAttributeName(name)::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.readEndTag(t, r, org.jsoup.parser.TokeniserState.RawtextEndTagName, org.jsoup.parser.TokeniserState.Rawtext)	false
org.jsoup.parser.TokeniserState::::596::::19789::::19827::::t.tagPending.appendAttributeName(name)::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.readCharRef(t, org.jsoup.parser.TokeniserState.Rcdata)	false
org.jsoup.parser.TokeniserState::::596::::19789::::19827::::t.tagPending.appendAttributeName(name)::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.readCharRef(t, org.jsoup.parser.TokeniserState.Data)	false
org.jsoup.parser.TokeniserState::::596::::19789::::19827::::t.tagPending.appendAttributeName(name)::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataEndTag(t, r, org.jsoup.parser.TokeniserState.ScriptDataEscaped)	false
org.jsoup.parser.TokeniserState::::596::::19789::::19827::::t.tagPending.appendAttributeName(name)::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataEndTag(t, r, org.jsoup.parser.TokeniserState.ScriptData)	false
org.jsoup.parser.TokeniserState::::596::::19789::::19827::::t.tagPending.appendAttributeName(name)::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataEndTag(t, r, org.jsoup.parser.TokeniserState.Rawtext)	false
org.jsoup.parser.TokeniserState::::596::::19789::::19827::::t.tagPending.appendAttributeName(name)::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataDoubleEscapeTag(t, r, org.jsoup.parser.TokeniserState.ScriptDataEscaped, org.jsoup.parser.TokeniserState.ScriptDataDoubleEscaped)	false
org.jsoup.parser.TokeniserState::::596::::19789::::19827::::t.tagPending.appendAttributeName(name)::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataDoubleEscapeTag(t, r, org.jsoup.parser.TokeniserState.ScriptDataDoubleEscaped, org.jsoup.parser.TokeniserState.ScriptDataEscaped)	false
org.jsoup.parser.HtmlTreeBuilder::::75::::3894::::3967::::org.jsoup.helper.StringUtil.in(contextTag, "iframe", "noembed", "noframes", "style", "xmp")::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.HtmlTreeBuilder::::63::::3394::::3418::::contextElement = context::::INSERT::::STATEMENT::::pop()	false
org.jsoup.nodes.Attributes::::98::::2890::::2979::::if ((attributes) == null)    attributes = new java.util.LinkedHashMap<java.lang.String, org.jsoup.nodes.Attribute>(2);::::INSERT::::STATEMENT::::if ((attributes) == null)    return new org.jsoup.nodes.Attributes();	false
org.jsoup.parser.Tokeniser::::77::::2979::::3056::::if (startTag.selfClosing)    selfClosingFlagAcknowledged = false;::::INSERT::::STATEMENT::::characterReferenceError("character outside of valid range")	false
org.jsoup.parser.Token::::110::::3700::::3721::::hasEmptyAttributeValue::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(systemIdentifier)	false
org.jsoup.parser.Token::::110::::3700::::3721::::hasEmptyAttributeValue::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(publicIdentifier)	false
org.jsoup.parser.Token::::110::::3700::::3721::::hasEmptyAttributeValue::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(name)	false
org.jsoup.parser.HtmlTreeBuilder::::89::::4641::::4661::::resetInsertionMode()::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.HtmlTreeBuilder::::177::::7111::::7134::::startTag.isSelfClosing()::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.HtmlTreeBuilder::::409::::14704::::14726::::"colgroup".equals(name)::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.Token::::119::::4116::::4136::::pendingAttributeValue::::data	false
org.jsoup.parser.HtmlTreeBuilder::::72::::3709::::3746::::java.lang.String contextTag = context.tagName()::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.HtmlTreeBuilder::::406::::14572::::14593::::"caption".equals(name)::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.Token::::107::::3444::::3904::::if (hasPendingAttributeValue)    attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, ((pendingAttributeValue.length()) > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS));else    if (hasEmptyAttributeValue)        attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, "");    else        attribute = new org.jsoup.nodes.BooleanAttribute(pendingAttributeName);::::INSERT::::STATEMENT::::if ((pendingAttributeName) != null) {    newAttribute();}	false
org.jsoup.parser.Tokeniser::::76::::2934::::2965::::lastStartTag = startTag.tagName::::INSERT::::STATEMENT::::if ((lastStartTag) == null)    return null;	false
org.jsoup.parser.HtmlTreeBuilder::::73::::3764::::3809::::org.jsoup.helper.StringUtil.in(contextTag, "title", "textarea")::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.CharacterReader::::168::::4539::::4567::::final int remaining = length::::INSERT::::STATEMENT::::if (isEmpty())    return false;	false
org.jsoup.parser.CharacterReader::::167::::4508::::4529::::final int start = pos::::INSERT::::STATEMENT::::if (isEmpty())    return false;	false
org.jsoup.nodes.Attributes::::99::::2927::::2979::::attributes = new java.util.LinkedHashMap<java.lang.String, org.jsoup.nodes.Attribute>(2)::::INSERT::::STATEMENT::::if ((attributes) == null)    return "";	false
org.jsoup.parser.CharacterReader::::172::::4685::::4687::::pos::::(length) - (pos)	false
org.jsoup.parser.HtmlTreeBuilder::::177::::7107::::7518::::if (startTag.isSelfClosing()) {    org.jsoup.nodes.Element el = insertEmpty(startTag);    stack.add(el);    tokeniser.transition(org.jsoup.parser.TokeniserState.Data);    tokeniser.emit(emptyEnd.reset().name(el.tagName()));    return el;}::::INSERT::::STATEMENT::::if (el == null)    break;	false
org.jsoup.parser.HtmlTreeBuilder::::177::::7107::::7518::::if (startTag.isSelfClosing()) {    org.jsoup.nodes.Element el = insertEmpty(startTag);    stack.add(el);    tokeniser.transition(org.jsoup.parser.TokeniserState.Data);    tokeniser.emit(emptyEnd.reset().name(el.tagName()));    return el;}::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.CharacterReader::::167::::4526::::4528::::pos::::(length) - (pos)	false
org.jsoup.parser.HtmlTreeBuilder::::79::::4164::::4479::::if (contextTag.equals("noscript"))    tokeniser.transition(org.jsoup.parser.TokeniserState.Data);else    if (contextTag.equals("plaintext"))        tokeniser.transition(org.jsoup.parser.TokeniserState.Data);    else        tokeniser.transition(org.jsoup.parser.TokeniserState.Data);::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.Tokeniser::::79::::3073::::3292::::if ((token.type) == (org.jsoup.parser.Token.TokenType.EndTag)) {    org.jsoup.parser.Token.EndTag endTag = ((org.jsoup.parser.Token.EndTag) (token));    if ((endTag.attributes) != null)        error("Attributes incorrectly present on end tag");}::::INSERT::::STATEMENT::::characterReferenceError("numeric reference with no numerals")	false
org.jsoup.parser.Tokeniser::::79::::3073::::3292::::if ((token.type) == (org.jsoup.parser.Token.TokenType.EndTag)) {    org.jsoup.parser.Token.EndTag endTag = ((org.jsoup.parser.Token.EndTag) (token));    if ((endTag.attributes) != null)        error("Attributes incorrectly present on end tag");}::::INSERT::::STATEMENT::::characterReferenceError("character outside of valid range")	false
org.jsoup.parser.HtmlTreeBuilder::::406::::14572::::14593::::"caption".equals(name)::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.HtmlTreeBuilder::::81::::4314::::4323::::contextTag::::"TreeBuilder{" + "currentToken="	false
org.jsoup.parser.CharacterReader::::177::::4798::::4800::::pos::::(length) - (pos)	false
org.jsoup.parser.HtmlTreeBuilder::::72::::3709::::3746::::java.lang.String contextTag = context.tagName()::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.HtmlTreeBuilder::::61::::3281::::3285::::state::::originalState	false
org.jsoup.parser.HtmlTreeBuilder::::94::::4885::::4913::::contextChain.add(0, context)::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.HtmlTreeBuilder::::393::::13942::::13945::::node::::pop()	false
org.jsoup.parser.Token::::104::::3199::::3965::::if ((pendingAttributeName) != null) {    org.jsoup.nodes.Attribute attribute;    if (hasPendingAttributeValue)        attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, ((pendingAttributeValue.length()) > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS));    else        if (hasEmptyAttributeValue)            attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, "");        else            attribute = new org.jsoup.nodes.BooleanAttribute(pendingAttributeName);    attributes.put(attribute);}::::INSERT::::STATEMENT::::if (hasEmptyAttributeValue)    attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, "");else    attribute = new org.jsoup.nodes.BooleanAttribute(pendingAttributeName);	false
org.jsoup.parser.CharacterReader::::58::::1377::::1379::::pos::::(length) - (pos)	false
org.jsoup.parser.CharacterReader::::177::::4771::::4775::::start::::(pos)++	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::node	false
org.jsoup.parser.Token::::113::::3850::::3904::::attribute = new org.jsoup.nodes.BooleanAttribute(pendingAttributeName)::::INSERT::::STATEMENT::::newAttribute()	false
org.jsoup.parser.CharacterReader::::174::::4732::::4734::::pos::::(length) - (pos)	false
org.jsoup.parser.HtmlTreeBuilder::::598::::21209::::21229::::lastFormattingElement::::pop	false
org.jsoup.parser.HtmlTreeBuilder::::69::::3595::::3647::::doc.quirksMode(context.ownerDocument().quirksMode())::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.HtmlTreeBuilder::::79::::4168::::4177::::contextTag::::"TreeBuilder{" + "currentToken="	false
org.jsoup.parser.HtmlTreeBuilder::::95::::4927::::5130::::for (org.jsoup.nodes.Element parent : contextChain) {    if (parent instanceof org.jsoup.nodes.FormElement) {        formElement = ((org.jsoup.nodes.FormElement) (parent));        break;    }}::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.HtmlTreeBuilder::::391::::13879::::13900::::node = contextElement::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.Token::::166::::5685::::5704::::pendingAttributeName::::this.tagName	false
org.jsoup.parser.CharacterReader::::177::::4802::::4806::::start::::(pos)++	false
org.jsoup.parser.CharacterReader::::177::::4765::::4767::::pos::::(length) - (pos)	false
org.jsoup.parser.Token::::166::::5645::::5664::::pendingAttributeName::::this.tagName	false
org.jsoup.parser.Token::::166::::5622::::5641::::pendingAttributeName::::this.tagName	false
org.jsoup.parser.HtmlTreeBuilder::::77::::4049::::4479::::if (contextTag.equals("script"))    tokeniser.transition(org.jsoup.parser.TokeniserState.ScriptData);else    if (contextTag.equals("noscript"))        tokeniser.transition(org.jsoup.parser.TokeniserState.Data);    else        if (contextTag.equals("plaintext"))            tokeniser.transition(org.jsoup.parser.TokeniserState.Data);        else            tokeniser.transition(org.jsoup.parser.TokeniserState.Data);::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.nodes.Attributes::::98::::2890::::2979::::if ((attributes) == null)    attributes = new java.util.LinkedHashMap<java.lang.String, org.jsoup.nodes.Attribute>(2);::::INSERT::::STATEMENT::::put(attr)	false
org.jsoup.parser.Token::::104::::3203::::3222::::pendingAttributeName::::this.tagName	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.ScriptDataLessthanSign	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.ScriptDataEndTagName	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.RawtextLessthanSign	false
org.jsoup.parser.TokeniserState::::886::::29808::::29826::::org.jsoup.parser.TokeniserState.BeforeAttributeName::::org.jsoup.parser.TokeniserState.RawtextEndTagName	false
org.jsoup.parser.Tokeniser::::75::::2872::::2920::::org.jsoup.parser.Token.StartTag startTag = ((org.jsoup.parser.Token.StartTag) (token))::::INSERT::::STATEMENT::::if ((lastStartTag) == null)    return null;	false
org.jsoup.parser.CharacterReader::::177::::4791::::4795::::start::::(pos)++	false
org.jsoup.parser.HtmlTreeBuilder::::77::::4053::::4062::::contextTag::::"TreeBuilder{" + "currentToken="	false
org.jsoup.parser.HtmlTreeBuilder::::420::::15207::::15212::::break::::INSERT::::STATEMENT::::if (pos == 0) {    last = true;    node = contextElement;}	false
org.jsoup.parser.HtmlTreeBuilder::::400::::14269::::14285::::"tr".equals(name)::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.CharacterReader::::173::::4713::::4718::::break::::INSERT::::STATEMENT::::if (isEmpty())    return false;	false
org.jsoup.parser.HtmlTreeBuilder::::69::::3595::::3597::::doc::::pop()	false
org.jsoup.nodes.Attributes::::98::::2890::::2979::::if ((attributes) == null)    attributes = new java.util.LinkedHashMap<java.lang.String, org.jsoup.nodes.Attribute>(2);::::INSERT::::STATEMENT::::if ((attributes) == null)    return false;	false
org.jsoup.parser.Token::::166::::5685::::5704::::pendingAttributeName::::pubSysKey	false
org.jsoup.parser.Token::::166::::5645::::5664::::pendingAttributeName::::pubSysKey	false
org.jsoup.nodes.Attributes::::99::::2927::::2979::::attributes = new java.util.LinkedHashMap<java.lang.String, org.jsoup.nodes.Attribute>(2)::::INSERT::::STATEMENT::::if ((attributes) == null)    return false;	false
org.jsoup.parser.Token::::116::::3979::::3998::::pendingAttributeName::::this.tagName	false
org.jsoup.parser.Token::::166::::5622::::5641::::pendingAttributeName::::pubSysKey	false
org.jsoup.parser.Token::::104::::3203::::3222::::pendingAttributeName::::pubSysKey	false
org.jsoup.parser.HtmlTreeBuilder::::88::::4622::::4625::::root::::parent	false
org.jsoup.parser.HtmlTreeBuilder::::93::::4830::::4871::::org.jsoup.select.Elements contextChain = context.parents()::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.CharacterReader::::169::::4577::::4601::::final char[] val = input::::INSERT::::STATEMENT::::if (isEmpty())    return false;	false
org.jsoup.parser.HtmlTreeBuilder::::390::::13850::::13861::::last = true::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.HtmlTreeBuilder::::599::::21242::::21295::::if ((last == null) || (onStack(last)))    return ;::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.Token::::120::::4152::::4173::::pendingAttributeValueS::::this.data	false
org.jsoup.parser.Tokeniser::::77::::2979::::3056::::if (startTag.selfClosing)    selfClosingFlagAcknowledged = false;::::INSERT::::STATEMENT::::error("Self closing flag not acknowledged")	false
org.jsoup.parser.Token::::116::::3979::::3998::::pendingAttributeName::::data	false
org.jsoup.parser.Token::::104::::3199::::3965::::if ((pendingAttributeName) != null) {    org.jsoup.nodes.Attribute attribute;    if (hasPendingAttributeValue)        attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, ((pendingAttributeValue.length()) > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS));    else        if (hasEmptyAttributeValue)            attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, "");        else            attribute = new org.jsoup.nodes.BooleanAttribute(pendingAttributeName);    attributes.put(attribute);}::::INSERT::::STATEMENT::::if ((attributes) == null)    attributes = new org.jsoup.nodes.Attributes();	false
org.jsoup.parser.Token::::101::::3115::::3184::::if ((attributes) == null)    attributes = new org.jsoup.nodes.Attributes();::::INSERT::::STATEMENT::::if (hasEmptyAttributeValue)    attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, "");else    attribute = new org.jsoup.nodes.BooleanAttribute(pendingAttributeName);	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.ScriptDataEscapedEndTagName	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.ScriptDataDoubleEscapeStart	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.RCDATAEndTagName	false
org.jsoup.parser.HtmlTreeBuilder::::400::::14269::::14285::::"tr".equals(name)::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.Token::::116::::3979::::3998::::pendingAttributeName::::pubSysKey	false
org.jsoup.parser.HtmlTreeBuilder::::95::::4927::::5130::::for (org.jsoup.nodes.Element parent : contextChain) {    if (parent instanceof org.jsoup.nodes.FormElement) {        formElement = ((org.jsoup.nodes.FormElement) (parent));        break;    }}::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.Token::::104::::3203::::3222::::pendingAttributeName::::data	false
org.jsoup.parser.Token::::166::::5622::::5641::::pendingAttributeName::::data	false
org.jsoup.parser.CharacterReader::::169::::4596::::4600::::input::::chars	false
org.jsoup.parser.Token::::166::::5645::::5664::::pendingAttributeName::::data	false
org.jsoup.parser.Token::::166::::5685::::5704::::pendingAttributeName::::data	false
org.jsoup.parser.HtmlTreeBuilder::::61::::3281::::3317::::state = org.jsoup.parser.HtmlTreeBuilderState.Initial::::originalState = state	false
org.jsoup.parser.HtmlTreeBuilder::::390::::13850::::13861::::last = true::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.HtmlTreeBuilder::::87::::4577::::4579::::doc::::pop()	false
org.jsoup.parser.HtmlTreeBuilder::::68::::3525::::3647::::if ((context.ownerDocument()) != null)    doc.quirksMode(context.ownerDocument().quirksMode());::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.ScriptDataLessthanSign	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.ScriptDataEndTagName	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.RawtextLessthanSign	false
org.jsoup.parser.TokeniserState::::160::::5160::::5178::::org.jsoup.parser.TokeniserState.SelfClosingStartTag::::org.jsoup.parser.TokeniserState.RawtextEndTagName	false
org.jsoup.parser.HtmlTreeBuilder::::599::::21246::::21249::::last::::headElement	false
org.jsoup.parser.Token::::107::::3444::::3904::::if (hasPendingAttributeValue)    attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, ((pendingAttributeValue.length()) > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS));else    if (hasEmptyAttributeValue)        attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, "");    else        attribute = new org.jsoup.nodes.BooleanAttribute(pendingAttributeName);::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(systemIdentifier)	false
org.jsoup.parser.Token::::107::::3444::::3904::::if (hasPendingAttributeValue)    attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, ((pendingAttributeValue.length()) > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS));else    if (hasEmptyAttributeValue)        attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, "");    else        attribute = new org.jsoup.nodes.BooleanAttribute(pendingAttributeName);::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(publicIdentifier)	false
org.jsoup.parser.Token::::107::::3444::::3904::::if (hasPendingAttributeValue)    attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, ((pendingAttributeValue.length()) > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS));else    if (hasEmptyAttributeValue)        attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, "");    else        attribute = new org.jsoup.nodes.BooleanAttribute(pendingAttributeName);::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(name)	false
org.jsoup.parser.Token::::107::::3444::::3904::::if (hasPendingAttributeValue)    attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, ((pendingAttributeValue.length()) > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS));else    if (hasEmptyAttributeValue)        attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, "");    else        attribute = new org.jsoup.nodes.BooleanAttribute(pendingAttributeName);::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(data)	false
org.jsoup.parser.Token::::119::::4110::::4138::::org.jsoup.parser.Token.reset(pendingAttributeValue)::::INSERT::::STATEMENT::::newAttribute()	false
org.jsoup.parser.HtmlTreeBuilder::::185::::7537::::7661::::org.jsoup.nodes.Element el = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(startTag.name(), settings), baseUri, settings.normalizeAttributes(startTag.attributes))::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.HtmlTreeBuilder::::86::::4505::::4508::::root::::parent	false
org.jsoup.parser.HtmlTreeBuilder::::177::::7111::::7134::::startTag.isSelfClosing()::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.HtmlTreeBuilder::::419::::15150::::15189::::transition(org.jsoup.parser.HtmlTreeBuilderState.InBody)::::DELETE::::STATEMENT	false
org.jsoup.parser.Token::::110::::3700::::3721::::hasEmptyAttributeValue::::INSERT::::STATEMENT::::if ((pendingAttributeName) != null) {    newAttribute();}	false
org.jsoup.parser.HtmlTreeBuilder::::87::::4593::::4596::::root::::parent	false
org.jsoup.parser.HtmlTreeBuilder::::394::::13975::::13995::::"select".equals(name)::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.Tokeniser::::77::::2979::::3056::::if (startTag.selfClosing)    selfClosingFlagAcknowledged = false;::::INSERT::::STATEMENT::::if ((lastStartTag) == null)    return null;	false
org.jsoup.parser.Token::::107::::3448::::3471::::hasPendingAttributeValue::::INSERT::::STATEMENT::::if (hasEmptyAttributeValue)    attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, "");else    attribute = new org.jsoup.nodes.BooleanAttribute(pendingAttributeName);	false
org.jsoup.parser.Token::::125::::4279::::4298::::pendingAttributeName::::this.tagName	false
org.jsoup.parser.Token::::114::::3926::::3951::::attributes.put(attribute)::::INSERT::::STATEMENT::::newAttribute()	false
org.jsoup.parser.HtmlTreeBuilder::::419::::15150::::15189::::transition(org.jsoup.parser.HtmlTreeBuilderState.InBody)::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.HtmlTreeBuilder::::387::::13712::::15635::::for (int pos = (stack.size()) - 1; pos >= 0; pos--) {    org.jsoup.nodes.Element node = stack.get(pos);    if (pos == 0) {        last = true;        node = contextElement;    }    java.lang.String name = node.nodeName();    if ("select".equals(name)) {        transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);        break;    }else        if (("td".equals(name)) || (("th".equals(name)) && (!last))) {            transition(org.jsoup.parser.HtmlTreeBuilderState.InCell);            break;        }else            if ("tr".equals(name)) {                transition(org.jsoup.parser.HtmlTreeBuilderState.InRow);                break;            }else                if ((("tbody".equals(name)) || ("thead".equals(name))) || ("tfoot".equals(name))) {                    transition(org.jsoup.parser.HtmlTreeBuilderState.InTableBody);                    break;                }else                    if ("caption".equals(name)) {                        transition(org.jsoup.parser.HtmlTreeBuilderState.InCaption);                        break;                    }else                        if ("colgroup".equals(name)) {                            transition(org.jsoup.parser.HtmlTreeBuilderState.InColumnGroup);                            break;                        }else                            if ("table".equals(name)) {                                transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                                break;                            }else                                if ("head".equals(name)) {                                    transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                                    break;                                }else                                    if ("body".equals(name)) {                                        transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                                        break;                                    }else                                        if ("frameset".equals(name)) {                                            transition(org.jsoup.parser.HtmlTreeBuilderState.InFrameset);                                            break;                                        }else                                            if ("html".equals(name)) {                                                transition(org.jsoup.parser.HtmlTreeBuilderState.BeforeHead);                                                break;                                            }else                                                if (last) {                                                    transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                                                    break;                                                }}::::INSERT::::STATEMENT::::if (pos == 0) {    last = true;    node = contextElement;}	false
org.jsoup.parser.CharacterReader::::171::::4625::::4633::::remaining::::this.length	false
org.jsoup.parser.Tokeniser::::77::::2983::::3002::::startTag.selfClosing::::INSERT::::STATEMENT::::if ((lastStartTag) == null)    return null;	false
org.jsoup.parser.HtmlTreeBuilder::::391::::13879::::13900::::node = contextElement::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.HtmlTreeBuilder::::394::::13975::::13995::::"select".equals(name)::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.Token::::125::::4279::::4298::::pendingAttributeName::::pubSysKey	false
org.jsoup.parser.Tokeniser::::79::::3073::::3292::::if ((token.type) == (org.jsoup.parser.Token.TokenType.EndTag)) {    org.jsoup.parser.Token.EndTag endTag = ((org.jsoup.parser.Token.EndTag) (token));    if ((endTag.attributes) != null)        error("Attributes incorrectly present on end tag");}::::INSERT::::STATEMENT::::error("Self closing flag not acknowledged")	false
org.jsoup.parser.CharacterReader::::171::::4619::::4621::::pos::::(length) - (pos)	false
org.jsoup.parser.Tokeniser::::241::::8728::::8880::::if (errors.canAddError())    errors.add(new org.jsoup.parser.ParseError(reader.pos(), "Unexpected character '%s' in input state [%s]", reader.current(), state));::::INSERT::::STATEMENT::::if ((lastStartTag) == null)    return null;	false
org.jsoup.parser.HtmlTreeBuilder::::599::::21242::::21295::::if ((last == null) || (onStack(last)))    return ;::::INSERT::::STATEMENT::::if (pos == 0) {    skip = true;    break;}	false
org.jsoup.parser.HtmlTreeBuilder::::599::::21242::::21295::::if ((last == null) || (onStack(last)))    return ;::::INSERT::::STATEMENT::::if ((entry == null) || (onStack(entry)))    break;	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11316::::name.equals("a")::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.Token::::125::::4279::::4298::::pendingAttributeName::::data	false
org.jsoup.parser.HtmlTreeBuilder::::77::::4049::::4479::::if (contextTag.equals("script"))    tokeniser.transition(org.jsoup.parser.TokeniserState.ScriptData);else    if (contextTag.equals("noscript"))        tokeniser.transition(org.jsoup.parser.TokeniserState.Data);    else        if (contextTag.equals("plaintext"))            tokeniser.transition(org.jsoup.parser.TokeniserState.Data);        else            tokeniser.transition(org.jsoup.parser.TokeniserState.Data);::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.HtmlTreeBuilder::::658::::23374::::23655::::for (int pos = (formattingElements.size()) - 1; pos >= 0; pos--) {    org.jsoup.nodes.Element next = formattingElements.get(pos);    if (next == null)        break;    else        if (next.nodeName().equals(nodeName))            return next;}::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.Token::::116::::3979::::4006::::pendingAttributeName = null::::INSERT::::STATEMENT::::if (hasEmptyAttributeValue)    attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, "");else    attribute = new org.jsoup.nodes.BooleanAttribute(pendingAttributeName);	false
org.jsoup.parser.Token::::107::::3448::::3471::::hasPendingAttributeValue::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(systemIdentifier)	false
org.jsoup.parser.Token::::107::::3448::::3471::::hasPendingAttributeValue::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(publicIdentifier)	false
org.jsoup.parser.Token::::107::::3448::::3471::::hasPendingAttributeValue::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(name)	false
org.jsoup.parser.HtmlTreeBuilder::::75::::3890::::4479::::if (org.jsoup.helper.StringUtil.in(contextTag, "iframe", "noembed", "noframes", "style", "xmp"))    tokeniser.transition(org.jsoup.parser.TokeniserState.Rawtext);else    if (contextTag.equals("script"))        tokeniser.transition(org.jsoup.parser.TokeniserState.ScriptData);    else        if (contextTag.equals("noscript"))            tokeniser.transition(org.jsoup.parser.TokeniserState.Data);        else            if (contextTag.equals("plaintext"))                tokeniser.transition(org.jsoup.parser.TokeniserState.Data);            else                tokeniser.transition(org.jsoup.parser.TokeniserState.Data);::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.nodes.Attributes::::99::::2927::::2979::::attributes = new java.util.LinkedHashMap<java.lang.String, org.jsoup.nodes.Attribute>(2)::::INSERT::::STATEMENT::::if ((attributes) == null)    return 0;	false
org.jsoup.nodes.Attributes::::97::::2853::::2880::::org.jsoup.helper.Validate.notNull(attribute)::::INSERT::::STATEMENT::::if ((attributes) == null)    return new org.jsoup.nodes.Attributes();	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"body"	false
org.jsoup.parser.HtmlTreeBuilder::::61::::3281::::3317::::state = org.jsoup.parser.HtmlTreeBuilderState.Initial::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.HtmlTreeBuilder::::81::::4310::::4479::::if (contextTag.equals("plaintext"))    tokeniser.transition(org.jsoup.parser.TokeniserState.Data);else    tokeniser.transition(org.jsoup.parser.TokeniserState.Data);::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.HtmlTreeBuilder::::598::::21194::::21232::::org.jsoup.nodes.Element last = lastFormattingElement()::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.Token::::117::::4020::::4050::::hasEmptyAttributeValue = false::::hasEmptyAttributeValue = true	false
org.jsoup.parser.Token::::166::::5685::::5704::::pendingAttributeName::::" "	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.ScriptDataDoubleEscapedLessthanSign	false
org.jsoup.parser.Token::::166::::5685::::5704::::pendingAttributeName::::attributes.toString()	false
org.jsoup.parser.Token::::166::::5685::::5704::::pendingAttributeName::::("<" + (name())) + " "	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.ScriptDataEscapedLessthanSign	false
org.jsoup.parser.HtmlTreeBuilder::::72::::3709::::3746::::java.lang.String contextTag = context.tagName()::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.HtmlTreeBuilder::::391::::13879::::13882::::node::::headElement	false
org.jsoup.parser.Token::::166::::5685::::5704::::pendingAttributeName::::(("<" + (name())) + " ") + (attributes.toString())	false
org.jsoup.parser.HtmlTreeBuilder::::69::::3595::::3647::::doc.quirksMode(context.ownerDocument().quirksMode())::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.Token::::119::::4110::::4138::::org.jsoup.parser.Token.reset(pendingAttributeValue)::::INSERT::::STATEMENT::::if (hasEmptyAttributeValue)    attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, "");else    attribute = new org.jsoup.nodes.BooleanAttribute(pendingAttributeName);	false
org.jsoup.parser.HtmlTreeBuilder::::87::::4577::::4579::::doc::::this.headElement	false
org.jsoup.parser.HtmlTreeBuilder::::599::::21270::::21273::::last::::headElement	false
org.jsoup.parser.Token::::166::::5685::::5704::::pendingAttributeName::::((("<" + (name())) + " ") + (attributes.toString())) + ">"	false
org.jsoup.parser.HtmlTreeBuilderState::::287::::11890::::11924::::tb.reconstructFormattingElements()::::INSERT::::STATEMENT::::tb.process(startTag)	false
org.jsoup.parser.HtmlTreeBuilder::::84::::4438::::4479::::tokeniser.transition(org.jsoup.parser.TokeniserState.Data)::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.HtmlTreeBuilder::::69::::3595::::3597::::doc::::this.headElement	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11316::::name.equals("a")::::INSERT::::STATEMENT::::if (lastNode == furthestBlock) {}	false
org.jsoup.parser.Token::::117::::4020::::4050::::hasEmptyAttributeValue = false::::INSERT::::STATEMENT::::if (hasEmptyAttributeValue)    attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, "");else    attribute = new org.jsoup.nodes.BooleanAttribute(pendingAttributeName);	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.DoctypeName	false
org.jsoup.parser.Token::::110::::3700::::3721::::hasEmptyAttributeValue::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(data)	false
org.jsoup.parser.Token::::116::::3979::::4006::::pendingAttributeName = null::::attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, "")	false
org.jsoup.nodes.Attributes::::97::::2853::::2880::::org.jsoup.helper.Validate.notNull(attribute)::::INSERT::::STATEMENT::::if ((attributes) == null)    return 0;	false
org.jsoup.parser.HtmlTreeBuilder::::81::::4314::::4323::::contextTag::::specificScopeTarget[0]	false
org.jsoup.parser.HtmlTreeBuilder::::81::::4314::::4323::::contextTag::::"currentToken="	false
org.jsoup.parser.HtmlTreeBuilder::::81::::4314::::4323::::contextTag::::"TreeBuilder{"	false
org.jsoup.parser.HtmlTreeBuilder::::81::::4314::::4323::::contextTag::::", state="	false
org.jsoup.parser.HtmlTreeBuilder::::81::::4314::::4323::::contextTag::::", currentElement="	false
org.jsoup.parser.HtmlTreeBuilder::::658::::23374::::23655::::for (int pos = (formattingElements.size()) - 1; pos >= 0; pos--) {    org.jsoup.nodes.Element next = formattingElements.get(pos);    if (next == null)        break;    else        if (next.nodeName().equals(nodeName))            return next;}::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.Token::::118::::4064::::4096::::hasPendingAttributeValue = false::::INSERT::::STATEMENT::::if (hasEmptyAttributeValue)    attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, "");else    attribute = new org.jsoup.nodes.BooleanAttribute(pendingAttributeName);	false
org.jsoup.parser.HtmlTreeBuilder::::79::::4168::::4177::::contextTag::::specificScopeTarget[0]	false
org.jsoup.parser.HtmlTreeBuilder::::79::::4168::::4177::::contextTag::::"currentToken="	false
org.jsoup.parser.HtmlTreeBuilder::::79::::4168::::4177::::contextTag::::"TreeBuilder{"	false
org.jsoup.parser.HtmlTreeBuilder::::79::::4168::::4177::::contextTag::::", state="	false
org.jsoup.parser.HtmlTreeBuilder::::79::::4168::::4177::::contextTag::::", currentElement="	false
org.jsoup.parser.HtmlTreeBuilder::::63::::3394::::3418::::contextElement = context::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.HtmlTreeBuilder::::391::::13886::::13899::::contextElement::::headElement	false
org.jsoup.parser.HtmlTreeBuilder::::84::::4438::::4479::::tokeniser.transition(org.jsoup.parser.TokeniserState.Data)::::DELETE::::STATEMENT	false
org.jsoup.parser.HtmlTreeBuilder::::77::::4053::::4062::::contextTag::::specificScopeTarget[0]	false
org.jsoup.parser.Token::::120::::4152::::4181::::pendingAttributeValueS = null::::INSERT::::STATEMENT::::if (hasEmptyAttributeValue)    attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, "");else    attribute = new org.jsoup.nodes.BooleanAttribute(pendingAttributeName);	false
org.jsoup.parser.HtmlTreeBuilder::::63::::3394::::3407::::contextElement::::headElement	false
org.jsoup.parser.Token::::166::::5685::::5704::::pendingAttributeName::::""	false
org.jsoup.parser.HtmlTreeBuilder::::75::::3890::::4479::::if (org.jsoup.helper.StringUtil.in(contextTag, "iframe", "noembed", "noframes", "style", "xmp"))    tokeniser.transition(org.jsoup.parser.TokeniserState.Rawtext);else    if (contextTag.equals("script"))        tokeniser.transition(org.jsoup.parser.TokeniserState.ScriptData);    else        if (contextTag.equals("noscript"))            tokeniser.transition(org.jsoup.parser.TokeniserState.Data);        else            if (contextTag.equals("plaintext"))                tokeniser.transition(org.jsoup.parser.TokeniserState.Data);            else                tokeniser.transition(org.jsoup.parser.TokeniserState.Data);::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.HtmlTreeBuilderState::::287::::11890::::11924::::tb.reconstructFormattingElements()::::INSERT::::STATEMENT::::closeCell(tb)	false
org.jsoup.parser.HtmlTreeBuilder::::79::::4164::::4479::::if (contextTag.equals("noscript"))    tokeniser.transition(org.jsoup.parser.TokeniserState.Data);else    if (contextTag.equals("plaintext"))        tokeniser.transition(org.jsoup.parser.TokeniserState.Data);    else        tokeniser.transition(org.jsoup.parser.TokeniserState.Data);::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.HtmlTreeBuilder::::73::::3760::::4479::::if (org.jsoup.helper.StringUtil.in(contextTag, "title", "textarea"))    tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);else    if (org.jsoup.helper.StringUtil.in(contextTag, "iframe", "noembed", "noframes", "style", "xmp"))        tokeniser.transition(org.jsoup.parser.TokeniserState.Rawtext);    else        if (contextTag.equals("script"))            tokeniser.transition(org.jsoup.parser.TokeniserState.ScriptData);        else            if (contextTag.equals("noscript"))                tokeniser.transition(org.jsoup.parser.TokeniserState.Data);            else                if (contextTag.equals("plaintext"))                    tokeniser.transition(org.jsoup.parser.TokeniserState.Data);                else                    tokeniser.transition(org.jsoup.parser.TokeniserState.Data);::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.ScriptDataDoubleEscapeEnd	false
org.jsoup.parser.HtmlTreeBuilder::::393::::13942::::13945::::node::::headElement	false
org.jsoup.parser.HtmlTreeBuilder::::412::::14849::::14868::::"table".equals(name)::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.HtmlTreeBuilder::::77::::4053::::4062::::contextTag::::"currentToken="	false
org.jsoup.parser.HtmlTreeBuilder::::77::::4053::::4062::::contextTag::::"TreeBuilder{"	false
org.jsoup.parser.HtmlTreeBuilder::::77::::4053::::4062::::contextTag::::", state="	false
org.jsoup.parser.HtmlTreeBuilder::::77::::4053::::4062::::contextTag::::", currentElement="	false
org.jsoup.parser.HtmlTreeBuilder::::68::::3525::::3647::::if ((context.ownerDocument()) != null)    doc.quirksMode(context.ownerDocument().quirksMode());::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.AfterDoctypeSystemKeyword	false
org.jsoup.parser.HtmlTreeBuilder::::177::::7107::::7518::::if (startTag.isSelfClosing()) {    org.jsoup.nodes.Element el = insertEmpty(startTag);    stack.add(el);    tokeniser.transition(org.jsoup.parser.TokeniserState.Data);    tokeniser.emit(emptyEnd.reset().name(el.tagName()));    return el;}::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::lastNode	false
org.jsoup.parser.HtmlTreeBuilder::::409::::14704::::14726::::"colgroup".equals(name)::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.Token::::113::::3883::::3902::::pendingAttributeName::::this.data	false
org.jsoup.parser.Token::::101::::3115::::3184::::if ((attributes) == null)    attributes = new org.jsoup.nodes.Attributes();::::INSERT::::STATEMENT::::newAttribute()	false
org.jsoup.parser.HtmlTreeBuilder::::406::::14572::::14593::::"caption".equals(name)::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.HtmlTreeBuilder::::415::::14977::::14995::::"head".equals(name)::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.BeforeAttributeValue	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::el	false
org.jsoup.parser.HtmlTreeBuilderState::::287::::11890::::11924::::tb.reconstructFormattingElements()::::INSERT::::STATEMENT::::if (node == formatEl)    break;	false
org.jsoup.parser.HtmlTreeBuilder::::418::::15111::::15129::::"body".equals(name)::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.Token::::101::::3115::::3184::::if ((attributes) == null)    attributes = new org.jsoup.nodes.Attributes();::::INSERT::::STATEMENT::::if ((pendingAttributeName) != null) {    newAttribute();}	false
org.jsoup.parser.HtmlTreeBuilder::::61::::3281::::3317::::state = org.jsoup.parser.HtmlTreeBuilderState.Initial::::this.state = state	false
org.jsoup.parser.HtmlTreeBuilder::::400::::14269::::14285::::"tr".equals(name)::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.Tokeniser::::77::::2979::::3056::::if (startTag.selfClosing)    selfClosingFlagAcknowledged = false;::::INSERT::::STATEMENT::::characterReferenceError("numeric reference with no numerals")	false
org.jsoup.parser.HtmlTreeBuilder::::391::::13879::::13882::::node::::this.headElement	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.AfterDoctypePublicKeyword	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.ScriptDataEscapedEndTagOpen	false
org.jsoup.parser.HtmlTreeBuilder::::599::::21246::::21249::::last::::this.headElement	false
org.jsoup.parser.HtmlTreeBuilder::::81::::4314::::4323::::contextTag::::pop()	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::adopter	false
org.jsoup.parser.HtmlTreeBuilder::::77::::4049::::4479::::if (contextTag.equals("script"))    tokeniser.transition(org.jsoup.parser.TokeniserState.ScriptData);else    if (contextTag.equals("noscript"))        tokeniser.transition(org.jsoup.parser.TokeniserState.Data);    else        if (contextTag.equals("plaintext"))            tokeniser.transition(org.jsoup.parser.TokeniserState.Data);        else            tokeniser.transition(org.jsoup.parser.TokeniserState.Data);::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.DoctypePublicIdentifier_singleQuoted	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.DoctypePublicIdentifier_doubleQuoted	false
org.jsoup.nodes.Attributes::::100::::2989::::2998::::attributes::::this	false
org.jsoup.parser.HtmlTreeBuilder::::73::::3760::::4479::::if (org.jsoup.helper.StringUtil.in(contextTag, "title", "textarea"))    tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);else    if (org.jsoup.helper.StringUtil.in(contextTag, "iframe", "noembed", "noframes", "style", "xmp"))        tokeniser.transition(org.jsoup.parser.TokeniserState.Rawtext);    else        if (contextTag.equals("script"))            tokeniser.transition(org.jsoup.parser.TokeniserState.ScriptData);        else            if (contextTag.equals("noscript"))                tokeniser.transition(org.jsoup.parser.TokeniserState.Data);            else                if (contextTag.equals("plaintext"))                    tokeniser.transition(org.jsoup.parser.TokeniserState.Data);                else                    tokeniser.transition(org.jsoup.parser.TokeniserState.Data);::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.CharacterReader::::171::::4625::::4633::::remaining::::this.input.length	false
org.jsoup.nodes.Attributes::::180::::5312::::5321::::attributes::::new java.util.LinkedHashMap<java.lang.String, org.jsoup.nodes.Attribute>(attributes.size())	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11316::::name.equals("a")::::INSERT::::STATEMENT::::org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb)	false
org.jsoup.parser.Token::::107::::3448::::3471::::hasPendingAttributeValue::::INSERT::::STATEMENT::::if ((pendingAttributeName) != null) {    newAttribute();}	false
org.jsoup.parser.HtmlTreeBuilder::::79::::4168::::4177::::contextTag::::pop()	false
org.jsoup.parser.TokeniserState::::598::::19842::::19862::::char c = r.consume()::::INSERT::::STATEMENT::::anythingElse(t, r)	false
org.jsoup.parser.HtmlTreeBuilderState::::247::::10127::::38412::::switch (t.type) {    case Character :        {            org.jsoup.parser.Token.Character c = t.asCharacter();            if (c.getData().equals(org.jsoup.parser.HtmlTreeBuilderState.nullString)) {                tb.error(this);                return false;            }else                if ((tb.framesetOk()) && (org.jsoup.parser.HtmlTreeBuilderState.isWhitespace(c))) {                    tb.reconstructFormattingElements();                    tb.insert(c);                }else {                    tb.reconstructFormattingElements();                    tb.insert(c);                    tb.framesetOk(false);                }            break;        }    case Comment :        {            tb.insert(t.asComment());            break;        }    case Doctype :        {            tb.error(this);            return false;        }    case StartTag :        org.jsoup.parser.Token.StartTag startTag = t.asStartTag();        java.lang.String name = startTag.normalName();        if (name.equals("a")) {            if ((tb.getActiveFormattingElement("a")) != null) {                tb.error(this);                tb.processEndTag("a");                org.jsoup.nodes.Element remainingA = tb.getFromStack("a");                if (remainingA != null) {                    tb.removeFromActiveFormattingElements(remainingA);                    tb.removeFromStack(remainingA);                }            }            tb.reconstructFormattingElements();            org.jsoup.nodes.Element a = tb.insert(startTag);            tb.pushActiveFormattingElements(a);        }else            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartEmptyFormatters)) {                tb.reconstructFormattingElements();                tb.insertEmpty(startTag);                tb.framesetOk(false);            }else                if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartPClosers)) {                    if (tb.inButtonScope("p")) {                        tb.processEndTag("p");                    }                    tb.insert(startTag);                }else                    if (name.equals("span")) {                        tb.reconstructFormattingElements();                        tb.insert(startTag);                    }else                        if (name.equals("li")) {                            tb.framesetOk(false);                            java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();                            for (int i = (stack.size()) - 1; i > 0; i--) {                                org.jsoup.nodes.Element el = stack.get(i);                                if (el.nodeName().equals("li")) {                                    tb.processEndTag("li");                                    break;                                }                                if ((tb.isSpecial(el)) && (!(org.jsoup.helper.StringUtil.inSorted(el.nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartLiBreakers))))                                    break;                            }                            if (tb.inButtonScope("p")) {                                tb.processEndTag("p");                            }                            tb.insert(startTag);                        }else                            if (name.equals("html")) {                                tb.error(this);                                org.jsoup.nodes.Element html = tb.getStack().get(0);                                for (org.jsoup.nodes.Attribute attribute : startTag.getAttributes()) {                                    if (!(html.hasAttr(attribute.getKey())))                                        html.attributes().put(attribute);                                }                            }else                                if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartToHead)) {                                    return tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead);                                }else                                    if (name.equals("body")) {                                        tb.error(this);                                        java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();                                        if (((stack.size()) == 1) || (((stack.size()) > 2) && (!(stack.get(1).nodeName().equals("body"))))) {                                            return false;                                        }else {                                            tb.framesetOk(false);                                            org.jsoup.nodes.Element body = stack.get(1);                                            for (org.jsoup.nodes.Attribute attribute : startTag.getAttributes()) {                                                if (!(body.hasAttr(attribute.getKey())))                                                    body.attributes().put(attribute);                                            }                                        }                                    }else                                        if (name.equals("frameset")) {                                            tb.error(this);                                            java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();                                            if (((stack.size()) == 1) || (((stack.size()) > 2) && (!(stack.get(1).nodeName().equals("body"))))) {                                                return false;                                            }else                                                if (!(tb.framesetOk())) {                                                    return false;                                                }else {                                                    org.jsoup.nodes.Element second = stack.get(1);                                                    if ((second.parent()) != null)                                                        second.remove();                                                    while ((stack.size()) > 1)                                                        stack.remove(((stack.size()) - 1));                                                    tb.insert(startTag);                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InFrameset);                                                }                                        }else                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.Headings)) {                                                if (tb.inButtonScope("p")) {                                                    tb.processEndTag("p");                                                }                                                if (org.jsoup.helper.StringUtil.inSorted(tb.currentElement().nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.Headings)) {                                                    tb.error(this);                                                    tb.pop();                                                }                                                tb.insert(startTag);                                            }else                                                if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartPreListing)) {                                                    if (tb.inButtonScope("p")) {                                                        tb.processEndTag("p");                                                    }                                                    tb.insert(startTag);                                                    tb.framesetOk(false);                                                }else                                                    if (name.equals("form")) {                                                        if ((tb.getFormElement()) != null) {                                                            tb.error(this);                                                            return false;                                                        }                                                        if (tb.inButtonScope("p")) {                                                            tb.processEndTag("p");                                                        }                                                        tb.insertForm(startTag, true);                                                    }else                                                        if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.DdDt)) {                                                            tb.framesetOk(false);                                                            java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();                                                            for (int i = (stack.size()) - 1; i > 0; i--) {                                                                org.jsoup.nodes.Element el = stack.get(i);                                                                if (org.jsoup.helper.StringUtil.inSorted(el.nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.DdDt)) {                                                                    tb.processEndTag(el.nodeName());                                                                    break;                                                                }                                                                if ((tb.isSpecial(el)) && (!(org.jsoup.helper.StringUtil.inSorted(el.nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartLiBreakers))))                                                                    break;                                                            }                                                            if (tb.inButtonScope("p")) {                                                                tb.processEndTag("p");                                                            }                                                            tb.insert(startTag);                                                        }else                                                            if (name.equals("plaintext")) {                                                                if (tb.inButtonScope("p")) {                                                                    tb.processEndTag("p");                                                                }                                                                tb.insert(startTag);                                                                tb.tokeniser.transition(org.jsoup.parser.TokeniserState.PLAINTEXT);                                                            }else                                                                if (name.equals("button")) {                                                                    if (tb.inButtonScope("button")) {                                                                        tb.error(this);                                                                        tb.processEndTag("button");                                                                        tb.process(startTag);                                                                    }else {                                                                        tb.reconstructFormattingElements();                                                                        tb.insert(startTag);                                                                        tb.framesetOk(false);                                                                    }                                                                }else                                                                    if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.Formatters)) {                                                                        tb.reconstructFormattingElements();                                                                        org.jsoup.nodes.Element el = tb.insert(startTag);                                                                        tb.pushActiveFormattingElements(el);                                                                    }else                                                                        if (name.equals("nobr")) {                                                                            tb.reconstructFormattingElements();                                                                            if (tb.inScope("nobr")) {                                                                                tb.error(this);                                                                                tb.processEndTag("nobr");                                                                                tb.reconstructFormattingElements();                                                                            }                                                                            org.jsoup.nodes.Element el = tb.insert(startTag);                                                                            tb.pushActiveFormattingElements(el);                                                                        }else                                                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartApplets)) {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                                tb.insertMarkerToFormattingElements();                                                                                tb.framesetOk(false);                                                                            }else                                                                                if (name.equals("table")) {                                                                                    if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                                                                                        tb.processEndTag("p");                                                                                    }                                                                                    tb.insert(startTag);                                                                                    tb.framesetOk(false);                                                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                                                                                }else                                                                                    if (name.equals("input")) {                                                                                        tb.reconstructFormattingElements();                                                                                        org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                                                                                        if (!(el.attr("type").equalsIgnoreCase("hidden")))                                                                                            tb.framesetOk(false);                                                                                    }else                                                                                        if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartMedia)) {                                                                                            tb.insertEmpty(startTag);                                                                                        }else                                                                                            if (name.equals("hr")) {                                                                                                if (tb.inButtonScope("p")) {                                                                                                    tb.processEndTag("p");                                                                                                }                                                                                                tb.insertEmpty(startTag);                                                                                                tb.framesetOk(false);                                                                                            }else                                                                                                if (name.equals("image")) {                                                                                                    if ((tb.getFromStack("svg")) == null)                                                                                                        return tb.process(startTag.name("img"));                                                                                                    else                                                                                                        tb.insert(startTag);                                                                                                }else                                                                                                    if (name.equals("isindex")) {                                                                                                        tb.error(this);                                                                                                        if ((tb.getFormElement()) != null)                                                                                                            return false;                                                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                                        tb.processStartTag("form");                                                                                                        if (startTag.attributes.hasKey("action")) {                                                                                                            org.jsoup.nodes.Element form = tb.getFormElement();                                                                                                            form.attr("action", startTag.attributes.get("action"));                                                                                                        }                                                                                                        tb.processStartTag("hr");                                                                                                        tb.processStartTag("label");                                                                                                        java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                                                                                        tb.process(new org.jsoup.parser.Token.Character().data(prompt));                                                                                                        org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                                                                                        for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                                                                                            if (!(org.jsoup.helper.StringUtil.inSorted(attr.getKey(), org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartInputAttribs)))                                                                                                                inputAttribs.put(attr);                                                                                                        }                                                                                                        inputAttribs.put("name", "isindex");                                                                                                        tb.processStartTag("input", inputAttribs);                                                                                                        tb.processEndTag("label");                                                                                                        tb.processStartTag("hr");                                                                                                        tb.processEndTag("form");                                                                                                    }else                                                                                                        if (name.equals("textarea")) {                                                                                                            tb.insert(startTag);                                                                                                            tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                                                                                            tb.markInsertionMode();                                                                                                            tb.framesetOk(false);                                                                                                            tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                                                                                        }else                                                                                                            if (name.equals("xmp")) {                                                                                                                if (tb.inButtonScope("p")) {                                                                                                                    tb.processEndTag("p");                                                                                                                }                                                                                                                tb.reconstructFormattingElements();                                                                                                                tb.framesetOk(false);                                                                                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                                                                            }else                                                                                                                if (name.equals("iframe")) {                                                                                                                    tb.framesetOk(false);                                                                                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                                                                                }else                                                                                                                    if (name.equals("noembed")) {                                                                                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                                                                                    }else                                                                                                                        if (name.equals("select")) {                                                                                                                            tb.reconstructFormattingElements();                                                                                                                            tb.insert(startTag);                                                                                                                            tb.framesetOk(false);                                                                                                                            org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                                                                                            if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                                                                                            else                                                                                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                                                                                        }else                                                                                                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartOptions)) {                                                                                                                                if (tb.currentElement().nodeName().equals("option"))                                                                                                                                    tb.processEndTag("option");                                                                                                                                tb.reconstructFormattingElements();                                                                                                                                tb.insert(startTag);                                                                                                                            }else                                                                                                                                if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartRuby)) {                                                                                                                                    if (tb.inScope("ruby")) {                                                                                                                                        tb.generateImpliedEndTags();                                                                                                                                        if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                                                                                            tb.error(this);                                                                                                                                            tb.popStackToBefore("ruby");                                                                                                                                        }                                                                                                                                        tb.insert(startTag);                                                                                                                                    }                                                                                                                                }else                                                                                                                                    if (name.equals("math")) {                                                                                                                                        tb.reconstructFormattingElements();                                                                                                                                        tb.insert(startTag);                                                                                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                                                                    }else                                                                                                                                        if (name.equals("svg")) {                                                                                                                                            tb.reconstructFormattingElements();                                                                                                                                            tb.insert(startTag);                                                                                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                                                                        }else                                                                                                                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartDrop)) {                                                                                                                                                tb.error(this);                                                                                                                                                return false;                                                                                                                                            }else {                                                                                                                                                tb.reconstructFormattingElements();                                                                                                                                                tb.insert(startTag);                                                                                                                                            }        break;    case EndTag :        org.jsoup.parser.Token.EndTag endTag = t.asEndTag();        name = endTag.normalName();        if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyEndAdoptionFormatters)) {            for (int i = 0; i < 8; i++) {                org.jsoup.nodes.Element formatEl = tb.getActiveFormattingElement(name);                if (formatEl == null)                    return anyOtherEndTag(t, tb);                else                    if (!(tb.onStack(formatEl))) {                        tb.error(this);                        tb.removeFromActiveFormattingElements(formatEl);                        return true;                    }else                        if (!(tb.inScope(formatEl.nodeName()))) {                            tb.error(this);                            return false;                        }else                            if ((tb.currentElement()) != formatEl)                                tb.error(this);                org.jsoup.nodes.Element furthestBlock = null;                org.jsoup.nodes.Element commonAncestor = null;                boolean seenFormattingElement = false;                java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();                final int stackSize = stack.size();                for (int si = 0; (si < stackSize) && (si < 64); si++) {                    org.jsoup.nodes.Element el = stack.get(si);                    if (el == formatEl) {                        commonAncestor = stack.get((si - 1));                        seenFormattingElement = true;                    }else                        if (seenFormattingElement && (tb.isSpecial(el))) {                            furthestBlock = el;                            break;                        }                }                if (furthestBlock == null) {                    tb.popStackToClose(formatEl.nodeName());                    tb.removeFromActiveFormattingElements(formatEl);                    return true;                }                org.jsoup.nodes.Element node = furthestBlock;                org.jsoup.nodes.Element lastNode = furthestBlock;                for (int j = 0; j < 3; j++) {                    if (tb.onStack(node))                        node = tb.aboveOnStack(node);                    if (!(tb.isInActiveFormattingElements(node))) {                        tb.removeFromStack(node);                        continue;                    }else                        if (node == formatEl)                            break;                    org.jsoup.nodes.Element replacement = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri());                    tb.replaceActiveFormattingElement(node, replacement);                    tb.replaceOnStack(node, replacement);                    node = replacement;                    if (lastNode == furthestBlock) {                    }                    if ((lastNode.parent()) != null)                        lastNode.remove();                    node.appendChild(lastNode);                    lastNode = node;                }                if (org.jsoup.helper.StringUtil.inSorted(commonAncestor.nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyEndTableFosters)) {                    if ((lastNode.parent()) != null)                        lastNode.remove();                    tb.insertInFosterParent(lastNode);                }else {                    if ((lastNode.parent()) != null)                        lastNode.remove();                    commonAncestor.appendChild(lastNode);                }                org.jsoup.nodes.Element adopter = new org.jsoup.nodes.Element(formatEl.tag(), tb.getBaseUri());                adopter.attributes().addAll(formatEl.attributes());                org.jsoup.nodes.Node[] childNodes = furthestBlock.childNodes().toArray(new org.jsoup.nodes.Node[furthestBlock.childNodeSize()]);                for (org.jsoup.nodes.Node childNode : childNodes) {                    adopter.appendChild(childNode);                }                furthestBlock.appendChild(adopter);                tb.removeFromActiveFormattingElements(formatEl);                tb.removeFromStack(formatEl);                tb.insertOnStackAfter(furthestBlock, adopter);            }        }else            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyEndClosers)) {                if (!(tb.inScope(name))) {                    tb.error(this);                    return false;                }else {                    tb.generateImpliedEndTags();                    if (!(tb.currentElement().nodeName().equals(name)))                        tb.error(this);                    tb.popStackToClose(name);                }            }else                if (name.equals("span")) {                    return anyOtherEndTag(t, tb);                }else                    if (name.equals("li")) {                        if (!(tb.inListItemScope(name))) {                            tb.error(this);                            return false;                        }else {                            tb.generateImpliedEndTags(name);                            if (!(tb.currentElement().nodeName().equals(name)))                                tb.error(this);                            tb.popStackToClose(name);                        }                    }else                        if (name.equals("body")) {                            if (!(tb.inScope("body"))) {                                tb.error(this);                                return false;                            }else {                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.AfterBody);                            }                        }else                            if (name.equals("html")) {                                boolean notIgnored = tb.processEndTag("body");                                if (notIgnored)                                    return tb.process(endTag);                            }else                                if (name.equals("form")) {                                    org.jsoup.nodes.Element currentForm = tb.getFormElement();                                    tb.setFormElement(null);                                    if ((currentForm == null) || (!(tb.inScope(name)))) {                                        tb.error(this);                                        return false;                                    }else {                                        tb.generateImpliedEndTags();                                        if (!(tb.currentElement().nodeName().equals(name)))                                            tb.error(this);                                        tb.removeFromStack(currentForm);                                    }                                }else                                    if (name.equals("p")) {                                        if (!(tb.inButtonScope(name))) {                                            tb.error(this);                                            tb.processStartTag(name);                                            return tb.process(endTag);                                        }else {                                            tb.generateImpliedEndTags(name);                                            if (!(tb.currentElement().nodeName().equals(name)))                                                tb.error(this);                                            tb.popStackToClose(name);                                        }                                    }else                                        if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.DdDt)) {                                            if (!(tb.inScope(name))) {                                                tb.error(this);                                                return false;                                            }else {                                                tb.generateImpliedEndTags(name);                                                if (!(tb.currentElement().nodeName().equals(name)))                                                    tb.error(this);                                                tb.popStackToClose(name);                                            }                                        }else                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.Headings)) {                                                if (!(tb.inScope(org.jsoup.parser.HtmlTreeBuilderState.Constants.Headings))) {                                                    tb.error(this);                                                    return false;                                                }else {                                                    tb.generateImpliedEndTags(name);                                                    if (!(tb.currentElement().nodeName().equals(name)))                                                        tb.error(this);                                                    tb.popStackToClose(org.jsoup.parser.HtmlTreeBuilderState.Constants.Headings);                                                }                                            }else                                                if (name.equals("sarcasm")) {                                                    return anyOtherEndTag(t, tb);                                                }else                                                    if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartApplets)) {                                                        if (!(tb.inScope("name"))) {                                                            if (!(tb.inScope(name))) {                                                                tb.error(this);                                                                return false;                                                            }                                                            tb.generateImpliedEndTags();                                                            if (!(tb.currentElement().nodeName().equals(name)))                                                                tb.error(this);                                                            tb.popStackToClose(name);                                                            tb.clearFormattingElementsToLastMarker();                                                        }                                                    }else                                                        if (name.equals("br")) {                                                            tb.error(this);                                                            tb.processStartTag("br");                                                            return false;                                                        }else {                                                            return anyOtherEndTag(t, tb);                                                        }        break;    case EOF :        break;}::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.Tokeniser::::79::::3073::::3292::::if ((token.type) == (org.jsoup.parser.Token.TokenType.EndTag)) {    org.jsoup.parser.Token.EndTag endTag = ((org.jsoup.parser.Token.EndTag) (token));    if ((endTag.attributes) != null)        error("Attributes incorrectly present on end tag");}::::INSERT::::STATEMENT::::emit(tagPending)	false
org.jsoup.parser.Tokeniser::::79::::3073::::3292::::if ((token.type) == (org.jsoup.parser.Token.TokenType.EndTag)) {    org.jsoup.parser.Token.EndTag endTag = ((org.jsoup.parser.Token.EndTag) (token));    if ((endTag.attributes) != null)        error("Attributes incorrectly present on end tag");}::::INSERT::::STATEMENT::::emit(doctypePending)	false
org.jsoup.parser.Tokeniser::::79::::3073::::3292::::if ((token.type) == (org.jsoup.parser.Token.TokenType.EndTag)) {    org.jsoup.parser.Token.EndTag endTag = ((org.jsoup.parser.Token.EndTag) (token));    if ((endTag.attributes) != null)        error("Attributes incorrectly present on end tag");}::::INSERT::::STATEMENT::::emit(commentPending)	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.ScriptDataEscapeStartDash	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.RawtextEndTagOpen	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.RCDATAEndTagOpen	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.CommentStart	false
org.jsoup.parser.HtmlTreeBuilder::::95::::4927::::5130::::for (org.jsoup.nodes.Element parent : contextChain) {    if (parent instanceof org.jsoup.nodes.FormElement) {        formElement = ((org.jsoup.nodes.FormElement) (parent));        break;    }}::::INSERT::::STATEMENT::::pop()	false
org.jsoup.nodes.Attributes::::98::::2890::::2979::::if ((attributes) == null)    attributes = new java.util.LinkedHashMap<java.lang.String, org.jsoup.nodes.Attribute>(2);::::INSERT::::STATEMENT::::if ((attributes) == null)    return 0;	false
org.jsoup.parser.CharacterReader::::167::::4526::::4528::::pos::::org.jsoup.parser.CharacterReader.maxCacheLen	false
org.jsoup.parser.CharacterReader::::172::::4685::::4687::::pos::::org.jsoup.parser.CharacterReader.maxCacheLen	false
org.jsoup.parser.HtmlTreeBuilder::::394::::13975::::13995::::"select".equals(name)::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.HtmlTreeBuilder::::77::::4053::::4062::::contextTag::::pop()	false
org.jsoup.parser.CharacterReader::::177::::4798::::4800::::pos::::org.jsoup.parser.CharacterReader.maxCacheLen	false
org.jsoup.parser.CharacterReader::::58::::1377::::1379::::pos::::org.jsoup.parser.CharacterReader.maxCacheLen	false
org.jsoup.parser.CharacterReader::::174::::4732::::4734::::pos::::org.jsoup.parser.CharacterReader.maxCacheLen	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"p"	false
org.jsoup.parser.Token::::166::::5685::::5704::::pendingAttributeName::::("<" + (name())) + ">"	false
org.jsoup.parser.HtmlTreeBuilder::::393::::13942::::13945::::node::::this.headElement	false
org.jsoup.parser.CharacterReader::::177::::4765::::4767::::pos::::org.jsoup.parser.CharacterReader.maxCacheLen	false
org.jsoup.parser.Token::::107::::3448::::3471::::hasPendingAttributeValue::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(data)	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"li"	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"a"	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.CdataSection	false
org.jsoup.parser.TokeniserState::::872::::29316::::29336::::char c = r.consume()::::INSERT::::STATEMENT::::anythingElse(t, r)	false
org.jsoup.parser.HtmlTreeBuilder::::418::::15107::::15625::::if ("body".equals(name)) {    transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);    break;}else    if ("frameset".equals(name)) {        transition(org.jsoup.parser.HtmlTreeBuilderState.InFrameset);        break;    }else        if ("html".equals(name)) {            transition(org.jsoup.parser.HtmlTreeBuilderState.BeforeHead);            break;        }else            if (last) {                transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                break;            }::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.nodes.Attributes::::100::::2989::::2998::::attributes::::new java.util.LinkedHashMap<java.lang.String, org.jsoup.nodes.Attribute>(attributes.size())	false
org.jsoup.parser.Token::::104::::3199::::3965::::if ((pendingAttributeName) != null) {    org.jsoup.nodes.Attribute attribute;    if (hasPendingAttributeValue)        attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, ((pendingAttributeValue.length()) > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS));    else        if (hasEmptyAttributeValue)            attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, "");        else            attribute = new org.jsoup.nodes.BooleanAttribute(pendingAttributeName);    attributes.put(attribute);}::::INSERT::::STATEMENT::::newAttribute()	false
org.jsoup.parser.HtmlTreeBuilder::::75::::3890::::4479::::if (org.jsoup.helper.StringUtil.in(contextTag, "iframe", "noembed", "noframes", "style", "xmp"))    tokeniser.transition(org.jsoup.parser.TokeniserState.Rawtext);else    if (contextTag.equals("script"))        tokeniser.transition(org.jsoup.parser.TokeniserState.ScriptData);    else        if (contextTag.equals("noscript"))            tokeniser.transition(org.jsoup.parser.TokeniserState.Data);        else            if (contextTag.equals("plaintext"))                tokeniser.transition(org.jsoup.parser.TokeniserState.Data);            else                tokeniser.transition(org.jsoup.parser.TokeniserState.Data);::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.HtmlTreeBuilder::::418::::15107::::15625::::if ("body".equals(name)) {    transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);    break;}else    if ("frameset".equals(name)) {        transition(org.jsoup.parser.HtmlTreeBuilderState.InFrameset);        break;    }else        if ("html".equals(name)) {            transition(org.jsoup.parser.HtmlTreeBuilderState.BeforeHead);            break;        }else            if (last) {                transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                break;            }::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.nodes.Element::::192::::5899::::5904::::parent::::new org.jsoup.select.Elements(0)	false
org.jsoup.parser.HtmlTreeBuilder::::68::::3525::::3647::::if ((context.ownerDocument()) != null)    doc.quirksMode(context.ownerDocument().quirksMode());::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.CommentStartDash	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.AfterDoctypeSystemIdentifier	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.AfterDoctypePublicIdentifier	false
org.jsoup.parser.Token::::116::::3979::::4006::::pendingAttributeName = null::::attribute = new org.jsoup.nodes.BooleanAttribute(pendingAttributeName)	false
org.jsoup.nodes.Document::::43::::1263::::1269::::baseUri::::location	false
org.jsoup.nodes.Document::::41::::1216::::1222::::baseUri::::location	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"table"	false
org.jsoup.parser.Token::::107::::3444::::3904::::if (hasPendingAttributeValue)    attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, ((pendingAttributeValue.length()) > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS));else    if (hasEmptyAttributeValue)        attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, "");    else        attribute = new org.jsoup.nodes.BooleanAttribute(pendingAttributeName);::::INSERT::::STATEMENT::::newAttribute()	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"span"	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"form"	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.Doctype	false
org.jsoup.parser.HtmlTreeBuilder::::415::::14973::::15625::::if ("head".equals(name)) {    transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);    break;}else    if ("body".equals(name)) {        transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);        break;    }else        if ("frameset".equals(name)) {            transition(org.jsoup.parser.HtmlTreeBuilderState.InFrameset);            break;        }else            if ("html".equals(name)) {                transition(org.jsoup.parser.HtmlTreeBuilderState.BeforeHead);                break;            }else                if (last) {                    transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                    break;                }::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.CommentEndDash	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.BeforeDoctypeName	false
org.jsoup.parser.TokeniserState::::551::::18233::::18253::::char c = r.consume()::::INSERT::::STATEMENT::::anythingElse(t, r)	false
org.jsoup.parser.HtmlTreeBuilder::::67::::3490::::5140::::if (context != null) {    if ((context.ownerDocument()) != null)        doc.quirksMode(context.ownerDocument().quirksMode());    java.lang.String contextTag = context.tagName();    if (org.jsoup.helper.StringUtil.in(contextTag, "title", "textarea"))        tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);    else        if (org.jsoup.helper.StringUtil.in(contextTag, "iframe", "noembed", "noframes", "style", "xmp"))            tokeniser.transition(org.jsoup.parser.TokeniserState.Rawtext);        else            if (contextTag.equals("script"))                tokeniser.transition(org.jsoup.parser.TokeniserState.ScriptData);            else                if (contextTag.equals("noscript"))                    tokeniser.transition(org.jsoup.parser.TokeniserState.Data);                else                    if (contextTag.equals("plaintext"))                        tokeniser.transition(org.jsoup.parser.TokeniserState.Data);                    else                        tokeniser.transition(org.jsoup.parser.TokeniserState.Data);    root = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("html", settings), baseUri);    doc.appendChild(root);    stack.add(root);    resetInsertionMode();    org.jsoup.select.Elements contextChain = context.parents();    contextChain.add(0, context);    for (org.jsoup.nodes.Element parent : contextChain) {        if (parent instanceof org.jsoup.nodes.FormElement) {            formElement = ((org.jsoup.nodes.FormElement) (parent));            break;        }    }}::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.Token::::119::::4110::::4138::::org.jsoup.parser.Token.reset(pendingAttributeValue)::::INSERT::::STATEMENT::::if ((pendingAttributeName) != null) {    newAttribute();}	false
org.jsoup.parser.Token::::116::::3979::::3998::::pendingAttributeName::::this.data	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.BogusComment	false
org.jsoup.parser.Token::::104::::3203::::3222::::pendingAttributeName::::this.data	false
org.jsoup.parser.Token::::166::::5622::::5641::::pendingAttributeName::::this.data	false
org.jsoup.parser.Token::::166::::5645::::5664::::pendingAttributeName::::this.data	false
org.jsoup.parser.Token::::166::::5685::::5704::::pendingAttributeName::::this.data	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"tr"	false
org.jsoup.parser.HtmlTreeBuilder::::93::::4854::::4860::::context::::parent	false
org.jsoup.parser.HtmlTreeBuilder::::415::::14973::::15625::::if ("head".equals(name)) {    transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);    break;}else    if ("body".equals(name)) {        transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);        break;    }else        if ("frameset".equals(name)) {            transition(org.jsoup.parser.HtmlTreeBuilderState.InFrameset);            break;        }else            if ("html".equals(name)) {                transition(org.jsoup.parser.HtmlTreeBuilderState.BeforeHead);                break;            }else                if (last) {                    transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                    break;                }::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.HtmlTreeBuilder::::390::::13850::::13853::::last::::framesetOk	false
org.jsoup.parser.HtmlTreeBuilder::::390::::13850::::13853::::last::::fosterInserts	false
org.jsoup.parser.HtmlTreeBuilder::::599::::21270::::21273::::last::::this.headElement	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"tbody"	false
org.jsoup.parser.HtmlTreeBuilder::::73::::3760::::4479::::if (org.jsoup.helper.StringUtil.in(contextTag, "title", "textarea"))    tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);else    if (org.jsoup.helper.StringUtil.in(contextTag, "iframe", "noembed", "noframes", "style", "xmp"))        tokeniser.transition(org.jsoup.parser.TokeniserState.Rawtext);    else        if (contextTag.equals("script"))            tokeniser.transition(org.jsoup.parser.TokeniserState.ScriptData);        else            if (contextTag.equals("noscript"))                tokeniser.transition(org.jsoup.parser.TokeniserState.Data);            else                if (contextTag.equals("plaintext"))                    tokeniser.transition(org.jsoup.parser.TokeniserState.Data);                else                    tokeniser.transition(org.jsoup.parser.TokeniserState.Data);::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.TokeniserState::::599::::19876::::20990::::switch (c) {    case '\t' :    case '\n' :    case '\r' :    case '\f' :    case ' ' :        t.transition(org.jsoup.parser.TokeniserState.AfterAttributeName);        break;    case '/' :        t.transition(org.jsoup.parser.TokeniserState.SelfClosingStartTag);        break;    case '=' :        t.transition(org.jsoup.parser.TokeniserState.BeforeAttributeValue);        break;    case '>' :        t.emitTagPending();        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case org.jsoup.parser.TokeniserState.nullChar :        t.error(this);        t.tagPending.appendAttributeName(org.jsoup.parser.TokeniserState.replacementChar);        break;    case org.jsoup.parser.TokeniserState.eof :        t.eofError(this);        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case '"' :    case '\'' :    case '<' :        t.error(this);        t.tagPending.appendAttributeName(c);}::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.readData(t, r, this, org.jsoup.parser.TokeniserState.ScriptDataLessthanSign)	false
org.jsoup.parser.TokeniserState::::599::::19876::::20990::::switch (c) {    case '\t' :    case '\n' :    case '\r' :    case '\f' :    case ' ' :        t.transition(org.jsoup.parser.TokeniserState.AfterAttributeName);        break;    case '/' :        t.transition(org.jsoup.parser.TokeniserState.SelfClosingStartTag);        break;    case '=' :        t.transition(org.jsoup.parser.TokeniserState.BeforeAttributeValue);        break;    case '>' :        t.emitTagPending();        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case org.jsoup.parser.TokeniserState.nullChar :        t.error(this);        t.tagPending.appendAttributeName(org.jsoup.parser.TokeniserState.replacementChar);        break;    case org.jsoup.parser.TokeniserState.eof :        t.eofError(this);        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case '"' :    case '\'' :    case '<' :        t.error(this);        t.tagPending.appendAttributeName(c);}::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.readData(t, r, this, org.jsoup.parser.TokeniserState.RawtextLessthanSign)	false
org.jsoup.parser.Token::::104::::3199::::3965::::if ((pendingAttributeName) != null) {    org.jsoup.nodes.Attribute attribute;    if (hasPendingAttributeValue)        attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, ((pendingAttributeValue.length()) > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS));    else        if (hasEmptyAttributeValue)            attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, "");        else            attribute = new org.jsoup.nodes.BooleanAttribute(pendingAttributeName);    attributes.put(attribute);}::::INSERT::::STATEMENT::::if ((pendingAttributeName) != null) {    newAttribute();}	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"thead"	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"tfoot"	false
org.jsoup.parser.HtmlTreeBuilder::::412::::14845::::15625::::if ("table".equals(name)) {    transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);    break;}else    if ("head".equals(name)) {        transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);        break;    }else        if ("body".equals(name)) {            transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);            break;        }else            if ("frameset".equals(name)) {                transition(org.jsoup.parser.HtmlTreeBuilderState.InFrameset);                break;            }else                if ("html".equals(name)) {                    transition(org.jsoup.parser.HtmlTreeBuilderState.BeforeHead);                    break;                }else                    if (last) {                        transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                        break;                    }::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.CharacterReader::::171::::4619::::4621::::pos::::org.jsoup.parser.CharacterReader.maxCacheLen	false
org.jsoup.parser.HtmlTreeBuilder::::419::::15150::::15189::::transition(org.jsoup.parser.HtmlTreeBuilderState.InBody)::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.HtmlTreeBuilder::::86::::4505::::4508::::root::::headElement	false
org.jsoup.parser.HtmlTreeBuilder::::88::::4622::::4625::::root::::headElement	false
org.jsoup.parser.HtmlTreeBuilder::::87::::4593::::4596::::root::::headElement	false
org.jsoup.parser.HtmlTreeBuilder::::559::::19954::::19978::::formattingElements.size()::::DELETE::::INFIX	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"caption"	false
org.jsoup.parser.HtmlTreeBuilder::::94::::4905::::4911::::context::::parent	false
org.jsoup.nodes.Attributes::::180::::5312::::5321::::attributes::::new java.util.LinkedHashMap<java.lang.String, org.jsoup.nodes.Attribute>(2)	false
org.jsoup.parser.HtmlTreeBuilder::::412::::14845::::15625::::if ("table".equals(name)) {    transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);    break;}else    if ("head".equals(name)) {        transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);        break;    }else        if ("body".equals(name)) {            transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);            break;        }else            if ("frameset".equals(name)) {                transition(org.jsoup.parser.HtmlTreeBuilderState.InFrameset);                break;            }else                if ("html".equals(name)) {                    transition(org.jsoup.parser.HtmlTreeBuilderState.BeforeHead);                    break;                }else                    if (last) {                        transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                        break;                    }::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.HtmlTreeBuilder::::68::::3529::::3535::::context::::parent	false
org.jsoup.parser.Token::::125::::4279::::4298::::pendingAttributeName::::this.data	false
org.jsoup.parser.HtmlTreeBuilder::::397::::14157::::14160::::last::::framesetOk	false
org.jsoup.parser.HtmlTreeBuilder::::397::::14157::::14160::::last::::fosterInserts	false
org.jsoup.parser.HtmlTreeBuilder::::69::::3610::::3616::::context::::parent	false
org.jsoup.parser.HtmlTreeBuilder::::72::::3729::::3735::::context::::parent	false
org.jsoup.parser.CharacterReader::::177::::4765::::4812::::(pos) > start ? cacheString(start, ((pos) - start)) : ""::::cacheString(pos, ((length) - (pos)))	false
org.jsoup.parser.HtmlTreeBuilder::::67::::3494::::3500::::context::::parent	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.ScriptDataLessthanSign	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.ScriptDataEndTagName	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.RawtextLessthanSign	false
org.jsoup.parser.TokeniserState::::588::::19546::::19558::::org.jsoup.parser.TokeniserState.AttributeName::::org.jsoup.parser.TokeniserState.RawtextEndTagName	false
org.jsoup.parser.HtmlTreeBuilder::::409::::14700::::15625::::if ("colgroup".equals(name)) {    transition(org.jsoup.parser.HtmlTreeBuilderState.InColumnGroup);    break;}else    if ("table".equals(name)) {        transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);        break;    }else        if ("head".equals(name)) {            transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);            break;        }else            if ("body".equals(name)) {                transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                break;            }else                if ("frameset".equals(name)) {                    transition(org.jsoup.parser.HtmlTreeBuilderState.InFrameset);                    break;                }else                    if ("html".equals(name)) {                        transition(org.jsoup.parser.HtmlTreeBuilderState.BeforeHead);                        break;                    }else                        if (last) {                            transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                            break;                        }::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.HtmlTreeBuilder::::387::::13727::::13738::::stack.size()::::DELETE::::INFIX	false
org.jsoup.parser.Token::::116::::3979::::4006::::pendingAttributeName = null::::INSERT::::STATEMENT::::if ((pendingAttributeName) != null) {    newAttribute();}	false
org.jsoup.parser.HtmlTreeBuilder::::391::::13886::::13899::::contextElement::::this.headElement	false
org.jsoup.parser.TokeniserState::::599::::19876::::20990::::switch (c) {    case '\t' :    case '\n' :    case '\r' :    case '\f' :    case ' ' :        t.transition(org.jsoup.parser.TokeniserState.AfterAttributeName);        break;    case '/' :        t.transition(org.jsoup.parser.TokeniserState.SelfClosingStartTag);        break;    case '=' :        t.transition(org.jsoup.parser.TokeniserState.BeforeAttributeValue);        break;    case '>' :        t.emitTagPending();        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case org.jsoup.parser.TokeniserState.nullChar :        t.error(this);        t.tagPending.appendAttributeName(org.jsoup.parser.TokeniserState.replacementChar);        break;    case org.jsoup.parser.TokeniserState.eof :        t.eofError(this);        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case '"' :    case '\'' :    case '<' :        t.error(this);        t.tagPending.appendAttributeName(c);}::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.readEndTag(t, r, org.jsoup.parser.TokeniserState.ScriptDataEndTagName, org.jsoup.parser.TokeniserState.ScriptData)	false
org.jsoup.parser.TokeniserState::::599::::19876::::20990::::switch (c) {    case '\t' :    case '\n' :    case '\r' :    case '\f' :    case ' ' :        t.transition(org.jsoup.parser.TokeniserState.AfterAttributeName);        break;    case '/' :        t.transition(org.jsoup.parser.TokeniserState.SelfClosingStartTag);        break;    case '=' :        t.transition(org.jsoup.parser.TokeniserState.BeforeAttributeValue);        break;    case '>' :        t.emitTagPending();        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case org.jsoup.parser.TokeniserState.nullChar :        t.error(this);        t.tagPending.appendAttributeName(org.jsoup.parser.TokeniserState.replacementChar);        break;    case org.jsoup.parser.TokeniserState.eof :        t.eofError(this);        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case '"' :    case '\'' :    case '<' :        t.error(this);        t.tagPending.appendAttributeName(c);}::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.readEndTag(t, r, org.jsoup.parser.TokeniserState.RawtextEndTagName, org.jsoup.parser.TokeniserState.Rawtext)	false
org.jsoup.parser.TokeniserState::::599::::19876::::20990::::switch (c) {    case '\t' :    case '\n' :    case '\r' :    case '\f' :    case ' ' :        t.transition(org.jsoup.parser.TokeniserState.AfterAttributeName);        break;    case '/' :        t.transition(org.jsoup.parser.TokeniserState.SelfClosingStartTag);        break;    case '=' :        t.transition(org.jsoup.parser.TokeniserState.BeforeAttributeValue);        break;    case '>' :        t.emitTagPending();        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case org.jsoup.parser.TokeniserState.nullChar :        t.error(this);        t.tagPending.appendAttributeName(org.jsoup.parser.TokeniserState.replacementChar);        break;    case org.jsoup.parser.TokeniserState.eof :        t.eofError(this);        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case '"' :    case '\'' :    case '<' :        t.error(this);        t.tagPending.appendAttributeName(c);}::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.readCharRef(t, org.jsoup.parser.TokeniserState.Rcdata)	false
org.jsoup.parser.TokeniserState::::599::::19876::::20990::::switch (c) {    case '\t' :    case '\n' :    case '\r' :    case '\f' :    case ' ' :        t.transition(org.jsoup.parser.TokeniserState.AfterAttributeName);        break;    case '/' :        t.transition(org.jsoup.parser.TokeniserState.SelfClosingStartTag);        break;    case '=' :        t.transition(org.jsoup.parser.TokeniserState.BeforeAttributeValue);        break;    case '>' :        t.emitTagPending();        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case org.jsoup.parser.TokeniserState.nullChar :        t.error(this);        t.tagPending.appendAttributeName(org.jsoup.parser.TokeniserState.replacementChar);        break;    case org.jsoup.parser.TokeniserState.eof :        t.eofError(this);        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case '"' :    case '\'' :    case '<' :        t.error(this);        t.tagPending.appendAttributeName(c);}::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.readCharRef(t, org.jsoup.parser.TokeniserState.Data)	false
org.jsoup.parser.TokeniserState::::599::::19876::::20990::::switch (c) {    case '\t' :    case '\n' :    case '\r' :    case '\f' :    case ' ' :        t.transition(org.jsoup.parser.TokeniserState.AfterAttributeName);        break;    case '/' :        t.transition(org.jsoup.parser.TokeniserState.SelfClosingStartTag);        break;    case '=' :        t.transition(org.jsoup.parser.TokeniserState.BeforeAttributeValue);        break;    case '>' :        t.emitTagPending();        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case org.jsoup.parser.TokeniserState.nullChar :        t.error(this);        t.tagPending.appendAttributeName(org.jsoup.parser.TokeniserState.replacementChar);        break;    case org.jsoup.parser.TokeniserState.eof :        t.eofError(this);        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case '"' :    case '\'' :    case '<' :        t.error(this);        t.tagPending.appendAttributeName(c);}::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataEndTag(t, r, org.jsoup.parser.TokeniserState.ScriptDataEscaped)	false
org.jsoup.parser.TokeniserState::::599::::19876::::20990::::switch (c) {    case '\t' :    case '\n' :    case '\r' :    case '\f' :    case ' ' :        t.transition(org.jsoup.parser.TokeniserState.AfterAttributeName);        break;    case '/' :        t.transition(org.jsoup.parser.TokeniserState.SelfClosingStartTag);        break;    case '=' :        t.transition(org.jsoup.parser.TokeniserState.BeforeAttributeValue);        break;    case '>' :        t.emitTagPending();        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case org.jsoup.parser.TokeniserState.nullChar :        t.error(this);        t.tagPending.appendAttributeName(org.jsoup.parser.TokeniserState.replacementChar);        break;    case org.jsoup.parser.TokeniserState.eof :        t.eofError(this);        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case '"' :    case '\'' :    case '<' :        t.error(this);        t.tagPending.appendAttributeName(c);}::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataEndTag(t, r, org.jsoup.parser.TokeniserState.ScriptData)	false
org.jsoup.parser.TokeniserState::::599::::19876::::20990::::switch (c) {    case '\t' :    case '\n' :    case '\r' :    case '\f' :    case ' ' :        t.transition(org.jsoup.parser.TokeniserState.AfterAttributeName);        break;    case '/' :        t.transition(org.jsoup.parser.TokeniserState.SelfClosingStartTag);        break;    case '=' :        t.transition(org.jsoup.parser.TokeniserState.BeforeAttributeValue);        break;    case '>' :        t.emitTagPending();        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case org.jsoup.parser.TokeniserState.nullChar :        t.error(this);        t.tagPending.appendAttributeName(org.jsoup.parser.TokeniserState.replacementChar);        break;    case org.jsoup.parser.TokeniserState.eof :        t.eofError(this);        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case '"' :    case '\'' :    case '<' :        t.error(this);        t.tagPending.appendAttributeName(c);}::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataEndTag(t, r, org.jsoup.parser.TokeniserState.Rawtext)	false
org.jsoup.parser.TokeniserState::::599::::19876::::20990::::switch (c) {    case '\t' :    case '\n' :    case '\r' :    case '\f' :    case ' ' :        t.transition(org.jsoup.parser.TokeniserState.AfterAttributeName);        break;    case '/' :        t.transition(org.jsoup.parser.TokeniserState.SelfClosingStartTag);        break;    case '=' :        t.transition(org.jsoup.parser.TokeniserState.BeforeAttributeValue);        break;    case '>' :        t.emitTagPending();        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case org.jsoup.parser.TokeniserState.nullChar :        t.error(this);        t.tagPending.appendAttributeName(org.jsoup.parser.TokeniserState.replacementChar);        break;    case org.jsoup.parser.TokeniserState.eof :        t.eofError(this);        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case '"' :    case '\'' :    case '<' :        t.error(this);        t.tagPending.appendAttributeName(c);}::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataDoubleEscapeTag(t, r, org.jsoup.parser.TokeniserState.ScriptDataEscaped, org.jsoup.parser.TokeniserState.ScriptDataDoubleEscaped)	false
org.jsoup.parser.TokeniserState::::599::::19876::::20990::::switch (c) {    case '\t' :    case '\n' :    case '\r' :    case '\f' :    case ' ' :        t.transition(org.jsoup.parser.TokeniserState.AfterAttributeName);        break;    case '/' :        t.transition(org.jsoup.parser.TokeniserState.SelfClosingStartTag);        break;    case '=' :        t.transition(org.jsoup.parser.TokeniserState.BeforeAttributeValue);        break;    case '>' :        t.emitTagPending();        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case org.jsoup.parser.TokeniserState.nullChar :        t.error(this);        t.tagPending.appendAttributeName(org.jsoup.parser.TokeniserState.replacementChar);        break;    case org.jsoup.parser.TokeniserState.eof :        t.eofError(this);        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case '"' :    case '\'' :    case '<' :        t.error(this);        t.tagPending.appendAttributeName(c);}::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataDoubleEscapeTag(t, r, org.jsoup.parser.TokeniserState.ScriptDataDoubleEscaped, org.jsoup.parser.TokeniserState.ScriptDataEscaped)	false
org.jsoup.parser.HtmlTreeBuilder::::63::::3394::::3407::::contextElement::::this.headElement	false
org.jsoup.parser.HtmlTreeBuilderState::::287::::11890::::11924::::tb.reconstructFormattingElements()::::INSERT::::STATEMENT::::if (notIgnored)    return tb.process(endTag);	false
org.jsoup.parser.HtmlTreeBuilder::::409::::14700::::15625::::if ("colgroup".equals(name)) {    transition(org.jsoup.parser.HtmlTreeBuilderState.InColumnGroup);    break;}else    if ("table".equals(name)) {        transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);        break;    }else        if ("head".equals(name)) {            transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);            break;        }else            if ("body".equals(name)) {                transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                break;            }else                if ("frameset".equals(name)) {                    transition(org.jsoup.parser.HtmlTreeBuilderState.InFrameset);                    break;                }else                    if ("html".equals(name)) {                        transition(org.jsoup.parser.HtmlTreeBuilderState.BeforeHead);                        break;                    }else                        if (last) {                            transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                            break;                        }::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"td"	false
org.jsoup.parser.HtmlTreeBuilder::::559::::19899::::19923::::formattingElements.size()::::DELETE::::INFIX	false
org.jsoup.parser.Token::::166::::5685::::5704::::pendingAttributeName::::systemIdentifier.toString()	false
org.jsoup.parser.Token::::166::::5685::::5704::::pendingAttributeName::::publicIdentifier.toString()	false
org.jsoup.parser.Token::::166::::5685::::5704::::pendingAttributeName::::name.toString()	false
org.jsoup.parser.Token::::166::::5685::::5704::::pendingAttributeName::::data.toString()	false
org.jsoup.parser.HtmlTreeBuilder::::390::::13850::::13853::::last::::this.framesetOk	false
org.jsoup.parser.HtmlTreeBuilder::::390::::13850::::13853::::last::::this.fosterInserts	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"th"	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.ScriptDataEscapedDashDash	false
org.jsoup.parser.HtmlTreeBuilder::::406::::14568::::15625::::if ("caption".equals(name)) {    transition(org.jsoup.parser.HtmlTreeBuilderState.InCaption);    break;}else    if ("colgroup".equals(name)) {        transition(org.jsoup.parser.HtmlTreeBuilderState.InColumnGroup);        break;    }else        if ("table".equals(name)) {            transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);            break;        }else            if ("head".equals(name)) {                transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                break;            }else                if ("body".equals(name)) {                    transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                    break;                }else                    if ("frameset".equals(name)) {                        transition(org.jsoup.parser.HtmlTreeBuilderState.InFrameset);                        break;                    }else                        if ("html".equals(name)) {                            transition(org.jsoup.parser.HtmlTreeBuilderState.BeforeHead);                            break;                        }else                            if (last) {                                transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                                break;                            }::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.HtmlTreeBuilder::::63::::3411::::3417::::context::::parent	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"frameset"	false
org.jsoup.parser.HtmlTreeBuilder::::67::::3490::::5140::::if (context != null) {    if ((context.ownerDocument()) != null)        doc.quirksMode(context.ownerDocument().quirksMode());    java.lang.String contextTag = context.tagName();    if (org.jsoup.helper.StringUtil.in(contextTag, "title", "textarea"))        tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);    else        if (org.jsoup.helper.StringUtil.in(contextTag, "iframe", "noembed", "noframes", "style", "xmp"))            tokeniser.transition(org.jsoup.parser.TokeniserState.Rawtext);        else            if (contextTag.equals("script"))                tokeniser.transition(org.jsoup.parser.TokeniserState.ScriptData);            else                if (contextTag.equals("noscript"))                    tokeniser.transition(org.jsoup.parser.TokeniserState.Data);                else                    if (contextTag.equals("plaintext"))                        tokeniser.transition(org.jsoup.parser.TokeniserState.Data);                    else                        tokeniser.transition(org.jsoup.parser.TokeniserState.Data);    root = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("html", settings), baseUri);    doc.appendChild(root);    stack.add(root);    resetInsertionMode();    org.jsoup.select.Elements contextChain = context.parents();    contextChain.add(0, context);    for (org.jsoup.nodes.Element parent : contextChain) {        if (parent instanceof org.jsoup.nodes.FormElement) {            formElement = ((org.jsoup.nodes.FormElement) (parent));            break;        }    }}::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.Token::::117::::4020::::4050::::hasEmptyAttributeValue = false::::INSERT::::STATEMENT::::if ((pendingAttributeName) != null) {    newAttribute();}	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.Rcdata	false
org.jsoup.parser.HtmlTreeBuilder::::406::::14568::::15625::::if ("caption".equals(name)) {    transition(org.jsoup.parser.HtmlTreeBuilderState.InCaption);    break;}else    if ("colgroup".equals(name)) {        transition(org.jsoup.parser.HtmlTreeBuilderState.InColumnGroup);        break;    }else        if ("table".equals(name)) {            transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);            break;        }else            if ("head".equals(name)) {                transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                break;            }else                if ("body".equals(name)) {                    transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                    break;                }else                    if ("frameset".equals(name)) {                        transition(org.jsoup.parser.HtmlTreeBuilderState.InFrameset);                        break;                    }else                        if ("html".equals(name)) {                            transition(org.jsoup.parser.HtmlTreeBuilderState.BeforeHead);                            break;                        }else                            if (last) {                                transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                                break;                            }::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.HtmlTreeBuilder::::72::::3729::::3735::::context::::removeLastFormattingElement()	false
org.jsoup.nodes.Attributes::::100::::2989::::2998::::attributes::::new java.util.LinkedHashMap<java.lang.String, org.jsoup.nodes.Attribute>(2)	false
org.jsoup.parser.Token::::120::::4152::::4181::::pendingAttributeValueS = null::::INSERT::::STATEMENT::::if ((pendingAttributeName) != null) {    newAttribute();}	false
org.jsoup.parser.HtmlTreeBuilder::::68::::3529::::3535::::context::::removeLastFormattingElement()	false
org.jsoup.parser.HtmlTreeBuilder::::397::::14157::::14160::::last::::this.framesetOk	false
org.jsoup.parser.HtmlTreeBuilder::::397::::14157::::14160::::last::::this.fosterInserts	false
org.jsoup.parser.HtmlTreeBuilder::::403::::14388::::15625::::if ((("tbody".equals(name)) || ("thead".equals(name))) || ("tfoot".equals(name))) {    transition(org.jsoup.parser.HtmlTreeBuilderState.InTableBody);    break;}else    if ("caption".equals(name)) {        transition(org.jsoup.parser.HtmlTreeBuilderState.InCaption);        break;    }else        if ("colgroup".equals(name)) {            transition(org.jsoup.parser.HtmlTreeBuilderState.InColumnGroup);            break;        }else            if ("table".equals(name)) {                transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                break;            }else                if ("head".equals(name)) {                    transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                    break;                }else                    if ("body".equals(name)) {                        transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                        break;                    }else                        if ("frameset".equals(name)) {                            transition(org.jsoup.parser.HtmlTreeBuilderState.InFrameset);                            break;                        }else                            if ("html".equals(name)) {                                transition(org.jsoup.parser.HtmlTreeBuilderState.BeforeHead);                                break;                            }else                                if (last) {                                    transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                                    break;                                }::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.AttributeValue_doubleQuoted	false
org.jsoup.parser.Token::::118::::4064::::4096::::hasPendingAttributeValue = false::::INSERT::::STATEMENT::::if ((pendingAttributeName) != null) {    newAttribute();}	false
org.jsoup.parser.HtmlTreeBuilder::::386::::13682::::13702::::boolean last = false::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.HtmlTreeBuilder::::69::::3610::::3616::::context::::removeLastFormattingElement()	false
org.jsoup.parser.HtmlTreeBuilder::::386::::13682::::13702::::boolean last = false::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11316::::name.equals("a")::::INSERT::::STATEMENT::::if (node == formatEl)    break;	false
org.jsoup.parser.HtmlTreeBuilder::::658::::23389::::23413::::formattingElements.size()::::DELETE::::INFIX	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"colgroup"	false
org.jsoup.parser.Token::::110::::3696::::3904::::if (hasEmptyAttributeValue)    attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, "");else    attribute = new org.jsoup.nodes.BooleanAttribute(pendingAttributeName);::::INSERT::::STATEMENT::::newAttribute()	false
org.jsoup.parser.HtmlTreeBuilder::::403::::14388::::15625::::if ((("tbody".equals(name)) || ("thead".equals(name))) || ("tfoot".equals(name))) {    transition(org.jsoup.parser.HtmlTreeBuilderState.InTableBody);    break;}else    if ("caption".equals(name)) {        transition(org.jsoup.parser.HtmlTreeBuilderState.InCaption);        break;    }else        if ("colgroup".equals(name)) {            transition(org.jsoup.parser.HtmlTreeBuilderState.InColumnGroup);            break;        }else            if ("table".equals(name)) {                transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                break;            }else                if ("head".equals(name)) {                    transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                    break;                }else                    if ("body".equals(name)) {                        transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                        break;                    }else                        if ("frameset".equals(name)) {                            transition(org.jsoup.parser.HtmlTreeBuilderState.InFrameset);                            break;                        }else                            if ("html".equals(name)) {                                transition(org.jsoup.parser.HtmlTreeBuilderState.BeforeHead);                                break;                            }else                                if (last) {                                    transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                                    break;                                }::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::startTag.attributes	false
org.jsoup.parser.HtmlTreeBuilder::::387::::13712::::15635::::for (int pos = (stack.size()) - 1; pos >= 0; pos--) {    org.jsoup.nodes.Element node = stack.get(pos);    if (pos == 0) {        last = true;        node = contextElement;    }    java.lang.String name = node.nodeName();    if ("select".equals(name)) {        transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);        break;    }else        if (("td".equals(name)) || (("th".equals(name)) && (!last))) {            transition(org.jsoup.parser.HtmlTreeBuilderState.InCell);            break;        }else            if ("tr".equals(name)) {                transition(org.jsoup.parser.HtmlTreeBuilderState.InRow);                break;            }else                if ((("tbody".equals(name)) || ("thead".equals(name))) || ("tfoot".equals(name))) {                    transition(org.jsoup.parser.HtmlTreeBuilderState.InTableBody);                    break;                }else                    if ("caption".equals(name)) {                        transition(org.jsoup.parser.HtmlTreeBuilderState.InCaption);                        break;                    }else                        if ("colgroup".equals(name)) {                            transition(org.jsoup.parser.HtmlTreeBuilderState.InColumnGroup);                            break;                        }else                            if ("table".equals(name)) {                                transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                                break;                            }else                                if ("head".equals(name)) {                                    transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                                    break;                                }else                                    if ("body".equals(name)) {                                        transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                                        break;                                    }else                                        if ("frameset".equals(name)) {                                            transition(org.jsoup.parser.HtmlTreeBuilderState.InFrameset);                                            break;                                        }else                                            if ("html".equals(name)) {                                                transition(org.jsoup.parser.HtmlTreeBuilderState.BeforeHead);                                                break;                                            }else                                                if (last) {                                                    transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                                                    break;                                                }}::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.HtmlTreeBuilder::::400::::14265::::15625::::if ("tr".equals(name)) {    transition(org.jsoup.parser.HtmlTreeBuilderState.InRow);    break;}else    if ((("tbody".equals(name)) || ("thead".equals(name))) || ("tfoot".equals(name))) {        transition(org.jsoup.parser.HtmlTreeBuilderState.InTableBody);        break;    }else        if ("caption".equals(name)) {            transition(org.jsoup.parser.HtmlTreeBuilderState.InCaption);            break;        }else            if ("colgroup".equals(name)) {                transition(org.jsoup.parser.HtmlTreeBuilderState.InColumnGroup);                break;            }else                if ("table".equals(name)) {                    transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                    break;                }else                    if ("head".equals(name)) {                        transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                        break;                    }else                        if ("body".equals(name)) {                            transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                            break;                        }else                            if ("frameset".equals(name)) {                                transition(org.jsoup.parser.HtmlTreeBuilderState.InFrameset);                                break;                            }else                                if ("html".equals(name)) {                                    transition(org.jsoup.parser.HtmlTreeBuilderState.BeforeHead);                                    break;                                }else                                    if (last) {                                        transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                                        break;                                    }::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.AfterAttributeName	false
org.jsoup.parser.HtmlTreeBuilder::::400::::14265::::15625::::if ("tr".equals(name)) {    transition(org.jsoup.parser.HtmlTreeBuilderState.InRow);    break;}else    if ((("tbody".equals(name)) || ("thead".equals(name))) || ("tfoot".equals(name))) {        transition(org.jsoup.parser.HtmlTreeBuilderState.InTableBody);        break;    }else        if ("caption".equals(name)) {            transition(org.jsoup.parser.HtmlTreeBuilderState.InCaption);            break;        }else            if ("colgroup".equals(name)) {                transition(org.jsoup.parser.HtmlTreeBuilderState.InColumnGroup);                break;            }else                if ("table".equals(name)) {                    transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                    break;                }else                    if ("head".equals(name)) {                        transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                        break;                    }else                        if ("body".equals(name)) {                            transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                            break;                        }else                            if ("frameset".equals(name)) {                                transition(org.jsoup.parser.HtmlTreeBuilderState.InFrameset);                                break;                            }else                                if ("html".equals(name)) {                                    transition(org.jsoup.parser.HtmlTreeBuilderState.BeforeHead);                                    break;                                }else                                    if (last) {                                        transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                                        break;                                    }::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.BeforeDoctypeSystemIdentifier	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.BeforeDoctypePublicIdentifier	false
org.jsoup.parser.HtmlTreeBuilder::::93::::4854::::4860::::context::::removeLastFormattingElement()	false
org.jsoup.parser.HtmlTreeBuilder::::397::::14109::::15625::::if (("td".equals(name)) || (("th".equals(name)) && (!last))) {    transition(org.jsoup.parser.HtmlTreeBuilderState.InCell);    break;}else    if ("tr".equals(name)) {        transition(org.jsoup.parser.HtmlTreeBuilderState.InRow);        break;    }else        if ((("tbody".equals(name)) || ("thead".equals(name))) || ("tfoot".equals(name))) {            transition(org.jsoup.parser.HtmlTreeBuilderState.InTableBody);            break;        }else            if ("caption".equals(name)) {                transition(org.jsoup.parser.HtmlTreeBuilderState.InCaption);                break;            }else                if ("colgroup".equals(name)) {                    transition(org.jsoup.parser.HtmlTreeBuilderState.InColumnGroup);                    break;                }else                    if ("table".equals(name)) {                        transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                        break;                    }else                        if ("head".equals(name)) {                            transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                            break;                        }else                            if ("body".equals(name)) {                                transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                                break;                            }else                                if ("frameset".equals(name)) {                                    transition(org.jsoup.parser.HtmlTreeBuilderState.InFrameset);                                    break;                                }else                                    if ("html".equals(name)) {                                        transition(org.jsoup.parser.HtmlTreeBuilderState.BeforeHead);                                        break;                                    }else                                        if (last) {                                            transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                                            break;                                        }::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.BetweenDoctypePublicAndSystemIdentifiers	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.AfterDoctypeName	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11316::::name.equals("a")::::INSERT::::STATEMENT::::tb.process(startTag)	false
org.jsoup.parser.HtmlTreeBuilder::::77::::4053::::4062::::contextTag::::this.headElement	false
org.jsoup.parser.HtmlTreeBuilder::::77::::4053::::4062::::contextTag::::headElement	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.CommentEndBang	false
org.jsoup.parser.HtmlTreeBuilder::::79::::4168::::4177::::contextTag::::this.headElement	false
org.jsoup.parser.HtmlTreeBuilder::::79::::4168::::4177::::contextTag::::headElement	false
org.jsoup.parser.HtmlTreeBuilder::::81::::4314::::4323::::contextTag::::this.headElement	false
org.jsoup.parser.HtmlTreeBuilder::::81::::4314::::4323::::contextTag::::headElement	false
org.jsoup.parser.HtmlTreeBuilder::::397::::14109::::15625::::if (("td".equals(name)) || (("th".equals(name)) && (!last))) {    transition(org.jsoup.parser.HtmlTreeBuilderState.InCell);    break;}else    if ("tr".equals(name)) {        transition(org.jsoup.parser.HtmlTreeBuilderState.InRow);        break;    }else        if ((("tbody".equals(name)) || ("thead".equals(name))) || ("tfoot".equals(name))) {            transition(org.jsoup.parser.HtmlTreeBuilderState.InTableBody);            break;        }else            if ("caption".equals(name)) {                transition(org.jsoup.parser.HtmlTreeBuilderState.InCaption);                break;            }else                if ("colgroup".equals(name)) {                    transition(org.jsoup.parser.HtmlTreeBuilderState.InColumnGroup);                    break;                }else                    if ("table".equals(name)) {                        transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                        break;                    }else                        if ("head".equals(name)) {                            transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                            break;                        }else                            if ("body".equals(name)) {                                transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                                break;                            }else                                if ("frameset".equals(name)) {                                    transition(org.jsoup.parser.HtmlTreeBuilderState.InFrameset);                                    break;                                }else                                    if ("html".equals(name)) {                                        transition(org.jsoup.parser.HtmlTreeBuilderState.BeforeHead);                                        break;                                    }else                                        if (last) {                                            transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                                            break;                                        }::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.CharacterReader::::177::::4802::::4806::::start::::this.length	false
org.jsoup.parser.HtmlTreeBuilder::::415::::14973::::15625::::if ("head".equals(name)) {    transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);    break;}else    if ("body".equals(name)) {        transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);        break;    }else        if ("frameset".equals(name)) {            transition(org.jsoup.parser.HtmlTreeBuilderState.InFrameset);            break;        }else            if ("html".equals(name)) {                transition(org.jsoup.parser.HtmlTreeBuilderState.BeforeHead);                break;            }else                if (last) {                    transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                    break;                }::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"col"	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::replacement	false
org.jsoup.parser.CharacterReader::::177::::4771::::4775::::start::::this.length	false
org.jsoup.parser.HtmlTreeBuilder::::67::::3490::::5140::::if (context != null) {    if ((context.ownerDocument()) != null)        doc.quirksMode(context.ownerDocument().quirksMode());    java.lang.String contextTag = context.tagName();    if (org.jsoup.helper.StringUtil.in(contextTag, "title", "textarea"))        tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);    else        if (org.jsoup.helper.StringUtil.in(contextTag, "iframe", "noembed", "noframes", "style", "xmp"))            tokeniser.transition(org.jsoup.parser.TokeniserState.Rawtext);        else            if (contextTag.equals("script"))                tokeniser.transition(org.jsoup.parser.TokeniserState.ScriptData);            else                if (contextTag.equals("noscript"))                    tokeniser.transition(org.jsoup.parser.TokeniserState.Data);                else                    if (contextTag.equals("plaintext"))                        tokeniser.transition(org.jsoup.parser.TokeniserState.Data);                    else                        tokeniser.transition(org.jsoup.parser.TokeniserState.Data);    root = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("html", settings), baseUri);    doc.appendChild(root);    stack.add(root);    resetInsertionMode();    org.jsoup.select.Elements contextChain = context.parents();    contextChain.add(0, context);    for (org.jsoup.nodes.Element parent : contextChain) {        if (parent instanceof org.jsoup.nodes.FormElement) {            formElement = ((org.jsoup.nodes.FormElement) (parent));            break;        }    }}::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.CharacterReader::::177::::4791::::4795::::start::::this.length	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11316::::name.equals("a")::::INSERT::::STATEMENT::::closeCell(tb)	false
org.jsoup.parser.HtmlTreeBuilder::::412::::14845::::15625::::if ("table".equals(name)) {    transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);    break;}else    if ("head".equals(name)) {        transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);        break;    }else        if ("body".equals(name)) {            transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);            break;        }else            if ("frameset".equals(name)) {                transition(org.jsoup.parser.HtmlTreeBuilderState.InFrameset);                break;            }else                if ("html".equals(name)) {                    transition(org.jsoup.parser.HtmlTreeBuilderState.BeforeHead);                    break;                }else                    if (last) {                        transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                        break;                    }::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.ScriptDataDoubleEscapedDash	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.ScriptDataEscapedDash	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.ScriptDataDoubleEscapedDashDash	false
org.jsoup.parser.HtmlTreeBuilder::::409::::14700::::15625::::if ("colgroup".equals(name)) {    transition(org.jsoup.parser.HtmlTreeBuilderState.InColumnGroup);    break;}else    if ("table".equals(name)) {        transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);        break;    }else        if ("head".equals(name)) {            transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);            break;        }else            if ("body".equals(name)) {                transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                break;            }else                if ("frameset".equals(name)) {                    transition(org.jsoup.parser.HtmlTreeBuilderState.InFrameset);                    break;                }else                    if ("html".equals(name)) {                        transition(org.jsoup.parser.HtmlTreeBuilderState.BeforeHead);                        break;                    }else                        if (last) {                            transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                            break;                        }::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.HtmlTreeBuilder::::418::::15107::::15625::::if ("body".equals(name)) {    transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);    break;}else    if ("frameset".equals(name)) {        transition(org.jsoup.parser.HtmlTreeBuilderState.InFrameset);        break;    }else        if ("html".equals(name)) {            transition(org.jsoup.parser.HtmlTreeBuilderState.BeforeHead);            break;        }else            if (last) {                transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                break;            }::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.TagOpen	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.RcdataLessthanSign	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.CommentEnd	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.CharacterReferenceInRcdata	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.CharacterReferenceInData	false
org.jsoup.parser.HtmlTreeBuilder::::68::::3529::::3535::::context::::headElement	false
org.jsoup.parser.HtmlTreeBuilder::::72::::3729::::3735::::context::::headElement	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.MarkupDeclarationOpen	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.EndTagOpen	false
org.jsoup.parser.HtmlTreeBuilder::::406::::14568::::15625::::if ("caption".equals(name)) {    transition(org.jsoup.parser.HtmlTreeBuilderState.InCaption);    break;}else    if ("colgroup".equals(name)) {        transition(org.jsoup.parser.HtmlTreeBuilderState.InColumnGroup);        break;    }else        if ("table".equals(name)) {            transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);            break;        }else            if ("head".equals(name)) {                transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                break;            }else                if ("body".equals(name)) {                    transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                    break;                }else                    if ("frameset".equals(name)) {                        transition(org.jsoup.parser.HtmlTreeBuilderState.InFrameset);                        break;                    }else                        if ("html".equals(name)) {                            transition(org.jsoup.parser.HtmlTreeBuilderState.BeforeHead);                            break;                        }else                            if (last) {                                transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                                break;                            }::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.HtmlTreeBuilder::::93::::4854::::4860::::context::::headElement	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"option"	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"head"	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"input"	false
org.jsoup.parser.HtmlTreeBuilder::::69::::3610::::3616::::context::::headElement	false
org.jsoup.parser.HtmlTreeBuilder::::403::::14388::::15625::::if ((("tbody".equals(name)) || ("thead".equals(name))) || ("tfoot".equals(name))) {    transition(org.jsoup.parser.HtmlTreeBuilderState.InTableBody);    break;}else    if ("caption".equals(name)) {        transition(org.jsoup.parser.HtmlTreeBuilderState.InCaption);        break;    }else        if ("colgroup".equals(name)) {            transition(org.jsoup.parser.HtmlTreeBuilderState.InColumnGroup);            break;        }else            if ("table".equals(name)) {                transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                break;            }else                if ("head".equals(name)) {                    transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                    break;                }else                    if ("body".equals(name)) {                        transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                        break;                    }else                        if ("frameset".equals(name)) {                            transition(org.jsoup.parser.HtmlTreeBuilderState.InFrameset);                            break;                        }else                            if ("html".equals(name)) {                                transition(org.jsoup.parser.HtmlTreeBuilderState.BeforeHead);                                break;                            }else                                if (last) {                                    transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                                    break;                                }::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.CharacterReader::::177::::4765::::4812::::(pos) > start ? cacheString(start, ((pos) - start)) : ""::::new java.lang.String(input, ((pos)++), 1)	false
org.jsoup.parser.HtmlTreeBuilder::::67::::3494::::3500::::context::::headElement	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"button"	false
org.jsoup.parser.HtmlTreeBuilder::::86::::4505::::4508::::root::::this.headElement	false
org.jsoup.parser.TokeniserState::::552::::18267::::19574::::switch (c) {    case '\t' :    case '\n' :    case '\r' :    case '\f' :    case ' ' :        break;    case '/' :        t.transition(org.jsoup.parser.TokeniserState.SelfClosingStartTag);        break;    case '>' :        t.emitTagPending();        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case org.jsoup.parser.TokeniserState.nullChar :        t.error(this);        t.tagPending.newAttribute();        r.unconsume();        t.transition(org.jsoup.parser.TokeniserState.AttributeName);        break;    case org.jsoup.parser.TokeniserState.eof :        t.eofError(this);        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case '"' :    case '\'' :    case '<' :    case '=' :        t.error(this);        t.tagPending.newAttribute();        t.tagPending.appendAttributeName(c);        t.transition(org.jsoup.parser.TokeniserState.AttributeName);        break;    default :        t.tagPending.newAttribute();        r.unconsume();        t.transition(org.jsoup.parser.TokeniserState.AttributeName);}::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.readData(t, r, this, org.jsoup.parser.TokeniserState.ScriptDataLessthanSign)	false
org.jsoup.parser.TokeniserState::::552::::18267::::19574::::switch (c) {    case '\t' :    case '\n' :    case '\r' :    case '\f' :    case ' ' :        break;    case '/' :        t.transition(org.jsoup.parser.TokeniserState.SelfClosingStartTag);        break;    case '>' :        t.emitTagPending();        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case org.jsoup.parser.TokeniserState.nullChar :        t.error(this);        t.tagPending.newAttribute();        r.unconsume();        t.transition(org.jsoup.parser.TokeniserState.AttributeName);        break;    case org.jsoup.parser.TokeniserState.eof :        t.eofError(this);        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case '"' :    case '\'' :    case '<' :    case '=' :        t.error(this);        t.tagPending.newAttribute();        t.tagPending.appendAttributeName(c);        t.transition(org.jsoup.parser.TokeniserState.AttributeName);        break;    default :        t.tagPending.newAttribute();        r.unconsume();        t.transition(org.jsoup.parser.TokeniserState.AttributeName);}::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.readData(t, r, this, org.jsoup.parser.TokeniserState.RawtextLessthanSign)	false
org.jsoup.parser.HtmlTreeBuilder::::88::::4622::::4625::::root::::this.headElement	false
org.jsoup.parser.HtmlTreeBuilder::::87::::4593::::4596::::root::::this.headElement	false
org.jsoup.parser.HtmlTreeBuilder::::400::::14265::::15625::::if ("tr".equals(name)) {    transition(org.jsoup.parser.HtmlTreeBuilderState.InRow);    break;}else    if ((("tbody".equals(name)) || ("thead".equals(name))) || ("tfoot".equals(name))) {        transition(org.jsoup.parser.HtmlTreeBuilderState.InTableBody);        break;    }else        if ("caption".equals(name)) {            transition(org.jsoup.parser.HtmlTreeBuilderState.InCaption);            break;        }else            if ("colgroup".equals(name)) {                transition(org.jsoup.parser.HtmlTreeBuilderState.InColumnGroup);                break;            }else                if ("table".equals(name)) {                    transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                    break;                }else                    if ("head".equals(name)) {                        transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                        break;                    }else                        if ("body".equals(name)) {                            transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                            break;                        }else                            if ("frameset".equals(name)) {                                transition(org.jsoup.parser.HtmlTreeBuilderState.InFrameset);                                break;                            }else                                if ("html".equals(name)) {                                    transition(org.jsoup.parser.HtmlTreeBuilderState.BeforeHead);                                    break;                                }else                                    if (last) {                                        transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                                        break;                                    }::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.Rawtext	false
org.jsoup.parser.HtmlTreeBuilder::::94::::4905::::4911::::context::::headElement	false
org.jsoup.parser.CharacterReader::::168::::4561::::4566::::length::::this.input.length	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"nobr"	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::commonAncestor	false
org.jsoup.parser.HtmlTreeBuilder::::63::::3411::::3417::::context::::headElement	false
org.jsoup.parser.HtmlTreeBuilder::::397::::14109::::15625::::if (("td".equals(name)) || (("th".equals(name)) && (!last))) {    transition(org.jsoup.parser.HtmlTreeBuilderState.InCell);    break;}else    if ("tr".equals(name)) {        transition(org.jsoup.parser.HtmlTreeBuilderState.InRow);        break;    }else        if ((("tbody".equals(name)) || ("thead".equals(name))) || ("tfoot".equals(name))) {            transition(org.jsoup.parser.HtmlTreeBuilderState.InTableBody);            break;        }else            if ("caption".equals(name)) {                transition(org.jsoup.parser.HtmlTreeBuilderState.InCaption);                break;            }else                if ("colgroup".equals(name)) {                    transition(org.jsoup.parser.HtmlTreeBuilderState.InColumnGroup);                    break;                }else                    if ("table".equals(name)) {                        transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                        break;                    }else                        if ("head".equals(name)) {                            transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                            break;                        }else                            if ("body".equals(name)) {                                transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                                break;                            }else                                if ("frameset".equals(name)) {                                    transition(org.jsoup.parser.HtmlTreeBuilderState.InFrameset);                                    break;                                }else                                    if ("html".equals(name)) {                                        transition(org.jsoup.parser.HtmlTreeBuilderState.BeforeHead);                                        break;                                    }else                                        if (last) {                                            transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                                            break;                                        }::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.ScriptDataEscapeStart	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.ScriptDataEndTagOpen	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"optgroup"	false
org.jsoup.parser.CharacterReader::::177::::4802::::4806::::start::::this.input.length	false
org.jsoup.parser.CharacterReader::::177::::4802::::4806::::start::::mark	false
org.jsoup.parser.CharacterReader::::177::::4765::::4812::::(pos) > start ? cacheString(start, ((pos) - start)) : ""::::new java.lang.String(input, pos, ((length) - (pos)))	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.TagName	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"hr"	false
org.jsoup.parser.CharacterReader::::177::::4771::::4775::::start::::mark	false
org.jsoup.parser.CharacterReader::::168::::4561::::4566::::length::::mark	false
org.jsoup.parser.CharacterReader::::177::::4771::::4775::::start::::this.input.length	false
org.jsoup.parser.CharacterReader::::177::::4791::::4795::::start::::mark	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"select"	false
org.jsoup.parser.CharacterReader::::177::::4791::::4795::::start::::this.input.length	false
org.jsoup.parser.TokeniserState::::552::::18267::::19574::::switch (c) {    case '\t' :    case '\n' :    case '\r' :    case '\f' :    case ' ' :        break;    case '/' :        t.transition(org.jsoup.parser.TokeniserState.SelfClosingStartTag);        break;    case '>' :        t.emitTagPending();        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case org.jsoup.parser.TokeniserState.nullChar :        t.error(this);        t.tagPending.newAttribute();        r.unconsume();        t.transition(org.jsoup.parser.TokeniserState.AttributeName);        break;    case org.jsoup.parser.TokeniserState.eof :        t.eofError(this);        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case '"' :    case '\'' :    case '<' :    case '=' :        t.error(this);        t.tagPending.newAttribute();        t.tagPending.appendAttributeName(c);        t.transition(org.jsoup.parser.TokeniserState.AttributeName);        break;    default :        t.tagPending.newAttribute();        r.unconsume();        t.transition(org.jsoup.parser.TokeniserState.AttributeName);}::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.readEndTag(t, r, org.jsoup.parser.TokeniserState.ScriptDataEndTagName, org.jsoup.parser.TokeniserState.ScriptData)	false
org.jsoup.parser.TokeniserState::::552::::18267::::19574::::switch (c) {    case '\t' :    case '\n' :    case '\r' :    case '\f' :    case ' ' :        break;    case '/' :        t.transition(org.jsoup.parser.TokeniserState.SelfClosingStartTag);        break;    case '>' :        t.emitTagPending();        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case org.jsoup.parser.TokeniserState.nullChar :        t.error(this);        t.tagPending.newAttribute();        r.unconsume();        t.transition(org.jsoup.parser.TokeniserState.AttributeName);        break;    case org.jsoup.parser.TokeniserState.eof :        t.eofError(this);        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case '"' :    case '\'' :    case '<' :    case '=' :        t.error(this);        t.tagPending.newAttribute();        t.tagPending.appendAttributeName(c);        t.transition(org.jsoup.parser.TokeniserState.AttributeName);        break;    default :        t.tagPending.newAttribute();        r.unconsume();        t.transition(org.jsoup.parser.TokeniserState.AttributeName);}::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.readEndTag(t, r, org.jsoup.parser.TokeniserState.RawtextEndTagName, org.jsoup.parser.TokeniserState.Rawtext)	false
org.jsoup.parser.TokeniserState::::552::::18267::::19574::::switch (c) {    case '\t' :    case '\n' :    case '\r' :    case '\f' :    case ' ' :        break;    case '/' :        t.transition(org.jsoup.parser.TokeniserState.SelfClosingStartTag);        break;    case '>' :        t.emitTagPending();        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case org.jsoup.parser.TokeniserState.nullChar :        t.error(this);        t.tagPending.newAttribute();        r.unconsume();        t.transition(org.jsoup.parser.TokeniserState.AttributeName);        break;    case org.jsoup.parser.TokeniserState.eof :        t.eofError(this);        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case '"' :    case '\'' :    case '<' :    case '=' :        t.error(this);        t.tagPending.newAttribute();        t.tagPending.appendAttributeName(c);        t.transition(org.jsoup.parser.TokeniserState.AttributeName);        break;    default :        t.tagPending.newAttribute();        r.unconsume();        t.transition(org.jsoup.parser.TokeniserState.AttributeName);}::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.readCharRef(t, org.jsoup.parser.TokeniserState.Rcdata)	false
org.jsoup.parser.TokeniserState::::552::::18267::::19574::::switch (c) {    case '\t' :    case '\n' :    case '\r' :    case '\f' :    case ' ' :        break;    case '/' :        t.transition(org.jsoup.parser.TokeniserState.SelfClosingStartTag);        break;    case '>' :        t.emitTagPending();        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case org.jsoup.parser.TokeniserState.nullChar :        t.error(this);        t.tagPending.newAttribute();        r.unconsume();        t.transition(org.jsoup.parser.TokeniserState.AttributeName);        break;    case org.jsoup.parser.TokeniserState.eof :        t.eofError(this);        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case '"' :    case '\'' :    case '<' :    case '=' :        t.error(this);        t.tagPending.newAttribute();        t.tagPending.appendAttributeName(c);        t.transition(org.jsoup.parser.TokeniserState.AttributeName);        break;    default :        t.tagPending.newAttribute();        r.unconsume();        t.transition(org.jsoup.parser.TokeniserState.AttributeName);}::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.readCharRef(t, org.jsoup.parser.TokeniserState.Data)	false
org.jsoup.parser.TokeniserState::::552::::18267::::19574::::switch (c) {    case '\t' :    case '\n' :    case '\r' :    case '\f' :    case ' ' :        break;    case '/' :        t.transition(org.jsoup.parser.TokeniserState.SelfClosingStartTag);        break;    case '>' :        t.emitTagPending();        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case org.jsoup.parser.TokeniserState.nullChar :        t.error(this);        t.tagPending.newAttribute();        r.unconsume();        t.transition(org.jsoup.parser.TokeniserState.AttributeName);        break;    case org.jsoup.parser.TokeniserState.eof :        t.eofError(this);        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case '"' :    case '\'' :    case '<' :    case '=' :        t.error(this);        t.tagPending.newAttribute();        t.tagPending.appendAttributeName(c);        t.transition(org.jsoup.parser.TokeniserState.AttributeName);        break;    default :        t.tagPending.newAttribute();        r.unconsume();        t.transition(org.jsoup.parser.TokeniserState.AttributeName);}::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataEndTag(t, r, org.jsoup.parser.TokeniserState.ScriptDataEscaped)	false
org.jsoup.parser.TokeniserState::::552::::18267::::19574::::switch (c) {    case '\t' :    case '\n' :    case '\r' :    case '\f' :    case ' ' :        break;    case '/' :        t.transition(org.jsoup.parser.TokeniserState.SelfClosingStartTag);        break;    case '>' :        t.emitTagPending();        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case org.jsoup.parser.TokeniserState.nullChar :        t.error(this);        t.tagPending.newAttribute();        r.unconsume();        t.transition(org.jsoup.parser.TokeniserState.AttributeName);        break;    case org.jsoup.parser.TokeniserState.eof :        t.eofError(this);        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case '"' :    case '\'' :    case '<' :    case '=' :        t.error(this);        t.tagPending.newAttribute();        t.tagPending.appendAttributeName(c);        t.transition(org.jsoup.parser.TokeniserState.AttributeName);        break;    default :        t.tagPending.newAttribute();        r.unconsume();        t.transition(org.jsoup.parser.TokeniserState.AttributeName);}::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataEndTag(t, r, org.jsoup.parser.TokeniserState.ScriptData)	false
org.jsoup.parser.TokeniserState::::552::::18267::::19574::::switch (c) {    case '\t' :    case '\n' :    case '\r' :    case '\f' :    case ' ' :        break;    case '/' :        t.transition(org.jsoup.parser.TokeniserState.SelfClosingStartTag);        break;    case '>' :        t.emitTagPending();        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case org.jsoup.parser.TokeniserState.nullChar :        t.error(this);        t.tagPending.newAttribute();        r.unconsume();        t.transition(org.jsoup.parser.TokeniserState.AttributeName);        break;    case org.jsoup.parser.TokeniserState.eof :        t.eofError(this);        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case '"' :    case '\'' :    case '<' :    case '=' :        t.error(this);        t.tagPending.newAttribute();        t.tagPending.appendAttributeName(c);        t.transition(org.jsoup.parser.TokeniserState.AttributeName);        break;    default :        t.tagPending.newAttribute();        r.unconsume();        t.transition(org.jsoup.parser.TokeniserState.AttributeName);}::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataEndTag(t, r, org.jsoup.parser.TokeniserState.Rawtext)	false
org.jsoup.parser.TokeniserState::::552::::18267::::19574::::switch (c) {    case '\t' :    case '\n' :    case '\r' :    case '\f' :    case ' ' :        break;    case '/' :        t.transition(org.jsoup.parser.TokeniserState.SelfClosingStartTag);        break;    case '>' :        t.emitTagPending();        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case org.jsoup.parser.TokeniserState.nullChar :        t.error(this);        t.tagPending.newAttribute();        r.unconsume();        t.transition(org.jsoup.parser.TokeniserState.AttributeName);        break;    case org.jsoup.parser.TokeniserState.eof :        t.eofError(this);        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case '"' :    case '\'' :    case '<' :    case '=' :        t.error(this);        t.tagPending.newAttribute();        t.tagPending.appendAttributeName(c);        t.transition(org.jsoup.parser.TokeniserState.AttributeName);        break;    default :        t.tagPending.newAttribute();        r.unconsume();        t.transition(org.jsoup.parser.TokeniserState.AttributeName);}::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataDoubleEscapeTag(t, r, org.jsoup.parser.TokeniserState.ScriptDataEscaped, org.jsoup.parser.TokeniserState.ScriptDataDoubleEscaped)	false
org.jsoup.parser.TokeniserState::::552::::18267::::19574::::switch (c) {    case '\t' :    case '\n' :    case '\r' :    case '\f' :    case ' ' :        break;    case '/' :        t.transition(org.jsoup.parser.TokeniserState.SelfClosingStartTag);        break;    case '>' :        t.emitTagPending();        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case org.jsoup.parser.TokeniserState.nullChar :        t.error(this);        t.tagPending.newAttribute();        r.unconsume();        t.transition(org.jsoup.parser.TokeniserState.AttributeName);        break;    case org.jsoup.parser.TokeniserState.eof :        t.eofError(this);        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case '"' :    case '\'' :    case '<' :    case '=' :        t.error(this);        t.tagPending.newAttribute();        t.tagPending.appendAttributeName(c);        t.transition(org.jsoup.parser.TokeniserState.AttributeName);        break;    default :        t.tagPending.newAttribute();        r.unconsume();        t.transition(org.jsoup.parser.TokeniserState.AttributeName);}::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataDoubleEscapeTag(t, r, org.jsoup.parser.TokeniserState.ScriptDataDoubleEscaped, org.jsoup.parser.TokeniserState.ScriptDataEscaped)	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"plaintext"	false
org.jsoup.parser.HtmlTreeBuilderState::::287::::11890::::11924::::tb.reconstructFormattingElements()::::DELETE::::STATEMENT	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"action"	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"noframes"	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11316::::name.equals("a")::::INSERT::::STATEMENT::::if (notIgnored)    return tb.process(endTag);	false
org.jsoup.parser.HtmlTreeBuilder::::72::::3729::::3735::::context::::pop()	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"isindex"	false
org.jsoup.parser.HtmlTreeBuilder::::93::::4854::::4860::::context::::pop()	false
org.jsoup.parser.HtmlTreeBuilder::::68::::3529::::3535::::context::::pop()	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.AfterDoctypeSystemKeyword	false
org.jsoup.parser.CharacterReader::::167::::4526::::4528::::pos::::this.length	false
org.jsoup.parser.CharacterReader::::172::::4685::::4687::::pos::::this.length	false
org.jsoup.parser.CharacterReader::::177::::4798::::4800::::pos::::this.length	false
org.jsoup.parser.CharacterReader::::58::::1377::::1379::::pos::::this.length	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.AfterDoctypePublicKeyword	false
org.jsoup.parser.HtmlTreeBuilder::::420::::15207::::15212::::break::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.CharacterReader::::174::::4732::::4734::::pos::::this.length	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"style"	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.ScriptDataEscapedEndTagName	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.ScriptDataDoubleEscapeStart	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.RCDATAEndTagName	false
org.jsoup.parser.HtmlTreeBuilder::::69::::3610::::3616::::context::::pop()	false
org.jsoup.parser.CharacterReader::::177::::4765::::4767::::pos::::this.length	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"prompt"	false
org.jsoup.parser.HtmlTreeBuilderState::::247::::10127::::38412::::switch (t.type) {    case Character :        {            org.jsoup.parser.Token.Character c = t.asCharacter();            if (c.getData().equals(org.jsoup.parser.HtmlTreeBuilderState.nullString)) {                tb.error(this);                return false;            }else                if ((tb.framesetOk()) && (org.jsoup.parser.HtmlTreeBuilderState.isWhitespace(c))) {                    tb.reconstructFormattingElements();                    tb.insert(c);                }else {                    tb.reconstructFormattingElements();                    tb.insert(c);                    tb.framesetOk(false);                }            break;        }    case Comment :        {            tb.insert(t.asComment());            break;        }    case Doctype :        {            tb.error(this);            return false;        }    case StartTag :        org.jsoup.parser.Token.StartTag startTag = t.asStartTag();        java.lang.String name = startTag.normalName();        if (name.equals("a")) {            if ((tb.getActiveFormattingElement("a")) != null) {                tb.error(this);                tb.processEndTag("a");                org.jsoup.nodes.Element remainingA = tb.getFromStack("a");                if (remainingA != null) {                    tb.removeFromActiveFormattingElements(remainingA);                    tb.removeFromStack(remainingA);                }            }            tb.reconstructFormattingElements();            org.jsoup.nodes.Element a = tb.insert(startTag);            tb.pushActiveFormattingElements(a);        }else            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartEmptyFormatters)) {                tb.reconstructFormattingElements();                tb.insertEmpty(startTag);                tb.framesetOk(false);            }else                if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartPClosers)) {                    if (tb.inButtonScope("p")) {                        tb.processEndTag("p");                    }                    tb.insert(startTag);                }else                    if (name.equals("span")) {                        tb.reconstructFormattingElements();                        tb.insert(startTag);                    }else                        if (name.equals("li")) {                            tb.framesetOk(false);                            java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();                            for (int i = (stack.size()) - 1; i > 0; i--) {                                org.jsoup.nodes.Element el = stack.get(i);                                if (el.nodeName().equals("li")) {                                    tb.processEndTag("li");                                    break;                                }                                if ((tb.isSpecial(el)) && (!(org.jsoup.helper.StringUtil.inSorted(el.nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartLiBreakers))))                                    break;                            }                            if (tb.inButtonScope("p")) {                                tb.processEndTag("p");                            }                            tb.insert(startTag);                        }else                            if (name.equals("html")) {                                tb.error(this);                                org.jsoup.nodes.Element html = tb.getStack().get(0);                                for (org.jsoup.nodes.Attribute attribute : startTag.getAttributes()) {                                    if (!(html.hasAttr(attribute.getKey())))                                        html.attributes().put(attribute);                                }                            }else                                if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartToHead)) {                                    return tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead);                                }else                                    if (name.equals("body")) {                                        tb.error(this);                                        java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();                                        if (((stack.size()) == 1) || (((stack.size()) > 2) && (!(stack.get(1).nodeName().equals("body"))))) {                                            return false;                                        }else {                                            tb.framesetOk(false);                                            org.jsoup.nodes.Element body = stack.get(1);                                            for (org.jsoup.nodes.Attribute attribute : startTag.getAttributes()) {                                                if (!(body.hasAttr(attribute.getKey())))                                                    body.attributes().put(attribute);                                            }                                        }                                    }else                                        if (name.equals("frameset")) {                                            tb.error(this);                                            java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();                                            if (((stack.size()) == 1) || (((stack.size()) > 2) && (!(stack.get(1).nodeName().equals("body"))))) {                                                return false;                                            }else                                                if (!(tb.framesetOk())) {                                                    return false;                                                }else {                                                    org.jsoup.nodes.Element second = stack.get(1);                                                    if ((second.parent()) != null)                                                        second.remove();                                                    while ((stack.size()) > 1)                                                        stack.remove(((stack.size()) - 1));                                                    tb.insert(startTag);                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InFrameset);                                                }                                        }else                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.Headings)) {                                                if (tb.inButtonScope("p")) {                                                    tb.processEndTag("p");                                                }                                                if (org.jsoup.helper.StringUtil.inSorted(tb.currentElement().nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.Headings)) {                                                    tb.error(this);                                                    tb.pop();                                                }                                                tb.insert(startTag);                                            }else                                                if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartPreListing)) {                                                    if (tb.inButtonScope("p")) {                                                        tb.processEndTag("p");                                                    }                                                    tb.insert(startTag);                                                    tb.framesetOk(false);                                                }else                                                    if (name.equals("form")) {                                                        if ((tb.getFormElement()) != null) {                                                            tb.error(this);                                                            return false;                                                        }                                                        if (tb.inButtonScope("p")) {                                                            tb.processEndTag("p");                                                        }                                                        tb.insertForm(startTag, true);                                                    }else                                                        if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.DdDt)) {                                                            tb.framesetOk(false);                                                            java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();                                                            for (int i = (stack.size()) - 1; i > 0; i--) {                                                                org.jsoup.nodes.Element el = stack.get(i);                                                                if (org.jsoup.helper.StringUtil.inSorted(el.nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.DdDt)) {                                                                    tb.processEndTag(el.nodeName());                                                                    break;                                                                }                                                                if ((tb.isSpecial(el)) && (!(org.jsoup.helper.StringUtil.inSorted(el.nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartLiBreakers))))                                                                    break;                                                            }                                                            if (tb.inButtonScope("p")) {                                                                tb.processEndTag("p");                                                            }                                                            tb.insert(startTag);                                                        }else                                                            if (name.equals("plaintext")) {                                                                if (tb.inButtonScope("p")) {                                                                    tb.processEndTag("p");                                                                }                                                                tb.insert(startTag);                                                                tb.tokeniser.transition(org.jsoup.parser.TokeniserState.PLAINTEXT);                                                            }else                                                                if (name.equals("button")) {                                                                    if (tb.inButtonScope("button")) {                                                                        tb.error(this);                                                                        tb.processEndTag("button");                                                                        tb.process(startTag);                                                                    }else {                                                                        tb.reconstructFormattingElements();                                                                        tb.insert(startTag);                                                                        tb.framesetOk(false);                                                                    }                                                                }else                                                                    if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.Formatters)) {                                                                        tb.reconstructFormattingElements();                                                                        org.jsoup.nodes.Element el = tb.insert(startTag);                                                                        tb.pushActiveFormattingElements(el);                                                                    }else                                                                        if (name.equals("nobr")) {                                                                            tb.reconstructFormattingElements();                                                                            if (tb.inScope("nobr")) {                                                                                tb.error(this);                                                                                tb.processEndTag("nobr");                                                                                tb.reconstructFormattingElements();                                                                            }                                                                            org.jsoup.nodes.Element el = tb.insert(startTag);                                                                            tb.pushActiveFormattingElements(el);                                                                        }else                                                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartApplets)) {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                                tb.insertMarkerToFormattingElements();                                                                                tb.framesetOk(false);                                                                            }else                                                                                if (name.equals("table")) {                                                                                    if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                                                                                        tb.processEndTag("p");                                                                                    }                                                                                    tb.insert(startTag);                                                                                    tb.framesetOk(false);                                                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                                                                                }else                                                                                    if (name.equals("input")) {                                                                                        tb.reconstructFormattingElements();                                                                                        org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                                                                                        if (!(el.attr("type").equalsIgnoreCase("hidden")))                                                                                            tb.framesetOk(false);                                                                                    }else                                                                                        if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartMedia)) {                                                                                            tb.insertEmpty(startTag);                                                                                        }else                                                                                            if (name.equals("hr")) {                                                                                                if (tb.inButtonScope("p")) {                                                                                                    tb.processEndTag("p");                                                                                                }                                                                                                tb.insertEmpty(startTag);                                                                                                tb.framesetOk(false);                                                                                            }else                                                                                                if (name.equals("image")) {                                                                                                    if ((tb.getFromStack("svg")) == null)                                                                                                        return tb.process(startTag.name("img"));                                                                                                    else                                                                                                        tb.insert(startTag);                                                                                                }else                                                                                                    if (name.equals("isindex")) {                                                                                                        tb.error(this);                                                                                                        if ((tb.getFormElement()) != null)                                                                                                            return false;                                                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                                        tb.processStartTag("form");                                                                                                        if (startTag.attributes.hasKey("action")) {                                                                                                            org.jsoup.nodes.Element form = tb.getFormElement();                                                                                                            form.attr("action", startTag.attributes.get("action"));                                                                                                        }                                                                                                        tb.processStartTag("hr");                                                                                                        tb.processStartTag("label");                                                                                                        java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                                                                                        tb.process(new org.jsoup.parser.Token.Character().data(prompt));                                                                                                        org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                                                                                        for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                                                                                            if (!(org.jsoup.helper.StringUtil.inSorted(attr.getKey(), org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartInputAttribs)))                                                                                                                inputAttribs.put(attr);                                                                                                        }                                                                                                        inputAttribs.put("name", "isindex");                                                                                                        tb.processStartTag("input", inputAttribs);                                                                                                        tb.processEndTag("label");                                                                                                        tb.processStartTag("hr");                                                                                                        tb.processEndTag("form");                                                                                                    }else                                                                                                        if (name.equals("textarea")) {                                                                                                            tb.insert(startTag);                                                                                                            tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                                                                                            tb.markInsertionMode();                                                                                                            tb.framesetOk(false);                                                                                                            tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                                                                                        }else                                                                                                            if (name.equals("xmp")) {                                                                                                                if (tb.inButtonScope("p")) {                                                                                                                    tb.processEndTag("p");                                                                                                                }                                                                                                                tb.reconstructFormattingElements();                                                                                                                tb.framesetOk(false);                                                                                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                                                                            }else                                                                                                                if (name.equals("iframe")) {                                                                                                                    tb.framesetOk(false);                                                                                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                                                                                }else                                                                                                                    if (name.equals("noembed")) {                                                                                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                                                                                    }else                                                                                                                        if (name.equals("select")) {                                                                                                                            tb.reconstructFormattingElements();                                                                                                                            tb.insert(startTag);                                                                                                                            tb.framesetOk(false);                                                                                                                            org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                                                                                            if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                                                                                            else                                                                                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                                                                                        }else                                                                                                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartOptions)) {                                                                                                                                if (tb.currentElement().nodeName().equals("option"))                                                                                                                                    tb.processEndTag("option");                                                                                                                                tb.reconstructFormattingElements();                                                                                                                                tb.insert(startTag);                                                                                                                            }else                                                                                                                                if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartRuby)) {                                                                                                                                    if (tb.inScope("ruby")) {                                                                                                                                        tb.generateImpliedEndTags();                                                                                                                                        if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                                                                                            tb.error(this);                                                                                                                                            tb.popStackToBefore("ruby");                                                                                                                                        }                                                                                                                                        tb.insert(startTag);                                                                                                                                    }                                                                                                                                }else                                                                                                                                    if (name.equals("math")) {                                                                                                                                        tb.reconstructFormattingElements();                                                                                                                                        tb.insert(startTag);                                                                                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                                                                    }else                                                                                                                                        if (name.equals("svg")) {                                                                                                                                            tb.reconstructFormattingElements();                                                                                                                                            tb.insert(startTag);                                                                                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                                                                        }else                                                                                                                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartDrop)) {                                                                                                                                                tb.error(this);                                                                                                                                                return false;                                                                                                                                            }else {                                                                                                                                                tb.reconstructFormattingElements();                                                                                                                                                tb.insert(startTag);                                                                                                                                            }        break;    case EndTag :        org.jsoup.parser.Token.EndTag endTag = t.asEndTag();        name = endTag.normalName();        if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyEndAdoptionFormatters)) {            for (int i = 0; i < 8; i++) {                org.jsoup.nodes.Element formatEl = tb.getActiveFormattingElement(name);                if (formatEl == null)                    return anyOtherEndTag(t, tb);                else                    if (!(tb.onStack(formatEl))) {                        tb.error(this);                        tb.removeFromActiveFormattingElements(formatEl);                        return true;                    }else                        if (!(tb.inScope(formatEl.nodeName()))) {                            tb.error(this);                            return false;                        }else                            if ((tb.currentElement()) != formatEl)                                tb.error(this);                org.jsoup.nodes.Element furthestBlock = null;                org.jsoup.nodes.Element commonAncestor = null;                boolean seenFormattingElement = false;                java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();                final int stackSize = stack.size();                for (int si = 0; (si < stackSize) && (si < 64); si++) {                    org.jsoup.nodes.Element el = stack.get(si);                    if (el == formatEl) {                        commonAncestor = stack.get((si - 1));                        seenFormattingElement = true;                    }else                        if (seenFormattingElement && (tb.isSpecial(el))) {                            furthestBlock = el;                            break;                        }                }                if (furthestBlock == null) {                    tb.popStackToClose(formatEl.nodeName());                    tb.removeFromActiveFormattingElements(formatEl);                    return true;                }                org.jsoup.nodes.Element node = furthestBlock;                org.jsoup.nodes.Element lastNode = furthestBlock;                for (int j = 0; j < 3; j++) {                    if (tb.onStack(node))                        node = tb.aboveOnStack(node);                    if (!(tb.isInActiveFormattingElements(node))) {                        tb.removeFromStack(node);                        continue;                    }else                        if (node == formatEl)                            break;                    org.jsoup.nodes.Element replacement = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri());                    tb.replaceActiveFormattingElement(node, replacement);                    tb.replaceOnStack(node, replacement);                    node = replacement;                    if (lastNode == furthestBlock) {                    }                    if ((lastNode.parent()) != null)                        lastNode.remove();                    node.appendChild(lastNode);                    lastNode = node;                }                if (org.jsoup.helper.StringUtil.inSorted(commonAncestor.nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyEndTableFosters)) {                    if ((lastNode.parent()) != null)                        lastNode.remove();                    tb.insertInFosterParent(lastNode);                }else {                    if ((lastNode.parent()) != null)                        lastNode.remove();                    commonAncestor.appendChild(lastNode);                }                org.jsoup.nodes.Element adopter = new org.jsoup.nodes.Element(formatEl.tag(), tb.getBaseUri());                adopter.attributes().addAll(formatEl.attributes());                org.jsoup.nodes.Node[] childNodes = furthestBlock.childNodes().toArray(new org.jsoup.nodes.Node[furthestBlock.childNodeSize()]);                for (org.jsoup.nodes.Node childNode : childNodes) {                    adopter.appendChild(childNode);                }                furthestBlock.appendChild(adopter);                tb.removeFromActiveFormattingElements(formatEl);                tb.removeFromStack(formatEl);                tb.insertOnStackAfter(furthestBlock, adopter);            }        }else            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyEndClosers)) {                if (!(tb.inScope(name))) {                    tb.error(this);                    return false;                }else {                    tb.generateImpliedEndTags();                    if (!(tb.currentElement().nodeName().equals(name)))                        tb.error(this);                    tb.popStackToClose(name);                }            }else                if (name.equals("span")) {                    return anyOtherEndTag(t, tb);                }else                    if (name.equals("li")) {                        if (!(tb.inListItemScope(name))) {                            tb.error(this);                            return false;                        }else {                            tb.generateImpliedEndTags(name);                            if (!(tb.currentElement().nodeName().equals(name)))                                tb.error(this);                            tb.popStackToClose(name);                        }                    }else                        if (name.equals("body")) {                            if (!(tb.inScope("body"))) {                                tb.error(this);                                return false;                            }else {                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.AfterBody);                            }                        }else                            if (name.equals("html")) {                                boolean notIgnored = tb.processEndTag("body");                                if (notIgnored)                                    return tb.process(endTag);                            }else                                if (name.equals("form")) {                                    org.jsoup.nodes.Element currentForm = tb.getFormElement();                                    tb.setFormElement(null);                                    if ((currentForm == null) || (!(tb.inScope(name)))) {                                        tb.error(this);                                        return false;                                    }else {                                        tb.generateImpliedEndTags();                                        if (!(tb.currentElement().nodeName().equals(name)))                                            tb.error(this);                                        tb.removeFromStack(currentForm);                                    }                                }else                                    if (name.equals("p")) {                                        if (!(tb.inButtonScope(name))) {                                            tb.error(this);                                            tb.processStartTag(name);                                            return tb.process(endTag);                                        }else {                                            tb.generateImpliedEndTags(name);                                            if (!(tb.currentElement().nodeName().equals(name)))                                                tb.error(this);                                            tb.popStackToClose(name);                                        }                                    }else                                        if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.DdDt)) {                                            if (!(tb.inScope(name))) {                                                tb.error(this);                                                return false;                                            }else {                                                tb.generateImpliedEndTags(name);                                                if (!(tb.currentElement().nodeName().equals(name)))                                                    tb.error(this);                                                tb.popStackToClose(name);                                            }                                        }else                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.Headings)) {                                                if (!(tb.inScope(org.jsoup.parser.HtmlTreeBuilderState.Constants.Headings))) {                                                    tb.error(this);                                                    return false;                                                }else {                                                    tb.generateImpliedEndTags(name);                                                    if (!(tb.currentElement().nodeName().equals(name)))                                                        tb.error(this);                                                    tb.popStackToClose(org.jsoup.parser.HtmlTreeBuilderState.Constants.Headings);                                                }                                            }else                                                if (name.equals("sarcasm")) {                                                    return anyOtherEndTag(t, tb);                                                }else                                                    if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartApplets)) {                                                        if (!(tb.inScope("name"))) {                                                            if (!(tb.inScope(name))) {                                                                tb.error(this);                                                                return false;                                                            }                                                            tb.generateImpliedEndTags();                                                            if (!(tb.currentElement().nodeName().equals(name)))                                                                tb.error(this);                                                            tb.popStackToClose(name);                                                            tb.clearFormattingElementsToLastMarker();                                                        }                                                    }else                                                        if (name.equals("br")) {                                                            tb.error(this);                                                            tb.processStartTag("br");                                                            return false;                                                        }else {                                                            return anyOtherEndTag(t, tb);                                                        }        break;    case EOF :        break;}::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"br"	false
org.jsoup.parser.HtmlTreeBuilder::::68::::3529::::3535::::context::::this.headElement	false
org.jsoup.parser.HtmlTreeBuilder::::72::::3729::::3735::::context::::this.headElement	false
org.jsoup.parser.HtmlTreeBuilder::::93::::4854::::4860::::context::::this.headElement	false
org.jsoup.parser.HtmlTreeBuilder::::69::::3610::::3616::::context::::this.headElement	false
org.jsoup.parser.HtmlTreeBuilder::::67::::3494::::3500::::context::::this.headElement	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"textarea"	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"link"	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"bgsound"	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"basefont"	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::org.jsoup.parser.HtmlTreeBuilderState.nullString	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"image"	false
org.jsoup.parser.HtmlTreeBuilder::::94::::4905::::4911::::context::::this.headElement	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::inputAttribs	false
org.jsoup.parser.HtmlTreeBuilder::::63::::3411::::3417::::context::::this.headElement	false
org.jsoup.parser.CharacterReader::::171::::4619::::4621::::pos::::this.length	false
org.jsoup.parser.CharacterReader::::172::::4685::::4687::::pos::::mark	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"meta"	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"script"	false
org.jsoup.parser.CharacterReader::::174::::4732::::4734::::pos::::mark	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.ScriptDataDoubleEscapeEnd	false
org.jsoup.parser.CharacterReader::::177::::4798::::4800::::pos::::mark	false
org.jsoup.parser.CharacterReader::::167::::4526::::4528::::pos::::mark	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"base"	false
org.jsoup.parser.CharacterReader::::171::::4619::::4621::::pos::::mark	false
org.jsoup.parser.CharacterReader::::167::::4526::::4528::::pos::::this.input.length	false
org.jsoup.parser.CharacterReader::::172::::4685::::4687::::pos::::this.input.length	false
org.jsoup.parser.CharacterReader::::177::::4765::::4767::::pos::::mark	false
org.jsoup.parser.CharacterReader::::177::::4798::::4800::::pos::::this.input.length	false
org.jsoup.parser.CharacterReader::::58::::1377::::1379::::pos::::mark	false
org.jsoup.parser.CharacterReader::::58::::1377::::1379::::pos::::this.input.length	false
org.jsoup.parser.CharacterReader::::174::::4732::::4734::::pos::::this.input.length	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.ScriptDataEscapedEndTagOpen	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::attribute	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"noscript"	false
org.jsoup.parser.CharacterReader::::177::::4765::::4767::::pos::::this.input.length	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"ruby"	false
org.jsoup.parser.HtmlTreeBuilderState::::247::::10127::::38412::::switch (t.type) {    case Character :        {            org.jsoup.parser.Token.Character c = t.asCharacter();            if (c.getData().equals(org.jsoup.parser.HtmlTreeBuilderState.nullString)) {                tb.error(this);                return false;            }else                if ((tb.framesetOk()) && (org.jsoup.parser.HtmlTreeBuilderState.isWhitespace(c))) {                    tb.reconstructFormattingElements();                    tb.insert(c);                }else {                    tb.reconstructFormattingElements();                    tb.insert(c);                    tb.framesetOk(false);                }            break;        }    case Comment :        {            tb.insert(t.asComment());            break;        }    case Doctype :        {            tb.error(this);            return false;        }    case StartTag :        org.jsoup.parser.Token.StartTag startTag = t.asStartTag();        java.lang.String name = startTag.normalName();        if (name.equals("a")) {            if ((tb.getActiveFormattingElement("a")) != null) {                tb.error(this);                tb.processEndTag("a");                org.jsoup.nodes.Element remainingA = tb.getFromStack("a");                if (remainingA != null) {                    tb.removeFromActiveFormattingElements(remainingA);                    tb.removeFromStack(remainingA);                }            }            tb.reconstructFormattingElements();            org.jsoup.nodes.Element a = tb.insert(startTag);            tb.pushActiveFormattingElements(a);        }else            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartEmptyFormatters)) {                tb.reconstructFormattingElements();                tb.insertEmpty(startTag);                tb.framesetOk(false);            }else                if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartPClosers)) {                    if (tb.inButtonScope("p")) {                        tb.processEndTag("p");                    }                    tb.insert(startTag);                }else                    if (name.equals("span")) {                        tb.reconstructFormattingElements();                        tb.insert(startTag);                    }else                        if (name.equals("li")) {                            tb.framesetOk(false);                            java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();                            for (int i = (stack.size()) - 1; i > 0; i--) {                                org.jsoup.nodes.Element el = stack.get(i);                                if (el.nodeName().equals("li")) {                                    tb.processEndTag("li");                                    break;                                }                                if ((tb.isSpecial(el)) && (!(org.jsoup.helper.StringUtil.inSorted(el.nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartLiBreakers))))                                    break;                            }                            if (tb.inButtonScope("p")) {                                tb.processEndTag("p");                            }                            tb.insert(startTag);                        }else                            if (name.equals("html")) {                                tb.error(this);                                org.jsoup.nodes.Element html = tb.getStack().get(0);                                for (org.jsoup.nodes.Attribute attribute : startTag.getAttributes()) {                                    if (!(html.hasAttr(attribute.getKey())))                                        html.attributes().put(attribute);                                }                            }else                                if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartToHead)) {                                    return tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead);                                }else                                    if (name.equals("body")) {                                        tb.error(this);                                        java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();                                        if (((stack.size()) == 1) || (((stack.size()) > 2) && (!(stack.get(1).nodeName().equals("body"))))) {                                            return false;                                        }else {                                            tb.framesetOk(false);                                            org.jsoup.nodes.Element body = stack.get(1);                                            for (org.jsoup.nodes.Attribute attribute : startTag.getAttributes()) {                                                if (!(body.hasAttr(attribute.getKey())))                                                    body.attributes().put(attribute);                                            }                                        }                                    }else                                        if (name.equals("frameset")) {                                            tb.error(this);                                            java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();                                            if (((stack.size()) == 1) || (((stack.size()) > 2) && (!(stack.get(1).nodeName().equals("body"))))) {                                                return false;                                            }else                                                if (!(tb.framesetOk())) {                                                    return false;                                                }else {                                                    org.jsoup.nodes.Element second = stack.get(1);                                                    if ((second.parent()) != null)                                                        second.remove();                                                    while ((stack.size()) > 1)                                                        stack.remove(((stack.size()) - 1));                                                    tb.insert(startTag);                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InFrameset);                                                }                                        }else                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.Headings)) {                                                if (tb.inButtonScope("p")) {                                                    tb.processEndTag("p");                                                }                                                if (org.jsoup.helper.StringUtil.inSorted(tb.currentElement().nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.Headings)) {                                                    tb.error(this);                                                    tb.pop();                                                }                                                tb.insert(startTag);                                            }else                                                if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartPreListing)) {                                                    if (tb.inButtonScope("p")) {                                                        tb.processEndTag("p");                                                    }                                                    tb.insert(startTag);                                                    tb.framesetOk(false);                                                }else                                                    if (name.equals("form")) {                                                        if ((tb.getFormElement()) != null) {                                                            tb.error(this);                                                            return false;                                                        }                                                        if (tb.inButtonScope("p")) {                                                            tb.processEndTag("p");                                                        }                                                        tb.insertForm(startTag, true);                                                    }else                                                        if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.DdDt)) {                                                            tb.framesetOk(false);                                                            java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();                                                            for (int i = (stack.size()) - 1; i > 0; i--) {                                                                org.jsoup.nodes.Element el = stack.get(i);                                                                if (org.jsoup.helper.StringUtil.inSorted(el.nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.DdDt)) {                                                                    tb.processEndTag(el.nodeName());                                                                    break;                                                                }                                                                if ((tb.isSpecial(el)) && (!(org.jsoup.helper.StringUtil.inSorted(el.nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartLiBreakers))))                                                                    break;                                                            }                                                            if (tb.inButtonScope("p")) {                                                                tb.processEndTag("p");                                                            }                                                            tb.insert(startTag);                                                        }else                                                            if (name.equals("plaintext")) {                                                                if (tb.inButtonScope("p")) {                                                                    tb.processEndTag("p");                                                                }                                                                tb.insert(startTag);                                                                tb.tokeniser.transition(org.jsoup.parser.TokeniserState.PLAINTEXT);                                                            }else                                                                if (name.equals("button")) {                                                                    if (tb.inButtonScope("button")) {                                                                        tb.error(this);                                                                        tb.processEndTag("button");                                                                        tb.process(startTag);                                                                    }else {                                                                        tb.reconstructFormattingElements();                                                                        tb.insert(startTag);                                                                        tb.framesetOk(false);                                                                    }                                                                }else                                                                    if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.Formatters)) {                                                                        tb.reconstructFormattingElements();                                                                        org.jsoup.nodes.Element el = tb.insert(startTag);                                                                        tb.pushActiveFormattingElements(el);                                                                    }else                                                                        if (name.equals("nobr")) {                                                                            tb.reconstructFormattingElements();                                                                            if (tb.inScope("nobr")) {                                                                                tb.error(this);                                                                                tb.processEndTag("nobr");                                                                                tb.reconstructFormattingElements();                                                                            }                                                                            org.jsoup.nodes.Element el = tb.insert(startTag);                                                                            tb.pushActiveFormattingElements(el);                                                                        }else                                                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartApplets)) {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                                tb.insertMarkerToFormattingElements();                                                                                tb.framesetOk(false);                                                                            }else                                                                                if (name.equals("table")) {                                                                                    if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                                                                                        tb.processEndTag("p");                                                                                    }                                                                                    tb.insert(startTag);                                                                                    tb.framesetOk(false);                                                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                                                                                }else                                                                                    if (name.equals("input")) {                                                                                        tb.reconstructFormattingElements();                                                                                        org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                                                                                        if (!(el.attr("type").equalsIgnoreCase("hidden")))                                                                                            tb.framesetOk(false);                                                                                    }else                                                                                        if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartMedia)) {                                                                                            tb.insertEmpty(startTag);                                                                                        }else                                                                                            if (name.equals("hr")) {                                                                                                if (tb.inButtonScope("p")) {                                                                                                    tb.processEndTag("p");                                                                                                }                                                                                                tb.insertEmpty(startTag);                                                                                                tb.framesetOk(false);                                                                                            }else                                                                                                if (name.equals("image")) {                                                                                                    if ((tb.getFromStack("svg")) == null)                                                                                                        return tb.process(startTag.name("img"));                                                                                                    else                                                                                                        tb.insert(startTag);                                                                                                }else                                                                                                    if (name.equals("isindex")) {                                                                                                        tb.error(this);                                                                                                        if ((tb.getFormElement()) != null)                                                                                                            return false;                                                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                                        tb.processStartTag("form");                                                                                                        if (startTag.attributes.hasKey("action")) {                                                                                                            org.jsoup.nodes.Element form = tb.getFormElement();                                                                                                            form.attr("action", startTag.attributes.get("action"));                                                                                                        }                                                                                                        tb.processStartTag("hr");                                                                                                        tb.processStartTag("label");                                                                                                        java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                                                                                        tb.process(new org.jsoup.parser.Token.Character().data(prompt));                                                                                                        org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                                                                                        for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                                                                                            if (!(org.jsoup.helper.StringUtil.inSorted(attr.getKey(), org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartInputAttribs)))                                                                                                                inputAttribs.put(attr);                                                                                                        }                                                                                                        inputAttribs.put("name", "isindex");                                                                                                        tb.processStartTag("input", inputAttribs);                                                                                                        tb.processEndTag("label");                                                                                                        tb.processStartTag("hr");                                                                                                        tb.processEndTag("form");                                                                                                    }else                                                                                                        if (name.equals("textarea")) {                                                                                                            tb.insert(startTag);                                                                                                            tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                                                                                            tb.markInsertionMode();                                                                                                            tb.framesetOk(false);                                                                                                            tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                                                                                        }else                                                                                                            if (name.equals("xmp")) {                                                                                                                if (tb.inButtonScope("p")) {                                                                                                                    tb.processEndTag("p");                                                                                                                }                                                                                                                tb.reconstructFormattingElements();                                                                                                                tb.framesetOk(false);                                                                                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                                                                            }else                                                                                                                if (name.equals("iframe")) {                                                                                                                    tb.framesetOk(false);                                                                                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                                                                                }else                                                                                                                    if (name.equals("noembed")) {                                                                                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                                                                                    }else                                                                                                                        if (name.equals("select")) {                                                                                                                            tb.reconstructFormattingElements();                                                                                                                            tb.insert(startTag);                                                                                                                            tb.framesetOk(false);                                                                                                                            org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                                                                                            if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                                                                                            else                                                                                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                                                                                        }else                                                                                                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartOptions)) {                                                                                                                                if (tb.currentElement().nodeName().equals("option"))                                                                                                                                    tb.processEndTag("option");                                                                                                                                tb.reconstructFormattingElements();                                                                                                                                tb.insert(startTag);                                                                                                                            }else                                                                                                                                if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartRuby)) {                                                                                                                                    if (tb.inScope("ruby")) {                                                                                                                                        tb.generateImpliedEndTags();                                                                                                                                        if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                                                                                            tb.error(this);                                                                                                                                            tb.popStackToBefore("ruby");                                                                                                                                        }                                                                                                                                        tb.insert(startTag);                                                                                                                                    }                                                                                                                                }else                                                                                                                                    if (name.equals("math")) {                                                                                                                                        tb.reconstructFormattingElements();                                                                                                                                        tb.insert(startTag);                                                                                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                                                                    }else                                                                                                                                        if (name.equals("svg")) {                                                                                                                                            tb.reconstructFormattingElements();                                                                                                                                            tb.insert(startTag);                                                                                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                                                                        }else                                                                                                                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartDrop)) {                                                                                                                                                tb.error(this);                                                                                                                                                return false;                                                                                                                                            }else {                                                                                                                                                tb.reconstructFormattingElements();                                                                                                                                                tb.insert(startTag);                                                                                                                                            }        break;    case EndTag :        org.jsoup.parser.Token.EndTag endTag = t.asEndTag();        name = endTag.normalName();        if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyEndAdoptionFormatters)) {            for (int i = 0; i < 8; i++) {                org.jsoup.nodes.Element formatEl = tb.getActiveFormattingElement(name);                if (formatEl == null)                    return anyOtherEndTag(t, tb);                else                    if (!(tb.onStack(formatEl))) {                        tb.error(this);                        tb.removeFromActiveFormattingElements(formatEl);                        return true;                    }else                        if (!(tb.inScope(formatEl.nodeName()))) {                            tb.error(this);                            return false;                        }else                            if ((tb.currentElement()) != formatEl)                                tb.error(this);                org.jsoup.nodes.Element furthestBlock = null;                org.jsoup.nodes.Element commonAncestor = null;                boolean seenFormattingElement = false;                java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();                final int stackSize = stack.size();                for (int si = 0; (si < stackSize) && (si < 64); si++) {                    org.jsoup.nodes.Element el = stack.get(si);                    if (el == formatEl) {                        commonAncestor = stack.get((si - 1));                        seenFormattingElement = true;                    }else                        if (seenFormattingElement && (tb.isSpecial(el))) {                            furthestBlock = el;                            break;                        }                }                if (furthestBlock == null) {                    tb.popStackToClose(formatEl.nodeName());                    tb.removeFromActiveFormattingElements(formatEl);                    return true;                }                org.jsoup.nodes.Element node = furthestBlock;                org.jsoup.nodes.Element lastNode = furthestBlock;                for (int j = 0; j < 3; j++) {                    if (tb.onStack(node))                        node = tb.aboveOnStack(node);                    if (!(tb.isInActiveFormattingElements(node))) {                        tb.removeFromStack(node);                        continue;                    }else                        if (node == formatEl)                            break;                    org.jsoup.nodes.Element replacement = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri());                    tb.replaceActiveFormattingElement(node, replacement);                    tb.replaceOnStack(node, replacement);                    node = replacement;                    if (lastNode == furthestBlock) {                    }                    if ((lastNode.parent()) != null)                        lastNode.remove();                    node.appendChild(lastNode);                    lastNode = node;                }                if (org.jsoup.helper.StringUtil.inSorted(commonAncestor.nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyEndTableFosters)) {                    if ((lastNode.parent()) != null)                        lastNode.remove();                    tb.insertInFosterParent(lastNode);                }else {                    if ((lastNode.parent()) != null)                        lastNode.remove();                    commonAncestor.appendChild(lastNode);                }                org.jsoup.nodes.Element adopter = new org.jsoup.nodes.Element(formatEl.tag(), tb.getBaseUri());                adopter.attributes().addAll(formatEl.attributes());                org.jsoup.nodes.Node[] childNodes = furthestBlock.childNodes().toArray(new org.jsoup.nodes.Node[furthestBlock.childNodeSize()]);                for (org.jsoup.nodes.Node childNode : childNodes) {                    adopter.appendChild(childNode);                }                furthestBlock.appendChild(adopter);                tb.removeFromActiveFormattingElements(formatEl);                tb.removeFromStack(formatEl);                tb.insertOnStackAfter(furthestBlock, adopter);            }        }else            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyEndClosers)) {                if (!(tb.inScope(name))) {                    tb.error(this);                    return false;                }else {                    tb.generateImpliedEndTags();                    if (!(tb.currentElement().nodeName().equals(name)))                        tb.error(this);                    tb.popStackToClose(name);                }            }else                if (name.equals("span")) {                    return anyOtherEndTag(t, tb);                }else                    if (name.equals("li")) {                        if (!(tb.inListItemScope(name))) {                            tb.error(this);                            return false;                        }else {                            tb.generateImpliedEndTags(name);                            if (!(tb.currentElement().nodeName().equals(name)))                                tb.error(this);                            tb.popStackToClose(name);                        }                    }else                        if (name.equals("body")) {                            if (!(tb.inScope("body"))) {                                tb.error(this);                                return false;                            }else {                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.AfterBody);                            }                        }else                            if (name.equals("html")) {                                boolean notIgnored = tb.processEndTag("body");                                if (notIgnored)                                    return tb.process(endTag);                            }else                                if (name.equals("form")) {                                    org.jsoup.nodes.Element currentForm = tb.getFormElement();                                    tb.setFormElement(null);                                    if ((currentForm == null) || (!(tb.inScope(name)))) {                                        tb.error(this);                                        return false;                                    }else {                                        tb.generateImpliedEndTags();                                        if (!(tb.currentElement().nodeName().equals(name)))                                            tb.error(this);                                        tb.removeFromStack(currentForm);                                    }                                }else                                    if (name.equals("p")) {                                        if (!(tb.inButtonScope(name))) {                                            tb.error(this);                                            tb.processStartTag(name);                                            return tb.process(endTag);                                        }else {                                            tb.generateImpliedEndTags(name);                                            if (!(tb.currentElement().nodeName().equals(name)))                                                tb.error(this);                                            tb.popStackToClose(name);                                        }                                    }else                                        if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.DdDt)) {                                            if (!(tb.inScope(name))) {                                                tb.error(this);                                                return false;                                            }else {                                                tb.generateImpliedEndTags(name);                                                if (!(tb.currentElement().nodeName().equals(name)))                                                    tb.error(this);                                                tb.popStackToClose(name);                                            }                                        }else                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.Headings)) {                                                if (!(tb.inScope(org.jsoup.parser.HtmlTreeBuilderState.Constants.Headings))) {                                                    tb.error(this);                                                    return false;                                                }else {                                                    tb.generateImpliedEndTags(name);                                                    if (!(tb.currentElement().nodeName().equals(name)))                                                        tb.error(this);                                                    tb.popStackToClose(org.jsoup.parser.HtmlTreeBuilderState.Constants.Headings);                                                }                                            }else                                                if (name.equals("sarcasm")) {                                                    return anyOtherEndTag(t, tb);                                                }else                                                    if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartApplets)) {                                                        if (!(tb.inScope("name"))) {                                                            if (!(tb.inScope(name))) {                                                                tb.error(this);                                                                return false;                                                            }                                                            tb.generateImpliedEndTags();                                                            if (!(tb.currentElement().nodeName().equals(name)))                                                                tb.error(this);                                                            tb.popStackToClose(name);                                                            tb.clearFormattingElementsToLastMarker();                                                        }                                                    }else                                                        if (name.equals("br")) {                                                            tb.error(this);                                                            tb.processStartTag("br");                                                            return false;                                                        }else {                                                            return anyOtherEndTag(t, tb);                                                        }        break;    case EOF :        break;}::::INSERT::::STATEMENT::::org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb)	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.ScriptDataEscapeStartDash	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.RawtextEndTagOpen	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.RCDATAEndTagOpen	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.CommentStart	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.CdataSection	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"xmp"	false
org.jsoup.parser.HtmlTreeBuilder::::387::::13712::::15635::::for (int pos = (stack.size()) - 1; pos >= 0; pos--) {    org.jsoup.nodes.Element node = stack.get(pos);    if (pos == 0) {        last = true;        node = contextElement;    }    java.lang.String name = node.nodeName();    if ("select".equals(name)) {        transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);        break;    }else        if (("td".equals(name)) || (("th".equals(name)) && (!last))) {            transition(org.jsoup.parser.HtmlTreeBuilderState.InCell);            break;        }else            if ("tr".equals(name)) {                transition(org.jsoup.parser.HtmlTreeBuilderState.InRow);                break;            }else                if ((("tbody".equals(name)) || ("thead".equals(name))) || ("tfoot".equals(name))) {                    transition(org.jsoup.parser.HtmlTreeBuilderState.InTableBody);                    break;                }else                    if ("caption".equals(name)) {                        transition(org.jsoup.parser.HtmlTreeBuilderState.InCaption);                        break;                    }else                        if ("colgroup".equals(name)) {                            transition(org.jsoup.parser.HtmlTreeBuilderState.InColumnGroup);                            break;                        }else                            if ("table".equals(name)) {                                transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                                break;                            }else                                if ("head".equals(name)) {                                    transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                                    break;                                }else                                    if ("body".equals(name)) {                                        transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                                        break;                                    }else                                        if ("frameset".equals(name)) {                                            transition(org.jsoup.parser.HtmlTreeBuilderState.InFrameset);                                            break;                                        }else                                            if ("html".equals(name)) {                                                transition(org.jsoup.parser.HtmlTreeBuilderState.BeforeHead);                                                break;                                            }else                                                if (last) {                                                    transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                                                    break;                                                }}::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"iframe"	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.Doctype	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"name"	false
org.jsoup.parser.CharacterReader::::171::::4619::::4621::::pos::::this.input.length	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::attr	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"noembed"	false
org.jsoup.nodes.Attributes::::100::::2989::::2998::::attributes::::new org.jsoup.nodes.Attributes()	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"label"	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"This is a searchable index. Enter search keywords: "	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"svg"	false
org.jsoup.parser.HtmlTreeBuilder::::387::::13712::::15635::::for (int pos = (stack.size()) - 1; pos >= 0; pos--) {    org.jsoup.nodes.Element node = stack.get(pos);    if (pos == 0) {        last = true;        node = contextElement;    }    java.lang.String name = node.nodeName();    if ("select".equals(name)) {        transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);        break;    }else        if (("td".equals(name)) || (("th".equals(name)) && (!last))) {            transition(org.jsoup.parser.HtmlTreeBuilderState.InCell);            break;        }else            if ("tr".equals(name)) {                transition(org.jsoup.parser.HtmlTreeBuilderState.InRow);                break;            }else                if ((("tbody".equals(name)) || ("thead".equals(name))) || ("tfoot".equals(name))) {                    transition(org.jsoup.parser.HtmlTreeBuilderState.InTableBody);                    break;                }else                    if ("caption".equals(name)) {                        transition(org.jsoup.parser.HtmlTreeBuilderState.InCaption);                        break;                    }else                        if ("colgroup".equals(name)) {                            transition(org.jsoup.parser.HtmlTreeBuilderState.InColumnGroup);                            break;                        }else                            if ("table".equals(name)) {                                transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                                break;                            }else                                if ("head".equals(name)) {                                    transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                                    break;                                }else                                    if ("body".equals(name)) {                                        transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                                        break;                                    }else                                        if ("frameset".equals(name)) {                                            transition(org.jsoup.parser.HtmlTreeBuilderState.InFrameset);                                            break;                                        }else                                            if ("html".equals(name)) {                                                transition(org.jsoup.parser.HtmlTreeBuilderState.BeforeHead);                                                break;                                            }else                                                if (last) {                                                    transition(org.jsoup.parser.HtmlTreeBuilderState.InBody);                                                    break;                                                }}::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"title"	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.ScriptDataLessthanSign	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.ScriptDataEndTagName	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.RawtextLessthanSign	false
org.jsoup.parser.TokeniserState::::615::::20420::::20423::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.RawtextEndTagName	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"command"	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::currentForm	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::body	false
org.jsoup.parser.TokeniserState::::598::::19842::::19862::::char c = r.consume()::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.readEndTag(t, r, org.jsoup.parser.TokeniserState.ScriptDataEndTagName, org.jsoup.parser.TokeniserState.ScriptData)	false
org.jsoup.parser.TokeniserState::::598::::19842::::19862::::char c = r.consume()::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.readEndTag(t, r, org.jsoup.parser.TokeniserState.RawtextEndTagName, org.jsoup.parser.TokeniserState.Rawtext)	false
org.jsoup.parser.TokeniserState::::598::::19842::::19862::::char c = r.consume()::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.readData(t, r, this, org.jsoup.parser.TokeniserState.ScriptDataLessthanSign)	false
org.jsoup.parser.TokeniserState::::598::::19842::::19862::::char c = r.consume()::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.readData(t, r, this, org.jsoup.parser.TokeniserState.RawtextLessthanSign)	false
org.jsoup.parser.TokeniserState::::598::::19842::::19862::::char c = r.consume()::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.readCharRef(t, org.jsoup.parser.TokeniserState.Rcdata)	false
org.jsoup.parser.TokeniserState::::598::::19842::::19862::::char c = r.consume()::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.readCharRef(t, org.jsoup.parser.TokeniserState.Data)	false
org.jsoup.parser.TokeniserState::::598::::19842::::19862::::char c = r.consume()::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataEndTag(t, r, org.jsoup.parser.TokeniserState.ScriptDataEscaped)	false
org.jsoup.parser.TokeniserState::::598::::19842::::19862::::char c = r.consume()::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataEndTag(t, r, org.jsoup.parser.TokeniserState.ScriptData)	false
org.jsoup.parser.TokeniserState::::598::::19842::::19862::::char c = r.consume()::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataEndTag(t, r, org.jsoup.parser.TokeniserState.Rawtext)	false
org.jsoup.parser.TokeniserState::::598::::19842::::19862::::char c = r.consume()::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataDoubleEscapeTag(t, r, org.jsoup.parser.TokeniserState.ScriptDataEscaped, org.jsoup.parser.TokeniserState.ScriptDataDoubleEscaped)	false
org.jsoup.parser.TokeniserState::::598::::19842::::19862::::char c = r.consume()::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataDoubleEscapeTag(t, r, org.jsoup.parser.TokeniserState.ScriptDataDoubleEscaped, org.jsoup.parser.TokeniserState.ScriptDataEscaped)	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"sarcasm"	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"type"	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::form	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"hidden"	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::prompt	false
org.jsoup.parser.TokeniserState::::872::::29316::::29336::::char c = r.consume()::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.readEndTag(t, r, org.jsoup.parser.TokeniserState.ScriptDataEndTagName, org.jsoup.parser.TokeniserState.ScriptData)	false
org.jsoup.parser.TokeniserState::::872::::29316::::29336::::char c = r.consume()::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.readEndTag(t, r, org.jsoup.parser.TokeniserState.RawtextEndTagName, org.jsoup.parser.TokeniserState.Rawtext)	false
org.jsoup.parser.TokeniserState::::872::::29316::::29336::::char c = r.consume()::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.readData(t, r, this, org.jsoup.parser.TokeniserState.ScriptDataLessthanSign)	false
org.jsoup.parser.TokeniserState::::872::::29316::::29336::::char c = r.consume()::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.readData(t, r, this, org.jsoup.parser.TokeniserState.RawtextLessthanSign)	false
org.jsoup.parser.TokeniserState::::872::::29316::::29336::::char c = r.consume()::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.readCharRef(t, org.jsoup.parser.TokeniserState.Rcdata)	false
org.jsoup.parser.TokeniserState::::872::::29316::::29336::::char c = r.consume()::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.readCharRef(t, org.jsoup.parser.TokeniserState.Data)	false
org.jsoup.parser.TokeniserState::::872::::29316::::29336::::char c = r.consume()::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataEndTag(t, r, org.jsoup.parser.TokeniserState.ScriptDataEscaped)	false
org.jsoup.parser.TokeniserState::::872::::29316::::29336::::char c = r.consume()::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataEndTag(t, r, org.jsoup.parser.TokeniserState.ScriptData)	false
org.jsoup.parser.TokeniserState::::872::::29316::::29336::::char c = r.consume()::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataEndTag(t, r, org.jsoup.parser.TokeniserState.Rawtext)	false
org.jsoup.parser.TokeniserState::::872::::29316::::29336::::char c = r.consume()::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataDoubleEscapeTag(t, r, org.jsoup.parser.TokeniserState.ScriptDataEscaped, org.jsoup.parser.TokeniserState.ScriptDataDoubleEscaped)	false
org.jsoup.parser.TokeniserState::::872::::29316::::29336::::char c = r.consume()::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataDoubleEscapeTag(t, r, org.jsoup.parser.TokeniserState.ScriptDataDoubleEscaped, org.jsoup.parser.TokeniserState.ScriptDataEscaped)	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::remainingA	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::childNode	false
org.jsoup.parser.HtmlTreeBuilderState::::247::::10127::::38412::::switch (t.type) {    case Character :        {            org.jsoup.parser.Token.Character c = t.asCharacter();            if (c.getData().equals(org.jsoup.parser.HtmlTreeBuilderState.nullString)) {                tb.error(this);                return false;            }else                if ((tb.framesetOk()) && (org.jsoup.parser.HtmlTreeBuilderState.isWhitespace(c))) {                    tb.reconstructFormattingElements();                    tb.insert(c);                }else {                    tb.reconstructFormattingElements();                    tb.insert(c);                    tb.framesetOk(false);                }            break;        }    case Comment :        {            tb.insert(t.asComment());            break;        }    case Doctype :        {            tb.error(this);            return false;        }    case StartTag :        org.jsoup.parser.Token.StartTag startTag = t.asStartTag();        java.lang.String name = startTag.normalName();        if (name.equals("a")) {            if ((tb.getActiveFormattingElement("a")) != null) {                tb.error(this);                tb.processEndTag("a");                org.jsoup.nodes.Element remainingA = tb.getFromStack("a");                if (remainingA != null) {                    tb.removeFromActiveFormattingElements(remainingA);                    tb.removeFromStack(remainingA);                }            }            tb.reconstructFormattingElements();            org.jsoup.nodes.Element a = tb.insert(startTag);            tb.pushActiveFormattingElements(a);        }else            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartEmptyFormatters)) {                tb.reconstructFormattingElements();                tb.insertEmpty(startTag);                tb.framesetOk(false);            }else                if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartPClosers)) {                    if (tb.inButtonScope("p")) {                        tb.processEndTag("p");                    }                    tb.insert(startTag);                }else                    if (name.equals("span")) {                        tb.reconstructFormattingElements();                        tb.insert(startTag);                    }else                        if (name.equals("li")) {                            tb.framesetOk(false);                            java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();                            for (int i = (stack.size()) - 1; i > 0; i--) {                                org.jsoup.nodes.Element el = stack.get(i);                                if (el.nodeName().equals("li")) {                                    tb.processEndTag("li");                                    break;                                }                                if ((tb.isSpecial(el)) && (!(org.jsoup.helper.StringUtil.inSorted(el.nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartLiBreakers))))                                    break;                            }                            if (tb.inButtonScope("p")) {                                tb.processEndTag("p");                            }                            tb.insert(startTag);                        }else                            if (name.equals("html")) {                                tb.error(this);                                org.jsoup.nodes.Element html = tb.getStack().get(0);                                for (org.jsoup.nodes.Attribute attribute : startTag.getAttributes()) {                                    if (!(html.hasAttr(attribute.getKey())))                                        html.attributes().put(attribute);                                }                            }else                                if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartToHead)) {                                    return tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead);                                }else                                    if (name.equals("body")) {                                        tb.error(this);                                        java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();                                        if (((stack.size()) == 1) || (((stack.size()) > 2) && (!(stack.get(1).nodeName().equals("body"))))) {                                            return false;                                        }else {                                            tb.framesetOk(false);                                            org.jsoup.nodes.Element body = stack.get(1);                                            for (org.jsoup.nodes.Attribute attribute : startTag.getAttributes()) {                                                if (!(body.hasAttr(attribute.getKey())))                                                    body.attributes().put(attribute);                                            }                                        }                                    }else                                        if (name.equals("frameset")) {                                            tb.error(this);                                            java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();                                            if (((stack.size()) == 1) || (((stack.size()) > 2) && (!(stack.get(1).nodeName().equals("body"))))) {                                                return false;                                            }else                                                if (!(tb.framesetOk())) {                                                    return false;                                                }else {                                                    org.jsoup.nodes.Element second = stack.get(1);                                                    if ((second.parent()) != null)                                                        second.remove();                                                    while ((stack.size()) > 1)                                                        stack.remove(((stack.size()) - 1));                                                    tb.insert(startTag);                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InFrameset);                                                }                                        }else                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.Headings)) {                                                if (tb.inButtonScope("p")) {                                                    tb.processEndTag("p");                                                }                                                if (org.jsoup.helper.StringUtil.inSorted(tb.currentElement().nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.Headings)) {                                                    tb.error(this);                                                    tb.pop();                                                }                                                tb.insert(startTag);                                            }else                                                if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartPreListing)) {                                                    if (tb.inButtonScope("p")) {                                                        tb.processEndTag("p");                                                    }                                                    tb.insert(startTag);                                                    tb.framesetOk(false);                                                }else                                                    if (name.equals("form")) {                                                        if ((tb.getFormElement()) != null) {                                                            tb.error(this);                                                            return false;                                                        }                                                        if (tb.inButtonScope("p")) {                                                            tb.processEndTag("p");                                                        }                                                        tb.insertForm(startTag, true);                                                    }else                                                        if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.DdDt)) {                                                            tb.framesetOk(false);                                                            java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();                                                            for (int i = (stack.size()) - 1; i > 0; i--) {                                                                org.jsoup.nodes.Element el = stack.get(i);                                                                if (org.jsoup.helper.StringUtil.inSorted(el.nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.DdDt)) {                                                                    tb.processEndTag(el.nodeName());                                                                    break;                                                                }                                                                if ((tb.isSpecial(el)) && (!(org.jsoup.helper.StringUtil.inSorted(el.nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartLiBreakers))))                                                                    break;                                                            }                                                            if (tb.inButtonScope("p")) {                                                                tb.processEndTag("p");                                                            }                                                            tb.insert(startTag);                                                        }else                                                            if (name.equals("plaintext")) {                                                                if (tb.inButtonScope("p")) {                                                                    tb.processEndTag("p");                                                                }                                                                tb.insert(startTag);                                                                tb.tokeniser.transition(org.jsoup.parser.TokeniserState.PLAINTEXT);                                                            }else                                                                if (name.equals("button")) {                                                                    if (tb.inButtonScope("button")) {                                                                        tb.error(this);                                                                        tb.processEndTag("button");                                                                        tb.process(startTag);                                                                    }else {                                                                        tb.reconstructFormattingElements();                                                                        tb.insert(startTag);                                                                        tb.framesetOk(false);                                                                    }                                                                }else                                                                    if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.Formatters)) {                                                                        tb.reconstructFormattingElements();                                                                        org.jsoup.nodes.Element el = tb.insert(startTag);                                                                        tb.pushActiveFormattingElements(el);                                                                    }else                                                                        if (name.equals("nobr")) {                                                                            tb.reconstructFormattingElements();                                                                            if (tb.inScope("nobr")) {                                                                                tb.error(this);                                                                                tb.processEndTag("nobr");                                                                                tb.reconstructFormattingElements();                                                                            }                                                                            org.jsoup.nodes.Element el = tb.insert(startTag);                                                                            tb.pushActiveFormattingElements(el);                                                                        }else                                                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartApplets)) {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                                tb.insertMarkerToFormattingElements();                                                                                tb.framesetOk(false);                                                                            }else                                                                                if (name.equals("table")) {                                                                                    if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                                                                                        tb.processEndTag("p");                                                                                    }                                                                                    tb.insert(startTag);                                                                                    tb.framesetOk(false);                                                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                                                                                }else                                                                                    if (name.equals("input")) {                                                                                        tb.reconstructFormattingElements();                                                                                        org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                                                                                        if (!(el.attr("type").equalsIgnoreCase("hidden")))                                                                                            tb.framesetOk(false);                                                                                    }else                                                                                        if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartMedia)) {                                                                                            tb.insertEmpty(startTag);                                                                                        }else                                                                                            if (name.equals("hr")) {                                                                                                if (tb.inButtonScope("p")) {                                                                                                    tb.processEndTag("p");                                                                                                }                                                                                                tb.insertEmpty(startTag);                                                                                                tb.framesetOk(false);                                                                                            }else                                                                                                if (name.equals("image")) {                                                                                                    if ((tb.getFromStack("svg")) == null)                                                                                                        return tb.process(startTag.name("img"));                                                                                                    else                                                                                                        tb.insert(startTag);                                                                                                }else                                                                                                    if (name.equals("isindex")) {                                                                                                        tb.error(this);                                                                                                        if ((tb.getFormElement()) != null)                                                                                                            return false;                                                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                                        tb.processStartTag("form");                                                                                                        if (startTag.attributes.hasKey("action")) {                                                                                                            org.jsoup.nodes.Element form = tb.getFormElement();                                                                                                            form.attr("action", startTag.attributes.get("action"));                                                                                                        }                                                                                                        tb.processStartTag("hr");                                                                                                        tb.processStartTag("label");                                                                                                        java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                                                                                        tb.process(new org.jsoup.parser.Token.Character().data(prompt));                                                                                                        org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                                                                                        for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                                                                                            if (!(org.jsoup.helper.StringUtil.inSorted(attr.getKey(), org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartInputAttribs)))                                                                                                                inputAttribs.put(attr);                                                                                                        }                                                                                                        inputAttribs.put("name", "isindex");                                                                                                        tb.processStartTag("input", inputAttribs);                                                                                                        tb.processEndTag("label");                                                                                                        tb.processStartTag("hr");                                                                                                        tb.processEndTag("form");                                                                                                    }else                                                                                                        if (name.equals("textarea")) {                                                                                                            tb.insert(startTag);                                                                                                            tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                                                                                            tb.markInsertionMode();                                                                                                            tb.framesetOk(false);                                                                                                            tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                                                                                        }else                                                                                                            if (name.equals("xmp")) {                                                                                                                if (tb.inButtonScope("p")) {                                                                                                                    tb.processEndTag("p");                                                                                                                }                                                                                                                tb.reconstructFormattingElements();                                                                                                                tb.framesetOk(false);                                                                                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                                                                            }else                                                                                                                if (name.equals("iframe")) {                                                                                                                    tb.framesetOk(false);                                                                                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                                                                                }else                                                                                                                    if (name.equals("noembed")) {                                                                                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                                                                                    }else                                                                                                                        if (name.equals("select")) {                                                                                                                            tb.reconstructFormattingElements();                                                                                                                            tb.insert(startTag);                                                                                                                            tb.framesetOk(false);                                                                                                                            org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                                                                                            if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                                                                                            else                                                                                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                                                                                        }else                                                                                                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartOptions)) {                                                                                                                                if (tb.currentElement().nodeName().equals("option"))                                                                                                                                    tb.processEndTag("option");                                                                                                                                tb.reconstructFormattingElements();                                                                                                                                tb.insert(startTag);                                                                                                                            }else                                                                                                                                if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartRuby)) {                                                                                                                                    if (tb.inScope("ruby")) {                                                                                                                                        tb.generateImpliedEndTags();                                                                                                                                        if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                                                                                            tb.error(this);                                                                                                                                            tb.popStackToBefore("ruby");                                                                                                                                        }                                                                                                                                        tb.insert(startTag);                                                                                                                                    }                                                                                                                                }else                                                                                                                                    if (name.equals("math")) {                                                                                                                                        tb.reconstructFormattingElements();                                                                                                                                        tb.insert(startTag);                                                                                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                                                                    }else                                                                                                                                        if (name.equals("svg")) {                                                                                                                                            tb.reconstructFormattingElements();                                                                                                                                            tb.insert(startTag);                                                                                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                                                                        }else                                                                                                                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartDrop)) {                                                                                                                                                tb.error(this);                                                                                                                                                return false;                                                                                                                                            }else {                                                                                                                                                tb.reconstructFormattingElements();                                                                                                                                                tb.insert(startTag);                                                                                                                                            }        break;    case EndTag :        org.jsoup.parser.Token.EndTag endTag = t.asEndTag();        name = endTag.normalName();        if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyEndAdoptionFormatters)) {            for (int i = 0; i < 8; i++) {                org.jsoup.nodes.Element formatEl = tb.getActiveFormattingElement(name);                if (formatEl == null)                    return anyOtherEndTag(t, tb);                else                    if (!(tb.onStack(formatEl))) {                        tb.error(this);                        tb.removeFromActiveFormattingElements(formatEl);                        return true;                    }else                        if (!(tb.inScope(formatEl.nodeName()))) {                            tb.error(this);                            return false;                        }else                            if ((tb.currentElement()) != formatEl)                                tb.error(this);                org.jsoup.nodes.Element furthestBlock = null;                org.jsoup.nodes.Element commonAncestor = null;                boolean seenFormattingElement = false;                java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();                final int stackSize = stack.size();                for (int si = 0; (si < stackSize) && (si < 64); si++) {                    org.jsoup.nodes.Element el = stack.get(si);                    if (el == formatEl) {                        commonAncestor = stack.get((si - 1));                        seenFormattingElement = true;                    }else                        if (seenFormattingElement && (tb.isSpecial(el))) {                            furthestBlock = el;                            break;                        }                }                if (furthestBlock == null) {                    tb.popStackToClose(formatEl.nodeName());                    tb.removeFromActiveFormattingElements(formatEl);                    return true;                }                org.jsoup.nodes.Element node = furthestBlock;                org.jsoup.nodes.Element lastNode = furthestBlock;                for (int j = 0; j < 3; j++) {                    if (tb.onStack(node))                        node = tb.aboveOnStack(node);                    if (!(tb.isInActiveFormattingElements(node))) {                        tb.removeFromStack(node);                        continue;                    }else                        if (node == formatEl)                            break;                    org.jsoup.nodes.Element replacement = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri());                    tb.replaceActiveFormattingElement(node, replacement);                    tb.replaceOnStack(node, replacement);                    node = replacement;                    if (lastNode == furthestBlock) {                    }                    if ((lastNode.parent()) != null)                        lastNode.remove();                    node.appendChild(lastNode);                    lastNode = node;                }                if (org.jsoup.helper.StringUtil.inSorted(commonAncestor.nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyEndTableFosters)) {                    if ((lastNode.parent()) != null)                        lastNode.remove();                    tb.insertInFosterParent(lastNode);                }else {                    if ((lastNode.parent()) != null)                        lastNode.remove();                    commonAncestor.appendChild(lastNode);                }                org.jsoup.nodes.Element adopter = new org.jsoup.nodes.Element(formatEl.tag(), tb.getBaseUri());                adopter.attributes().addAll(formatEl.attributes());                org.jsoup.nodes.Node[] childNodes = furthestBlock.childNodes().toArray(new org.jsoup.nodes.Node[furthestBlock.childNodeSize()]);                for (org.jsoup.nodes.Node childNode : childNodes) {                    adopter.appendChild(childNode);                }                furthestBlock.appendChild(adopter);                tb.removeFromActiveFormattingElements(formatEl);                tb.removeFromStack(formatEl);                tb.insertOnStackAfter(furthestBlock, adopter);            }        }else            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyEndClosers)) {                if (!(tb.inScope(name))) {                    tb.error(this);                    return false;                }else {                    tb.generateImpliedEndTags();                    if (!(tb.currentElement().nodeName().equals(name)))                        tb.error(this);                    tb.popStackToClose(name);                }            }else                if (name.equals("span")) {                    return anyOtherEndTag(t, tb);                }else                    if (name.equals("li")) {                        if (!(tb.inListItemScope(name))) {                            tb.error(this);                            return false;                        }else {                            tb.generateImpliedEndTags(name);                            if (!(tb.currentElement().nodeName().equals(name)))                                tb.error(this);                            tb.popStackToClose(name);                        }                    }else                        if (name.equals("body")) {                            if (!(tb.inScope("body"))) {                                tb.error(this);                                return false;                            }else {                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.AfterBody);                            }                        }else                            if (name.equals("html")) {                                boolean notIgnored = tb.processEndTag("body");                                if (notIgnored)                                    return tb.process(endTag);                            }else                                if (name.equals("form")) {                                    org.jsoup.nodes.Element currentForm = tb.getFormElement();                                    tb.setFormElement(null);                                    if ((currentForm == null) || (!(tb.inScope(name)))) {                                        tb.error(this);                                        return false;                                    }else {                                        tb.generateImpliedEndTags();                                        if (!(tb.currentElement().nodeName().equals(name)))                                            tb.error(this);                                        tb.removeFromStack(currentForm);                                    }                                }else                                    if (name.equals("p")) {                                        if (!(tb.inButtonScope(name))) {                                            tb.error(this);                                            tb.processStartTag(name);                                            return tb.process(endTag);                                        }else {                                            tb.generateImpliedEndTags(name);                                            if (!(tb.currentElement().nodeName().equals(name)))                                                tb.error(this);                                            tb.popStackToClose(name);                                        }                                    }else                                        if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.DdDt)) {                                            if (!(tb.inScope(name))) {                                                tb.error(this);                                                return false;                                            }else {                                                tb.generateImpliedEndTags(name);                                                if (!(tb.currentElement().nodeName().equals(name)))                                                    tb.error(this);                                                tb.popStackToClose(name);                                            }                                        }else                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.Headings)) {                                                if (!(tb.inScope(org.jsoup.parser.HtmlTreeBuilderState.Constants.Headings))) {                                                    tb.error(this);                                                    return false;                                                }else {                                                    tb.generateImpliedEndTags(name);                                                    if (!(tb.currentElement().nodeName().equals(name)))                                                        tb.error(this);                                                    tb.popStackToClose(org.jsoup.parser.HtmlTreeBuilderState.Constants.Headings);                                                }                                            }else                                                if (name.equals("sarcasm")) {                                                    return anyOtherEndTag(t, tb);                                                }else                                                    if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartApplets)) {                                                        if (!(tb.inScope("name"))) {                                                            if (!(tb.inScope(name))) {                                                                tb.error(this);                                                                return false;                                                            }                                                            tb.generateImpliedEndTags();                                                            if (!(tb.currentElement().nodeName().equals(name)))                                                                tb.error(this);                                                            tb.popStackToClose(name);                                                            tb.clearFormattingElementsToLastMarker();                                                        }                                                    }else                                                        if (name.equals("br")) {                                                            tb.error(this);                                                            tb.processStartTag("br");                                                            return false;                                                        }else {                                                            return anyOtherEndTag(t, tb);                                                        }        break;    case EOF :        break;}::::INSERT::::STATEMENT::::if (lastNode == furthestBlock) {}	false
org.jsoup.parser.HtmlTreeBuilderState::::247::::10127::::38412::::switch (t.type) {    case Character :        {            org.jsoup.parser.Token.Character c = t.asCharacter();            if (c.getData().equals(org.jsoup.parser.HtmlTreeBuilderState.nullString)) {                tb.error(this);                return false;            }else                if ((tb.framesetOk()) && (org.jsoup.parser.HtmlTreeBuilderState.isWhitespace(c))) {                    tb.reconstructFormattingElements();                    tb.insert(c);                }else {                    tb.reconstructFormattingElements();                    tb.insert(c);                    tb.framesetOk(false);                }            break;        }    case Comment :        {            tb.insert(t.asComment());            break;        }    case Doctype :        {            tb.error(this);            return false;        }    case StartTag :        org.jsoup.parser.Token.StartTag startTag = t.asStartTag();        java.lang.String name = startTag.normalName();        if (name.equals("a")) {            if ((tb.getActiveFormattingElement("a")) != null) {                tb.error(this);                tb.processEndTag("a");                org.jsoup.nodes.Element remainingA = tb.getFromStack("a");                if (remainingA != null) {                    tb.removeFromActiveFormattingElements(remainingA);                    tb.removeFromStack(remainingA);                }            }            tb.reconstructFormattingElements();            org.jsoup.nodes.Element a = tb.insert(startTag);            tb.pushActiveFormattingElements(a);        }else            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartEmptyFormatters)) {                tb.reconstructFormattingElements();                tb.insertEmpty(startTag);                tb.framesetOk(false);            }else                if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartPClosers)) {                    if (tb.inButtonScope("p")) {                        tb.processEndTag("p");                    }                    tb.insert(startTag);                }else                    if (name.equals("span")) {                        tb.reconstructFormattingElements();                        tb.insert(startTag);                    }else                        if (name.equals("li")) {                            tb.framesetOk(false);                            java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();                            for (int i = (stack.size()) - 1; i > 0; i--) {                                org.jsoup.nodes.Element el = stack.get(i);                                if (el.nodeName().equals("li")) {                                    tb.processEndTag("li");                                    break;                                }                                if ((tb.isSpecial(el)) && (!(org.jsoup.helper.StringUtil.inSorted(el.nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartLiBreakers))))                                    break;                            }                            if (tb.inButtonScope("p")) {                                tb.processEndTag("p");                            }                            tb.insert(startTag);                        }else                            if (name.equals("html")) {                                tb.error(this);                                org.jsoup.nodes.Element html = tb.getStack().get(0);                                for (org.jsoup.nodes.Attribute attribute : startTag.getAttributes()) {                                    if (!(html.hasAttr(attribute.getKey())))                                        html.attributes().put(attribute);                                }                            }else                                if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartToHead)) {                                    return tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead);                                }else                                    if (name.equals("body")) {                                        tb.error(this);                                        java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();                                        if (((stack.size()) == 1) || (((stack.size()) > 2) && (!(stack.get(1).nodeName().equals("body"))))) {                                            return false;                                        }else {                                            tb.framesetOk(false);                                            org.jsoup.nodes.Element body = stack.get(1);                                            for (org.jsoup.nodes.Attribute attribute : startTag.getAttributes()) {                                                if (!(body.hasAttr(attribute.getKey())))                                                    body.attributes().put(attribute);                                            }                                        }                                    }else                                        if (name.equals("frameset")) {                                            tb.error(this);                                            java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();                                            if (((stack.size()) == 1) || (((stack.size()) > 2) && (!(stack.get(1).nodeName().equals("body"))))) {                                                return false;                                            }else                                                if (!(tb.framesetOk())) {                                                    return false;                                                }else {                                                    org.jsoup.nodes.Element second = stack.get(1);                                                    if ((second.parent()) != null)                                                        second.remove();                                                    while ((stack.size()) > 1)                                                        stack.remove(((stack.size()) - 1));                                                    tb.insert(startTag);                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InFrameset);                                                }                                        }else                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.Headings)) {                                                if (tb.inButtonScope("p")) {                                                    tb.processEndTag("p");                                                }                                                if (org.jsoup.helper.StringUtil.inSorted(tb.currentElement().nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.Headings)) {                                                    tb.error(this);                                                    tb.pop();                                                }                                                tb.insert(startTag);                                            }else                                                if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartPreListing)) {                                                    if (tb.inButtonScope("p")) {                                                        tb.processEndTag("p");                                                    }                                                    tb.insert(startTag);                                                    tb.framesetOk(false);                                                }else                                                    if (name.equals("form")) {                                                        if ((tb.getFormElement()) != null) {                                                            tb.error(this);                                                            return false;                                                        }                                                        if (tb.inButtonScope("p")) {                                                            tb.processEndTag("p");                                                        }                                                        tb.insertForm(startTag, true);                                                    }else                                                        if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.DdDt)) {                                                            tb.framesetOk(false);                                                            java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();                                                            for (int i = (stack.size()) - 1; i > 0; i--) {                                                                org.jsoup.nodes.Element el = stack.get(i);                                                                if (org.jsoup.helper.StringUtil.inSorted(el.nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.DdDt)) {                                                                    tb.processEndTag(el.nodeName());                                                                    break;                                                                }                                                                if ((tb.isSpecial(el)) && (!(org.jsoup.helper.StringUtil.inSorted(el.nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartLiBreakers))))                                                                    break;                                                            }                                                            if (tb.inButtonScope("p")) {                                                                tb.processEndTag("p");                                                            }                                                            tb.insert(startTag);                                                        }else                                                            if (name.equals("plaintext")) {                                                                if (tb.inButtonScope("p")) {                                                                    tb.processEndTag("p");                                                                }                                                                tb.insert(startTag);                                                                tb.tokeniser.transition(org.jsoup.parser.TokeniserState.PLAINTEXT);                                                            }else                                                                if (name.equals("button")) {                                                                    if (tb.inButtonScope("button")) {                                                                        tb.error(this);                                                                        tb.processEndTag("button");                                                                        tb.process(startTag);                                                                    }else {                                                                        tb.reconstructFormattingElements();                                                                        tb.insert(startTag);                                                                        tb.framesetOk(false);                                                                    }                                                                }else                                                                    if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.Formatters)) {                                                                        tb.reconstructFormattingElements();                                                                        org.jsoup.nodes.Element el = tb.insert(startTag);                                                                        tb.pushActiveFormattingElements(el);                                                                    }else                                                                        if (name.equals("nobr")) {                                                                            tb.reconstructFormattingElements();                                                                            if (tb.inScope("nobr")) {                                                                                tb.error(this);                                                                                tb.processEndTag("nobr");                                                                                tb.reconstructFormattingElements();                                                                            }                                                                            org.jsoup.nodes.Element el = tb.insert(startTag);                                                                            tb.pushActiveFormattingElements(el);                                                                        }else                                                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartApplets)) {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                                tb.insertMarkerToFormattingElements();                                                                                tb.framesetOk(false);                                                                            }else                                                                                if (name.equals("table")) {                                                                                    if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                                                                                        tb.processEndTag("p");                                                                                    }                                                                                    tb.insert(startTag);                                                                                    tb.framesetOk(false);                                                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                                                                                }else                                                                                    if (name.equals("input")) {                                                                                        tb.reconstructFormattingElements();                                                                                        org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                                                                                        if (!(el.attr("type").equalsIgnoreCase("hidden")))                                                                                            tb.framesetOk(false);                                                                                    }else                                                                                        if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartMedia)) {                                                                                            tb.insertEmpty(startTag);                                                                                        }else                                                                                            if (name.equals("hr")) {                                                                                                if (tb.inButtonScope("p")) {                                                                                                    tb.processEndTag("p");                                                                                                }                                                                                                tb.insertEmpty(startTag);                                                                                                tb.framesetOk(false);                                                                                            }else                                                                                                if (name.equals("image")) {                                                                                                    if ((tb.getFromStack("svg")) == null)                                                                                                        return tb.process(startTag.name("img"));                                                                                                    else                                                                                                        tb.insert(startTag);                                                                                                }else                                                                                                    if (name.equals("isindex")) {                                                                                                        tb.error(this);                                                                                                        if ((tb.getFormElement()) != null)                                                                                                            return false;                                                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                                        tb.processStartTag("form");                                                                                                        if (startTag.attributes.hasKey("action")) {                                                                                                            org.jsoup.nodes.Element form = tb.getFormElement();                                                                                                            form.attr("action", startTag.attributes.get("action"));                                                                                                        }                                                                                                        tb.processStartTag("hr");                                                                                                        tb.processStartTag("label");                                                                                                        java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                                                                                        tb.process(new org.jsoup.parser.Token.Character().data(prompt));                                                                                                        org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                                                                                        for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                                                                                            if (!(org.jsoup.helper.StringUtil.inSorted(attr.getKey(), org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartInputAttribs)))                                                                                                                inputAttribs.put(attr);                                                                                                        }                                                                                                        inputAttribs.put("name", "isindex");                                                                                                        tb.processStartTag("input", inputAttribs);                                                                                                        tb.processEndTag("label");                                                                                                        tb.processStartTag("hr");                                                                                                        tb.processEndTag("form");                                                                                                    }else                                                                                                        if (name.equals("textarea")) {                                                                                                            tb.insert(startTag);                                                                                                            tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                                                                                            tb.markInsertionMode();                                                                                                            tb.framesetOk(false);                                                                                                            tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                                                                                        }else                                                                                                            if (name.equals("xmp")) {                                                                                                                if (tb.inButtonScope("p")) {                                                                                                                    tb.processEndTag("p");                                                                                                                }                                                                                                                tb.reconstructFormattingElements();                                                                                                                tb.framesetOk(false);                                                                                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                                                                            }else                                                                                                                if (name.equals("iframe")) {                                                                                                                    tb.framesetOk(false);                                                                                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                                                                                }else                                                                                                                    if (name.equals("noembed")) {                                                                                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                                                                                    }else                                                                                                                        if (name.equals("select")) {                                                                                                                            tb.reconstructFormattingElements();                                                                                                                            tb.insert(startTag);                                                                                                                            tb.framesetOk(false);                                                                                                                            org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                                                                                            if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                                                                                            else                                                                                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                                                                                        }else                                                                                                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartOptions)) {                                                                                                                                if (tb.currentElement().nodeName().equals("option"))                                                                                                                                    tb.processEndTag("option");                                                                                                                                tb.reconstructFormattingElements();                                                                                                                                tb.insert(startTag);                                                                                                                            }else                                                                                                                                if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartRuby)) {                                                                                                                                    if (tb.inScope("ruby")) {                                                                                                                                        tb.generateImpliedEndTags();                                                                                                                                        if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                                                                                            tb.error(this);                                                                                                                                            tb.popStackToBefore("ruby");                                                                                                                                        }                                                                                                                                        tb.insert(startTag);                                                                                                                                    }                                                                                                                                }else                                                                                                                                    if (name.equals("math")) {                                                                                                                                        tb.reconstructFormattingElements();                                                                                                                                        tb.insert(startTag);                                                                                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                                                                    }else                                                                                                                                        if (name.equals("svg")) {                                                                                                                                            tb.reconstructFormattingElements();                                                                                                                                            tb.insert(startTag);                                                                                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                                                                        }else                                                                                                                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartDrop)) {                                                                                                                                                tb.error(this);                                                                                                                                                return false;                                                                                                                                            }else {                                                                                                                                                tb.reconstructFormattingElements();                                                                                                                                                tb.insert(startTag);                                                                                                                                            }        break;    case EndTag :        org.jsoup.parser.Token.EndTag endTag = t.asEndTag();        name = endTag.normalName();        if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyEndAdoptionFormatters)) {            for (int i = 0; i < 8; i++) {                org.jsoup.nodes.Element formatEl = tb.getActiveFormattingElement(name);                if (formatEl == null)                    return anyOtherEndTag(t, tb);                else                    if (!(tb.onStack(formatEl))) {                        tb.error(this);                        tb.removeFromActiveFormattingElements(formatEl);                        return true;                    }else                        if (!(tb.inScope(formatEl.nodeName()))) {                            tb.error(this);                            return false;                        }else                            if ((tb.currentElement()) != formatEl)                                tb.error(this);                org.jsoup.nodes.Element furthestBlock = null;                org.jsoup.nodes.Element commonAncestor = null;                boolean seenFormattingElement = false;                java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();                final int stackSize = stack.size();                for (int si = 0; (si < stackSize) && (si < 64); si++) {                    org.jsoup.nodes.Element el = stack.get(si);                    if (el == formatEl) {                        commonAncestor = stack.get((si - 1));                        seenFormattingElement = true;                    }else                        if (seenFormattingElement && (tb.isSpecial(el))) {                            furthestBlock = el;                            break;                        }                }                if (furthestBlock == null) {                    tb.popStackToClose(formatEl.nodeName());                    tb.removeFromActiveFormattingElements(formatEl);                    return true;                }                org.jsoup.nodes.Element node = furthestBlock;                org.jsoup.nodes.Element lastNode = furthestBlock;                for (int j = 0; j < 3; j++) {                    if (tb.onStack(node))                        node = tb.aboveOnStack(node);                    if (!(tb.isInActiveFormattingElements(node))) {                        tb.removeFromStack(node);                        continue;                    }else                        if (node == formatEl)                            break;                    org.jsoup.nodes.Element replacement = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri());                    tb.replaceActiveFormattingElement(node, replacement);                    tb.replaceOnStack(node, replacement);                    node = replacement;                    if (lastNode == furthestBlock) {                    }                    if ((lastNode.parent()) != null)                        lastNode.remove();                    node.appendChild(lastNode);                    lastNode = node;                }                if (org.jsoup.helper.StringUtil.inSorted(commonAncestor.nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyEndTableFosters)) {                    if ((lastNode.parent()) != null)                        lastNode.remove();                    tb.insertInFosterParent(lastNode);                }else {                    if ((lastNode.parent()) != null)                        lastNode.remove();                    commonAncestor.appendChild(lastNode);                }                org.jsoup.nodes.Element adopter = new org.jsoup.nodes.Element(formatEl.tag(), tb.getBaseUri());                adopter.attributes().addAll(formatEl.attributes());                org.jsoup.nodes.Node[] childNodes = furthestBlock.childNodes().toArray(new org.jsoup.nodes.Node[furthestBlock.childNodeSize()]);                for (org.jsoup.nodes.Node childNode : childNodes) {                    adopter.appendChild(childNode);                }                furthestBlock.appendChild(adopter);                tb.removeFromActiveFormattingElements(formatEl);                tb.removeFromStack(formatEl);                tb.insertOnStackAfter(furthestBlock, adopter);            }        }else            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyEndClosers)) {                if (!(tb.inScope(name))) {                    tb.error(this);                    return false;                }else {                    tb.generateImpliedEndTags();                    if (!(tb.currentElement().nodeName().equals(name)))                        tb.error(this);                    tb.popStackToClose(name);                }            }else                if (name.equals("span")) {                    return anyOtherEndTag(t, tb);                }else                    if (name.equals("li")) {                        if (!(tb.inListItemScope(name))) {                            tb.error(this);                            return false;                        }else {                            tb.generateImpliedEndTags(name);                            if (!(tb.currentElement().nodeName().equals(name)))                                tb.error(this);                            tb.popStackToClose(name);                        }                    }else                        if (name.equals("body")) {                            if (!(tb.inScope("body"))) {                                tb.error(this);                                return false;                            }else {                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.AfterBody);                            }                        }else                            if (name.equals("html")) {                                boolean notIgnored = tb.processEndTag("body");                                if (notIgnored)                                    return tb.process(endTag);                            }else                                if (name.equals("form")) {                                    org.jsoup.nodes.Element currentForm = tb.getFormElement();                                    tb.setFormElement(null);                                    if ((currentForm == null) || (!(tb.inScope(name)))) {                                        tb.error(this);                                        return false;                                    }else {                                        tb.generateImpliedEndTags();                                        if (!(tb.currentElement().nodeName().equals(name)))                                            tb.error(this);                                        tb.removeFromStack(currentForm);                                    }                                }else                                    if (name.equals("p")) {                                        if (!(tb.inButtonScope(name))) {                                            tb.error(this);                                            tb.processStartTag(name);                                            return tb.process(endTag);                                        }else {                                            tb.generateImpliedEndTags(name);                                            if (!(tb.currentElement().nodeName().equals(name)))                                                tb.error(this);                                            tb.popStackToClose(name);                                        }                                    }else                                        if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.DdDt)) {                                            if (!(tb.inScope(name))) {                                                tb.error(this);                                                return false;                                            }else {                                                tb.generateImpliedEndTags(name);                                                if (!(tb.currentElement().nodeName().equals(name)))                                                    tb.error(this);                                                tb.popStackToClose(name);                                            }                                        }else                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.Headings)) {                                                if (!(tb.inScope(org.jsoup.parser.HtmlTreeBuilderState.Constants.Headings))) {                                                    tb.error(this);                                                    return false;                                                }else {                                                    tb.generateImpliedEndTags(name);                                                    if (!(tb.currentElement().nodeName().equals(name)))                                                        tb.error(this);                                                    tb.popStackToClose(org.jsoup.parser.HtmlTreeBuilderState.Constants.Headings);                                                }                                            }else                                                if (name.equals("sarcasm")) {                                                    return anyOtherEndTag(t, tb);                                                }else                                                    if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartApplets)) {                                                        if (!(tb.inScope("name"))) {                                                            if (!(tb.inScope(name))) {                                                                tb.error(this);                                                                return false;                                                            }                                                            tb.generateImpliedEndTags();                                                            if (!(tb.currentElement().nodeName().equals(name)))                                                                tb.error(this);                                                            tb.popStackToClose(name);                                                            tb.clearFormattingElementsToLastMarker();                                                        }                                                    }else                                                        if (name.equals("br")) {                                                            tb.error(this);                                                            tb.processStartTag("br");                                                            return false;                                                        }else {                                                            return anyOtherEndTag(t, tb);                                                        }        break;    case EOF :        break;}::::INSERT::::STATEMENT::::tb.process(startTag)	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::second	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::html	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"math"	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::new org.jsoup.nodes.Attributes()	false
org.jsoup.parser.TokeniserState::::551::::18233::::18253::::char c = r.consume()::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.readEndTag(t, r, org.jsoup.parser.TokeniserState.ScriptDataEndTagName, org.jsoup.parser.TokeniserState.ScriptData)	false
org.jsoup.parser.TokeniserState::::551::::18233::::18253::::char c = r.consume()::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.readEndTag(t, r, org.jsoup.parser.TokeniserState.RawtextEndTagName, org.jsoup.parser.TokeniserState.Rawtext)	false
org.jsoup.parser.TokeniserState::::551::::18233::::18253::::char c = r.consume()::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.readData(t, r, this, org.jsoup.parser.TokeniserState.ScriptDataLessthanSign)	false
org.jsoup.parser.TokeniserState::::551::::18233::::18253::::char c = r.consume()::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.readData(t, r, this, org.jsoup.parser.TokeniserState.RawtextLessthanSign)	false
org.jsoup.parser.TokeniserState::::551::::18233::::18253::::char c = r.consume()::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.readCharRef(t, org.jsoup.parser.TokeniserState.Rcdata)	false
org.jsoup.parser.TokeniserState::::551::::18233::::18253::::char c = r.consume()::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.readCharRef(t, org.jsoup.parser.TokeniserState.Data)	false
org.jsoup.parser.TokeniserState::::551::::18233::::18253::::char c = r.consume()::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataEndTag(t, r, org.jsoup.parser.TokeniserState.ScriptDataEscaped)	false
org.jsoup.parser.TokeniserState::::551::::18233::::18253::::char c = r.consume()::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataEndTag(t, r, org.jsoup.parser.TokeniserState.ScriptData)	false
org.jsoup.parser.TokeniserState::::551::::18233::::18253::::char c = r.consume()::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataEndTag(t, r, org.jsoup.parser.TokeniserState.Rawtext)	false
org.jsoup.parser.TokeniserState::::551::::18233::::18253::::char c = r.consume()::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataDoubleEscapeTag(t, r, org.jsoup.parser.TokeniserState.ScriptDataEscaped, org.jsoup.parser.TokeniserState.ScriptDataDoubleEscaped)	false
org.jsoup.parser.TokeniserState::::551::::18233::::18253::::char c = r.consume()::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataDoubleEscapeTag(t, r, org.jsoup.parser.TokeniserState.ScriptDataDoubleEscaped, org.jsoup.parser.TokeniserState.ScriptDataEscaped)	false
org.jsoup.parser.HtmlTreeBuilderState::::247::::10127::::38412::::switch (t.type) {    case Character :        {            org.jsoup.parser.Token.Character c = t.asCharacter();            if (c.getData().equals(org.jsoup.parser.HtmlTreeBuilderState.nullString)) {                tb.error(this);                return false;            }else                if ((tb.framesetOk()) && (org.jsoup.parser.HtmlTreeBuilderState.isWhitespace(c))) {                    tb.reconstructFormattingElements();                    tb.insert(c);                }else {                    tb.reconstructFormattingElements();                    tb.insert(c);                    tb.framesetOk(false);                }            break;        }    case Comment :        {            tb.insert(t.asComment());            break;        }    case Doctype :        {            tb.error(this);            return false;        }    case StartTag :        org.jsoup.parser.Token.StartTag startTag = t.asStartTag();        java.lang.String name = startTag.normalName();        if (name.equals("a")) {            if ((tb.getActiveFormattingElement("a")) != null) {                tb.error(this);                tb.processEndTag("a");                org.jsoup.nodes.Element remainingA = tb.getFromStack("a");                if (remainingA != null) {                    tb.removeFromActiveFormattingElements(remainingA);                    tb.removeFromStack(remainingA);                }            }            tb.reconstructFormattingElements();            org.jsoup.nodes.Element a = tb.insert(startTag);            tb.pushActiveFormattingElements(a);        }else            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartEmptyFormatters)) {                tb.reconstructFormattingElements();                tb.insertEmpty(startTag);                tb.framesetOk(false);            }else                if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartPClosers)) {                    if (tb.inButtonScope("p")) {                        tb.processEndTag("p");                    }                    tb.insert(startTag);                }else                    if (name.equals("span")) {                        tb.reconstructFormattingElements();                        tb.insert(startTag);                    }else                        if (name.equals("li")) {                            tb.framesetOk(false);                            java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();                            for (int i = (stack.size()) - 1; i > 0; i--) {                                org.jsoup.nodes.Element el = stack.get(i);                                if (el.nodeName().equals("li")) {                                    tb.processEndTag("li");                                    break;                                }                                if ((tb.isSpecial(el)) && (!(org.jsoup.helper.StringUtil.inSorted(el.nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartLiBreakers))))                                    break;                            }                            if (tb.inButtonScope("p")) {                                tb.processEndTag("p");                            }                            tb.insert(startTag);                        }else                            if (name.equals("html")) {                                tb.error(this);                                org.jsoup.nodes.Element html = tb.getStack().get(0);                                for (org.jsoup.nodes.Attribute attribute : startTag.getAttributes()) {                                    if (!(html.hasAttr(attribute.getKey())))                                        html.attributes().put(attribute);                                }                            }else                                if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartToHead)) {                                    return tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead);                                }else                                    if (name.equals("body")) {                                        tb.error(this);                                        java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();                                        if (((stack.size()) == 1) || (((stack.size()) > 2) && (!(stack.get(1).nodeName().equals("body"))))) {                                            return false;                                        }else {                                            tb.framesetOk(false);                                            org.jsoup.nodes.Element body = stack.get(1);                                            for (org.jsoup.nodes.Attribute attribute : startTag.getAttributes()) {                                                if (!(body.hasAttr(attribute.getKey())))                                                    body.attributes().put(attribute);                                            }                                        }                                    }else                                        if (name.equals("frameset")) {                                            tb.error(this);                                            java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();                                            if (((stack.size()) == 1) || (((stack.size()) > 2) && (!(stack.get(1).nodeName().equals("body"))))) {                                                return false;                                            }else                                                if (!(tb.framesetOk())) {                                                    return false;                                                }else {                                                    org.jsoup.nodes.Element second = stack.get(1);                                                    if ((second.parent()) != null)                                                        second.remove();                                                    while ((stack.size()) > 1)                                                        stack.remove(((stack.size()) - 1));                                                    tb.insert(startTag);                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InFrameset);                                                }                                        }else                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.Headings)) {                                                if (tb.inButtonScope("p")) {                                                    tb.processEndTag("p");                                                }                                                if (org.jsoup.helper.StringUtil.inSorted(tb.currentElement().nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.Headings)) {                                                    tb.error(this);                                                    tb.pop();                                                }                                                tb.insert(startTag);                                            }else                                                if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartPreListing)) {                                                    if (tb.inButtonScope("p")) {                                                        tb.processEndTag("p");                                                    }                                                    tb.insert(startTag);                                                    tb.framesetOk(false);                                                }else                                                    if (name.equals("form")) {                                                        if ((tb.getFormElement()) != null) {                                                            tb.error(this);                                                            return false;                                                        }                                                        if (tb.inButtonScope("p")) {                                                            tb.processEndTag("p");                                                        }                                                        tb.insertForm(startTag, true);                                                    }else                                                        if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.DdDt)) {                                                            tb.framesetOk(false);                                                            java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();                                                            for (int i = (stack.size()) - 1; i > 0; i--) {                                                                org.jsoup.nodes.Element el = stack.get(i);                                                                if (org.jsoup.helper.StringUtil.inSorted(el.nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.DdDt)) {                                                                    tb.processEndTag(el.nodeName());                                                                    break;                                                                }                                                                if ((tb.isSpecial(el)) && (!(org.jsoup.helper.StringUtil.inSorted(el.nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartLiBreakers))))                                                                    break;                                                            }                                                            if (tb.inButtonScope("p")) {                                                                tb.processEndTag("p");                                                            }                                                            tb.insert(startTag);                                                        }else                                                            if (name.equals("plaintext")) {                                                                if (tb.inButtonScope("p")) {                                                                    tb.processEndTag("p");                                                                }                                                                tb.insert(startTag);                                                                tb.tokeniser.transition(org.jsoup.parser.TokeniserState.PLAINTEXT);                                                            }else                                                                if (name.equals("button")) {                                                                    if (tb.inButtonScope("button")) {                                                                        tb.error(this);                                                                        tb.processEndTag("button");                                                                        tb.process(startTag);                                                                    }else {                                                                        tb.reconstructFormattingElements();                                                                        tb.insert(startTag);                                                                        tb.framesetOk(false);                                                                    }                                                                }else                                                                    if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.Formatters)) {                                                                        tb.reconstructFormattingElements();                                                                        org.jsoup.nodes.Element el = tb.insert(startTag);                                                                        tb.pushActiveFormattingElements(el);                                                                    }else                                                                        if (name.equals("nobr")) {                                                                            tb.reconstructFormattingElements();                                                                            if (tb.inScope("nobr")) {                                                                                tb.error(this);                                                                                tb.processEndTag("nobr");                                                                                tb.reconstructFormattingElements();                                                                            }                                                                            org.jsoup.nodes.Element el = tb.insert(startTag);                                                                            tb.pushActiveFormattingElements(el);                                                                        }else                                                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartApplets)) {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                                tb.insertMarkerToFormattingElements();                                                                                tb.framesetOk(false);                                                                            }else                                                                                if (name.equals("table")) {                                                                                    if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                                                                                        tb.processEndTag("p");                                                                                    }                                                                                    tb.insert(startTag);                                                                                    tb.framesetOk(false);                                                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                                                                                }else                                                                                    if (name.equals("input")) {                                                                                        tb.reconstructFormattingElements();                                                                                        org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                                                                                        if (!(el.attr("type").equalsIgnoreCase("hidden")))                                                                                            tb.framesetOk(false);                                                                                    }else                                                                                        if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartMedia)) {                                                                                            tb.insertEmpty(startTag);                                                                                        }else                                                                                            if (name.equals("hr")) {                                                                                                if (tb.inButtonScope("p")) {                                                                                                    tb.processEndTag("p");                                                                                                }                                                                                                tb.insertEmpty(startTag);                                                                                                tb.framesetOk(false);                                                                                            }else                                                                                                if (name.equals("image")) {                                                                                                    if ((tb.getFromStack("svg")) == null)                                                                                                        return tb.process(startTag.name("img"));                                                                                                    else                                                                                                        tb.insert(startTag);                                                                                                }else                                                                                                    if (name.equals("isindex")) {                                                                                                        tb.error(this);                                                                                                        if ((tb.getFormElement()) != null)                                                                                                            return false;                                                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                                        tb.processStartTag("form");                                                                                                        if (startTag.attributes.hasKey("action")) {                                                                                                            org.jsoup.nodes.Element form = tb.getFormElement();                                                                                                            form.attr("action", startTag.attributes.get("action"));                                                                                                        }                                                                                                        tb.processStartTag("hr");                                                                                                        tb.processStartTag("label");                                                                                                        java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                                                                                        tb.process(new org.jsoup.parser.Token.Character().data(prompt));                                                                                                        org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                                                                                        for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                                                                                            if (!(org.jsoup.helper.StringUtil.inSorted(attr.getKey(), org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartInputAttribs)))                                                                                                                inputAttribs.put(attr);                                                                                                        }                                                                                                        inputAttribs.put("name", "isindex");                                                                                                        tb.processStartTag("input", inputAttribs);                                                                                                        tb.processEndTag("label");                                                                                                        tb.processStartTag("hr");                                                                                                        tb.processEndTag("form");                                                                                                    }else                                                                                                        if (name.equals("textarea")) {                                                                                                            tb.insert(startTag);                                                                                                            tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                                                                                            tb.markInsertionMode();                                                                                                            tb.framesetOk(false);                                                                                                            tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                                                                                        }else                                                                                                            if (name.equals("xmp")) {                                                                                                                if (tb.inButtonScope("p")) {                                                                                                                    tb.processEndTag("p");                                                                                                                }                                                                                                                tb.reconstructFormattingElements();                                                                                                                tb.framesetOk(false);                                                                                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                                                                            }else                                                                                                                if (name.equals("iframe")) {                                                                                                                    tb.framesetOk(false);                                                                                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                                                                                }else                                                                                                                    if (name.equals("noembed")) {                                                                                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                                                                                    }else                                                                                                                        if (name.equals("select")) {                                                                                                                            tb.reconstructFormattingElements();                                                                                                                            tb.insert(startTag);                                                                                                                            tb.framesetOk(false);                                                                                                                            org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                                                                                            if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                                                                                            else                                                                                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                                                                                        }else                                                                                                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartOptions)) {                                                                                                                                if (tb.currentElement().nodeName().equals("option"))                                                                                                                                    tb.processEndTag("option");                                                                                                                                tb.reconstructFormattingElements();                                                                                                                                tb.insert(startTag);                                                                                                                            }else                                                                                                                                if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartRuby)) {                                                                                                                                    if (tb.inScope("ruby")) {                                                                                                                                        tb.generateImpliedEndTags();                                                                                                                                        if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                                                                                            tb.error(this);                                                                                                                                            tb.popStackToBefore("ruby");                                                                                                                                        }                                                                                                                                        tb.insert(startTag);                                                                                                                                    }                                                                                                                                }else                                                                                                                                    if (name.equals("math")) {                                                                                                                                        tb.reconstructFormattingElements();                                                                                                                                        tb.insert(startTag);                                                                                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                                                                    }else                                                                                                                                        if (name.equals("svg")) {                                                                                                                                            tb.reconstructFormattingElements();                                                                                                                                            tb.insert(startTag);                                                                                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                                                                        }else                                                                                                                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartDrop)) {                                                                                                                                                tb.error(this);                                                                                                                                                return false;                                                                                                                                            }else {                                                                                                                                                tb.reconstructFormattingElements();                                                                                                                                                tb.insert(startTag);                                                                                                                                            }        break;    case EndTag :        org.jsoup.parser.Token.EndTag endTag = t.asEndTag();        name = endTag.normalName();        if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyEndAdoptionFormatters)) {            for (int i = 0; i < 8; i++) {                org.jsoup.nodes.Element formatEl = tb.getActiveFormattingElement(name);                if (formatEl == null)                    return anyOtherEndTag(t, tb);                else                    if (!(tb.onStack(formatEl))) {                        tb.error(this);                        tb.removeFromActiveFormattingElements(formatEl);                        return true;                    }else                        if (!(tb.inScope(formatEl.nodeName()))) {                            tb.error(this);                            return false;                        }else                            if ((tb.currentElement()) != formatEl)                                tb.error(this);                org.jsoup.nodes.Element furthestBlock = null;                org.jsoup.nodes.Element commonAncestor = null;                boolean seenFormattingElement = false;                java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();                final int stackSize = stack.size();                for (int si = 0; (si < stackSize) && (si < 64); si++) {                    org.jsoup.nodes.Element el = stack.get(si);                    if (el == formatEl) {                        commonAncestor = stack.get((si - 1));                        seenFormattingElement = true;                    }else                        if (seenFormattingElement && (tb.isSpecial(el))) {                            furthestBlock = el;                            break;                        }                }                if (furthestBlock == null) {                    tb.popStackToClose(formatEl.nodeName());                    tb.removeFromActiveFormattingElements(formatEl);                    return true;                }                org.jsoup.nodes.Element node = furthestBlock;                org.jsoup.nodes.Element lastNode = furthestBlock;                for (int j = 0; j < 3; j++) {                    if (tb.onStack(node))                        node = tb.aboveOnStack(node);                    if (!(tb.isInActiveFormattingElements(node))) {                        tb.removeFromStack(node);                        continue;                    }else                        if (node == formatEl)                            break;                    org.jsoup.nodes.Element replacement = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri());                    tb.replaceActiveFormattingElement(node, replacement);                    tb.replaceOnStack(node, replacement);                    node = replacement;                    if (lastNode == furthestBlock) {                    }                    if ((lastNode.parent()) != null)                        lastNode.remove();                    node.appendChild(lastNode);                    lastNode = node;                }                if (org.jsoup.helper.StringUtil.inSorted(commonAncestor.nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyEndTableFosters)) {                    if ((lastNode.parent()) != null)                        lastNode.remove();                    tb.insertInFosterParent(lastNode);                }else {                    if ((lastNode.parent()) != null)                        lastNode.remove();                    commonAncestor.appendChild(lastNode);                }                org.jsoup.nodes.Element adopter = new org.jsoup.nodes.Element(formatEl.tag(), tb.getBaseUri());                adopter.attributes().addAll(formatEl.attributes());                org.jsoup.nodes.Node[] childNodes = furthestBlock.childNodes().toArray(new org.jsoup.nodes.Node[furthestBlock.childNodeSize()]);                for (org.jsoup.nodes.Node childNode : childNodes) {                    adopter.appendChild(childNode);                }                furthestBlock.appendChild(adopter);                tb.removeFromActiveFormattingElements(formatEl);                tb.removeFromStack(formatEl);                tb.insertOnStackAfter(furthestBlock, adopter);            }        }else            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyEndClosers)) {                if (!(tb.inScope(name))) {                    tb.error(this);                    return false;                }else {                    tb.generateImpliedEndTags();                    if (!(tb.currentElement().nodeName().equals(name)))                        tb.error(this);                    tb.popStackToClose(name);                }            }else                if (name.equals("span")) {                    return anyOtherEndTag(t, tb);                }else                    if (name.equals("li")) {                        if (!(tb.inListItemScope(name))) {                            tb.error(this);                            return false;                        }else {                            tb.generateImpliedEndTags(name);                            if (!(tb.currentElement().nodeName().equals(name)))                                tb.error(this);                            tb.popStackToClose(name);                        }                    }else                        if (name.equals("body")) {                            if (!(tb.inScope("body"))) {                                tb.error(this);                                return false;                            }else {                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.AfterBody);                            }                        }else                            if (name.equals("html")) {                                boolean notIgnored = tb.processEndTag("body");                                if (notIgnored)                                    return tb.process(endTag);                            }else                                if (name.equals("form")) {                                    org.jsoup.nodes.Element currentForm = tb.getFormElement();                                    tb.setFormElement(null);                                    if ((currentForm == null) || (!(tb.inScope(name)))) {                                        tb.error(this);                                        return false;                                    }else {                                        tb.generateImpliedEndTags();                                        if (!(tb.currentElement().nodeName().equals(name)))                                            tb.error(this);                                        tb.removeFromStack(currentForm);                                    }                                }else                                    if (name.equals("p")) {                                        if (!(tb.inButtonScope(name))) {                                            tb.error(this);                                            tb.processStartTag(name);                                            return tb.process(endTag);                                        }else {                                            tb.generateImpliedEndTags(name);                                            if (!(tb.currentElement().nodeName().equals(name)))                                                tb.error(this);                                            tb.popStackToClose(name);                                        }                                    }else                                        if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.DdDt)) {                                            if (!(tb.inScope(name))) {                                                tb.error(this);                                                return false;                                            }else {                                                tb.generateImpliedEndTags(name);                                                if (!(tb.currentElement().nodeName().equals(name)))                                                    tb.error(this);                                                tb.popStackToClose(name);                                            }                                        }else                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.Headings)) {                                                if (!(tb.inScope(org.jsoup.parser.HtmlTreeBuilderState.Constants.Headings))) {                                                    tb.error(this);                                                    return false;                                                }else {                                                    tb.generateImpliedEndTags(name);                                                    if (!(tb.currentElement().nodeName().equals(name)))                                                        tb.error(this);                                                    tb.popStackToClose(org.jsoup.parser.HtmlTreeBuilderState.Constants.Headings);                                                }                                            }else                                                if (name.equals("sarcasm")) {                                                    return anyOtherEndTag(t, tb);                                                }else                                                    if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartApplets)) {                                                        if (!(tb.inScope("name"))) {                                                            if (!(tb.inScope(name))) {                                                                tb.error(this);                                                                return false;                                                            }                                                            tb.generateImpliedEndTags();                                                            if (!(tb.currentElement().nodeName().equals(name)))                                                                tb.error(this);                                                            tb.popStackToClose(name);                                                            tb.clearFormattingElementsToLastMarker();                                                        }                                                    }else                                                        if (name.equals("br")) {                                                            tb.error(this);                                                            tb.processStartTag("br");                                                            return false;                                                        }else {                                                            return anyOtherEndTag(t, tb);                                                        }        break;    case EOF :        break;}::::INSERT::::STATEMENT::::closeCell(tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"keygen"	false
org.jsoup.parser.HtmlTreeBuilderState::::247::::10127::::38412::::switch (t.type) {    case Character :        {            org.jsoup.parser.Token.Character c = t.asCharacter();            if (c.getData().equals(org.jsoup.parser.HtmlTreeBuilderState.nullString)) {                tb.error(this);                return false;            }else                if ((tb.framesetOk()) && (org.jsoup.parser.HtmlTreeBuilderState.isWhitespace(c))) {                    tb.reconstructFormattingElements();                    tb.insert(c);                }else {                    tb.reconstructFormattingElements();                    tb.insert(c);                    tb.framesetOk(false);                }            break;        }    case Comment :        {            tb.insert(t.asComment());            break;        }    case Doctype :        {            tb.error(this);            return false;        }    case StartTag :        org.jsoup.parser.Token.StartTag startTag = t.asStartTag();        java.lang.String name = startTag.normalName();        if (name.equals("a")) {            if ((tb.getActiveFormattingElement("a")) != null) {                tb.error(this);                tb.processEndTag("a");                org.jsoup.nodes.Element remainingA = tb.getFromStack("a");                if (remainingA != null) {                    tb.removeFromActiveFormattingElements(remainingA);                    tb.removeFromStack(remainingA);                }            }            tb.reconstructFormattingElements();            org.jsoup.nodes.Element a = tb.insert(startTag);            tb.pushActiveFormattingElements(a);        }else            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartEmptyFormatters)) {                tb.reconstructFormattingElements();                tb.insertEmpty(startTag);                tb.framesetOk(false);            }else                if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartPClosers)) {                    if (tb.inButtonScope("p")) {                        tb.processEndTag("p");                    }                    tb.insert(startTag);                }else                    if (name.equals("span")) {                        tb.reconstructFormattingElements();                        tb.insert(startTag);                    }else                        if (name.equals("li")) {                            tb.framesetOk(false);                            java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();                            for (int i = (stack.size()) - 1; i > 0; i--) {                                org.jsoup.nodes.Element el = stack.get(i);                                if (el.nodeName().equals("li")) {                                    tb.processEndTag("li");                                    break;                                }                                if ((tb.isSpecial(el)) && (!(org.jsoup.helper.StringUtil.inSorted(el.nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartLiBreakers))))                                    break;                            }                            if (tb.inButtonScope("p")) {                                tb.processEndTag("p");                            }                            tb.insert(startTag);                        }else                            if (name.equals("html")) {                                tb.error(this);                                org.jsoup.nodes.Element html = tb.getStack().get(0);                                for (org.jsoup.nodes.Attribute attribute : startTag.getAttributes()) {                                    if (!(html.hasAttr(attribute.getKey())))                                        html.attributes().put(attribute);                                }                            }else                                if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartToHead)) {                                    return tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead);                                }else                                    if (name.equals("body")) {                                        tb.error(this);                                        java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();                                        if (((stack.size()) == 1) || (((stack.size()) > 2) && (!(stack.get(1).nodeName().equals("body"))))) {                                            return false;                                        }else {                                            tb.framesetOk(false);                                            org.jsoup.nodes.Element body = stack.get(1);                                            for (org.jsoup.nodes.Attribute attribute : startTag.getAttributes()) {                                                if (!(body.hasAttr(attribute.getKey())))                                                    body.attributes().put(attribute);                                            }                                        }                                    }else                                        if (name.equals("frameset")) {                                            tb.error(this);                                            java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();                                            if (((stack.size()) == 1) || (((stack.size()) > 2) && (!(stack.get(1).nodeName().equals("body"))))) {                                                return false;                                            }else                                                if (!(tb.framesetOk())) {                                                    return false;                                                }else {                                                    org.jsoup.nodes.Element second = stack.get(1);                                                    if ((second.parent()) != null)                                                        second.remove();                                                    while ((stack.size()) > 1)                                                        stack.remove(((stack.size()) - 1));                                                    tb.insert(startTag);                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InFrameset);                                                }                                        }else                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.Headings)) {                                                if (tb.inButtonScope("p")) {                                                    tb.processEndTag("p");                                                }                                                if (org.jsoup.helper.StringUtil.inSorted(tb.currentElement().nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.Headings)) {                                                    tb.error(this);                                                    tb.pop();                                                }                                                tb.insert(startTag);                                            }else                                                if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartPreListing)) {                                                    if (tb.inButtonScope("p")) {                                                        tb.processEndTag("p");                                                    }                                                    tb.insert(startTag);                                                    tb.framesetOk(false);                                                }else                                                    if (name.equals("form")) {                                                        if ((tb.getFormElement()) != null) {                                                            tb.error(this);                                                            return false;                                                        }                                                        if (tb.inButtonScope("p")) {                                                            tb.processEndTag("p");                                                        }                                                        tb.insertForm(startTag, true);                                                    }else                                                        if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.DdDt)) {                                                            tb.framesetOk(false);                                                            java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();                                                            for (int i = (stack.size()) - 1; i > 0; i--) {                                                                org.jsoup.nodes.Element el = stack.get(i);                                                                if (org.jsoup.helper.StringUtil.inSorted(el.nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.DdDt)) {                                                                    tb.processEndTag(el.nodeName());                                                                    break;                                                                }                                                                if ((tb.isSpecial(el)) && (!(org.jsoup.helper.StringUtil.inSorted(el.nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartLiBreakers))))                                                                    break;                                                            }                                                            if (tb.inButtonScope("p")) {                                                                tb.processEndTag("p");                                                            }                                                            tb.insert(startTag);                                                        }else                                                            if (name.equals("plaintext")) {                                                                if (tb.inButtonScope("p")) {                                                                    tb.processEndTag("p");                                                                }                                                                tb.insert(startTag);                                                                tb.tokeniser.transition(org.jsoup.parser.TokeniserState.PLAINTEXT);                                                            }else                                                                if (name.equals("button")) {                                                                    if (tb.inButtonScope("button")) {                                                                        tb.error(this);                                                                        tb.processEndTag("button");                                                                        tb.process(startTag);                                                                    }else {                                                                        tb.reconstructFormattingElements();                                                                        tb.insert(startTag);                                                                        tb.framesetOk(false);                                                                    }                                                                }else                                                                    if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.Formatters)) {                                                                        tb.reconstructFormattingElements();                                                                        org.jsoup.nodes.Element el = tb.insert(startTag);                                                                        tb.pushActiveFormattingElements(el);                                                                    }else                                                                        if (name.equals("nobr")) {                                                                            tb.reconstructFormattingElements();                                                                            if (tb.inScope("nobr")) {                                                                                tb.error(this);                                                                                tb.processEndTag("nobr");                                                                                tb.reconstructFormattingElements();                                                                            }                                                                            org.jsoup.nodes.Element el = tb.insert(startTag);                                                                            tb.pushActiveFormattingElements(el);                                                                        }else                                                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartApplets)) {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                                tb.insertMarkerToFormattingElements();                                                                                tb.framesetOk(false);                                                                            }else                                                                                if (name.equals("table")) {                                                                                    if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                                                                                        tb.processEndTag("p");                                                                                    }                                                                                    tb.insert(startTag);                                                                                    tb.framesetOk(false);                                                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                                                                                }else                                                                                    if (name.equals("input")) {                                                                                        tb.reconstructFormattingElements();                                                                                        org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                                                                                        if (!(el.attr("type").equalsIgnoreCase("hidden")))                                                                                            tb.framesetOk(false);                                                                                    }else                                                                                        if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartMedia)) {                                                                                            tb.insertEmpty(startTag);                                                                                        }else                                                                                            if (name.equals("hr")) {                                                                                                if (tb.inButtonScope("p")) {                                                                                                    tb.processEndTag("p");                                                                                                }                                                                                                tb.insertEmpty(startTag);                                                                                                tb.framesetOk(false);                                                                                            }else                                                                                                if (name.equals("image")) {                                                                                                    if ((tb.getFromStack("svg")) == null)                                                                                                        return tb.process(startTag.name("img"));                                                                                                    else                                                                                                        tb.insert(startTag);                                                                                                }else                                                                                                    if (name.equals("isindex")) {                                                                                                        tb.error(this);                                                                                                        if ((tb.getFormElement()) != null)                                                                                                            return false;                                                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                                        tb.processStartTag("form");                                                                                                        if (startTag.attributes.hasKey("action")) {                                                                                                            org.jsoup.nodes.Element form = tb.getFormElement();                                                                                                            form.attr("action", startTag.attributes.get("action"));                                                                                                        }                                                                                                        tb.processStartTag("hr");                                                                                                        tb.processStartTag("label");                                                                                                        java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                                                                                        tb.process(new org.jsoup.parser.Token.Character().data(prompt));                                                                                                        org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                                                                                        for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                                                                                            if (!(org.jsoup.helper.StringUtil.inSorted(attr.getKey(), org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartInputAttribs)))                                                                                                                inputAttribs.put(attr);                                                                                                        }                                                                                                        inputAttribs.put("name", "isindex");                                                                                                        tb.processStartTag("input", inputAttribs);                                                                                                        tb.processEndTag("label");                                                                                                        tb.processStartTag("hr");                                                                                                        tb.processEndTag("form");                                                                                                    }else                                                                                                        if (name.equals("textarea")) {                                                                                                            tb.insert(startTag);                                                                                                            tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                                                                                            tb.markInsertionMode();                                                                                                            tb.framesetOk(false);                                                                                                            tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                                                                                        }else                                                                                                            if (name.equals("xmp")) {                                                                                                                if (tb.inButtonScope("p")) {                                                                                                                    tb.processEndTag("p");                                                                                                                }                                                                                                                tb.reconstructFormattingElements();                                                                                                                tb.framesetOk(false);                                                                                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                                                                            }else                                                                                                                if (name.equals("iframe")) {                                                                                                                    tb.framesetOk(false);                                                                                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                                                                                }else                                                                                                                    if (name.equals("noembed")) {                                                                                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                                                                                    }else                                                                                                                        if (name.equals("select")) {                                                                                                                            tb.reconstructFormattingElements();                                                                                                                            tb.insert(startTag);                                                                                                                            tb.framesetOk(false);                                                                                                                            org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                                                                                            if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                                                                                            else                                                                                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                                                                                        }else                                                                                                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartOptions)) {                                                                                                                                if (tb.currentElement().nodeName().equals("option"))                                                                                                                                    tb.processEndTag("option");                                                                                                                                tb.reconstructFormattingElements();                                                                                                                                tb.insert(startTag);                                                                                                                            }else                                                                                                                                if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartRuby)) {                                                                                                                                    if (tb.inScope("ruby")) {                                                                                                                                        tb.generateImpliedEndTags();                                                                                                                                        if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                                                                                            tb.error(this);                                                                                                                                            tb.popStackToBefore("ruby");                                                                                                                                        }                                                                                                                                        tb.insert(startTag);                                                                                                                                    }                                                                                                                                }else                                                                                                                                    if (name.equals("math")) {                                                                                                                                        tb.reconstructFormattingElements();                                                                                                                                        tb.insert(startTag);                                                                                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                                                                    }else                                                                                                                                        if (name.equals("svg")) {                                                                                                                                            tb.reconstructFormattingElements();                                                                                                                                            tb.insert(startTag);                                                                                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                                                                        }else                                                                                                                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartDrop)) {                                                                                                                                                tb.error(this);                                                                                                                                                return false;                                                                                                                                            }else {                                                                                                                                                tb.reconstructFormattingElements();                                                                                                                                                tb.insert(startTag);                                                                                                                                            }        break;    case EndTag :        org.jsoup.parser.Token.EndTag endTag = t.asEndTag();        name = endTag.normalName();        if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyEndAdoptionFormatters)) {            for (int i = 0; i < 8; i++) {                org.jsoup.nodes.Element formatEl = tb.getActiveFormattingElement(name);                if (formatEl == null)                    return anyOtherEndTag(t, tb);                else                    if (!(tb.onStack(formatEl))) {                        tb.error(this);                        tb.removeFromActiveFormattingElements(formatEl);                        return true;                    }else                        if (!(tb.inScope(formatEl.nodeName()))) {                            tb.error(this);                            return false;                        }else                            if ((tb.currentElement()) != formatEl)                                tb.error(this);                org.jsoup.nodes.Element furthestBlock = null;                org.jsoup.nodes.Element commonAncestor = null;                boolean seenFormattingElement = false;                java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();                final int stackSize = stack.size();                for (int si = 0; (si < stackSize) && (si < 64); si++) {                    org.jsoup.nodes.Element el = stack.get(si);                    if (el == formatEl) {                        commonAncestor = stack.get((si - 1));                        seenFormattingElement = true;                    }else                        if (seenFormattingElement && (tb.isSpecial(el))) {                            furthestBlock = el;                            break;                        }                }                if (furthestBlock == null) {                    tb.popStackToClose(formatEl.nodeName());                    tb.removeFromActiveFormattingElements(formatEl);                    return true;                }                org.jsoup.nodes.Element node = furthestBlock;                org.jsoup.nodes.Element lastNode = furthestBlock;                for (int j = 0; j < 3; j++) {                    if (tb.onStack(node))                        node = tb.aboveOnStack(node);                    if (!(tb.isInActiveFormattingElements(node))) {                        tb.removeFromStack(node);                        continue;                    }else                        if (node == formatEl)                            break;                    org.jsoup.nodes.Element replacement = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri());                    tb.replaceActiveFormattingElement(node, replacement);                    tb.replaceOnStack(node, replacement);                    node = replacement;                    if (lastNode == furthestBlock) {                    }                    if ((lastNode.parent()) != null)                        lastNode.remove();                    node.appendChild(lastNode);                    lastNode = node;                }                if (org.jsoup.helper.StringUtil.inSorted(commonAncestor.nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyEndTableFosters)) {                    if ((lastNode.parent()) != null)                        lastNode.remove();                    tb.insertInFosterParent(lastNode);                }else {                    if ((lastNode.parent()) != null)                        lastNode.remove();                    commonAncestor.appendChild(lastNode);                }                org.jsoup.nodes.Element adopter = new org.jsoup.nodes.Element(formatEl.tag(), tb.getBaseUri());                adopter.attributes().addAll(formatEl.attributes());                org.jsoup.nodes.Node[] childNodes = furthestBlock.childNodes().toArray(new org.jsoup.nodes.Node[furthestBlock.childNodeSize()]);                for (org.jsoup.nodes.Node childNode : childNodes) {                    adopter.appendChild(childNode);                }                furthestBlock.appendChild(adopter);                tb.removeFromActiveFormattingElements(formatEl);                tb.removeFromStack(formatEl);                tb.insertOnStackAfter(furthestBlock, adopter);            }        }else            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyEndClosers)) {                if (!(tb.inScope(name))) {                    tb.error(this);                    return false;                }else {                    tb.generateImpliedEndTags();                    if (!(tb.currentElement().nodeName().equals(name)))                        tb.error(this);                    tb.popStackToClose(name);                }            }else                if (name.equals("span")) {                    return anyOtherEndTag(t, tb);                }else                    if (name.equals("li")) {                        if (!(tb.inListItemScope(name))) {                            tb.error(this);                            return false;                        }else {                            tb.generateImpliedEndTags(name);                            if (!(tb.currentElement().nodeName().equals(name)))                                tb.error(this);                            tb.popStackToClose(name);                        }                    }else                        if (name.equals("body")) {                            if (!(tb.inScope("body"))) {                                tb.error(this);                                return false;                            }else {                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.AfterBody);                            }                        }else                            if (name.equals("html")) {                                boolean notIgnored = tb.processEndTag("body");                                if (notIgnored)                                    return tb.process(endTag);                            }else                                if (name.equals("form")) {                                    org.jsoup.nodes.Element currentForm = tb.getFormElement();                                    tb.setFormElement(null);                                    if ((currentForm == null) || (!(tb.inScope(name)))) {                                        tb.error(this);                                        return false;                                    }else {                                        tb.generateImpliedEndTags();                                        if (!(tb.currentElement().nodeName().equals(name)))                                            tb.error(this);                                        tb.removeFromStack(currentForm);                                    }                                }else                                    if (name.equals("p")) {                                        if (!(tb.inButtonScope(name))) {                                            tb.error(this);                                            tb.processStartTag(name);                                            return tb.process(endTag);                                        }else {                                            tb.generateImpliedEndTags(name);                                            if (!(tb.currentElement().nodeName().equals(name)))                                                tb.error(this);                                            tb.popStackToClose(name);                                        }                                    }else                                        if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.DdDt)) {                                            if (!(tb.inScope(name))) {                                                tb.error(this);                                                return false;                                            }else {                                                tb.generateImpliedEndTags(name);                                                if (!(tb.currentElement().nodeName().equals(name)))                                                    tb.error(this);                                                tb.popStackToClose(name);                                            }                                        }else                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.Headings)) {                                                if (!(tb.inScope(org.jsoup.parser.HtmlTreeBuilderState.Constants.Headings))) {                                                    tb.error(this);                                                    return false;                                                }else {                                                    tb.generateImpliedEndTags(name);                                                    if (!(tb.currentElement().nodeName().equals(name)))                                                        tb.error(this);                                                    tb.popStackToClose(org.jsoup.parser.HtmlTreeBuilderState.Constants.Headings);                                                }                                            }else                                                if (name.equals("sarcasm")) {                                                    return anyOtherEndTag(t, tb);                                                }else                                                    if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartApplets)) {                                                        if (!(tb.inScope("name"))) {                                                            if (!(tb.inScope(name))) {                                                                tb.error(this);                                                                return false;                                                            }                                                            tb.generateImpliedEndTags();                                                            if (!(tb.currentElement().nodeName().equals(name)))                                                                tb.error(this);                                                            tb.popStackToClose(name);                                                            tb.clearFormattingElementsToLastMarker();                                                        }                                                    }else                                                        if (name.equals("br")) {                                                            tb.error(this);                                                            tb.processStartTag("br");                                                            return false;                                                        }else {                                                            return anyOtherEndTag(t, tb);                                                        }        break;    case EOF :        break;}::::INSERT::::STATEMENT::::if (node == formatEl)    break;	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"img"	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"frame"	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::"href"	false
org.jsoup.parser.HtmlTreeBuilderState::::275::::11301::::11304::::name::::a	false
org.jsoup.parser.HtmlTreeBuilderState::::247::::10127::::38412::::switch (t.type) {    case Character :        {            org.jsoup.parser.Token.Character c = t.asCharacter();            if (c.getData().equals(org.jsoup.parser.HtmlTreeBuilderState.nullString)) {                tb.error(this);                return false;            }else                if ((tb.framesetOk()) && (org.jsoup.parser.HtmlTreeBuilderState.isWhitespace(c))) {                    tb.reconstructFormattingElements();                    tb.insert(c);                }else {                    tb.reconstructFormattingElements();                    tb.insert(c);                    tb.framesetOk(false);                }            break;        }    case Comment :        {            tb.insert(t.asComment());            break;        }    case Doctype :        {            tb.error(this);            return false;        }    case StartTag :        org.jsoup.parser.Token.StartTag startTag = t.asStartTag();        java.lang.String name = startTag.normalName();        if (name.equals("a")) {            if ((tb.getActiveFormattingElement("a")) != null) {                tb.error(this);                tb.processEndTag("a");                org.jsoup.nodes.Element remainingA = tb.getFromStack("a");                if (remainingA != null) {                    tb.removeFromActiveFormattingElements(remainingA);                    tb.removeFromStack(remainingA);                }            }            tb.reconstructFormattingElements();            org.jsoup.nodes.Element a = tb.insert(startTag);            tb.pushActiveFormattingElements(a);        }else            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartEmptyFormatters)) {                tb.reconstructFormattingElements();                tb.insertEmpty(startTag);                tb.framesetOk(false);            }else                if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartPClosers)) {                    if (tb.inButtonScope("p")) {                        tb.processEndTag("p");                    }                    tb.insert(startTag);                }else                    if (name.equals("span")) {                        tb.reconstructFormattingElements();                        tb.insert(startTag);                    }else                        if (name.equals("li")) {                            tb.framesetOk(false);                            java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();                            for (int i = (stack.size()) - 1; i > 0; i--) {                                org.jsoup.nodes.Element el = stack.get(i);                                if (el.nodeName().equals("li")) {                                    tb.processEndTag("li");                                    break;                                }                                if ((tb.isSpecial(el)) && (!(org.jsoup.helper.StringUtil.inSorted(el.nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartLiBreakers))))                                    break;                            }                            if (tb.inButtonScope("p")) {                                tb.processEndTag("p");                            }                            tb.insert(startTag);                        }else                            if (name.equals("html")) {                                tb.error(this);                                org.jsoup.nodes.Element html = tb.getStack().get(0);                                for (org.jsoup.nodes.Attribute attribute : startTag.getAttributes()) {                                    if (!(html.hasAttr(attribute.getKey())))                                        html.attributes().put(attribute);                                }                            }else                                if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartToHead)) {                                    return tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead);                                }else                                    if (name.equals("body")) {                                        tb.error(this);                                        java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();                                        if (((stack.size()) == 1) || (((stack.size()) > 2) && (!(stack.get(1).nodeName().equals("body"))))) {                                            return false;                                        }else {                                            tb.framesetOk(false);                                            org.jsoup.nodes.Element body = stack.get(1);                                            for (org.jsoup.nodes.Attribute attribute : startTag.getAttributes()) {                                                if (!(body.hasAttr(attribute.getKey())))                                                    body.attributes().put(attribute);                                            }                                        }                                    }else                                        if (name.equals("frameset")) {                                            tb.error(this);                                            java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();                                            if (((stack.size()) == 1) || (((stack.size()) > 2) && (!(stack.get(1).nodeName().equals("body"))))) {                                                return false;                                            }else                                                if (!(tb.framesetOk())) {                                                    return false;                                                }else {                                                    org.jsoup.nodes.Element second = stack.get(1);                                                    if ((second.parent()) != null)                                                        second.remove();                                                    while ((stack.size()) > 1)                                                        stack.remove(((stack.size()) - 1));                                                    tb.insert(startTag);                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InFrameset);                                                }                                        }else                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.Headings)) {                                                if (tb.inButtonScope("p")) {                                                    tb.processEndTag("p");                                                }                                                if (org.jsoup.helper.StringUtil.inSorted(tb.currentElement().nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.Headings)) {                                                    tb.error(this);                                                    tb.pop();                                                }                                                tb.insert(startTag);                                            }else                                                if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartPreListing)) {                                                    if (tb.inButtonScope("p")) {                                                        tb.processEndTag("p");                                                    }                                                    tb.insert(startTag);                                                    tb.framesetOk(false);                                                }else                                                    if (name.equals("form")) {                                                        if ((tb.getFormElement()) != null) {                                                            tb.error(this);                                                            return false;                                                        }                                                        if (tb.inButtonScope("p")) {                                                            tb.processEndTag("p");                                                        }                                                        tb.insertForm(startTag, true);                                                    }else                                                        if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.DdDt)) {                                                            tb.framesetOk(false);                                                            java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();                                                            for (int i = (stack.size()) - 1; i > 0; i--) {                                                                org.jsoup.nodes.Element el = stack.get(i);                                                                if (org.jsoup.helper.StringUtil.inSorted(el.nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.DdDt)) {                                                                    tb.processEndTag(el.nodeName());                                                                    break;                                                                }                                                                if ((tb.isSpecial(el)) && (!(org.jsoup.helper.StringUtil.inSorted(el.nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartLiBreakers))))                                                                    break;                                                            }                                                            if (tb.inButtonScope("p")) {                                                                tb.processEndTag("p");                                                            }                                                            tb.insert(startTag);                                                        }else                                                            if (name.equals("plaintext")) {                                                                if (tb.inButtonScope("p")) {                                                                    tb.processEndTag("p");                                                                }                                                                tb.insert(startTag);                                                                tb.tokeniser.transition(org.jsoup.parser.TokeniserState.PLAINTEXT);                                                            }else                                                                if (name.equals("button")) {                                                                    if (tb.inButtonScope("button")) {                                                                        tb.error(this);                                                                        tb.processEndTag("button");                                                                        tb.process(startTag);                                                                    }else {                                                                        tb.reconstructFormattingElements();                                                                        tb.insert(startTag);                                                                        tb.framesetOk(false);                                                                    }                                                                }else                                                                    if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.Formatters)) {                                                                        tb.reconstructFormattingElements();                                                                        org.jsoup.nodes.Element el = tb.insert(startTag);                                                                        tb.pushActiveFormattingElements(el);                                                                    }else                                                                        if (name.equals("nobr")) {                                                                            tb.reconstructFormattingElements();                                                                            if (tb.inScope("nobr")) {                                                                                tb.error(this);                                                                                tb.processEndTag("nobr");                                                                                tb.reconstructFormattingElements();                                                                            }                                                                            org.jsoup.nodes.Element el = tb.insert(startTag);                                                                            tb.pushActiveFormattingElements(el);                                                                        }else                                                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartApplets)) {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                                tb.insertMarkerToFormattingElements();                                                                                tb.framesetOk(false);                                                                            }else                                                                                if (name.equals("table")) {                                                                                    if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                                                                                        tb.processEndTag("p");                                                                                    }                                                                                    tb.insert(startTag);                                                                                    tb.framesetOk(false);                                                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                                                                                }else                                                                                    if (name.equals("input")) {                                                                                        tb.reconstructFormattingElements();                                                                                        org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                                                                                        if (!(el.attr("type").equalsIgnoreCase("hidden")))                                                                                            tb.framesetOk(false);                                                                                    }else                                                                                        if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartMedia)) {                                                                                            tb.insertEmpty(startTag);                                                                                        }else                                                                                            if (name.equals("hr")) {                                                                                                if (tb.inButtonScope("p")) {                                                                                                    tb.processEndTag("p");                                                                                                }                                                                                                tb.insertEmpty(startTag);                                                                                                tb.framesetOk(false);                                                                                            }else                                                                                                if (name.equals("image")) {                                                                                                    if ((tb.getFromStack("svg")) == null)                                                                                                        return tb.process(startTag.name("img"));                                                                                                    else                                                                                                        tb.insert(startTag);                                                                                                }else                                                                                                    if (name.equals("isindex")) {                                                                                                        tb.error(this);                                                                                                        if ((tb.getFormElement()) != null)                                                                                                            return false;                                                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                                        tb.processStartTag("form");                                                                                                        if (startTag.attributes.hasKey("action")) {                                                                                                            org.jsoup.nodes.Element form = tb.getFormElement();                                                                                                            form.attr("action", startTag.attributes.get("action"));                                                                                                        }                                                                                                        tb.processStartTag("hr");                                                                                                        tb.processStartTag("label");                                                                                                        java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                                                                                        tb.process(new org.jsoup.parser.Token.Character().data(prompt));                                                                                                        org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                                                                                        for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                                                                                            if (!(org.jsoup.helper.StringUtil.inSorted(attr.getKey(), org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartInputAttribs)))                                                                                                                inputAttribs.put(attr);                                                                                                        }                                                                                                        inputAttribs.put("name", "isindex");                                                                                                        tb.processStartTag("input", inputAttribs);                                                                                                        tb.processEndTag("label");                                                                                                        tb.processStartTag("hr");                                                                                                        tb.processEndTag("form");                                                                                                    }else                                                                                                        if (name.equals("textarea")) {                                                                                                            tb.insert(startTag);                                                                                                            tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                                                                                            tb.markInsertionMode();                                                                                                            tb.framesetOk(false);                                                                                                            tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                                                                                        }else                                                                                                            if (name.equals("xmp")) {                                                                                                                if (tb.inButtonScope("p")) {                                                                                                                    tb.processEndTag("p");                                                                                                                }                                                                                                                tb.reconstructFormattingElements();                                                                                                                tb.framesetOk(false);                                                                                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                                                                            }else                                                                                                                if (name.equals("iframe")) {                                                                                                                    tb.framesetOk(false);                                                                                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                                                                                }else                                                                                                                    if (name.equals("noembed")) {                                                                                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                                                                                    }else                                                                                                                        if (name.equals("select")) {                                                                                                                            tb.reconstructFormattingElements();                                                                                                                            tb.insert(startTag);                                                                                                                            tb.framesetOk(false);                                                                                                                            org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                                                                                            if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                                                                                            else                                                                                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                                                                                        }else                                                                                                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartOptions)) {                                                                                                                                if (tb.currentElement().nodeName().equals("option"))                                                                                                                                    tb.processEndTag("option");                                                                                                                                tb.reconstructFormattingElements();                                                                                                                                tb.insert(startTag);                                                                                                                            }else                                                                                                                                if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartRuby)) {                                                                                                                                    if (tb.inScope("ruby")) {                                                                                                                                        tb.generateImpliedEndTags();                                                                                                                                        if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                                                                                            tb.error(this);                                                                                                                                            tb.popStackToBefore("ruby");                                                                                                                                        }                                                                                                                                        tb.insert(startTag);                                                                                                                                    }                                                                                                                                }else                                                                                                                                    if (name.equals("math")) {                                                                                                                                        tb.reconstructFormattingElements();                                                                                                                                        tb.insert(startTag);                                                                                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                                                                    }else                                                                                                                                        if (name.equals("svg")) {                                                                                                                                            tb.reconstructFormattingElements();                                                                                                                                            tb.insert(startTag);                                                                                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                                                                        }else                                                                                                                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartDrop)) {                                                                                                                                                tb.error(this);                                                                                                                                                return false;                                                                                                                                            }else {                                                                                                                                                tb.reconstructFormattingElements();                                                                                                                                                tb.insert(startTag);                                                                                                                                            }        break;    case EndTag :        org.jsoup.parser.Token.EndTag endTag = t.asEndTag();        name = endTag.normalName();        if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyEndAdoptionFormatters)) {            for (int i = 0; i < 8; i++) {                org.jsoup.nodes.Element formatEl = tb.getActiveFormattingElement(name);                if (formatEl == null)                    return anyOtherEndTag(t, tb);                else                    if (!(tb.onStack(formatEl))) {                        tb.error(this);                        tb.removeFromActiveFormattingElements(formatEl);                        return true;                    }else                        if (!(tb.inScope(formatEl.nodeName()))) {                            tb.error(this);                            return false;                        }else                            if ((tb.currentElement()) != formatEl)                                tb.error(this);                org.jsoup.nodes.Element furthestBlock = null;                org.jsoup.nodes.Element commonAncestor = null;                boolean seenFormattingElement = false;                java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();                final int stackSize = stack.size();                for (int si = 0; (si < stackSize) && (si < 64); si++) {                    org.jsoup.nodes.Element el = stack.get(si);                    if (el == formatEl) {                        commonAncestor = stack.get((si - 1));                        seenFormattingElement = true;                    }else                        if (seenFormattingElement && (tb.isSpecial(el))) {                            furthestBlock = el;                            break;                        }                }                if (furthestBlock == null) {                    tb.popStackToClose(formatEl.nodeName());                    tb.removeFromActiveFormattingElements(formatEl);                    return true;                }                org.jsoup.nodes.Element node = furthestBlock;                org.jsoup.nodes.Element lastNode = furthestBlock;                for (int j = 0; j < 3; j++) {                    if (tb.onStack(node))                        node = tb.aboveOnStack(node);                    if (!(tb.isInActiveFormattingElements(node))) {                        tb.removeFromStack(node);                        continue;                    }else                        if (node == formatEl)                            break;                    org.jsoup.nodes.Element replacement = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri());                    tb.replaceActiveFormattingElement(node, replacement);                    tb.replaceOnStack(node, replacement);                    node = replacement;                    if (lastNode == furthestBlock) {                    }                    if ((lastNode.parent()) != null)                        lastNode.remove();                    node.appendChild(lastNode);                    lastNode = node;                }                if (org.jsoup.helper.StringUtil.inSorted(commonAncestor.nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyEndTableFosters)) {                    if ((lastNode.parent()) != null)                        lastNode.remove();                    tb.insertInFosterParent(lastNode);                }else {                    if ((lastNode.parent()) != null)                        lastNode.remove();                    commonAncestor.appendChild(lastNode);                }                org.jsoup.nodes.Element adopter = new org.jsoup.nodes.Element(formatEl.tag(), tb.getBaseUri());                adopter.attributes().addAll(formatEl.attributes());                org.jsoup.nodes.Node[] childNodes = furthestBlock.childNodes().toArray(new org.jsoup.nodes.Node[furthestBlock.childNodeSize()]);                for (org.jsoup.nodes.Node childNode : childNodes) {                    adopter.appendChild(childNode);                }                furthestBlock.appendChild(adopter);                tb.removeFromActiveFormattingElements(formatEl);                tb.removeFromStack(formatEl);                tb.insertOnStackAfter(furthestBlock, adopter);            }        }else            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyEndClosers)) {                if (!(tb.inScope(name))) {                    tb.error(this);                    return false;                }else {                    tb.generateImpliedEndTags();                    if (!(tb.currentElement().nodeName().equals(name)))                        tb.error(this);                    tb.popStackToClose(name);                }            }else                if (name.equals("span")) {                    return anyOtherEndTag(t, tb);                }else                    if (name.equals("li")) {                        if (!(tb.inListItemScope(name))) {                            tb.error(this);                            return false;                        }else {                            tb.generateImpliedEndTags(name);                            if (!(tb.currentElement().nodeName().equals(name)))                                tb.error(this);                            tb.popStackToClose(name);                        }                    }else                        if (name.equals("body")) {                            if (!(tb.inScope("body"))) {                                tb.error(this);                                return false;                            }else {                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.AfterBody);                            }                        }else                            if (name.equals("html")) {                                boolean notIgnored = tb.processEndTag("body");                                if (notIgnored)                                    return tb.process(endTag);                            }else                                if (name.equals("form")) {                                    org.jsoup.nodes.Element currentForm = tb.getFormElement();                                    tb.setFormElement(null);                                    if ((currentForm == null) || (!(tb.inScope(name)))) {                                        tb.error(this);                                        return false;                                    }else {                                        tb.generateImpliedEndTags();                                        if (!(tb.currentElement().nodeName().equals(name)))                                            tb.error(this);                                        tb.removeFromStack(currentForm);                                    }                                }else                                    if (name.equals("p")) {                                        if (!(tb.inButtonScope(name))) {                                            tb.error(this);                                            tb.processStartTag(name);                                            return tb.process(endTag);                                        }else {                                            tb.generateImpliedEndTags(name);                                            if (!(tb.currentElement().nodeName().equals(name)))                                                tb.error(this);                                            tb.popStackToClose(name);                                        }                                    }else                                        if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.DdDt)) {                                            if (!(tb.inScope(name))) {                                                tb.error(this);                                                return false;                                            }else {                                                tb.generateImpliedEndTags(name);                                                if (!(tb.currentElement().nodeName().equals(name)))                                                    tb.error(this);                                                tb.popStackToClose(name);                                            }                                        }else                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.Headings)) {                                                if (!(tb.inScope(org.jsoup.parser.HtmlTreeBuilderState.Constants.Headings))) {                                                    tb.error(this);                                                    return false;                                                }else {                                                    tb.generateImpliedEndTags(name);                                                    if (!(tb.currentElement().nodeName().equals(name)))                                                        tb.error(this);                                                    tb.popStackToClose(org.jsoup.parser.HtmlTreeBuilderState.Constants.Headings);                                                }                                            }else                                                if (name.equals("sarcasm")) {                                                    return anyOtherEndTag(t, tb);                                                }else                                                    if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartApplets)) {                                                        if (!(tb.inScope("name"))) {                                                            if (!(tb.inScope(name))) {                                                                tb.error(this);                                                                return false;                                                            }                                                            tb.generateImpliedEndTags();                                                            if (!(tb.currentElement().nodeName().equals(name)))                                                                tb.error(this);                                                            tb.popStackToClose(name);                                                            tb.clearFormattingElementsToLastMarker();                                                        }                                                    }else                                                        if (name.equals("br")) {                                                            tb.error(this);                                                            tb.processStartTag("br");                                                            return false;                                                        }else {                                                            return anyOtherEndTag(t, tb);                                                        }        break;    case EOF :        break;}::::INSERT::::STATEMENT::::if (notIgnored)    return tb.process(endTag);	false

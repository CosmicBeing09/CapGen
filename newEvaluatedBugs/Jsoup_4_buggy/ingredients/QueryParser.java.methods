Matcher		java.util.regex.Matcher	[]
Matcher		java.util.regex.Matcher	[java.util.regex.Pattern, java.lang.CharSequence]
Matcher	java.util.regex.Pattern	pattern	[]
Matcher	java.util.regex.MatchResult	toMatchResult	[]
Matcher	java.util.regex.Matcher	usePattern	[java.util.regex.Pattern]
Matcher	java.util.regex.Matcher	reset	[]
Matcher	java.util.regex.Matcher	reset	[java.lang.CharSequence]
Matcher	int	start	[]
Matcher	int	start	[int]
Matcher	int	start	[java.lang.String]
Matcher	int	end	[]
Matcher	int	end	[int]
Matcher	int	end	[java.lang.String]
Matcher	java.lang.String	group	[]
Matcher	java.lang.String	group	[int]
Matcher	java.lang.String	group	[java.lang.String]
Matcher	int	groupCount	[]
Matcher	boolean	matches	[]
Matcher	boolean	find	[]
Matcher	boolean	find	[int]
Matcher	boolean	lookingAt	[]
Matcher	java.lang.String	quoteReplacement	[java.lang.String]
Matcher	java.util.regex.Matcher	appendReplacement	[java.lang.StringBuffer, java.lang.String]
Matcher	java.lang.StringBuffer	appendTail	[java.lang.StringBuffer]
Matcher	java.lang.String	replaceAll	[java.lang.String]
Matcher	java.lang.String	replaceFirst	[java.lang.String]
Matcher	java.util.regex.Matcher	region	[int, int]
Matcher	int	regionStart	[]
Matcher	int	regionEnd	[]
Matcher	boolean	hasTransparentBounds	[]
Matcher	java.util.regex.Matcher	useTransparentBounds	[boolean]
Matcher	boolean	hasAnchoringBounds	[]
Matcher	java.util.regex.Matcher	useAnchoringBounds	[boolean]
Matcher	java.lang.String	toString	[]
Matcher	boolean	hitEnd	[]
Matcher	boolean	requireEnd	[]
Matcher	boolean	search	[int]
Matcher	boolean	match	[int, int]
Matcher	int	getTextLength	[]
Matcher	java.lang.CharSequence	getSubSequence	[int, int]
Matcher	char	charAt	[int]
Matcher	int	getMatchedGroupIndex	[java.lang.String]
TreeInfo		java.util.regex.Pattern$TreeInfo	[]
TreeInfo	void	reset	[]
BitClass		java.util.regex.Pattern$BitClass	[]
BitClass		java.util.regex.Pattern$BitClass	[boolean[]]
BitClass	java.util.regex.Pattern.BitClass	add	[int, int]
BitClass	boolean	isSatisfiedBy	[int]
Node		java.util.regex.Pattern$Node	[]
Node	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
Node	boolean	study	[java.util.regex.Pattern$TreeInfo]
LastNode		java.util.regex.Pattern$LastNode	[]
LastNode	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
Start		java.util.regex.Pattern$Start	[java.util.regex.Pattern$Node]
Start	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
Start	boolean	study	[java.util.regex.Pattern$TreeInfo]
StartS		java.util.regex.Pattern$StartS	[java.util.regex.Pattern$Node]
StartS	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
Begin		java.util.regex.Pattern$Begin	[]
Begin	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
End		java.util.regex.Pattern$End	[]
End	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
Caret		java.util.regex.Pattern$Caret	[]
Caret	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
UnixCaret		java.util.regex.Pattern$UnixCaret	[]
UnixCaret	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
LastMatch		java.util.regex.Pattern$LastMatch	[]
LastMatch	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
Dollar		java.util.regex.Pattern$Dollar	[boolean]
Dollar	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
Dollar	boolean	study	[java.util.regex.Pattern$TreeInfo]
UnixDollar		java.util.regex.Pattern$UnixDollar	[boolean]
UnixDollar	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
UnixDollar	boolean	study	[java.util.regex.Pattern$TreeInfo]
LineEnding		java.util.regex.Pattern$LineEnding	[]
LineEnding	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
LineEnding	boolean	study	[java.util.regex.Pattern$TreeInfo]
CharProperty		java.util.regex.Pattern$CharProperty	[]
CharProperty	boolean	isSatisfiedBy	[int]
1		java.util.regex.Pattern$CharProperty$1	[]
1	boolean	isSatisfiedBy	[int]
CharProperty	java.util.regex.Pattern.CharProperty	complement	[]
CharProperty	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
CharProperty	boolean	study	[java.util.regex.Pattern$TreeInfo]
BmpCharProperty		java.util.regex.Pattern$BmpCharProperty	[]
BmpCharProperty	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
SingleS		java.util.regex.Pattern$SingleS	[int]
SingleS	boolean	isSatisfiedBy	[int]
Single		java.util.regex.Pattern$Single	[int]
Single	boolean	isSatisfiedBy	[int]
SingleI		java.util.regex.Pattern$SingleI	[int, int]
SingleI	boolean	isSatisfiedBy	[int]
SingleU		java.util.regex.Pattern$SingleU	[int]
SingleU	boolean	isSatisfiedBy	[int]
Block		java.util.regex.Pattern$Block	[java.lang.Character$UnicodeBlock]
Block	boolean	isSatisfiedBy	[int]
Script		java.util.regex.Pattern$Script	[java.lang.Character$UnicodeScript]
Script	boolean	isSatisfiedBy	[int]
Category		java.util.regex.Pattern$Category	[int]
Category	boolean	isSatisfiedBy	[int]
Utype		java.util.regex.Pattern$Utype	[java.util.regex.UnicodeProp]
Utype	boolean	isSatisfiedBy	[int]
Ctype		java.util.regex.Pattern$Ctype	[int]
Ctype	boolean	isSatisfiedBy	[int]
VertWS		java.util.regex.Pattern$VertWS	[]
VertWS	boolean	isSatisfiedBy	[int]
HorizWS		java.util.regex.Pattern$HorizWS	[]
HorizWS	boolean	isSatisfiedBy	[int]
SliceNode		java.util.regex.Pattern$SliceNode	[int[]]
SliceNode	boolean	study	[java.util.regex.Pattern$TreeInfo]
Slice		java.util.regex.Pattern$Slice	[int[]]
Slice	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
SliceI		java.util.regex.Pattern$SliceI	[int[]]
SliceI	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
SliceU		java.util.regex.Pattern$SliceU	[int[]]
SliceU	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
SliceS		java.util.regex.Pattern$SliceS	[int[]]
SliceS	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
SliceIS		java.util.regex.Pattern$SliceIS	[int[]]
SliceIS	int	toLower	[int]
SliceIS	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
SliceUS		java.util.regex.Pattern$SliceUS	[int[]]
SliceUS	int	toLower	[int]
All		java.util.regex.Pattern$All	[]
All	boolean	isSatisfiedBy	[int]
Dot		java.util.regex.Pattern$Dot	[]
Dot	boolean	isSatisfiedBy	[int]
UnixDot		java.util.regex.Pattern$UnixDot	[]
UnixDot	boolean	isSatisfiedBy	[int]
Ques		java.util.regex.Pattern$Ques	[java.util.regex.Pattern$Node, int]
Ques	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
Ques	boolean	study	[java.util.regex.Pattern$TreeInfo]
Curly		java.util.regex.Pattern$Curly	[java.util.regex.Pattern$Node, int, int, int]
Curly	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
Curly	boolean	match0	[java.util.regex.Matcher, int, int, java.lang.CharSequence]
Curly	boolean	match1	[java.util.regex.Matcher, int, int, java.lang.CharSequence]
Curly	boolean	match2	[java.util.regex.Matcher, int, int, java.lang.CharSequence]
Curly	boolean	study	[java.util.regex.Pattern$TreeInfo]
GroupCurly		java.util.regex.Pattern$GroupCurly	[java.util.regex.Pattern$Node, int, int, int, int, int, boolean]
GroupCurly	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
GroupCurly	boolean	match0	[java.util.regex.Matcher, int, int, java.lang.CharSequence]
GroupCurly	boolean	match1	[java.util.regex.Matcher, int, int, java.lang.CharSequence]
GroupCurly	boolean	match2	[java.util.regex.Matcher, int, int, java.lang.CharSequence]
GroupCurly	boolean	study	[java.util.regex.Pattern$TreeInfo]
BranchConn		java.util.regex.Pattern$BranchConn	[]
BranchConn	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
BranchConn	boolean	study	[java.util.regex.Pattern$TreeInfo]
Branch		java.util.regex.Pattern$Branch	[java.util.regex.Pattern$Node, java.util.regex.Pattern$Node, java.util.regex.Pattern$Node]
Branch	void	add	[java.util.regex.Pattern$Node]
Branch	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
Branch	boolean	study	[java.util.regex.Pattern$TreeInfo]
GroupHead		java.util.regex.Pattern$GroupHead	[int]
GroupHead	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
GroupHead	boolean	matchRef	[java.util.regex.Matcher, int, java.lang.CharSequence]
GroupRef		java.util.regex.Pattern$GroupRef	[java.util.regex.Pattern$GroupHead]
GroupRef	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
GroupRef	boolean	study	[java.util.regex.Pattern$TreeInfo]
GroupTail		java.util.regex.Pattern$GroupTail	[int, int]
GroupTail	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
Prolog		java.util.regex.Pattern$Prolog	[java.util.regex.Pattern$Loop]
Prolog	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
Prolog	boolean	study	[java.util.regex.Pattern$TreeInfo]
Loop		java.util.regex.Pattern$Loop	[int, int]
Loop	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
Loop	boolean	matchInit	[java.util.regex.Matcher, int, java.lang.CharSequence]
Loop	boolean	study	[java.util.regex.Pattern$TreeInfo]
LazyLoop		java.util.regex.Pattern$LazyLoop	[int, int]
LazyLoop	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
LazyLoop	boolean	matchInit	[java.util.regex.Matcher, int, java.lang.CharSequence]
LazyLoop	boolean	study	[java.util.regex.Pattern$TreeInfo]
BackRef		java.util.regex.Pattern$BackRef	[int]
BackRef	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
BackRef	boolean	study	[java.util.regex.Pattern$TreeInfo]
CIBackRef		java.util.regex.Pattern$CIBackRef	[int, boolean]
CIBackRef	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
CIBackRef	boolean	study	[java.util.regex.Pattern$TreeInfo]
First		java.util.regex.Pattern$First	[java.util.regex.Pattern$Node]
First	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
First	boolean	study	[java.util.regex.Pattern$TreeInfo]
Conditional		java.util.regex.Pattern$Conditional	[java.util.regex.Pattern$Node, java.util.regex.Pattern$Node, java.util.regex.Pattern$Node]
Conditional	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
Conditional	boolean	study	[java.util.regex.Pattern$TreeInfo]
Pos		java.util.regex.Pattern$Pos	[java.util.regex.Pattern$Node]
Pos	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
Neg		java.util.regex.Pattern$Neg	[java.util.regex.Pattern$Node]
Neg	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
Behind		java.util.regex.Pattern$Behind	[java.util.regex.Pattern$Node, int, int]
Behind	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
BehindS		java.util.regex.Pattern$BehindS	[java.util.regex.Pattern$Node, int, int]
BehindS	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
NotBehind		java.util.regex.Pattern$NotBehind	[java.util.regex.Pattern$Node, int, int]
NotBehind	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
NotBehindS		java.util.regex.Pattern$NotBehindS	[java.util.regex.Pattern$Node, int, int]
NotBehindS	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
Bound		java.util.regex.Pattern$Bound	[int, boolean]
Bound	boolean	isWord	[int]
Bound	int	check	[java.util.regex.Matcher, int, java.lang.CharSequence]
Bound	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
BnM	java.util.regex.Pattern.Node	optimize	[java.util.regex.Pattern$Node]
BnM		java.util.regex.Pattern$BnM	[int[], int[], int[], java.util.regex.Pattern$Node]
BnM	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
BnM	boolean	study	[java.util.regex.Pattern$TreeInfo]
BnMS		java.util.regex.Pattern$BnMS	[int[], int[], int[], java.util.regex.Pattern$Node]
BnMS	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
CharPropertyFactory		java.util.regex.Pattern$CharPropertyNames$CharPropertyFactory	[]
CharPropertyFactory	java.util.regex.Pattern.CharProperty	make	[]
CloneableProperty		java.util.regex.Pattern$CharPropertyNames$CloneableProperty	[]
CloneableProperty	java.util.regex.Pattern.CharPropertyNames.CloneableProperty	clone	[]
1		java.util.regex.Pattern$CharPropertyNames$1	[]
1	java.util.regex.Pattern.CharProperty	make	[]
2		java.util.regex.Pattern$CharPropertyNames$2	[]
2	boolean	isSatisfiedBy	[int]
3		java.util.regex.Pattern$CharPropertyNames$3	[]
3	boolean	isSatisfiedBy	[int]
4		java.util.regex.Pattern$CharPropertyNames$4	[]
4	boolean	isSatisfiedBy	[int]
5		java.util.regex.Pattern$CharPropertyNames$5	[]
5	boolean	isSatisfiedBy	[int]
6		java.util.regex.Pattern$CharPropertyNames$6	[]
6	boolean	isSatisfiedBy	[int]
7		java.util.regex.Pattern$CharPropertyNames$7	[]
7	boolean	isSatisfiedBy	[int]
8		java.util.regex.Pattern$CharPropertyNames$8	[]
8	boolean	isSatisfiedBy	[int]
9		java.util.regex.Pattern$CharPropertyNames$9	[]
9	boolean	isSatisfiedBy	[int]
10		java.util.regex.Pattern$CharPropertyNames$10	[]
10	boolean	isSatisfiedBy	[int]
11		java.util.regex.Pattern$CharPropertyNames$11	[]
11	boolean	isSatisfiedBy	[int]
12		java.util.regex.Pattern$CharPropertyNames$12	[]
12	boolean	isSatisfiedBy	[int]
13		java.util.regex.Pattern$CharPropertyNames$13	[]
13	boolean	isSatisfiedBy	[int]
14		java.util.regex.Pattern$CharPropertyNames$14	[]
14	boolean	isSatisfiedBy	[int]
15		java.util.regex.Pattern$CharPropertyNames$15	[]
15	boolean	isSatisfiedBy	[int]
16		java.util.regex.Pattern$CharPropertyNames$16	[]
16	boolean	isSatisfiedBy	[int]
17		java.util.regex.Pattern$CharPropertyNames$17	[]
17	boolean	isSatisfiedBy	[int]
18		java.util.regex.Pattern$CharPropertyNames$18	[]
18	boolean	isSatisfiedBy	[int]
19		java.util.regex.Pattern$CharPropertyNames$19	[]
19	boolean	isSatisfiedBy	[int]
CharPropertyNames		java.util.regex.Pattern$CharPropertyNames	[]
CharPropertyNames	java.util.regex.Pattern.CharProperty	charPropertyFor	[java.lang.String]
20		java.util.regex.Pattern$CharPropertyNames$20	[]
20	java.util.regex.Pattern.CharProperty	make	[]
CharPropertyNames	void	defCategory	[java.lang.String, int]
21		java.util.regex.Pattern$CharPropertyNames$21	[]
21	java.util.regex.Pattern.CharProperty	make	[]
CharPropertyNames	void	defRange	[java.lang.String, int, int]
22		java.util.regex.Pattern$CharPropertyNames$22	[]
22	java.util.regex.Pattern.CharProperty	make	[]
CharPropertyNames	void	defCtype	[java.lang.String, int]
23		java.util.regex.Pattern$CharPropertyNames$23	[]
23	java.util.regex.Pattern.CharProperty	make	[]
CharPropertyNames	void	defClone	[java.lang.String, java.util.regex.Pattern$CharPropertyNames$CloneableProperty]
1		java.util.regex.Pattern$1	[]
1	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
Pattern	java.util.regex.Pattern	compile	[java.lang.String]
Pattern	java.util.regex.Pattern	compile	[java.lang.String, int]
Pattern	java.lang.String	pattern	[]
Pattern	java.lang.String	toString	[]
Pattern	java.util.regex.Matcher	matcher	[java.lang.CharSequence]
Pattern	int	flags	[]
Pattern	boolean	matches	[java.lang.String, java.lang.CharSequence]
Pattern	java.lang.String[]	split	[java.lang.CharSequence, int]
Pattern	java.lang.String[]	split	[java.lang.CharSequence]
Pattern	java.lang.String	quote	[java.lang.String]
Pattern	void	readObject	[java.io.ObjectInputStream]
Pattern		java.util.regex.Pattern	[java.lang.String, int]
Pattern	void	normalize	[]
Pattern	int	normalizeCharClass	[java.lang.StringBuilder, int]
Pattern	java.lang.String	produceEquivalentAlternation	[java.lang.String]
Pattern	java.lang.String[]	producePermutations	[java.lang.String]
Pattern	int	getClass	[int]
Pattern	java.lang.String	composeOneStep	[java.lang.String]
Pattern	void	RemoveQEQuoting	[]
Pattern	void	compile	[]
Pattern	java.util.Map<java.lang.String, java.lang.Integer>	namedGroups	[]
Pattern	void	printObjectTree	[java.util.regex.Pattern$Node]
Pattern	boolean	has	[int]
Pattern	void	accept	[int, java.lang.String]
Pattern	void	mark	[int]
Pattern	int	peek	[]
Pattern	int	read	[]
Pattern	int	readEscaped	[]
Pattern	int	next	[]
Pattern	int	nextEscaped	[]
Pattern	int	peekPastWhitespace	[int]
Pattern	int	parsePastWhitespace	[int]
Pattern	int	parsePastLine	[]
Pattern	int	peekPastLine	[]
Pattern	boolean	isLineSeparator	[int]
Pattern	int	skip	[]
Pattern	void	unread	[]
Pattern	java.util.regex.PatternSyntaxException	error	[java.lang.String]
Pattern	boolean	findSupplementary	[int, int]
Pattern	boolean	isSupplementary	[int]
Pattern	java.util.regex.Pattern.Node	expr	[java.util.regex.Pattern$Node]
Pattern	java.util.regex.Pattern.Node	sequence	[java.util.regex.Pattern$Node]
Pattern	java.util.regex.Pattern.Node	atom	[]
Pattern	void	append	[int, int]
Pattern	java.util.regex.Pattern.Node	ref	[int]
Pattern	int	escape	[boolean, boolean, boolean]
Pattern	java.util.regex.Pattern.CharProperty	clazz	[boolean]
Pattern	java.util.regex.Pattern.CharProperty	bitsOrSingle	[java.util.regex.Pattern$BitClass, int]
Pattern	java.util.regex.Pattern.CharProperty	range	[java.util.regex.Pattern$BitClass]
Pattern	java.util.regex.Pattern.CharProperty	family	[boolean, boolean]
Pattern	java.util.regex.Pattern.CharProperty	unicodeScriptPropertyFor	[java.lang.String]
Pattern	java.util.regex.Pattern.CharProperty	unicodeBlockPropertyFor	[java.lang.String]
Pattern	java.util.regex.Pattern.CharProperty	charPropertyNodeFor	[java.lang.String]
Pattern	java.lang.String	groupname	[int]
Pattern	java.util.regex.Pattern.Node	group0	[]
Pattern	java.util.regex.Pattern.Node	createGroup	[boolean]
Pattern	void	addFlag	[]
Pattern	void	subFlag	[]
Pattern	java.util.regex.Pattern.Node	closure	[java.util.regex.Pattern$Node]
Pattern	int	c	[]
Pattern	int	o	[]
Pattern	int	x	[]
Pattern	int	cursor	[]
Pattern	void	setcursor	[int]
Pattern	int	uxxxx	[]
Pattern	int	u	[]
Pattern	int	countChars	[java.lang.CharSequence, int, int]
Pattern	int	countCodePoints	[java.lang.CharSequence]
Pattern	java.util.regex.Pattern.CharProperty	newSingle	[int]
Pattern	java.util.regex.Pattern.Node	newSlice	[int[], int, boolean]
Pattern	boolean	inRange	[int, int, int]
2		java.util.regex.Pattern$2	[]
2	boolean	isSatisfiedBy	[int]
Pattern	java.util.regex.Pattern.CharProperty	rangeFor	[int, int]
3		java.util.regex.Pattern$3	[]
3	boolean	isSatisfiedBy	[int]
4		java.util.regex.Pattern$4	[]
4	boolean	isSatisfiedBy	[int]
Pattern	java.util.regex.Pattern.CharProperty	caseInsensitiveRangeFor	[int, int]
5		java.util.regex.Pattern$5	[]
5	boolean	isSatisfiedBy	[int]
Pattern	java.util.regex.Pattern.CharProperty	union	[java.util.regex.Pattern$CharProperty, java.util.regex.Pattern$CharProperty]
6		java.util.regex.Pattern$6	[]
6	boolean	isSatisfiedBy	[int]
Pattern	java.util.regex.Pattern.CharProperty	intersection	[java.util.regex.Pattern$CharProperty, java.util.regex.Pattern$CharProperty]
7		java.util.regex.Pattern$7	[]
7	boolean	isSatisfiedBy	[int]
Pattern	java.util.regex.Pattern.CharProperty	setDifference	[java.util.regex.Pattern$CharProperty, java.util.regex.Pattern$CharProperty]
Pattern	boolean	hasBaseCharacter	[java.util.regex.Matcher, int, java.lang.CharSequence]
Pattern	java.util.function.Predicate<java.lang.String>	asPredicate	[]
1MatcherIterator		java.util.regex.Pattern$1MatcherIterator	[]
1MatcherIterator	java.lang.String	next	[]
1MatcherIterator	boolean	hasNext	[]
Pattern	java.util.stream.Stream<java.lang.String>	splitAsStream	[java.lang.CharSequence]
Itr		java.util.ArrayList$Itr	[]
Itr	boolean	hasNext	[]
Itr	E	next	[]
Itr	void	remove	[]
Itr	void	forEachRemaining	[java.util.function.Consumer]
Itr	void	checkForComodification	[]
ListItr		java.util.ArrayList$ListItr	[int]
ListItr	boolean	hasPrevious	[]
ListItr	int	nextIndex	[]
ListItr	int	previousIndex	[]
ListItr	E	previous	[]
ListItr	void	set	[E]
ListItr	void	add	[E]
SubList		java.util.ArrayList$SubList	[java.util.AbstractList, int, int, int]
SubList	E	set	[int, E]
SubList	E	get	[int]
SubList	int	size	[]
SubList	void	add	[int, E]
SubList	E	remove	[int]
SubList	void	removeRange	[int, int]
SubList	boolean	addAll	[java.util.Collection]
SubList	boolean	addAll	[int, java.util.Collection]
SubList	java.util.Iterator<E>	iterator	[]
1		java.util.ArrayList$SubList$1	[]
1	boolean	hasNext	[]
1	E	next	[]
1	boolean	hasPrevious	[]
1	E	previous	[]
1	void	forEachRemaining	[java.util.function.Consumer]
1	int	nextIndex	[]
1	int	previousIndex	[]
1	void	remove	[]
1	void	set	[E]
1	void	add	[E]
1	void	checkForComodification	[]
SubList	java.util.ListIterator<E>	listIterator	[int]
SubList	java.util.List<E>	subList	[int, int]
SubList	void	rangeCheck	[int]
SubList	void	rangeCheckForAdd	[int]
SubList	java.lang.String	outOfBoundsMsg	[int]
SubList	void	checkForComodification	[]
SubList	java.util.Spliterator<E>	spliterator	[]
ArrayListSpliterator		java.util.ArrayList$ArrayListSpliterator	[java.util.ArrayList, int, int, int]
ArrayListSpliterator	int	getFence	[]
ArrayListSpliterator	java.util.ArrayList.ArrayListSpliterator<E>	trySplit	[]
ArrayListSpliterator	boolean	tryAdvance	[java.util.function.Consumer]
ArrayListSpliterator	void	forEachRemaining	[java.util.function.Consumer]
ArrayListSpliterator	long	estimateSize	[]
ArrayListSpliterator	int	characteristics	[]
ArrayList		java.util.ArrayList	[int]
ArrayList		java.util.ArrayList	[]
ArrayList		java.util.ArrayList	[java.util.Collection]
ArrayList	void	trimToSize	[]
ArrayList	void	ensureCapacity	[int]
ArrayList	void	ensureCapacityInternal	[int]
ArrayList	void	ensureExplicitCapacity	[int]
ArrayList	void	grow	[int]
ArrayList	int	hugeCapacity	[int]
ArrayList	int	size	[]
ArrayList	boolean	isEmpty	[]
ArrayList	boolean	contains	[java.lang.Object]
ArrayList	int	indexOf	[java.lang.Object]
ArrayList	int	lastIndexOf	[java.lang.Object]
ArrayList	java.lang.Object	clone	[]
ArrayList	java.lang.Object[]	toArray	[]
ArrayList	T[]	toArray	[T[]]
ArrayList	E	elementData	[int]
ArrayList	E	get	[int]
ArrayList	E	set	[int, E]
ArrayList	boolean	add	[E]
ArrayList	void	add	[int, E]
ArrayList	E	remove	[int]
ArrayList	boolean	remove	[java.lang.Object]
ArrayList	void	fastRemove	[int]
ArrayList	void	clear	[]
ArrayList	boolean	addAll	[java.util.Collection]
ArrayList	boolean	addAll	[int, java.util.Collection]
ArrayList	void	removeRange	[int, int]
ArrayList	void	rangeCheck	[int]
ArrayList	void	rangeCheckForAdd	[int]
ArrayList	java.lang.String	outOfBoundsMsg	[int]
ArrayList	boolean	removeAll	[java.util.Collection]
ArrayList	boolean	retainAll	[java.util.Collection]
ArrayList	boolean	batchRemove	[java.util.Collection, boolean]
ArrayList	void	writeObject	[java.io.ObjectOutputStream]
ArrayList	void	readObject	[java.io.ObjectInputStream]
ArrayList	java.util.ListIterator<E>	listIterator	[int]
ArrayList	java.util.ListIterator<E>	listIterator	[]
ArrayList	java.util.Iterator<E>	iterator	[]
ArrayList	java.util.List<E>	subList	[int, int]
ArrayList	void	subListRangeCheck	[int, int, int]
ArrayList	void	forEach	[java.util.function.Consumer]
ArrayList	java.util.Spliterator<E>	spliterator	[]
ArrayList	boolean	removeIf	[java.util.function.Predicate]
ArrayList	void	replaceAll	[java.util.function.UnaryOperator]
ArrayList	void	sort	[java.util.Comparator]
StringUtil		org.jsoup.helper.StringUtil	[]
StringUtil	java.lang.String	join	[java.util.Collection, java.lang.String]
StringUtil	java.lang.String	join	[java.util.Iterator, java.lang.String]
StringUtil	java.lang.String	padding	[int]
StringUtil	boolean	isBlank	[java.lang.String]
StringUtil	boolean	isNumeric	[java.lang.String]
StringUtil	boolean	isWhitespace	[int]
StringUtil	java.lang.String	normaliseWhitespace	[java.lang.String]
StringUtil	void	appendNormalisedWhitespace	[java.lang.StringBuilder, java.lang.String, boolean]
StringUtil	boolean	in	[java.lang.String, java.lang.String[]]
StringUtil	boolean	inSorted	[java.lang.String, java.lang.String[]]
StringUtil	java.net.URL	resolve	[java.net.URL, java.lang.String]
StringUtil	java.lang.String	resolve	[java.lang.String, java.lang.String]
Validate		org.jsoup.helper.Validate	[]
Validate	void	notNull	[java.lang.Object]
Validate	void	notNull	[java.lang.Object, java.lang.String]
Validate	void	isTrue	[boolean]
Validate	void	isTrue	[boolean, java.lang.String]
Validate	void	isFalse	[boolean]
Validate	void	isFalse	[boolean, java.lang.String]
Validate	void	noNullElements	[java.lang.Object[]]
Validate	void	noNullElements	[java.lang.Object[], java.lang.String]
Validate	void	notEmpty	[java.lang.String]
Validate	void	notEmpty	[java.lang.String, java.lang.String]
Validate	void	fail	[java.lang.String]
TokenQueue		org.jsoup.parser.TokenQueue	[java.lang.String]
TokenQueue	boolean	isEmpty	[]
TokenQueue	int	remainingLength	[]
TokenQueue	char	peek	[]
TokenQueue	void	addFirst	[java.lang.Character]
TokenQueue	void	addFirst	[java.lang.String]
TokenQueue	boolean	matches	[java.lang.String]
TokenQueue	boolean	matchesCS	[java.lang.String]
TokenQueue	boolean	matchesAny	[java.lang.String[]]
TokenQueue	boolean	matchesAny	[char[]]
TokenQueue	boolean	matchesStartTag	[]
TokenQueue	boolean	matchChomp	[java.lang.String]
TokenQueue	boolean	matchesWhitespace	[]
TokenQueue	boolean	matchesWord	[]
TokenQueue	void	advance	[]
TokenQueue	char	consume	[]
TokenQueue	void	consume	[java.lang.String]
TokenQueue	java.lang.String	consumeTo	[java.lang.String]
TokenQueue	java.lang.String	consumeToIgnoreCase	[java.lang.String]
TokenQueue	java.lang.String	consumeToAny	[java.lang.String[]]
TokenQueue	java.lang.String	chompTo	[java.lang.String]
TokenQueue	java.lang.String	chompToIgnoreCase	[java.lang.String]
TokenQueue	java.lang.String	chompBalanced	[char, char]
TokenQueue	java.lang.String	unescape	[java.lang.String]
TokenQueue	boolean	consumeWhitespace	[]
TokenQueue	java.lang.String	consumeWord	[]
TokenQueue	java.lang.String	consumeTagName	[]
TokenQueue	java.lang.String	consumeElementSelector	[]
TokenQueue	java.lang.String	consumeCssIdentifier	[]
TokenQueue	java.lang.String	consumeAttributeKey	[]
TokenQueue	java.lang.String	remainder	[]
TokenQueue	java.lang.String	toString	[]
QueryParser		org.jsoup.select.QueryParser	[java.lang.String]
QueryParser	org.jsoup.select.Evaluator	parse	[java.lang.String]
QueryParser	org.jsoup.select.Evaluator	parse	[]
QueryParser	void	combinator	[char]
QueryParser	java.lang.String	consumeSubQuery	[]
QueryParser	void	findElements	[]
QueryParser	void	byId	[]
QueryParser	void	byClass	[]
QueryParser	void	byTag	[]
QueryParser	void	byAttribute	[]
QueryParser	void	allElements	[]
QueryParser	void	indexLessThan	[]
QueryParser	void	indexGreaterThan	[]
QueryParser	void	indexEquals	[]
QueryParser	void	cssNthChild	[boolean, boolean]
QueryParser	int	consumeIndex	[]
QueryParser	void	has	[]
QueryParser	void	contains	[boolean]
QueryParser	void	containsData	[]
QueryParser	void	matches	[boolean]
QueryParser	void	not	[]

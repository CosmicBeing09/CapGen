Itr		java.util.ArrayList$Itr	[]
Itr	boolean	hasNext	[]
Itr	E	next	[]
Itr	void	remove	[]
Itr	void	forEachRemaining	[java.util.function.Consumer]
Itr	void	checkForComodification	[]
ListItr		java.util.ArrayList$ListItr	[int]
ListItr	boolean	hasPrevious	[]
ListItr	int	nextIndex	[]
ListItr	int	previousIndex	[]
ListItr	E	previous	[]
ListItr	void	set	[E]
ListItr	void	add	[E]
SubList		java.util.ArrayList$SubList	[java.util.AbstractList, int, int, int]
SubList	E	set	[int, E]
SubList	E	get	[int]
SubList	int	size	[]
SubList	void	add	[int, E]
SubList	E	remove	[int]
SubList	void	removeRange	[int, int]
SubList	boolean	addAll	[java.util.Collection]
SubList	boolean	addAll	[int, java.util.Collection]
SubList	java.util.Iterator<E>	iterator	[]
1		java.util.ArrayList$SubList$1	[]
1	boolean	hasNext	[]
1	E	next	[]
1	boolean	hasPrevious	[]
1	E	previous	[]
1	void	forEachRemaining	[java.util.function.Consumer]
1	int	nextIndex	[]
1	int	previousIndex	[]
1	void	remove	[]
1	void	set	[E]
1	void	add	[E]
1	void	checkForComodification	[]
SubList	java.util.ListIterator<E>	listIterator	[int]
SubList	java.util.List<E>	subList	[int, int]
SubList	void	rangeCheck	[int]
SubList	void	rangeCheckForAdd	[int]
SubList	java.lang.String	outOfBoundsMsg	[int]
SubList	void	checkForComodification	[]
SubList	java.util.Spliterator<E>	spliterator	[]
ArrayListSpliterator		java.util.ArrayList$ArrayListSpliterator	[java.util.ArrayList, int, int, int]
ArrayListSpliterator	int	getFence	[]
ArrayListSpliterator	java.util.ArrayList.ArrayListSpliterator<E>	trySplit	[]
ArrayListSpliterator	boolean	tryAdvance	[java.util.function.Consumer]
ArrayListSpliterator	void	forEachRemaining	[java.util.function.Consumer]
ArrayListSpliterator	long	estimateSize	[]
ArrayListSpliterator	int	characteristics	[]
ArrayList		java.util.ArrayList	[int]
ArrayList		java.util.ArrayList	[]
ArrayList		java.util.ArrayList	[java.util.Collection]
ArrayList	void	trimToSize	[]
ArrayList	void	ensureCapacity	[int]
ArrayList	void	ensureCapacityInternal	[int]
ArrayList	void	ensureExplicitCapacity	[int]
ArrayList	void	grow	[int]
ArrayList	int	hugeCapacity	[int]
ArrayList	int	size	[]
ArrayList	boolean	isEmpty	[]
ArrayList	boolean	contains	[java.lang.Object]
ArrayList	int	indexOf	[java.lang.Object]
ArrayList	int	lastIndexOf	[java.lang.Object]
ArrayList	java.lang.Object	clone	[]
ArrayList	java.lang.Object[]	toArray	[]
ArrayList	T[]	toArray	[T[]]
ArrayList	E	elementData	[int]
ArrayList	E	get	[int]
ArrayList	E	set	[int, E]
ArrayList	boolean	add	[E]
ArrayList	void	add	[int, E]
ArrayList	E	remove	[int]
ArrayList	boolean	remove	[java.lang.Object]
ArrayList	void	fastRemove	[int]
ArrayList	void	clear	[]
ArrayList	boolean	addAll	[java.util.Collection]
ArrayList	boolean	addAll	[int, java.util.Collection]
ArrayList	void	removeRange	[int, int]
ArrayList	void	rangeCheck	[int]
ArrayList	void	rangeCheckForAdd	[int]
ArrayList	java.lang.String	outOfBoundsMsg	[int]
ArrayList	boolean	removeAll	[java.util.Collection]
ArrayList	boolean	retainAll	[java.util.Collection]
ArrayList	boolean	batchRemove	[java.util.Collection, boolean]
ArrayList	void	writeObject	[java.io.ObjectOutputStream]
ArrayList	void	readObject	[java.io.ObjectInputStream]
ArrayList	java.util.ListIterator<E>	listIterator	[int]
ArrayList	java.util.ListIterator<E>	listIterator	[]
ArrayList	java.util.Iterator<E>	iterator	[]
ArrayList	java.util.List<E>	subList	[int, int]
ArrayList	void	subListRangeCheck	[int, int, int]
ArrayList	void	forEach	[java.util.function.Consumer]
ArrayList	java.util.Spliterator<E>	spliterator	[]
ArrayList	boolean	removeIf	[java.util.function.Predicate]
ArrayList	void	replaceAll	[java.util.function.UnaryOperator]
ArrayList	void	sort	[java.util.Comparator]
Node		java.util.HashMap$Node	[int, K, V, java.util.HashMap$Node]
Node	K	getKey	[]
Node	V	getValue	[]
Node	java.lang.String	toString	[]
Node	int	hashCode	[]
Node	V	setValue	[V]
Node	boolean	equals	[java.lang.Object]
KeySet		java.util.HashMap$KeySet	[]
KeySet	int	size	[]
KeySet	void	clear	[]
KeySet	java.util.Iterator<K>	iterator	[]
KeySet	boolean	contains	[java.lang.Object]
KeySet	boolean	remove	[java.lang.Object]
KeySet	java.util.Spliterator<K>	spliterator	[]
KeySet	void	forEach	[java.util.function.Consumer]
Values		java.util.HashMap$Values	[]
Values	int	size	[]
Values	void	clear	[]
Values	java.util.Iterator<V>	iterator	[]
Values	boolean	contains	[java.lang.Object]
Values	java.util.Spliterator<V>	spliterator	[]
Values	void	forEach	[java.util.function.Consumer]
EntrySet		java.util.HashMap$EntrySet	[]
EntrySet	int	size	[]
EntrySet	void	clear	[]
EntrySet	java.util.Iterator<java.util.Map.Entry<K, V>>	iterator	[]
EntrySet	boolean	contains	[java.lang.Object]
EntrySet	boolean	remove	[java.lang.Object]
EntrySet	java.util.Spliterator<java.util.Map.Entry<K, V>>	spliterator	[]
EntrySet	void	forEach	[java.util.function.Consumer]
HashIterator		java.util.HashMap$HashIterator	[]
HashIterator	boolean	hasNext	[]
HashIterator	java.util.HashMap.Node<K, V>	nextNode	[]
HashIterator	void	remove	[]
KeyIterator		java.util.HashMap$KeyIterator	[]
KeyIterator	K	next	[]
ValueIterator		java.util.HashMap$ValueIterator	[]
ValueIterator	V	next	[]
EntryIterator		java.util.HashMap$EntryIterator	[]
EntryIterator	java.util.Map.Entry<K, V>	next	[]
HashMapSpliterator		java.util.HashMap$HashMapSpliterator	[java.util.HashMap, int, int, int, int]
HashMapSpliterator	int	getFence	[]
HashMapSpliterator	long	estimateSize	[]
KeySpliterator		java.util.HashMap$KeySpliterator	[java.util.HashMap, int, int, int, int]
KeySpliterator	java.util.HashMap.KeySpliterator<K, V>	trySplit	[]
KeySpliterator	void	forEachRemaining	[java.util.function.Consumer]
KeySpliterator	boolean	tryAdvance	[java.util.function.Consumer]
KeySpliterator	int	characteristics	[]
ValueSpliterator		java.util.HashMap$ValueSpliterator	[java.util.HashMap, int, int, int, int]
ValueSpliterator	java.util.HashMap.ValueSpliterator<K, V>	trySplit	[]
ValueSpliterator	void	forEachRemaining	[java.util.function.Consumer]
ValueSpliterator	boolean	tryAdvance	[java.util.function.Consumer]
ValueSpliterator	int	characteristics	[]
EntrySpliterator		java.util.HashMap$EntrySpliterator	[java.util.HashMap, int, int, int, int]
EntrySpliterator	java.util.HashMap.EntrySpliterator<K, V>	trySplit	[]
EntrySpliterator	void	forEachRemaining	[java.util.function.Consumer]
EntrySpliterator	boolean	tryAdvance	[java.util.function.Consumer]
EntrySpliterator	int	characteristics	[]
TreeNode		java.util.HashMap$TreeNode	[int, K, V, java.util.HashMap$Node]
TreeNode	java.util.HashMap.TreeNode<K, V>	root	[]
TreeNode	void	moveRootToFront	[java.util.HashMap$Node[], java.util.HashMap$TreeNode]
TreeNode	java.util.HashMap.TreeNode<K, V>	find	[int, java.lang.Object, java.lang.Class]
TreeNode	java.util.HashMap.TreeNode<K, V>	getTreeNode	[int, java.lang.Object]
TreeNode	int	tieBreakOrder	[java.lang.Object, java.lang.Object]
TreeNode	void	treeify	[java.util.HashMap$Node[]]
TreeNode	java.util.HashMap.Node<K, V>	untreeify	[java.util.HashMap]
TreeNode	java.util.HashMap.TreeNode<K, V>	putTreeVal	[java.util.HashMap, java.util.HashMap$Node[], int, K, V]
TreeNode	void	removeTreeNode	[java.util.HashMap, java.util.HashMap$Node[], boolean]
TreeNode	void	split	[java.util.HashMap, java.util.HashMap$Node[], int, int]
TreeNode	java.util.HashMap.TreeNode<K, V>	rotateLeft	[java.util.HashMap$TreeNode, java.util.HashMap$TreeNode]
TreeNode	java.util.HashMap.TreeNode<K, V>	rotateRight	[java.util.HashMap$TreeNode, java.util.HashMap$TreeNode]
TreeNode	java.util.HashMap.TreeNode<K, V>	balanceInsertion	[java.util.HashMap$TreeNode, java.util.HashMap$TreeNode]
TreeNode	java.util.HashMap.TreeNode<K, V>	balanceDeletion	[java.util.HashMap$TreeNode, java.util.HashMap$TreeNode]
TreeNode	boolean	checkInvariants	[java.util.HashMap$TreeNode]
HashMap	int	hash	[java.lang.Object]
HashMap	java.lang.Class<?>	comparableClassFor	[java.lang.Object]
HashMap	int	compareComparables	[java.lang.Class, java.lang.Object, java.lang.Object]
HashMap	int	tableSizeFor	[int]
HashMap		java.util.HashMap	[int, float]
HashMap		java.util.HashMap	[int]
HashMap		java.util.HashMap	[]
HashMap		java.util.HashMap	[java.util.Map]
HashMap	void	putMapEntries	[java.util.Map, boolean]
HashMap	int	size	[]
HashMap	boolean	isEmpty	[]
HashMap	V	get	[java.lang.Object]
HashMap	java.util.HashMap.Node<K, V>	getNode	[int, java.lang.Object]
HashMap	boolean	containsKey	[java.lang.Object]
HashMap	V	put	[K, V]
HashMap	V	putVal	[int, K, V, boolean, boolean]
HashMap	java.util.HashMap.Node<K, V>[]	resize	[]
HashMap	void	treeifyBin	[java.util.HashMap$Node[], int]
HashMap	void	putAll	[java.util.Map]
HashMap	V	remove	[java.lang.Object]
HashMap	java.util.HashMap.Node<K, V>	removeNode	[int, java.lang.Object, java.lang.Object, boolean, boolean]
HashMap	void	clear	[]
HashMap	boolean	containsValue	[java.lang.Object]
HashMap	java.util.Set<K>	keySet	[]
HashMap	java.util.Collection<V>	values	[]
HashMap	java.util.Set<java.util.Map.Entry<K, V>>	entrySet	[]
HashMap	V	getOrDefault	[java.lang.Object, V]
HashMap	V	putIfAbsent	[K, V]
HashMap	boolean	remove	[java.lang.Object, java.lang.Object]
HashMap	boolean	replace	[K, V, V]
HashMap	V	replace	[K, V]
HashMap	V	computeIfAbsent	[K, java.util.function.Function]
HashMap	V	computeIfPresent	[K, java.util.function.BiFunction]
HashMap	V	compute	[K, java.util.function.BiFunction]
HashMap	V	merge	[K, V, java.util.function.BiFunction]
HashMap	void	forEach	[java.util.function.BiConsumer]
HashMap	void	replaceAll	[java.util.function.BiFunction]
HashMap	java.lang.Object	clone	[]
HashMap	float	loadFactor	[]
HashMap	int	capacity	[]
HashMap	void	writeObject	[java.io.ObjectOutputStream]
HashMap	void	readObject	[java.io.ObjectInputStream]
HashMap	java.util.HashMap.Node<K, V>	newNode	[int, K, V, java.util.HashMap$Node]
HashMap	java.util.HashMap.Node<K, V>	replacementNode	[java.util.HashMap$Node, java.util.HashMap$Node]
HashMap	java.util.HashMap.TreeNode<K, V>	newTreeNode	[int, K, V, java.util.HashMap$Node]
HashMap	java.util.HashMap.TreeNode<K, V>	replacementTreeNode	[java.util.HashMap$Node, java.util.HashMap$Node]
HashMap	void	reinitialize	[]
HashMap	void	afterNodeAccess	[java.util.HashMap$Node]
HashMap	void	afterNodeInsertion	[boolean]
HashMap	void	afterNodeRemoval	[java.util.HashMap$Node]
HashMap	void	internalWriteEntries	[java.io.ObjectOutputStream]
HashSet		java.util.HashSet	[]
HashSet		java.util.HashSet	[java.util.Collection]
HashSet		java.util.HashSet	[int, float]
HashSet		java.util.HashSet	[int]
HashSet		java.util.HashSet	[int, float, boolean]
HashSet	java.util.Iterator<E>	iterator	[]
HashSet	int	size	[]
HashSet	boolean	isEmpty	[]
HashSet	boolean	contains	[java.lang.Object]
HashSet	boolean	add	[E]
HashSet	boolean	remove	[java.lang.Object]
HashSet	void	clear	[]
HashSet	java.lang.Object	clone	[]
HashSet	void	writeObject	[java.io.ObjectOutputStream]
HashSet	void	readObject	[java.io.ObjectInputStream]
HashSet	java.util.Spliterator<E>	spliterator	[]
Entry		java.util.LinkedHashMap$Entry	[int, K, V, java.util.HashMap$Node]
LinkedKeySet		java.util.LinkedHashMap$LinkedKeySet	[]
LinkedKeySet	int	size	[]
LinkedKeySet	void	clear	[]
LinkedKeySet	java.util.Iterator<K>	iterator	[]
LinkedKeySet	boolean	contains	[java.lang.Object]
LinkedKeySet	boolean	remove	[java.lang.Object]
LinkedKeySet	java.util.Spliterator<K>	spliterator	[]
LinkedKeySet	void	forEach	[java.util.function.Consumer]
LinkedValues		java.util.LinkedHashMap$LinkedValues	[]
LinkedValues	int	size	[]
LinkedValues	void	clear	[]
LinkedValues	java.util.Iterator<V>	iterator	[]
LinkedValues	boolean	contains	[java.lang.Object]
LinkedValues	java.util.Spliterator<V>	spliterator	[]
LinkedValues	void	forEach	[java.util.function.Consumer]
LinkedEntrySet		java.util.LinkedHashMap$LinkedEntrySet	[]
LinkedEntrySet	int	size	[]
LinkedEntrySet	void	clear	[]
LinkedEntrySet	java.util.Iterator<java.util.Map.Entry<K, V>>	iterator	[]
LinkedEntrySet	boolean	contains	[java.lang.Object]
LinkedEntrySet	boolean	remove	[java.lang.Object]
LinkedEntrySet	java.util.Spliterator<java.util.Map.Entry<K, V>>	spliterator	[]
LinkedEntrySet	void	forEach	[java.util.function.Consumer]
LinkedHashIterator		java.util.LinkedHashMap$LinkedHashIterator	[]
LinkedHashIterator	boolean	hasNext	[]
LinkedHashIterator	java.util.LinkedHashMap.Entry<K, V>	nextNode	[]
LinkedHashIterator	void	remove	[]
LinkedKeyIterator		java.util.LinkedHashMap$LinkedKeyIterator	[]
LinkedKeyIterator	K	next	[]
LinkedValueIterator		java.util.LinkedHashMap$LinkedValueIterator	[]
LinkedValueIterator	V	next	[]
LinkedEntryIterator		java.util.LinkedHashMap$LinkedEntryIterator	[]
LinkedEntryIterator	java.util.Map.Entry<K, V>	next	[]
LinkedHashMap	void	linkNodeLast	[java.util.LinkedHashMap$Entry]
LinkedHashMap	void	transferLinks	[java.util.LinkedHashMap$Entry, java.util.LinkedHashMap$Entry]
LinkedHashMap	void	reinitialize	[]
LinkedHashMap	java.util.HashMap.Node<K, V>	newNode	[int, K, V, java.util.HashMap$Node]
LinkedHashMap	java.util.HashMap.Node<K, V>	replacementNode	[java.util.HashMap$Node, java.util.HashMap$Node]
LinkedHashMap	java.util.HashMap.TreeNode<K, V>	newTreeNode	[int, K, V, java.util.HashMap$Node]
LinkedHashMap	java.util.HashMap.TreeNode<K, V>	replacementTreeNode	[java.util.HashMap$Node, java.util.HashMap$Node]
LinkedHashMap	void	afterNodeRemoval	[java.util.HashMap$Node]
LinkedHashMap	void	afterNodeInsertion	[boolean]
LinkedHashMap	void	afterNodeAccess	[java.util.HashMap$Node]
LinkedHashMap	void	internalWriteEntries	[java.io.ObjectOutputStream]
LinkedHashMap		java.util.LinkedHashMap	[int, float]
LinkedHashMap		java.util.LinkedHashMap	[int]
LinkedHashMap		java.util.LinkedHashMap	[]
LinkedHashMap		java.util.LinkedHashMap	[java.util.Map]
LinkedHashMap		java.util.LinkedHashMap	[int, float, boolean]
LinkedHashMap	boolean	containsValue	[java.lang.Object]
LinkedHashMap	V	get	[java.lang.Object]
LinkedHashMap	V	getOrDefault	[java.lang.Object, V]
LinkedHashMap	void	clear	[]
LinkedHashMap	boolean	removeEldestEntry	[java.util.Map$Entry]
LinkedHashMap	java.util.Set<K>	keySet	[]
LinkedHashMap	java.util.Collection<V>	values	[]
LinkedHashMap	java.util.Set<java.util.Map.Entry<K, V>>	entrySet	[]
LinkedHashMap	void	forEach	[java.util.function.BiConsumer]
LinkedHashMap	void	replaceAll	[java.util.function.BiFunction]
LinkedHashSet		java.util.LinkedHashSet	[int, float]
LinkedHashSet		java.util.LinkedHashSet	[int]
LinkedHashSet		java.util.LinkedHashSet	[]
LinkedHashSet		java.util.LinkedHashSet	[java.util.Collection]
LinkedHashSet	java.util.Spliterator<E>	spliterator	[]
ListItr		java.util.LinkedList$ListItr	[int]
ListItr	boolean	hasNext	[]
ListItr	E	next	[]
ListItr	boolean	hasPrevious	[]
ListItr	E	previous	[]
ListItr	int	nextIndex	[]
ListItr	int	previousIndex	[]
ListItr	void	remove	[]
ListItr	void	set	[E]
ListItr	void	add	[E]
ListItr	void	forEachRemaining	[java.util.function.Consumer]
ListItr	void	checkForComodification	[]
Node		java.util.LinkedList$Node	[java.util.LinkedList$Node, E, java.util.LinkedList$Node]
DescendingIterator		java.util.LinkedList$DescendingIterator	[]
DescendingIterator	boolean	hasNext	[]
DescendingIterator	E	next	[]
DescendingIterator	void	remove	[]
LLSpliterator		java.util.LinkedList$LLSpliterator	[java.util.LinkedList, int, int]
LLSpliterator	int	getEst	[]
LLSpliterator	long	estimateSize	[]
LLSpliterator	java.util.Spliterator<E>	trySplit	[]
LLSpliterator	void	forEachRemaining	[java.util.function.Consumer]
LLSpliterator	boolean	tryAdvance	[java.util.function.Consumer]
LLSpliterator	int	characteristics	[]
LinkedList		java.util.LinkedList	[]
LinkedList		java.util.LinkedList	[java.util.Collection]
LinkedList	void	linkFirst	[E]
LinkedList	void	linkLast	[E]
LinkedList	void	linkBefore	[E, java.util.LinkedList$Node]
LinkedList	E	unlinkFirst	[java.util.LinkedList$Node]
LinkedList	E	unlinkLast	[java.util.LinkedList$Node]
LinkedList	E	unlink	[java.util.LinkedList$Node]
LinkedList	E	getFirst	[]
LinkedList	E	getLast	[]
LinkedList	E	removeFirst	[]
LinkedList	E	removeLast	[]
LinkedList	void	addFirst	[E]
LinkedList	void	addLast	[E]
LinkedList	boolean	contains	[java.lang.Object]
LinkedList	int	size	[]
LinkedList	boolean	add	[E]
LinkedList	boolean	remove	[java.lang.Object]
LinkedList	boolean	addAll	[java.util.Collection]
LinkedList	boolean	addAll	[int, java.util.Collection]
LinkedList	void	clear	[]
LinkedList	E	get	[int]
LinkedList	E	set	[int, E]
LinkedList	void	add	[int, E]
LinkedList	E	remove	[int]
LinkedList	boolean	isElementIndex	[int]
LinkedList	boolean	isPositionIndex	[int]
LinkedList	java.lang.String	outOfBoundsMsg	[int]
LinkedList	void	checkElementIndex	[int]
LinkedList	void	checkPositionIndex	[int]
LinkedList	java.util.LinkedList.Node<E>	node	[int]
LinkedList	int	indexOf	[java.lang.Object]
LinkedList	int	lastIndexOf	[java.lang.Object]
LinkedList	E	peek	[]
LinkedList	E	element	[]
LinkedList	E	poll	[]
LinkedList	E	remove	[]
LinkedList	boolean	offer	[E]
LinkedList	boolean	offerFirst	[E]
LinkedList	boolean	offerLast	[E]
LinkedList	E	peekFirst	[]
LinkedList	E	peekLast	[]
LinkedList	E	pollFirst	[]
LinkedList	E	pollLast	[]
LinkedList	void	push	[E]
LinkedList	E	pop	[]
LinkedList	boolean	removeFirstOccurrence	[java.lang.Object]
LinkedList	boolean	removeLastOccurrence	[java.lang.Object]
LinkedList	java.util.ListIterator<E>	listIterator	[int]
LinkedList	java.util.Iterator<E>	descendingIterator	[]
LinkedList	java.util.LinkedList<E>	superClone	[]
LinkedList	java.lang.Object	clone	[]
LinkedList	java.lang.Object[]	toArray	[]
LinkedList	T[]	toArray	[T[]]
LinkedList	void	writeObject	[java.io.ObjectOutputStream]
LinkedList	void	readObject	[java.io.ObjectInputStream]
LinkedList	java.util.Spliterator<E>	spliterator	[]
1		java.util.SortedSet$1	[java.util.Collection, int]
1	java.util.Comparator<? super E>	getComparator	[]
Values		java.util.TreeMap$Values	[]
Values	java.util.Iterator<V>	iterator	[]
Values	int	size	[]
Values	boolean	contains	[java.lang.Object]
Values	boolean	remove	[java.lang.Object]
Values	void	clear	[]
Values	java.util.Spliterator<V>	spliterator	[]
EntrySet		java.util.TreeMap$EntrySet	[]
EntrySet	java.util.Iterator<java.util.Map.Entry<K, V>>	iterator	[]
EntrySet	boolean	contains	[java.lang.Object]
EntrySet	boolean	remove	[java.lang.Object]
EntrySet	int	size	[]
EntrySet	void	clear	[]
EntrySet	java.util.Spliterator<java.util.Map.Entry<K, V>>	spliterator	[]
KeySet		java.util.TreeMap$KeySet	[java.util.NavigableMap]
KeySet	java.util.Iterator<E>	iterator	[]
KeySet	java.util.Iterator<E>	descendingIterator	[]
KeySet	int	size	[]
KeySet	boolean	isEmpty	[]
KeySet	boolean	contains	[java.lang.Object]
KeySet	void	clear	[]
KeySet	E	lower	[E]
KeySet	E	floor	[E]
KeySet	E	ceiling	[E]
KeySet	E	higher	[E]
KeySet	E	first	[]
KeySet	E	last	[]
KeySet	java.util.Comparator<? super E>	comparator	[]
KeySet	E	pollFirst	[]
KeySet	E	pollLast	[]
KeySet	boolean	remove	[java.lang.Object]
KeySet	java.util.NavigableSet<E>	subSet	[E, boolean, E, boolean]
KeySet	java.util.NavigableSet<E>	headSet	[E, boolean]
KeySet	java.util.NavigableSet<E>	tailSet	[E, boolean]
KeySet	java.util.SortedSet<E>	subSet	[E, E]
KeySet	java.util.SortedSet<E>	headSet	[E]
KeySet	java.util.SortedSet<E>	tailSet	[E]
KeySet	java.util.NavigableSet<E>	descendingSet	[]
KeySet	java.util.Spliterator<E>	spliterator	[]
PrivateEntryIterator		java.util.TreeMap$PrivateEntryIterator	[java.util.TreeMap$Entry]
PrivateEntryIterator	boolean	hasNext	[]
PrivateEntryIterator	java.util.TreeMap.Entry<K, V>	nextEntry	[]
PrivateEntryIterator	java.util.TreeMap.Entry<K, V>	prevEntry	[]
PrivateEntryIterator	void	remove	[]
EntryIterator		java.util.TreeMap$EntryIterator	[java.util.TreeMap$Entry]
EntryIterator	java.util.Map.Entry<K, V>	next	[]
ValueIterator		java.util.TreeMap$ValueIterator	[java.util.TreeMap$Entry]
ValueIterator	V	next	[]
KeyIterator		java.util.TreeMap$KeyIterator	[java.util.TreeMap$Entry]
KeyIterator	K	next	[]
DescendingKeyIterator		java.util.TreeMap$DescendingKeyIterator	[java.util.TreeMap$Entry]
DescendingKeyIterator	K	next	[]
DescendingKeyIterator	void	remove	[]
EntrySetView		java.util.TreeMap$NavigableSubMap$EntrySetView	[]
EntrySetView	int	size	[]
EntrySetView	boolean	isEmpty	[]
EntrySetView	boolean	contains	[java.lang.Object]
EntrySetView	boolean	remove	[java.lang.Object]
SubMapIterator		java.util.TreeMap$NavigableSubMap$SubMapIterator	[java.util.TreeMap$Entry, java.util.TreeMap$Entry]
SubMapIterator	boolean	hasNext	[]
SubMapIterator	java.util.TreeMap.Entry<K, V>	nextEntry	[]
SubMapIterator	java.util.TreeMap.Entry<K, V>	prevEntry	[]
SubMapIterator	void	removeAscending	[]
SubMapIterator	void	removeDescending	[]
SubMapEntryIterator		java.util.TreeMap$NavigableSubMap$SubMapEntryIterator	[java.util.TreeMap$Entry, java.util.TreeMap$Entry]
SubMapEntryIterator	java.util.Map.Entry<K, V>	next	[]
SubMapEntryIterator	void	remove	[]
DescendingSubMapEntryIterator		java.util.TreeMap$NavigableSubMap$DescendingSubMapEntryIterator	[java.util.TreeMap$Entry, java.util.TreeMap$Entry]
DescendingSubMapEntryIterator	java.util.Map.Entry<K, V>	next	[]
DescendingSubMapEntryIterator	void	remove	[]
SubMapKeyIterator		java.util.TreeMap$NavigableSubMap$SubMapKeyIterator	[java.util.TreeMap$Entry, java.util.TreeMap$Entry]
SubMapKeyIterator	K	next	[]
SubMapKeyIterator	void	remove	[]
SubMapKeyIterator	java.util.Spliterator<K>	trySplit	[]
SubMapKeyIterator	void	forEachRemaining	[java.util.function.Consumer]
SubMapKeyIterator	boolean	tryAdvance	[java.util.function.Consumer]
SubMapKeyIterator	long	estimateSize	[]
SubMapKeyIterator	int	characteristics	[]
SubMapKeyIterator	java.util.Comparator<? super K>	getComparator	[]
DescendingSubMapKeyIterator		java.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator	[java.util.TreeMap$Entry, java.util.TreeMap$Entry]
DescendingSubMapKeyIterator	K	next	[]
DescendingSubMapKeyIterator	void	remove	[]
DescendingSubMapKeyIterator	java.util.Spliterator<K>	trySplit	[]
DescendingSubMapKeyIterator	void	forEachRemaining	[java.util.function.Consumer]
DescendingSubMapKeyIterator	boolean	tryAdvance	[java.util.function.Consumer]
DescendingSubMapKeyIterator	long	estimateSize	[]
DescendingSubMapKeyIterator	int	characteristics	[]
NavigableSubMap		java.util.TreeMap$NavigableSubMap	[java.util.TreeMap, boolean, K, boolean, boolean, K, boolean]
NavigableSubMap	boolean	tooLow	[java.lang.Object]
NavigableSubMap	boolean	tooHigh	[java.lang.Object]
NavigableSubMap	boolean	inRange	[java.lang.Object]
NavigableSubMap	boolean	inClosedRange	[java.lang.Object]
NavigableSubMap	boolean	inRange	[java.lang.Object, boolean]
NavigableSubMap	java.util.TreeMap.Entry<K, V>	absLowest	[]
NavigableSubMap	java.util.TreeMap.Entry<K, V>	absHighest	[]
NavigableSubMap	java.util.TreeMap.Entry<K, V>	absCeiling	[K]
NavigableSubMap	java.util.TreeMap.Entry<K, V>	absHigher	[K]
NavigableSubMap	java.util.TreeMap.Entry<K, V>	absFloor	[K]
NavigableSubMap	java.util.TreeMap.Entry<K, V>	absLower	[K]
NavigableSubMap	java.util.TreeMap.Entry<K, V>	absHighFence	[]
NavigableSubMap	java.util.TreeMap.Entry<K, V>	absLowFence	[]
NavigableSubMap	java.util.TreeMap.Entry<K, V>	subLowest	[]
NavigableSubMap	java.util.TreeMap.Entry<K, V>	subHighest	[]
NavigableSubMap	java.util.TreeMap.Entry<K, V>	subCeiling	[K]
NavigableSubMap	java.util.TreeMap.Entry<K, V>	subHigher	[K]
NavigableSubMap	java.util.TreeMap.Entry<K, V>	subFloor	[K]
NavigableSubMap	java.util.TreeMap.Entry<K, V>	subLower	[K]
NavigableSubMap	java.util.Iterator<K>	keyIterator	[]
NavigableSubMap	java.util.Spliterator<K>	keySpliterator	[]
NavigableSubMap	java.util.Iterator<K>	descendingKeyIterator	[]
NavigableSubMap	boolean	isEmpty	[]
NavigableSubMap	int	size	[]
NavigableSubMap	boolean	containsKey	[java.lang.Object]
NavigableSubMap	V	put	[K, V]
NavigableSubMap	V	get	[java.lang.Object]
NavigableSubMap	V	remove	[java.lang.Object]
NavigableSubMap	java.util.Map.Entry<K, V>	ceilingEntry	[K]
NavigableSubMap	K	ceilingKey	[K]
NavigableSubMap	java.util.Map.Entry<K, V>	higherEntry	[K]
NavigableSubMap	K	higherKey	[K]
NavigableSubMap	java.util.Map.Entry<K, V>	floorEntry	[K]
NavigableSubMap	K	floorKey	[K]
NavigableSubMap	java.util.Map.Entry<K, V>	lowerEntry	[K]
NavigableSubMap	K	lowerKey	[K]
NavigableSubMap	K	firstKey	[]
NavigableSubMap	K	lastKey	[]
NavigableSubMap	java.util.Map.Entry<K, V>	firstEntry	[]
NavigableSubMap	java.util.Map.Entry<K, V>	lastEntry	[]
NavigableSubMap	java.util.Map.Entry<K, V>	pollFirstEntry	[]
NavigableSubMap	java.util.Map.Entry<K, V>	pollLastEntry	[]
NavigableSubMap	java.util.NavigableSet<K>	navigableKeySet	[]
NavigableSubMap	java.util.Set<K>	keySet	[]
NavigableSubMap	java.util.NavigableSet<K>	descendingKeySet	[]
NavigableSubMap	java.util.SortedMap<K, V>	subMap	[K, K]
NavigableSubMap	java.util.SortedMap<K, V>	headMap	[K]
NavigableSubMap	java.util.SortedMap<K, V>	tailMap	[K]
AscendingEntrySetView		java.util.TreeMap$AscendingSubMap$AscendingEntrySetView	[]
AscendingEntrySetView	java.util.Iterator<java.util.Map.Entry<K, V>>	iterator	[]
AscendingSubMap		java.util.TreeMap$AscendingSubMap	[java.util.TreeMap, boolean, K, boolean, boolean, K, boolean]
AscendingSubMap	java.util.Comparator<? super K>	comparator	[]
AscendingSubMap	java.util.NavigableMap<K, V>	subMap	[K, boolean, K, boolean]
AscendingSubMap	java.util.NavigableMap<K, V>	headMap	[K, boolean]
AscendingSubMap	java.util.NavigableMap<K, V>	tailMap	[K, boolean]
AscendingSubMap	java.util.NavigableMap<K, V>	descendingMap	[]
AscendingSubMap	java.util.Iterator<K>	keyIterator	[]
AscendingSubMap	java.util.Spliterator<K>	keySpliterator	[]
AscendingSubMap	java.util.Iterator<K>	descendingKeyIterator	[]
AscendingSubMap	java.util.Set<java.util.Map.Entry<K, V>>	entrySet	[]
AscendingSubMap	java.util.TreeMap.Entry<K, V>	subLowest	[]
AscendingSubMap	java.util.TreeMap.Entry<K, V>	subHighest	[]
AscendingSubMap	java.util.TreeMap.Entry<K, V>	subCeiling	[K]
AscendingSubMap	java.util.TreeMap.Entry<K, V>	subHigher	[K]
AscendingSubMap	java.util.TreeMap.Entry<K, V>	subFloor	[K]
AscendingSubMap	java.util.TreeMap.Entry<K, V>	subLower	[K]
DescendingEntrySetView		java.util.TreeMap$DescendingSubMap$DescendingEntrySetView	[]
DescendingEntrySetView	java.util.Iterator<java.util.Map.Entry<K, V>>	iterator	[]
DescendingSubMap		java.util.TreeMap$DescendingSubMap	[java.util.TreeMap, boolean, K, boolean, boolean, K, boolean]
DescendingSubMap	java.util.Comparator<? super K>	comparator	[]
DescendingSubMap	java.util.NavigableMap<K, V>	subMap	[K, boolean, K, boolean]
DescendingSubMap	java.util.NavigableMap<K, V>	headMap	[K, boolean]
DescendingSubMap	java.util.NavigableMap<K, V>	tailMap	[K, boolean]
DescendingSubMap	java.util.NavigableMap<K, V>	descendingMap	[]
DescendingSubMap	java.util.Iterator<K>	keyIterator	[]
DescendingSubMap	java.util.Spliterator<K>	keySpliterator	[]
DescendingSubMap	java.util.Iterator<K>	descendingKeyIterator	[]
DescendingSubMap	java.util.Set<java.util.Map.Entry<K, V>>	entrySet	[]
DescendingSubMap	java.util.TreeMap.Entry<K, V>	subLowest	[]
DescendingSubMap	java.util.TreeMap.Entry<K, V>	subHighest	[]
DescendingSubMap	java.util.TreeMap.Entry<K, V>	subCeiling	[K]
DescendingSubMap	java.util.TreeMap.Entry<K, V>	subHigher	[K]
DescendingSubMap	java.util.TreeMap.Entry<K, V>	subFloor	[K]
DescendingSubMap	java.util.TreeMap.Entry<K, V>	subLower	[K]
SubMap		java.util.TreeMap$SubMap	[]
SubMap	java.lang.Object	readResolve	[]
SubMap	java.util.Set<java.util.Map.Entry<K, V>>	entrySet	[]
SubMap	K	lastKey	[]
SubMap	K	firstKey	[]
SubMap	java.util.SortedMap<K, V>	subMap	[K, K]
SubMap	java.util.SortedMap<K, V>	headMap	[K]
SubMap	java.util.SortedMap<K, V>	tailMap	[K]
SubMap	java.util.Comparator<? super K>	comparator	[]
Entry		java.util.TreeMap$Entry	[K, V, java.util.TreeMap$Entry]
Entry	K	getKey	[]
Entry	V	getValue	[]
Entry	V	setValue	[V]
Entry	boolean	equals	[java.lang.Object]
Entry	int	hashCode	[]
Entry	java.lang.String	toString	[]
TreeMapSpliterator		java.util.TreeMap$TreeMapSpliterator	[java.util.TreeMap, java.util.TreeMap$Entry, java.util.TreeMap$Entry, int, int, int]
TreeMapSpliterator	int	getEstimate	[]
TreeMapSpliterator	long	estimateSize	[]
KeySpliterator		java.util.TreeMap$KeySpliterator	[java.util.TreeMap, java.util.TreeMap$Entry, java.util.TreeMap$Entry, int, int, int]
KeySpliterator	java.util.TreeMap.KeySpliterator<K, V>	trySplit	[]
KeySpliterator	void	forEachRemaining	[java.util.function.Consumer]
KeySpliterator	boolean	tryAdvance	[java.util.function.Consumer]
KeySpliterator	int	characteristics	[]
KeySpliterator	java.util.Comparator<? super K>	getComparator	[]
DescendingKeySpliterator		java.util.TreeMap$DescendingKeySpliterator	[java.util.TreeMap, java.util.TreeMap$Entry, java.util.TreeMap$Entry, int, int, int]
DescendingKeySpliterator	java.util.TreeMap.DescendingKeySpliterator<K, V>	trySplit	[]
DescendingKeySpliterator	void	forEachRemaining	[java.util.function.Consumer]
DescendingKeySpliterator	boolean	tryAdvance	[java.util.function.Consumer]
DescendingKeySpliterator	int	characteristics	[]
ValueSpliterator		java.util.TreeMap$ValueSpliterator	[java.util.TreeMap, java.util.TreeMap$Entry, java.util.TreeMap$Entry, int, int, int]
ValueSpliterator	java.util.TreeMap.ValueSpliterator<K, V>	trySplit	[]
ValueSpliterator	void	forEachRemaining	[java.util.function.Consumer]
ValueSpliterator	boolean	tryAdvance	[java.util.function.Consumer]
ValueSpliterator	int	characteristics	[]
EntrySpliterator		java.util.TreeMap$EntrySpliterator	[java.util.TreeMap, java.util.TreeMap$Entry, java.util.TreeMap$Entry, int, int, int]
EntrySpliterator	java.util.TreeMap.EntrySpliterator<K, V>	trySplit	[]
EntrySpliterator	void	forEachRemaining	[java.util.function.Consumer]
EntrySpliterator	boolean	tryAdvance	[java.util.function.Consumer]
EntrySpliterator	int	characteristics	[]
EntrySpliterator	java.util.Comparator<java.util.Map.Entry<K, V>>	getComparator	[]
TreeMap		java.util.TreeMap	[]
TreeMap		java.util.TreeMap	[java.util.Comparator]
TreeMap		java.util.TreeMap	[java.util.Map]
TreeMap		java.util.TreeMap	[java.util.SortedMap]
TreeMap	int	size	[]
TreeMap	boolean	containsKey	[java.lang.Object]
TreeMap	boolean	containsValue	[java.lang.Object]
TreeMap	V	get	[java.lang.Object]
TreeMap	java.util.Comparator<? super K>	comparator	[]
TreeMap	K	firstKey	[]
TreeMap	K	lastKey	[]
TreeMap	void	putAll	[java.util.Map]
TreeMap	java.util.TreeMap.Entry<K, V>	getEntry	[java.lang.Object]
TreeMap	java.util.TreeMap.Entry<K, V>	getEntryUsingComparator	[java.lang.Object]
TreeMap	java.util.TreeMap.Entry<K, V>	getCeilingEntry	[K]
TreeMap	java.util.TreeMap.Entry<K, V>	getFloorEntry	[K]
TreeMap	java.util.TreeMap.Entry<K, V>	getHigherEntry	[K]
TreeMap	java.util.TreeMap.Entry<K, V>	getLowerEntry	[K]
TreeMap	V	put	[K, V]
TreeMap	V	remove	[java.lang.Object]
TreeMap	void	clear	[]
TreeMap	java.lang.Object	clone	[]
TreeMap	java.util.Map.Entry<K, V>	firstEntry	[]
TreeMap	java.util.Map.Entry<K, V>	lastEntry	[]
TreeMap	java.util.Map.Entry<K, V>	pollFirstEntry	[]
TreeMap	java.util.Map.Entry<K, V>	pollLastEntry	[]
TreeMap	java.util.Map.Entry<K, V>	lowerEntry	[K]
TreeMap	K	lowerKey	[K]
TreeMap	java.util.Map.Entry<K, V>	floorEntry	[K]
TreeMap	K	floorKey	[K]
TreeMap	java.util.Map.Entry<K, V>	ceilingEntry	[K]
TreeMap	K	ceilingKey	[K]
TreeMap	java.util.Map.Entry<K, V>	higherEntry	[K]
TreeMap	K	higherKey	[K]
TreeMap	java.util.Set<K>	keySet	[]
TreeMap	java.util.NavigableSet<K>	navigableKeySet	[]
TreeMap	java.util.NavigableSet<K>	descendingKeySet	[]
TreeMap	java.util.Collection<V>	values	[]
TreeMap	java.util.Set<java.util.Map.Entry<K, V>>	entrySet	[]
TreeMap	java.util.NavigableMap<K, V>	descendingMap	[]
TreeMap	java.util.NavigableMap<K, V>	subMap	[K, boolean, K, boolean]
TreeMap	java.util.NavigableMap<K, V>	headMap	[K, boolean]
TreeMap	java.util.NavigableMap<K, V>	tailMap	[K, boolean]
TreeMap	java.util.SortedMap<K, V>	subMap	[K, K]
TreeMap	java.util.SortedMap<K, V>	headMap	[K]
TreeMap	java.util.SortedMap<K, V>	tailMap	[K]
TreeMap	boolean	replace	[K, V, V]
TreeMap	V	replace	[K, V]
TreeMap	void	forEach	[java.util.function.BiConsumer]
TreeMap	void	replaceAll	[java.util.function.BiFunction]
TreeMap	java.util.Iterator<K>	keyIterator	[]
TreeMap	java.util.Iterator<K>	descendingKeyIterator	[]
TreeMap	int	compare	[java.lang.Object, java.lang.Object]
TreeMap	boolean	valEquals	[java.lang.Object, java.lang.Object]
TreeMap	java.util.Map.Entry<K, V>	exportEntry	[java.util.TreeMap$Entry]
TreeMap	K	keyOrNull	[java.util.TreeMap$Entry]
TreeMap	K	key	[java.util.TreeMap$Entry]
TreeMap	java.util.TreeMap.Entry<K, V>	getFirstEntry	[]
TreeMap	java.util.TreeMap.Entry<K, V>	getLastEntry	[]
TreeMap	java.util.TreeMap.Entry<K, V>	successor	[java.util.TreeMap$Entry]
TreeMap	java.util.TreeMap.Entry<K, V>	predecessor	[java.util.TreeMap$Entry]
TreeMap	boolean	colorOf	[java.util.TreeMap$Entry]
TreeMap	java.util.TreeMap.Entry<K, V>	parentOf	[java.util.TreeMap$Entry]
TreeMap	void	setColor	[java.util.TreeMap$Entry, boolean]
TreeMap	java.util.TreeMap.Entry<K, V>	leftOf	[java.util.TreeMap$Entry]
TreeMap	java.util.TreeMap.Entry<K, V>	rightOf	[java.util.TreeMap$Entry]
TreeMap	void	rotateLeft	[java.util.TreeMap$Entry]
TreeMap	void	rotateRight	[java.util.TreeMap$Entry]
TreeMap	void	fixAfterInsertion	[java.util.TreeMap$Entry]
TreeMap	void	deleteEntry	[java.util.TreeMap$Entry]
TreeMap	void	fixAfterDeletion	[java.util.TreeMap$Entry]
TreeMap	void	writeObject	[java.io.ObjectOutputStream]
TreeMap	void	readObject	[java.io.ObjectInputStream]
TreeMap	void	readTreeSet	[int, java.io.ObjectInputStream, V]
TreeMap	void	addAllForTreeSet	[java.util.SortedSet, V]
TreeMap	void	buildFromSorted	[int, java.util.Iterator, java.io.ObjectInputStream, V]
TreeMap	java.util.TreeMap.Entry<K, V>	buildFromSorted	[int, int, int, int, java.util.Iterator, java.io.ObjectInputStream, V]
TreeMap	int	computeRedLevel	[int]
TreeMap	java.util.Spliterator<K>	keySpliteratorFor	[java.util.NavigableMap]
TreeMap	java.util.Spliterator<K>	keySpliterator	[]
TreeMap	java.util.Spliterator<K>	descendingKeySpliterator	[]
TreeSet		java.util.TreeSet	[java.util.NavigableMap]
TreeSet		java.util.TreeSet	[]
TreeSet		java.util.TreeSet	[java.util.Comparator]
TreeSet		java.util.TreeSet	[java.util.Collection]
TreeSet		java.util.TreeSet	[java.util.SortedSet]
TreeSet	java.util.Iterator<E>	iterator	[]
TreeSet	java.util.Iterator<E>	descendingIterator	[]
TreeSet	java.util.NavigableSet<E>	descendingSet	[]
TreeSet	int	size	[]
TreeSet	boolean	isEmpty	[]
TreeSet	boolean	contains	[java.lang.Object]
TreeSet	boolean	add	[E]
TreeSet	boolean	remove	[java.lang.Object]
TreeSet	void	clear	[]
TreeSet	boolean	addAll	[java.util.Collection]
TreeSet	java.util.NavigableSet<E>	subSet	[E, boolean, E, boolean]
TreeSet	java.util.NavigableSet<E>	headSet	[E, boolean]
TreeSet	java.util.NavigableSet<E>	tailSet	[E, boolean]
TreeSet	java.util.SortedSet<E>	subSet	[E, E]
TreeSet	java.util.SortedSet<E>	headSet	[E]
TreeSet	java.util.SortedSet<E>	tailSet	[E]
TreeSet	java.util.Comparator<? super E>	comparator	[]
TreeSet	E	first	[]
TreeSet	E	last	[]
TreeSet	E	lower	[E]
TreeSet	E	floor	[E]
TreeSet	E	ceiling	[E]
TreeSet	E	higher	[E]
TreeSet	E	pollFirst	[]
TreeSet	E	pollLast	[]
TreeSet	java.lang.Object	clone	[]
TreeSet	void	writeObject	[java.io.ObjectOutputStream]
TreeSet	void	readObject	[java.io.ObjectInputStream]
TreeSet	java.util.Spliterator<E>	spliterator	[]
ClassNameFinder		org.mockito.internal.creation.ClassNameFinder	[]
ClassNameFinder	java.lang.String	classNameForMock	[java.lang.Object]
Invocation		org.mockito.internal.invocation.Invocation	[java.lang.Object, java.lang.reflect.Method, java.lang.Object[], int, org.mockito.internal.invocation.realmethod.RealMethod]
Invocation	java.lang.Object[]	expandVarArgs	[boolean, java.lang.Object[]]
Invocation	java.lang.Object	getMock	[]
Invocation	java.lang.reflect.Method	getMethod	[]
Invocation	java.lang.Object[]	getArguments	[]
Invocation	void	markVerified	[]
Invocation	boolean	isVerified	[]
Invocation	java.lang.Integer	getSequenceNumber	[]
Invocation	void	markVerifiedInOrder	[]
Invocation	boolean	isVerifiedInOrder	[]
Invocation	boolean	equals	[java.lang.Object]
Invocation	boolean	equalArguments	[java.lang.Object[]]
Invocation	int	hashCode	[]
Invocation	java.lang.String	toString	[]
Invocation	java.lang.String	toString	[java.util.List, org.mockito.internal.reporting.PrintSettings]
Invocation	java.lang.String	qualifiedMethodName	[]
Invocation	java.util.List<org.hamcrest.Matcher>	argumentsToMatchers	[]
Invocation	boolean	isToString	[org.mockito.invocation.InvocationOnMock]
Invocation	boolean	isToString	[java.lang.reflect.Method]
Invocation	boolean	isValidException	[java.lang.Throwable]
Invocation	boolean	isValidReturnType	[java.lang.Class]
Invocation	boolean	isVoid	[]
Invocation	java.lang.String	printMethodReturnType	[]
Invocation	java.lang.String	getMethodName	[]
Invocation	boolean	returnsPrimitive	[]
Invocation	org.mockito.internal.debugging.Location	getLocation	[]
Invocation	int	getArgumentsCount	[]
Invocation	java.lang.Object[]	getRawArguments	[]
Invocation	java.lang.Object	callRealMethod	[]
Invocation	java.lang.String	toString	[org.mockito.internal.reporting.PrintSettings]
ReturnsEmptyValues		org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues	[]
ReturnsEmptyValues	java.lang.Object	answer	[org.mockito.invocation.InvocationOnMock]
ReturnsEmptyValues	java.lang.Object	returnValueFor	[java.lang.Class]
ReturnsEmptyValues	java.lang.Object	primitiveOf	[java.lang.Class]
MockName		org.mockito.internal.util.MockName	[java.lang.String, java.lang.Class]
MockName	java.lang.String	toInstanceName	[java.lang.Class]
MockName	boolean	isSurrogate	[]
MockName	java.lang.String	toString	[]
MockUtil		org.mockito.internal.util.MockUtil	[org.mockito.internal.util.CreationValidator]
MockUtil		org.mockito.internal.util.MockUtil	[]
MockUtil	T	createMock	[java.lang.Class, org.mockito.internal.progress.MockingProgress, org.mockito.internal.creation.MockSettingsImpl]
MockUtil	void	resetMock	[T, org.mockito.internal.progress.MockingProgress]
MockUtil	org.mockito.internal.MockHandler<T>	getMockHandler	[T]
MockUtil	boolean	isMockitoMock	[T]
MockUtil	boolean	isMock	[java.lang.Object]
MockUtil	org.mockito.internal.creation.MethodInterceptorFilter<org.mockito.internal.MockHandler<T>>	getInterceptor	[T]
MockUtil	org.mockito.internal.util.MockName	getMockName	[java.lang.Object]
Primitives		org.mockito.internal.util.Primitives	[]
Primitives	boolean	isPrimitiveWrapper	[java.lang.Class]
Primitives	java.lang.Object	primitiveWrapperOf	[java.lang.Class]
Primitives	java.lang.Class<?>	primitiveTypeOf	[java.lang.Class]

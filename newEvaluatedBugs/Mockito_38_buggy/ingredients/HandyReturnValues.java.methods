Node		java.util.HashMap$Node	[int, K, V, java.util.HashMap$Node]
Node	K	getKey	[]
Node	V	getValue	[]
Node	java.lang.String	toString	[]
Node	int	hashCode	[]
Node	V	setValue	[V]
Node	boolean	equals	[java.lang.Object]
KeySet		java.util.HashMap$KeySet	[]
KeySet	int	size	[]
KeySet	void	clear	[]
KeySet	java.util.Iterator<K>	iterator	[]
KeySet	boolean	contains	[java.lang.Object]
KeySet	boolean	remove	[java.lang.Object]
KeySet	java.util.Spliterator<K>	spliterator	[]
KeySet	void	forEach	[java.util.function.Consumer]
Values		java.util.HashMap$Values	[]
Values	int	size	[]
Values	void	clear	[]
Values	java.util.Iterator<V>	iterator	[]
Values	boolean	contains	[java.lang.Object]
Values	java.util.Spliterator<V>	spliterator	[]
Values	void	forEach	[java.util.function.Consumer]
EntrySet		java.util.HashMap$EntrySet	[]
EntrySet	int	size	[]
EntrySet	void	clear	[]
EntrySet	java.util.Iterator<java.util.Map.Entry<K, V>>	iterator	[]
EntrySet	boolean	contains	[java.lang.Object]
EntrySet	boolean	remove	[java.lang.Object]
EntrySet	java.util.Spliterator<java.util.Map.Entry<K, V>>	spliterator	[]
EntrySet	void	forEach	[java.util.function.Consumer]
HashIterator		java.util.HashMap$HashIterator	[]
HashIterator	boolean	hasNext	[]
HashIterator	java.util.HashMap.Node<K, V>	nextNode	[]
HashIterator	void	remove	[]
KeyIterator		java.util.HashMap$KeyIterator	[]
KeyIterator	K	next	[]
ValueIterator		java.util.HashMap$ValueIterator	[]
ValueIterator	V	next	[]
EntryIterator		java.util.HashMap$EntryIterator	[]
EntryIterator	java.util.Map.Entry<K, V>	next	[]
HashMapSpliterator		java.util.HashMap$HashMapSpliterator	[java.util.HashMap, int, int, int, int]
HashMapSpliterator	int	getFence	[]
HashMapSpliterator	long	estimateSize	[]
KeySpliterator		java.util.HashMap$KeySpliterator	[java.util.HashMap, int, int, int, int]
KeySpliterator	java.util.HashMap.KeySpliterator<K, V>	trySplit	[]
KeySpliterator	void	forEachRemaining	[java.util.function.Consumer]
KeySpliterator	boolean	tryAdvance	[java.util.function.Consumer]
KeySpliterator	int	characteristics	[]
ValueSpliterator		java.util.HashMap$ValueSpliterator	[java.util.HashMap, int, int, int, int]
ValueSpliterator	java.util.HashMap.ValueSpliterator<K, V>	trySplit	[]
ValueSpliterator	void	forEachRemaining	[java.util.function.Consumer]
ValueSpliterator	boolean	tryAdvance	[java.util.function.Consumer]
ValueSpliterator	int	characteristics	[]
EntrySpliterator		java.util.HashMap$EntrySpliterator	[java.util.HashMap, int, int, int, int]
EntrySpliterator	java.util.HashMap.EntrySpliterator<K, V>	trySplit	[]
EntrySpliterator	void	forEachRemaining	[java.util.function.Consumer]
EntrySpliterator	boolean	tryAdvance	[java.util.function.Consumer]
EntrySpliterator	int	characteristics	[]
TreeNode		java.util.HashMap$TreeNode	[int, K, V, java.util.HashMap$Node]
TreeNode	java.util.HashMap.TreeNode<K, V>	root	[]
TreeNode	void	moveRootToFront	[java.util.HashMap$Node[], java.util.HashMap$TreeNode]
TreeNode	java.util.HashMap.TreeNode<K, V>	find	[int, java.lang.Object, java.lang.Class]
TreeNode	java.util.HashMap.TreeNode<K, V>	getTreeNode	[int, java.lang.Object]
TreeNode	int	tieBreakOrder	[java.lang.Object, java.lang.Object]
TreeNode	void	treeify	[java.util.HashMap$Node[]]
TreeNode	java.util.HashMap.Node<K, V>	untreeify	[java.util.HashMap]
TreeNode	java.util.HashMap.TreeNode<K, V>	putTreeVal	[java.util.HashMap, java.util.HashMap$Node[], int, K, V]
TreeNode	void	removeTreeNode	[java.util.HashMap, java.util.HashMap$Node[], boolean]
TreeNode	void	split	[java.util.HashMap, java.util.HashMap$Node[], int, int]
TreeNode	java.util.HashMap.TreeNode<K, V>	rotateLeft	[java.util.HashMap$TreeNode, java.util.HashMap$TreeNode]
TreeNode	java.util.HashMap.TreeNode<K, V>	rotateRight	[java.util.HashMap$TreeNode, java.util.HashMap$TreeNode]
TreeNode	java.util.HashMap.TreeNode<K, V>	balanceInsertion	[java.util.HashMap$TreeNode, java.util.HashMap$TreeNode]
TreeNode	java.util.HashMap.TreeNode<K, V>	balanceDeletion	[java.util.HashMap$TreeNode, java.util.HashMap$TreeNode]
TreeNode	boolean	checkInvariants	[java.util.HashMap$TreeNode]
HashMap	int	hash	[java.lang.Object]
HashMap	java.lang.Class<?>	comparableClassFor	[java.lang.Object]
HashMap	int	compareComparables	[java.lang.Class, java.lang.Object, java.lang.Object]
HashMap	int	tableSizeFor	[int]
HashMap		java.util.HashMap	[int, float]
HashMap		java.util.HashMap	[int]
HashMap		java.util.HashMap	[]
HashMap		java.util.HashMap	[java.util.Map]
HashMap	void	putMapEntries	[java.util.Map, boolean]
HashMap	int	size	[]
HashMap	boolean	isEmpty	[]
HashMap	V	get	[java.lang.Object]
HashMap	java.util.HashMap.Node<K, V>	getNode	[int, java.lang.Object]
HashMap	boolean	containsKey	[java.lang.Object]
HashMap	V	put	[K, V]
HashMap	V	putVal	[int, K, V, boolean, boolean]
HashMap	java.util.HashMap.Node<K, V>[]	resize	[]
HashMap	void	treeifyBin	[java.util.HashMap$Node[], int]
HashMap	void	putAll	[java.util.Map]
HashMap	V	remove	[java.lang.Object]
HashMap	java.util.HashMap.Node<K, V>	removeNode	[int, java.lang.Object, java.lang.Object, boolean, boolean]
HashMap	void	clear	[]
HashMap	boolean	containsValue	[java.lang.Object]
HashMap	java.util.Set<K>	keySet	[]
HashMap	java.util.Collection<V>	values	[]
HashMap	java.util.Set<java.util.Map.Entry<K, V>>	entrySet	[]
HashMap	V	getOrDefault	[java.lang.Object, V]
HashMap	V	putIfAbsent	[K, V]
HashMap	boolean	remove	[java.lang.Object, java.lang.Object]
HashMap	boolean	replace	[K, V, V]
HashMap	V	replace	[K, V]
HashMap	V	computeIfAbsent	[K, java.util.function.Function]
HashMap	V	computeIfPresent	[K, java.util.function.BiFunction]
HashMap	V	compute	[K, java.util.function.BiFunction]
HashMap	V	merge	[K, V, java.util.function.BiFunction]
HashMap	void	forEach	[java.util.function.BiConsumer]
HashMap	void	replaceAll	[java.util.function.BiFunction]
HashMap	java.lang.Object	clone	[]
HashMap	float	loadFactor	[]
HashMap	int	capacity	[]
HashMap	void	writeObject	[java.io.ObjectOutputStream]
HashMap	void	readObject	[java.io.ObjectInputStream]
HashMap	java.util.HashMap.Node<K, V>	newNode	[int, K, V, java.util.HashMap$Node]
HashMap	java.util.HashMap.Node<K, V>	replacementNode	[java.util.HashMap$Node, java.util.HashMap$Node]
HashMap	java.util.HashMap.TreeNode<K, V>	newTreeNode	[int, K, V, java.util.HashMap$Node]
HashMap	java.util.HashMap.TreeNode<K, V>	replacementTreeNode	[java.util.HashMap$Node, java.util.HashMap$Node]
HashMap	void	reinitialize	[]
HashMap	void	afterNodeAccess	[java.util.HashMap$Node]
HashMap	void	afterNodeInsertion	[boolean]
HashMap	void	afterNodeRemoval	[java.util.HashMap$Node]
HashMap	void	internalWriteEntries	[java.io.ObjectOutputStream]
HashSet		java.util.HashSet	[]
HashSet		java.util.HashSet	[java.util.Collection]
HashSet		java.util.HashSet	[int, float]
HashSet		java.util.HashSet	[int]
HashSet		java.util.HashSet	[int, float, boolean]
HashSet	java.util.Iterator<E>	iterator	[]
HashSet	int	size	[]
HashSet	boolean	isEmpty	[]
HashSet	boolean	contains	[java.lang.Object]
HashSet	boolean	add	[E]
HashSet	boolean	remove	[java.lang.Object]
HashSet	void	clear	[]
HashSet	java.lang.Object	clone	[]
HashSet	void	writeObject	[java.io.ObjectOutputStream]
HashSet	void	readObject	[java.io.ObjectInputStream]
HashSet	java.util.Spliterator<E>	spliterator	[]
ListItr		java.util.LinkedList$ListItr	[int]
ListItr	boolean	hasNext	[]
ListItr	E	next	[]
ListItr	boolean	hasPrevious	[]
ListItr	E	previous	[]
ListItr	int	nextIndex	[]
ListItr	int	previousIndex	[]
ListItr	void	remove	[]
ListItr	void	set	[E]
ListItr	void	add	[E]
ListItr	void	forEachRemaining	[java.util.function.Consumer]
ListItr	void	checkForComodification	[]
Node		java.util.LinkedList$Node	[java.util.LinkedList$Node, E, java.util.LinkedList$Node]
DescendingIterator		java.util.LinkedList$DescendingIterator	[]
DescendingIterator	boolean	hasNext	[]
DescendingIterator	E	next	[]
DescendingIterator	void	remove	[]
LLSpliterator		java.util.LinkedList$LLSpliterator	[java.util.LinkedList, int, int]
LLSpliterator	int	getEst	[]
LLSpliterator	long	estimateSize	[]
LLSpliterator	java.util.Spliterator<E>	trySplit	[]
LLSpliterator	void	forEachRemaining	[java.util.function.Consumer]
LLSpliterator	boolean	tryAdvance	[java.util.function.Consumer]
LLSpliterator	int	characteristics	[]
LinkedList		java.util.LinkedList	[]
LinkedList		java.util.LinkedList	[java.util.Collection]
LinkedList	void	linkFirst	[E]
LinkedList	void	linkLast	[E]
LinkedList	void	linkBefore	[E, java.util.LinkedList$Node]
LinkedList	E	unlinkFirst	[java.util.LinkedList$Node]
LinkedList	E	unlinkLast	[java.util.LinkedList$Node]
LinkedList	E	unlink	[java.util.LinkedList$Node]
LinkedList	E	getFirst	[]
LinkedList	E	getLast	[]
LinkedList	E	removeFirst	[]
LinkedList	E	removeLast	[]
LinkedList	void	addFirst	[E]
LinkedList	void	addLast	[E]
LinkedList	boolean	contains	[java.lang.Object]
LinkedList	int	size	[]
LinkedList	boolean	add	[E]
LinkedList	boolean	remove	[java.lang.Object]
LinkedList	boolean	addAll	[java.util.Collection]
LinkedList	boolean	addAll	[int, java.util.Collection]
LinkedList	void	clear	[]
LinkedList	E	get	[int]
LinkedList	E	set	[int, E]
LinkedList	void	add	[int, E]
LinkedList	E	remove	[int]
LinkedList	boolean	isElementIndex	[int]
LinkedList	boolean	isPositionIndex	[int]
LinkedList	java.lang.String	outOfBoundsMsg	[int]
LinkedList	void	checkElementIndex	[int]
LinkedList	void	checkPositionIndex	[int]
LinkedList	java.util.LinkedList.Node<E>	node	[int]
LinkedList	int	indexOf	[java.lang.Object]
LinkedList	int	lastIndexOf	[java.lang.Object]
LinkedList	E	peek	[]
LinkedList	E	element	[]
LinkedList	E	poll	[]
LinkedList	E	remove	[]
LinkedList	boolean	offer	[E]
LinkedList	boolean	offerFirst	[E]
LinkedList	boolean	offerLast	[E]
LinkedList	E	peekFirst	[]
LinkedList	E	peekLast	[]
LinkedList	E	pollFirst	[]
LinkedList	E	pollLast	[]
LinkedList	void	push	[E]
LinkedList	E	pop	[]
LinkedList	boolean	removeFirstOccurrence	[java.lang.Object]
LinkedList	boolean	removeLastOccurrence	[java.lang.Object]
LinkedList	java.util.ListIterator<E>	listIterator	[int]
LinkedList	java.util.Iterator<E>	descendingIterator	[]
LinkedList	java.util.LinkedList<E>	superClone	[]
LinkedList	java.lang.Object	clone	[]
LinkedList	java.lang.Object[]	toArray	[]
LinkedList	T[]	toArray	[T[]]
LinkedList	void	writeObject	[java.io.ObjectOutputStream]
LinkedList	void	readObject	[java.io.ObjectInputStream]
LinkedList	java.util.Spliterator<E>	spliterator	[]
HandyReturnValues		org.mockito.internal.progress.HandyReturnValues	[]
HandyReturnValues	byte	returnZero	[]
HandyReturnValues	char	returnChar	[]
HandyReturnValues	T	returnNull	[]
HandyReturnValues	boolean	returnFalse	[]
HandyReturnValues	java.lang.String	returnString	[]
HandyReturnValues	java.util.Map	returnMap	[]
HandyReturnValues	java.util.List	returnList	[]
HandyReturnValues	java.util.Set	returnSet	[]

org.jsoup.parser.HtmlTreeBuilderState::::734::::37478::::37484::::adopter::::furthestBlock	false
org.jsoup.parser.HtmlTreeBuilderState::::734::::37478::::37484::::adopter::::formatEl	false
org.jsoup.parser.HtmlTreeBuilderState::::730::::37116::::37122::::adopter::::furthestBlock	false
org.jsoup.parser.HtmlTreeBuilderState::::730::::37116::::37122::::adopter::::formatEl	false
org.jsoup.parser.HtmlTreeBuilderState::::728::::36935::::36941::::adopter::::furthestBlock	false
org.jsoup.parser.HtmlTreeBuilderState::::728::::36935::::36941::::adopter::::formatEl	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36550::::36563::::commonAncestor::::furthestBlock	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36550::::36563::::commonAncestor::::formatEl	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36550::::36563::::commonAncestor::::adopter	false
org.jsoup.parser.HtmlTreeBuilderState::::715::::36106::::36119::::commonAncestor::::furthestBlock	false
org.jsoup.parser.HtmlTreeBuilderState::::715::::36106::::36119::::commonAncestor::::formatEl	false
org.jsoup.parser.HtmlTreeBuilderState::::715::::36106::::36119::::commonAncestor::::adopter	false
org.jsoup.parser.HtmlTreeBuilderState::::690::::34637::::34637::::j::::si	false
org.jsoup.parser.HtmlTreeBuilderState::::690::::34637::::34637::::j::::i	false
org.jsoup.parser.HtmlTreeBuilderState::::690::::34630::::34630::::j::::si	false
org.jsoup.parser.HtmlTreeBuilderState::::690::::34630::::34630::::j::::i	false
org.jsoup.parser.HtmlTreeBuilder::::369::::12125::::12129::::after::::contextElement	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36577::::36584::::lastNode::::node	false
org.jsoup.parser.HtmlTreeBuilderState::::721::::36499::::36506::::lastNode::::node	false
org.jsoup.parser.HtmlTreeBuilderState::::720::::36436::::36443::::lastNode::::node	false
org.jsoup.parser.HtmlTreeBuilderState::::733::::37402::::37409::::formatEl::::furthestBlock	false
org.jsoup.parser.HtmlTreeBuilderState::::731::::37192::::37199::::formatEl::::furthestBlock	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33759::::33760::::el::::furthestBlock	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35033::::35040::::formatEl::::furthestBlock	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36577::::36584::::lastNode::::furthestBlock	false
org.jsoup.parser.HtmlTreeBuilderState::::721::::36499::::36506::::lastNode::::furthestBlock	false
org.jsoup.parser.HtmlTreeBuilderState::::720::::36436::::36443::::lastNode::::furthestBlock	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33759::::33760::::el::::node	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33759::::33760::::el::::formatEl	false
org.jsoup.parser.HtmlTreeBuilderState::::715::::36106::::36119::::commonAncestor::::node	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36550::::36563::::commonAncestor::::node	false
org.jsoup.parser.HtmlTreeBuilder::::369::::12125::::12129::::after::::in	false
org.jsoup.parser.HtmlTreeBuilder::::371::::12185::::12187::::i + 1::::i	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36577::::36584::::lastNode::::formatEl	false
org.jsoup.parser.HtmlTreeBuilderState::::721::::36499::::36506::::lastNode::::formatEl	false
org.jsoup.parser.HtmlTreeBuilderState::::720::::36436::::36443::::lastNode::::formatEl	false
org.jsoup.parser.HtmlTreeBuilderState::::715::::36106::::36119::::commonAncestor::::el	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36550::::36563::::commonAncestor::::el	false
org.jsoup.parser.HtmlTreeBuilderState::::734::::37478::::37484::::adopter::::node	false
org.jsoup.parser.HtmlTreeBuilder::::371::::12190::::12191::::in::::contextElement	false
org.jsoup.parser.HtmlTreeBuilderState::::715::::36106::::36119::::commonAncestor::::lastNode	false
org.jsoup.parser.HtmlTreeBuilderState::::728::::36935::::36941::::adopter::::node	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36550::::36563::::commonAncestor::::lastNode	false
org.jsoup.parser.HtmlTreeBuilderState::::730::::37116::::37122::::adopter::::node	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33759::::33760::::el::::lastNode	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35033::::35040::::formatEl::::lastNode	false
org.jsoup.parser.HtmlTreeBuilderState::::691::::34691::::34694::::node::::furthestBlock	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34734::::34737::::node::::furthestBlock	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34757::::34760::::node::::furthestBlock	false
org.jsoup.parser.HtmlTreeBuilderState::::693::::34833::::34836::::node::::furthestBlock	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35025::::35028::::node::::furthestBlock	false
org.jsoup.parser.HtmlTreeBuilderState::::730::::37116::::37122::::adopter::::el	false
org.jsoup.parser.HtmlTreeBuilderState::::731::::37192::::37199::::formatEl::::node	false
org.jsoup.parser.HtmlTreeBuilderState::::734::::37478::::37484::::adopter::::el	false
org.jsoup.parser.HtmlTreeBuilderState::::733::::37402::::37409::::formatEl::::node	false
org.jsoup.parser.HtmlTreeBuilderState::::730::::37116::::37122::::adopter::::lastNode	false
org.jsoup.parser.HtmlTreeBuilderState::::715::::36106::::36119::::commonAncestor::::replacement	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36550::::36563::::commonAncestor::::replacement	false
org.jsoup.parser.HtmlTreeBuilderState::::734::::37478::::37484::::adopter::::lastNode	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33759::::33760::::el::::adopter	false
org.jsoup.parser.HtmlTreeBuilderState::::728::::36935::::36941::::adopter::::lastNode	false
org.jsoup.parser.HtmlTreeBuilderState::::691::::34691::::34694::::node::::formatEl	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34734::::34737::::node::::formatEl	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34757::::34760::::node::::formatEl	false
org.jsoup.parser.HtmlTreeBuilderState::::693::::34833::::34836::::node::::formatEl	false
org.jsoup.parser.HtmlTreeBuilderState::::728::::36935::::36941::::adopter::::el	false
org.jsoup.parser.HtmlTreeBuilderState::::690::::34637::::34637::::j::::i++	false
org.jsoup.parser.HtmlTreeBuilderState::::690::::34630::::34630::::j::::i++	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35025::::35040::::node == formatEl::::el == formatEl	false
org.jsoup.parser.HtmlTreeBuilderState::::731::::37192::::37199::::formatEl::::lastNode	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35025::::35028::::node::::lastNode	false
org.jsoup.parser.HtmlTreeBuilderState::::690::::34637::::34637::::j::::si++	false
org.jsoup.parser.HtmlTreeBuilderState::::690::::34630::::34630::::j::::si++	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35033::::35040::::formatEl::::el	false
org.jsoup.parser.HtmlTreeBuilderState::::733::::37402::::37409::::formatEl::::lastNode	false
org.jsoup.parser.HtmlTreeBuilder::::652::::22896::::22943::::return isElementInQueue(formattingElements, el)::::INSERT::::STATEMENT::::insertNode(el)	false
org.jsoup.parser.HtmlTreeBuilder::::652::::22896::::22943::::return isElementInQueue(formattingElements, el)::::INSERT::::STATEMENT::::insert(el)	false
org.jsoup.parser.HtmlTreeBuilderState::::691::::34691::::34694::::node::::lastNode	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34734::::34737::::node::::lastNode	false
org.jsoup.parser.HtmlTreeBuilder::::357::::11785::::11786::::el::::next	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34757::::34760::::node::::lastNode	false
org.jsoup.parser.HtmlTreeBuilderState::::720::::36436::::36443::::lastNode::::el	false
org.jsoup.parser.HtmlTreeBuilderState::::721::::36499::::36506::::lastNode::::el	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36577::::36584::::lastNode::::el	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33743::::33755::::furthestBlock::::formatEl	false
org.jsoup.parser.HtmlTreeBuilderState::::693::::34833::::34836::::node::::lastNode	false
org.jsoup.parser.HtmlTreeBuilderState::::688::::34536::::34548::::furthestBlock::::formatEl	false
org.jsoup.parser.HtmlTreeBuilderState::::687::::34474::::34486::::furthestBlock::::formatEl	false
org.jsoup.parser.HtmlTreeBuilderState::::726::::36806::::36818::::furthestBlock::::formatEl	false
org.jsoup.parser.HtmlTreeBuilderState::::726::::36762::::36774::::furthestBlock::::formatEl	false
org.jsoup.parser.HtmlTreeBuilder::::361::::11934::::11937::::next::::contextElement	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35025::::35040::::node == formatEl::::formatEl == null	false
org.jsoup.parser.HtmlTreeBuilderState::::734::::37463::::37475::::furthestBlock::::formatEl	false
org.jsoup.parser.HtmlTreeBuilderState::::730::::37116::::37122::::adopter::::replacement	false
org.jsoup.parser.HtmlTreeBuilderState::::734::::37478::::37484::::adopter::::replacement	false
org.jsoup.parser.HtmlTreeBuilderState::::728::::36935::::36941::::adopter::::replacement	false
org.jsoup.parser.HtmlTreeBuilderState::::730::::37090::::37102::::furthestBlock::::formatEl	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36577::::36584::::lastNode::::adopter	false
org.jsoup.parser.HtmlTreeBuilderState::::721::::36499::::36506::::lastNode::::adopter	false
org.jsoup.parser.HtmlTreeBuilderState::::720::::36436::::36443::::lastNode::::adopter	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33759::::33760::::el::::replacement	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33743::::33755::::furthestBlock::::node	false
org.jsoup.parser.HtmlTreeBuilderState::::690::::34630::::34630::::j::::i--	false
org.jsoup.parser.HtmlTreeBuilderState::::726::::36762::::36774::::furthestBlock::::node	false
org.jsoup.parser.HtmlTreeBuilderState::::726::::36806::::36818::::furthestBlock::::node	false
org.jsoup.parser.HtmlTreeBuilderState::::687::::34474::::34486::::furthestBlock::::node	false
org.jsoup.parser.HtmlTreeBuilderState::::688::::34536::::34548::::furthestBlock::::node	false
org.jsoup.parser.HtmlTreeBuilderState::::734::::37463::::37475::::furthestBlock::::node	false
org.jsoup.parser.HtmlTreeBuilder::::652::::22940::::22941::::el::::contextElement	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35033::::35040::::formatEl::::adopter	false
org.jsoup.parser.HtmlTreeBuilderState::::731::::37192::::37199::::formatEl::::el	false
org.jsoup.parser.HtmlTreeBuilderState::::730::::37090::::37102::::furthestBlock::::node	false
org.jsoup.parser.HtmlTreeBuilderState::::690::::34637::::34637::::j::::i--	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35025::::35028::::node::::el	false
org.jsoup.parser.HtmlTreeBuilderState::::733::::37402::::37409::::formatEl::::el	false
org.jsoup.parser.HtmlTreeBuilderState::::731::::37192::::37199::::formatEl::::adopter	false
org.jsoup.parser.HtmlTreeBuilder::::361::::11942::::11943::::el::::contextElement	false
org.jsoup.parser.HtmlTreeBuilderState::::733::::37402::::37409::::formatEl::::adopter	false
org.jsoup.parser.HtmlTreeBuilderState::::730::::37116::::37122::::adopter::::commonAncestor	false
org.jsoup.parser.HtmlTreeBuilder::::357::::11785::::11786::::el::::contextElement	false
org.jsoup.parser.HtmlTreeBuilderState::::730::::37090::::37102::::furthestBlock::::lastNode	false
org.jsoup.parser.HtmlTreeBuilderState::::691::::34691::::34694::::node::::el	false
org.jsoup.parser.HtmlTreeBuilderState::::734::::37478::::37484::::adopter::::commonAncestor	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34734::::34737::::node::::el	false
org.jsoup.parser.HtmlTreeBuilderState::::728::::36935::::36941::::adopter::::commonAncestor	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34757::::34760::::node::::el	false
org.jsoup.parser.HtmlTreeBuilderState::::693::::34833::::34836::::node::::el	false
org.jsoup.parser.HtmlTreeBuilder::::361::::11934::::11943::::next == el::::el == null	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36577::::36584::::lastNode::::replacement	false
org.jsoup.parser.HtmlTreeBuilderState::::721::::36499::::36506::::lastNode::::replacement	false
org.jsoup.parser.HtmlTreeBuilder::::359::::11857::::12004::::while (it.hasNext()) {    org.jsoup.nodes.Element next = it.next();    if (next == el) {        return it.next();    }} ::::INSERT::::STATEMENT::::insertNode(el)	false
org.jsoup.parser.HtmlTreeBuilderState::::720::::36436::::36443::::lastNode::::replacement	false
org.jsoup.parser.HtmlTreeBuilderState::::414::::18824::::18824::::a::::replacement	false
org.jsoup.parser.HtmlTreeBuilderState::::414::::18824::::18824::::a::::node	false
org.jsoup.parser.HtmlTreeBuilderState::::414::::18824::::18824::::a::::lastNode	false
org.jsoup.parser.HtmlTreeBuilderState::::414::::18824::::18824::::a::::furthestBlock	false
org.jsoup.parser.HtmlTreeBuilderState::::414::::18824::::18824::::a::::formatEl	false
org.jsoup.parser.HtmlTreeBuilderState::::414::::18824::::18824::::a::::el	false
org.jsoup.parser.HtmlTreeBuilderState::::414::::18824::::18824::::a::::commonAncestor	false
org.jsoup.parser.HtmlTreeBuilderState::::414::::18824::::18824::::a::::adopter	false
org.jsoup.parser.HtmlTreeBuilderState::::720::::36436::::36460::::(lastNode.parent()) != null::::lastNode == furthestBlock	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33759::::33760::::el::::commonAncestor	false
org.jsoup.parser.HtmlTreeBuilderState::::414::::18824::::18824::::a::::remainingA	false
org.jsoup.parser.HtmlTreeBuilderState::::414::::18824::::18824::::a::::currentForm	false
org.jsoup.parser.HtmlTreeBuilderState::::734::::37463::::37475::::furthestBlock::::lastNode	false
org.jsoup.parser.HtmlTreeBuilderState::::691::::34691::::34694::::node::::adopter	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34734::::34737::::node::::adopter	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34757::::34760::::node::::adopter	false
org.jsoup.parser.HtmlTreeBuilderState::::693::::34833::::34836::::node::::adopter	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33743::::33755::::furthestBlock::::lastNode	false
org.jsoup.parser.HtmlTreeBuilder::::361::::11934::::11943::::next == el::::next == null	false
org.jsoup.parser.HtmlTreeBuilderState::::726::::36762::::36774::::furthestBlock::::lastNode	false
org.jsoup.parser.HtmlTreeBuilderState::::726::::36806::::36818::::furthestBlock::::lastNode	false
org.jsoup.parser.HtmlTreeBuilderState::::687::::34474::::34486::::furthestBlock::::lastNode	false
org.jsoup.parser.HtmlTreeBuilderState::::652::::32311::::32339::::return anyOtherEndTag(t, tb)::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::688::::34536::::34548::::furthestBlock::::lastNode	false
org.jsoup.parser.HtmlTreeBuilderState::::414::::18824::::18824::::a::::second	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.SelfClosingStartTag	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.Data	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.Comment	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.BogusDoctype	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.BeforeAttributeName	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.AttributeName	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.SelfClosingStartTag	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.ScriptDataEscapedLessthanSign	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.ScriptDataEscaped	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.ScriptDataDoubleEscapedLessthanSign	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.ScriptDataDoubleEscaped	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.ScriptData	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.DoctypeSystemIdentifier_singleQuoted	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.DoctypeSystemIdentifier_doubleQuoted	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.DoctypePublicIdentifier_singleQuoted	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.DoctypePublicIdentifier_doubleQuoted	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.Data	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.Comment	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.BogusDoctype	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.BeforeAttributeValue	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.BeforeAttributeName	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.AttributeValue_unquoted	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.AttributeValue_doubleQuoted	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.AttributeName	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.ScriptDataEscaped	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.ScriptDataDoubleEscapedLessthanSign	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.ScriptDataDoubleEscaped	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.DoctypeSystemIdentifier_singleQuoted	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.DoctypeSystemIdentifier_doubleQuoted	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.AttributeValue_unquoted	false
org.jsoup.parser.HtmlTreeBuilder::::287::::9916::::9919::::next::::contextElement	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.DoctypeName	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18122::::18163::::(tb.getActiveFormattingElement("a")) != null::::tb.process(new org.jsoup.parser.Token.StartTag("form"))	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.ScriptDataEscapedLessthanSign	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.BeforeAttributeValue	false
org.jsoup.parser.HtmlTreeBuilderState::::652::::32311::::32339::::return anyOtherEndTag(t, tb)::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.ScriptData	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.DoctypePublicIdentifier_singleQuoted	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.DoctypePublicIdentifier_doubleQuoted	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.CommentStartDash	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.AfterDoctypeSystemIdentifier	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.AfterDoctypePublicIdentifier	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33517::::33530::::commonAncestor::::furthestBlock	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33517::::33530::::commonAncestor::::formatEl	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33517::::33530::::commonAncestor::::adopter	false
org.jsoup.parser.HtmlTreeBuilderState::::671::::33469::::33476::::formatEl::::furthestBlock	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32808::::32815::::formatEl::::furthestBlock	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32628::::32635::::formatEl::::furthestBlock	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.DoctypeName	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.CommentStartDash	false
org.jsoup.parser.HtmlTreeBuilderState::::671::::33463::::33464::::el::::furthestBlock	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33700::::33701::::el::::furthestBlock	false
org.jsoup.parser.HtmlTreeBuilderState::::651::::32261::::32268::::formatEl::::furthestBlock	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32390::::32397::::formatEl::::furthestBlock	false
org.jsoup.parser.HtmlTreeBuilderState::::652::::32311::::32339::::return anyOtherEndTag(t, tb)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("select"))	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.CommentEndDash	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.BeforeDoctypeName	false
org.jsoup.parser.HtmlTreeBuilder::::262::::9215::::9219::::queue::::formattingElements	false
org.jsoup.parser.HtmlTreeBuilder::::582::::20271::::20272::::in::::el	false
org.jsoup.parser.HtmlTreeBuilderState::::730::::37090::::37102::::furthestBlock::::el	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35033::::35040::::formatEl::::replacement	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.CommentEndDash	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.AfterDoctypeSystemIdentifier	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.AfterDoctypePublicIdentifier	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.AfterAttributeName	false
org.jsoup.parser.TokeniserState::::809::::27212::::27219::::org.jsoup.parser.TokeniserState.nullChar::::c	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33700::::33701::::el::::node	false
org.jsoup.parser.HtmlTreeBuilderState::::671::::33463::::33464::::el::::node	false
org.jsoup.parser.HtmlTreeBuilderState::::652::::32311::::32339::::return anyOtherEndTag(t, tb)::::INSERT::::STATEMENT::::tb.process(startTag)	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18122::::18163::::(tb.getActiveFormattingElement("a")) != null::::tb.process(new org.jsoup.parser.Token.EndTag("option"))	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33700::::33701::::el::::formatEl	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33517::::33530::::commonAncestor::::node	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18122::::18163::::(tb.getActiveFormattingElement("a")) != null::::tb.process(new org.jsoup.parser.Token.EndTag("a"))	false
org.jsoup.parser.HtmlTreeBuilder::::362::::11964::::11980::::return it.next()::::INSERT::::STATEMENT::::insertNode(el)	false
org.jsoup.parser.HtmlTreeBuilder::::362::::11964::::11980::::return it.next()::::INSERT::::STATEMENT::::insert(el)	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33544::::33549::::si - 1::::si	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33544::::33549::::si - 1::::si++	false
org.jsoup.parser.HtmlTreeBuilderState::::652::::32311::::32339::::return anyOtherEndTag(t, tb)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18122::::18163::::(tb.getActiveFormattingElement("a")) != null::::tb.process(new org.jsoup.parser.Token.EndTag("p"))	false
org.jsoup.parser.HtmlTreeBuilder::::265::::9336::::9342::::element::::contextElement	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34734::::34762::::node = tb.aboveOnStack(node)::::lastNode = node	false
org.jsoup.parser.HtmlTreeBuilderState::::715::::36092::::36173::::org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33517::::33530::::commonAncestor::::el	false
org.jsoup.parser.Tag::::82::::2641::::2653::::formatAsBlock::::empty	false
org.jsoup.parser.Tag::::82::::2641::::2653::::formatAsBlock::::canContainInline	false
org.jsoup.parser.Tag::::82::::2641::::2653::::formatAsBlock::::canContainBlock	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35025::::35028::::node::::adopter	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34734::::34762::::node = tb.aboveOnStack(node)::::node = replacement	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18122::::18163::::(tb.getActiveFormattingElement("a")) != null::::tb.process(new org.jsoup.parser.Token.StartTag("hr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::414::::18824::::18824::::a::::body	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33517::::33530::::commonAncestor::::lastNode	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.CommentEndBang	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.BeforeDoctypeSystemIdentifier	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.BeforeDoctypePublicIdentifier	false
org.jsoup.parser.HtmlTreeBuilderState::::652::::32311::::32339::::return anyOtherEndTag(t, tb)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::652::::32311::::32339::::return anyOtherEndTag(t, tb)::::INSERT::::STATEMENT::::closeCell(tb)	false
org.jsoup.parser.HtmlTreeBuilder::::359::::11857::::12004::::while (it.hasNext()) {    org.jsoup.nodes.Element next = it.next();    if (next == el) {        return it.next();    }} ::::INSERT::::STATEMENT::::insert(el)	false
org.jsoup.parser.HtmlTreeBuilder::::582::::20271::::20272::::in::::contextElement	false
org.jsoup.parser.HtmlTreeBuilderState::::414::::18824::::18824::::a::::html	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.BetweenDoctypePublicAndSystemIdentifiers	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.AfterDoctypeName	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33700::::33701::::el::::lastNode	false
org.jsoup.parser.HtmlTreeBuilderState::::671::::33463::::33464::::el::::lastNode	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.BeforeDoctypeName	false
org.jsoup.parser.Tag::::82::::2641::::2653::::formatAsBlock::::isBlock	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18122::::18163::::(tb.getActiveFormattingElement("a")) != null::::tb.process(new org.jsoup.parser.Token.EndTag("select"))	false
org.jsoup.parser.HtmlTreeBuilderState::::715::::36092::::36173::::org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("a"))	false
org.jsoup.parser.HtmlTreeBuilderState::::649::::32138::::32138::::i::::si	false
org.jsoup.parser.HtmlTreeBuilderState::::715::::36092::::36173::::org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::734::::37463::::37475::::furthestBlock::::el	false
org.jsoup.parser.HtmlTreeBuilderState::::649::::32131::::32131::::i::::si	false
org.jsoup.parser.HtmlTreeBuilderState::::652::::32311::::32339::::return anyOtherEndTag(t, tb)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("option"))	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18122::::18163::::(tb.getActiveFormattingElement("a")) != null::::tb.process(new org.jsoup.parser.Token.EndTag("tr"))	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.SelfClosingStartTag	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.ScriptDataEscaped	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.ScriptDataDoubleEscaped	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.DoctypeSystemIdentifier_singleQuoted	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.DoctypeSystemIdentifier_doubleQuoted	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.Data	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.Comment	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.BogusDoctype	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.BeforeAttributeName	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.AttributeValue_unquoted	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.AttributeName	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36577::::36584::::lastNode::::commonAncestor	false
org.jsoup.parser.HtmlTreeBuilderState::::721::::36499::::36506::::lastNode::::commonAncestor	false
org.jsoup.parser.HtmlTreeBuilderState::::720::::36436::::36443::::lastNode::::commonAncestor	false
org.jsoup.parser.HtmlTreeBuilderState::::652::::32311::::32339::::return anyOtherEndTag(t, tb)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("p"))	false
org.jsoup.parser.HtmlTreeBuilderState::::652::::32311::::32339::::return anyOtherEndTag(t, tb)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("a"))	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.BogusComment	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36550::::36586::::commonAncestor.appendChild(lastNode)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::652::::32311::::32339::::return anyOtherEndTag(t, tb)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::652::::32311::::32339::::return anyOtherEndTag(t, tb)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("hr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::652::::32311::::32339::::return anyOtherEndTag(t, tb)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.Character(prompt))	false
org.jsoup.parser.HtmlTreeBuilderState::::731::::37192::::37199::::formatEl::::replacement	false
org.jsoup.parser.HtmlTreeBuilderState::::730::::37090::::37102::::furthestBlock::::adopter	false
org.jsoup.parser.HtmlTreeBuilderState::::734::::37463::::37475::::furthestBlock::::adopter	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33743::::33755::::furthestBlock::::adopter	false
org.jsoup.parser.HtmlTreeBuilderState::::726::::36762::::36774::::furthestBlock::::adopter	false
org.jsoup.parser.HtmlTreeBuilderState::::726::::36806::::36818::::furthestBlock::::adopter	false
org.jsoup.parser.HtmlTreeBuilderState::::687::::34474::::34486::::furthestBlock::::adopter	false
org.jsoup.parser.HtmlTreeBuilderState::::688::::34536::::34548::::furthestBlock::::adopter	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33743::::33755::::furthestBlock::::el	false
org.jsoup.parser.Tag::::82::::2641::::2653::::formatAsBlock::::preserveWhitespace	false
org.jsoup.parser.HtmlTreeBuilderState::::733::::37402::::37409::::formatEl::::replacement	false
org.jsoup.parser.HtmlTreeBuilderState::::671::::33469::::33476::::formatEl::::node	false
org.jsoup.parser.HtmlTreeBuilderState::::715::::36092::::36173::::org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.Character(prompt))	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.ScriptDataDoubleEscapedLessthanSign	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32808::::32815::::formatEl::::node	false
org.jsoup.parser.HtmlTreeBuilderState::::651::::32261::::32268::::formatEl::::node	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.ScriptData	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.ScriptDataEscapedDashDash	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33517::::33530::::commonAncestor::::replacement	false
org.jsoup.parser.HtmlTreeBuilderState::::652::::32311::::32339::::return anyOtherEndTag(t, tb)::::INSERT::::STATEMENT::::org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::726::::36762::::36774::::furthestBlock::::el	false
org.jsoup.parser.HtmlTreeBuilderState::::726::::36806::::36818::::furthestBlock::::el	false
org.jsoup.parser.HtmlTreeBuilderState::::687::::34474::::34486::::furthestBlock::::el	false
org.jsoup.parser.HtmlTreeBuilderState::::688::::34536::::34548::::furthestBlock::::el	false
org.jsoup.parser.Token::::118::::3625::::3630::::append::::pendingAttributeName	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.ScriptDataEscapedLessthanSign	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32628::::32635::::formatEl::::node	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32390::::32397::::formatEl::::node	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33700::::33701::::el::::adopter	false
org.jsoup.parser.HtmlTreeBuilderState::::671::::33463::::33464::::el::::adopter	false
org.jsoup.parser.HtmlTreeBuilderState::::715::::36092::::36173::::org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs))	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18122::::18163::::(tb.getActiveFormattingElement("a")) != null::::tb.process(new org.jsoup.parser.Token.StartTag("label"))	false
org.jsoup.parser.HtmlTreeBuilder::::371::::12175::::12193::::stack.add((i + 1), in)::::DELETE::::STATEMENT	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.ScriptDataDoubleEscapedDashDash	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.ScriptDataDoubleEscapedDash	false
org.jsoup.parser.Tag::::82::::2641::::2653::::formatAsBlock::::selfClosing	false
org.jsoup.parser.Token::::118::::3625::::3630::::append::::tagName	false
org.jsoup.parser.HtmlTreeBuilderState::::414::::18824::::18824::::a::::form	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36550::::36586::::commonAncestor.appendChild(lastNode)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("a"))	false
org.jsoup.parser.HtmlTreeBuilderState::::690::::34630::::34630::::j::::si - 1	false
org.jsoup.parser.HtmlTreeBuilderState::::691::::34691::::34694::::node::::replacement	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32785::::32815::::(tb.currentElement()) != formatEl::::el == formatEl	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34734::::34737::::node::::replacement	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.ScriptDataEscapedDash	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.DoctypeName	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34757::::34760::::node::::replacement	false
org.jsoup.parser.HtmlTreeBuilderState::::652::::32311::::32339::::return anyOtherEndTag(t, tb)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs))	false
org.jsoup.parser.HtmlTreeBuilderState::::693::::34833::::34836::::node::::replacement	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.DoctypePublicIdentifier_singleQuoted	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.DoctypePublicIdentifier_doubleQuoted	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33743::::33761::::furthestBlock = el::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::691::::34680::::34695::::tb.onStack(node)::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.HtmlTreeBuilder::::285::::9839::::10010::::while (it.hasNext()) {    org.jsoup.nodes.Element next = it.next();    if (next == el) {        it.remove();        return true;    }} ::::INSERT::::STATEMENT::::insertNode(el)	false
org.jsoup.parser.HtmlTreeBuilderState::::693::::34800::::34837::::!(tb.isInActiveFormattingElements(node))::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::715::::36092::::36173::::org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("p"))	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.BogusComment	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.TagOpen	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.RcdataLessthanSign	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.CommentEnd	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.CharacterReferenceInRcdata	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.CharacterReferenceInData	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36550::::36586::::commonAncestor.appendChild(lastNode)::::INSERT::::STATEMENT::::if (lastNode == furthestBlock) {}	false
org.jsoup.parser.HtmlTreeBuilderState::::697::::35079::::35090::::break INNER::::INSERT::::STATEMENT::::if (node == formatEl)    break INNER;	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35021::::35090::::if (node == formatEl)    break INNER;::::INSERT::::STATEMENT::::if (node == formatEl)    break INNER;	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33743::::33761::::furthestBlock = el::::INSERT::::STATEMENT::::if (lastNode == furthestBlock) {}	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34734::::34762::::node = tb.aboveOnStack(node)::::INSERT::::STATEMENT::::if (lastNode == furthestBlock) {}	false
org.jsoup.parser.HtmlTreeBuilderState::::691::::34680::::34695::::tb.onStack(node)::::INSERT::::STATEMENT::::if (lastNode == furthestBlock) {}	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36550::::36586::::commonAncestor.appendChild(lastNode)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("p"))	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36550::::36586::::commonAncestor.appendChild(lastNode)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.Character(prompt))	false
org.jsoup.parser.HtmlTreeBuilderState::::715::::36092::::36173::::org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::715::::36092::::36173::::org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("hr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::693::::34800::::34837::::!(tb.isInActiveFormattingElements(node))::::INSERT::::STATEMENT::::if (lastNode == furthestBlock) {}	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35033::::35040::::formatEl::::commonAncestor	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34734::::34762::::node = tb.aboveOnStack(node)::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.MarkupDeclarationOpen	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.EndTagOpen	false
org.jsoup.parser.HtmlTreeBuilderState::::715::::36092::::36173::::org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("option"))	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32785::::32815::::(tb.currentElement()) != formatEl::::node == formatEl	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35021::::35090::::if (node == formatEl)    break INNER;::::INSERT::::STATEMENT::::if (lastNode == furthestBlock) {}	false
org.jsoup.parser.HtmlTreeBuilder::::554::::18849::::18876::::java.lang.String name = el.nodeName()::::INSERT::::STATEMENT::::insertNode(el)	false
org.jsoup.parser.HtmlTreeBuilder::::554::::18849::::18876::::java.lang.String name = el.nodeName()::::INSERT::::STATEMENT::::insert(el)	false
org.jsoup.parser.HtmlTreeBuilder::::287::::9916::::9925::::next == el::::el == null	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.ScriptDataEscapedDashDash	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35021::::35090::::if (node == formatEl)    break INNER;::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::697::::35079::::35090::::break INNER::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36550::::36586::::commonAncestor.appendChild(lastNode)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("hr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36550::::36586::::commonAncestor.appendChild(lastNode)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36550::::36586::::commonAncestor.appendChild(lastNode)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("select"))	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36550::::36586::::commonAncestor.appendChild(lastNode)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("option"))	false
org.jsoup.parser.HtmlTreeBuilderState::::715::::36092::::36173::::org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")::::INSERT::::STATEMENT::::if (lastNode == furthestBlock) {}	false
org.jsoup.parser.HtmlTreeBuilder::::287::::9924::::9925::::el::::contextElement	false
org.jsoup.parser.HtmlTreeBuilderState::::715::::36092::::36173::::org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.Tag::::82::::2641::::2653::::formatAsBlock::::formList	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33743::::33761::::furthestBlock = el::::INSERT::::STATEMENT::::if (node == formatEl)    break INNER;	false
org.jsoup.parser.HtmlTreeBuilderState::::697::::35079::::35090::::break INNER::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::697::::35079::::35090::::break INNER::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("option"))	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34734::::34762::::node = tb.aboveOnStack(node)::::INSERT::::STATEMENT::::if (node == formatEl)    break INNER;	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.ScriptDataLessthanSign	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.RawtextLessthanSign	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.CommentStartDash	false
org.jsoup.parser.HtmlTreeBuilderState::::715::::36092::::36173::::org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35025::::35028::::node::::replacement	false
org.jsoup.parser.HtmlTreeBuilderState::::652::::32311::::32339::::return anyOtherEndTag(t, tb)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::715::::36092::::36173::::org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("select"))	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36550::::36586::::commonAncestor.appendChild(lastNode)::::INSERT::::STATEMENT::::if (node == formatEl)    break INNER;	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.CommentEndDash	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36550::::36586::::commonAncestor.appendChild(lastNode)::::INSERT::::STATEMENT::::tb.process(startTag)	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36550::::36586::::commonAncestor.appendChild(lastNode)::::INSERT::::STATEMENT::::org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::669::::33329::::33345::::si < (stack.size())::::si < 64	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.AttributeValue_doubleQuoted	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.AfterDoctypeSystemIdentifier	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.AfterDoctypePublicIdentifier	false
org.jsoup.parser.HtmlTreeBuilder::::258::::9047::::9081::::return isElementInQueue(stack, el)::::INSERT::::STATEMENT::::insertNode(el)	false
org.jsoup.parser.HtmlTreeBuilder::::258::::9047::::9081::::return isElementInQueue(stack, el)::::INSERT::::STATEMENT::::insert(el)	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33662::::33702::::seenFormattingElement && (tb.isSpecial(el))::::el == formatEl	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32785::::32815::::(tb.currentElement()) != formatEl::::formatEl == null	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18122::::18163::::(tb.getActiveFormattingElement("a")) != null::::tb.process(new org.jsoup.parser.Token.EndTag("nobr"))	false
org.jsoup.parser.HtmlTreeBuilder::::265::::9328::::9342::::next == element::::next == null	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34734::::34762::::node = tb.aboveOnStack(node)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("p"))	false
org.jsoup.parser.HtmlTreeBuilder::::371::::12175::::12193::::stack.add((i + 1), in)::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.HtmlTreeBuilderState::::766::::38824::::38857::::java.lang.String name = t.asEndTag().name()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36550::::36586::::commonAncestor.appendChild(lastNode)::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36550::::36586::::commonAncestor.appendChild(lastNode)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36550::::36586::::commonAncestor.appendChild(lastNode)::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::671::::33463::::33476::::el == formatEl::::formatEl == null	false
org.jsoup.parser.Tag::::82::::2641::::2653::::formatAsBlock::::formSubmit	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18122::::18163::::(tb.getActiveFormattingElement("a")) != null::::tb.process(new org.jsoup.parser.Token.Character(prompt))	false
org.jsoup.parser.HtmlTreeBuilderState::::679::::33902::::33914::::furthestBlock::::formatEl	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.Rcdata	false
org.jsoup.parser.HtmlTreeBuilderState::::715::::36092::::36173::::org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("li"))	false
org.jsoup.parser.HtmlTreeBuilderState::::691::::34680::::34695::::tb.onStack(node)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("p"))	false
org.jsoup.parser.HtmlTreeBuilder::::644::::22736::::22739::::next::::contextElement	false
org.jsoup.parser.HtmlTreeBuilderState::::731::::37192::::37199::::formatEl::::commonAncestor	false
org.jsoup.parser.HtmlTreeBuilderState::::693::::34800::::34837::::!(tb.isInActiveFormattingElements(node))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("p"))	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18122::::18163::::(tb.getActiveFormattingElement("a")) != null::::tb.process(new org.jsoup.parser.Token.EndTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18122::::18163::::(tb.getActiveFormattingElement("a")) != null::::tb.process(new org.jsoup.parser.Token.StartTag("head"))	false
org.jsoup.parser.HtmlTreeBuilderState::::768::::38937::::38986::::java.util.Iterator<org.jsoup.nodes.Element> it = stack.descendingIterator()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::767::::38871::::38923::::org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> stack = tb.getStack()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36550::::36586::::commonAncestor.appendChild(lastNode)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs))	false
org.jsoup.parser.HtmlTreeBuilderState::::669::::33329::::33330::::si::::i	false
org.jsoup.parser.HtmlTreeBuilderState::::669::::33350::::33351::::si::::i	false
org.jsoup.parser.HtmlTreeBuilderState::::669::::33359::::33360::::si::::i	false
org.jsoup.parser.HtmlTreeBuilderState::::670::::33422::::33423::::si::::i	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33544::::33545::::si::::i	false
org.jsoup.parser.HtmlTreeBuilder::::652::::22896::::22943::::return isElementInQueue(formattingElements, el)::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.HtmlTreeBuilder::::652::::22896::::22943::::return isElementInQueue(formattingElements, el)::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.HtmlTreeBuilderState::::733::::37402::::37409::::formatEl::::commonAncestor	false
org.jsoup.parser.HtmlTreeBuilder::::287::::9916::::9925::::next == el::::next == null	false
org.jsoup.parser.HtmlTreeBuilderState::::715::::36092::::36173::::org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")::::INSERT::::STATEMENT::::tb.process(startTag)	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.AfterAttributeName	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33743::::33761::::furthestBlock = el::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("p"))	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.BeforeDoctypeName	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32390::::32397::::formatEl::::lastNode	false
org.jsoup.parser.HtmlTreeBuilderState::::715::::36092::::36173::::org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.HtmlTreeBuilderState::::652::::32311::::32339::::return anyOtherEndTag(t, tb)::::INSERT::::STATEMENT::::if (lastNode == furthestBlock) {}	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35021::::35090::::if (node == formatEl)    break INNER;::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("p"))	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18122::::18163::::(tb.getActiveFormattingElement("a")) != null::::tb.process(new org.jsoup.parser.Token.EndTag("li"))	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.ScriptDataEscapeStart	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.ScriptDataEndTagOpen	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32628::::32635::::formatEl::::lastNode	false
org.jsoup.parser.HtmlTreeBuilderState::::715::::36092::::36173::::org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("nobr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::671::::33469::::33476::::formatEl::::lastNode	false
org.jsoup.parser.HtmlTreeBuilderState::::651::::32261::::32268::::formatEl::::lastNode	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32808::::32815::::formatEl::::lastNode	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36550::::36586::::commonAncestor.appendChild(lastNode)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("head"))	false
org.jsoup.parser.HtmlTreeBuilderState::::715::::36092::::36173::::org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")::::INSERT::::STATEMENT::::org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::715::::36092::::36173::::org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("head"))	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36550::::36586::::commonAncestor.appendChild(lastNode)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("nobr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18122::::18163::::(tb.getActiveFormattingElement("a")) != null::::tb.process(t)	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18122::::18163::::(tb.getActiveFormattingElement("a")) != null::::anythingElse(t, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::690::::34637::::34637::::j::::si - 1	false
org.jsoup.parser.HtmlTreeBuilder::::554::::18863::::18864::::el::::contextElement	false
org.jsoup.parser.HtmlTreeBuilderState::::766::::38824::::38857::::java.lang.String name = t.asEndTag().name()::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::652::::32311::::32339::::return anyOtherEndTag(t, tb)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("head"))	false
org.jsoup.parser.HtmlTreeBuilder::::358::::11798::::11847::::java.util.Iterator<org.jsoup.nodes.Element> it = stack.descendingIterator()::::INSERT::::STATEMENT::::insertNode(el)	false
org.jsoup.parser.HtmlTreeBuilder::::582::::20248::::20274::::formattingElements.add(in)::::INSERT::::STATEMENT::::insertNode(el)	false
org.jsoup.parser.HtmlTreeBuilder::::582::::20248::::20274::::formattingElements.add(in)::::INSERT::::STATEMENT::::insert(el)	false
org.jsoup.parser.HtmlTreeBuilderState::::766::::38824::::38857::::java.lang.String name = t.asEndTag().name()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("a"))	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18122::::18163::::(tb.getActiveFormattingElement("a")) != null::::tb.process(new org.jsoup.parser.Token.EndTag("table"))	false
org.jsoup.parser.TokeniserState::::814::::27372::::27372::::c::::org.jsoup.parser.TokeniserState.nullChar	false
org.jsoup.parser.HtmlTreeBuilderState::::768::::38937::::38986::::java.util.Iterator<org.jsoup.nodes.Element> it = stack.descendingIterator()::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::767::::38871::::38923::::org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> stack = tb.getStack()::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.HtmlTreeBuilder::::659::::23167::::23170::::next::::contextElement	false
org.jsoup.parser.Token::::117::::3560::::3582::::ensureAttributeValue()::::INSERT::::STATEMENT::::ensureAttributeValue()	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.CommentEndBang	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.BeforeDoctypeSystemIdentifier	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.BeforeDoctypePublicIdentifier	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.AfterDoctypeName	false
org.jsoup.parser.HtmlTreeBuilder::::362::::11964::::11980::::return it.next()::::INSERT::::STATEMENT::::if (el == null)    break;	false
org.jsoup.parser.HtmlTreeBuilderState::::671::::33463::::33464::::el::::replacement	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.Rcdata	false
org.jsoup.parser.HtmlTreeBuilderState::::715::::36092::::36173::::org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")::::INSERT::::STATEMENT::::closeCell(tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36550::::36586::::commonAncestor.appendChild(lastNode)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("li"))	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33700::::33701::::el::::replacement	false
org.jsoup.parser.HtmlTreeBuilderState::::679::::33902::::33914::::furthestBlock::::node	false
org.jsoup.parser.HtmlTreeBuilderState::::652::::32311::::32339::::return anyOtherEndTag(t, tb)::::INSERT::::STATEMENT::::if (node == formatEl)    break INNER;	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.BetweenDoctypePublicAndSystemIdentifiers	false
org.jsoup.parser.HtmlTreeBuilder::::371::::12190::::12191::::in::::after	false
org.jsoup.parser.HtmlTreeBuilderState::::715::::36092::::36173::::org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag(name))	false
org.jsoup.parser.HtmlTreeBuilder::::285::::9839::::10010::::while (it.hasNext()) {    org.jsoup.nodes.Element next = it.next();    if (next == el) {        it.remove();        return true;    }} ::::INSERT::::STATEMENT::::insert(el)	false
org.jsoup.parser.HtmlTreeBuilderState::::691::::34691::::34694::::node::::commonAncestor	false
org.jsoup.parser.HtmlTreeBuilder::::371::::12175::::12193::::stack.add((i + 1), in)::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34734::::34737::::node::::commonAncestor	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34757::::34760::::node::::commonAncestor	false
org.jsoup.parser.HtmlTreeBuilderState::::693::::34833::::34836::::node::::commonAncestor	false
org.jsoup.parser.HtmlTreeBuilderState::::721::::36499::::36506::::lastNode::::startTag.attributes	false
org.jsoup.parser.TokeniserState::::809::::27212::::27219::::org.jsoup.parser.TokeniserState.nullChar::::org.jsoup.parser.TokeniserState.replacementChar	false
org.jsoup.parser.HtmlTreeBuilderState::::766::::38824::::38857::::java.lang.String name = t.asEndTag().name()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("tr"))	false
org.jsoup.parser.TokeniserState::::888::::30063::::30063::::c::::org.jsoup.parser.TokeniserState.nullChar	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.BogusComment	false
org.jsoup.parser.HtmlTreeBuilderState::::715::::36092::::36173::::org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")::::INSERT::::STATEMENT::::if (notIgnored)    return tb.process(endTag);	false
org.jsoup.parser.HtmlTreeBuilderState::::691::::34680::::34695::::tb.onStack(node)::::INSERT::::STATEMENT::::if (node == formatEl)    break INNER;	false
org.jsoup.parser.HtmlTreeBuilderState::::693::::34800::::34837::::!(tb.isInActiveFormattingElements(node))::::INSERT::::STATEMENT::::if (node == formatEl)    break INNER;	false
org.jsoup.parser.HtmlTreeBuilder::::369::::12099::::12131::::int i = stack.lastIndexOf(after)::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32785::::32815::::(tb.currentElement()) != formatEl::::anythingElse(t, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36550::::36586::::commonAncestor.appendChild(lastNode)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36550::::36586::::commonAncestor.appendChild(lastNode)::::INSERT::::STATEMENT::::closeCell(tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::769::::39000::::39554::::while (it.hasNext()) {    org.jsoup.nodes.Element node = it.next();    if (node.nodeName().equals(name)) {        tb.generateImpliedEndTags(name);        if (!(name.equals(tb.currentElement().nodeName())))            tb.error(this);        tb.popStackToClose(name);        break;    }else {        if (tb.isSpecial(node)) {            tb.error(this);            return false;        }    }} ::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33662::::33702::::seenFormattingElement && (tb.isSpecial(el))::::seenFormattingElement	false
org.jsoup.parser.HtmlTreeBuilderState::::766::::38824::::38857::::java.lang.String name = t.asEndTag().name()::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.HtmlTreeBuilderState::::766::::38824::::38857::::java.lang.String name = t.asEndTag().name()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("hr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18122::::18163::::(tb.getActiveFormattingElement("a")) != null::::tb.process(startTag)	false
org.jsoup.parser.TokeniserState::::809::::27212::::27219::::org.jsoup.parser.TokeniserState.nullChar::::org.jsoup.parser.TokeniserState.eof	false
org.jsoup.parser.HtmlTreeBuilder::::568::::19853::::19917::::java.util.Iterator<org.jsoup.nodes.Element> iter = formattingElements.descendingIterator()::::INSERT::::STATEMENT::::insertNode(el)	false
org.jsoup.parser.HtmlTreeBuilderState::::721::::36499::::36516::::lastNode.remove()::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::766::::38824::::38857::::java.lang.String name = t.asEndTag().name()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("option"))	false
org.jsoup.parser.HtmlTreeBuilderState::::768::::38937::::38986::::java.util.Iterator<org.jsoup.nodes.Element> it = stack.descendingIterator()::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.HtmlTreeBuilderState::::767::::38871::::38923::::org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> stack = tb.getStack()::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36550::::36586::::commonAncestor.appendChild(lastNode)::::DELETE::::STATEMENT	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18122::::18163::::(tb.getActiveFormattingElement("a")) != null::::tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs))	false
org.jsoup.parser.HtmlTreeBuilderState::::730::::37090::::37102::::furthestBlock::::replacement	false
org.jsoup.parser.HtmlTreeBuilderState::::652::::32311::::32339::::return anyOtherEndTag(t, tb)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("nobr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::697::::35079::::35090::::break INNER::::INSERT::::STATEMENT::::if (lastNode == furthestBlock) {}	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32785::::32815::::(tb.currentElement()) != formatEl::::tb.process(t)	false
org.jsoup.parser.HtmlTreeBuilder::::258::::9078::::9079::::el::::contextElement	false
org.jsoup.parser.HtmlTreeBuilderState::::768::::38937::::38986::::java.util.Iterator<org.jsoup.nodes.Element> it = stack.descendingIterator()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("option"))	false
org.jsoup.parser.HtmlTreeBuilderState::::767::::38871::::38923::::org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> stack = tb.getStack()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("option"))	false
org.jsoup.parser.HtmlTreeBuilderState::::715::::36106::::36119::::commonAncestor::::currentForm	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36550::::36563::::commonAncestor::::currentForm	false
org.jsoup.parser.HtmlTreeBuilderState::::734::::37463::::37475::::furthestBlock::::replacement	false
org.jsoup.parser.HtmlTreeBuilderState::::766::::38824::::38857::::java.lang.String name = t.asEndTag().name()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("p"))	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.ScriptDataDoubleEscapedDash	false
org.jsoup.parser.HtmlTreeBuilderState::::768::::38937::::38986::::java.util.Iterator<org.jsoup.nodes.Element> it = stack.descendingIterator()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("hr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::767::::38871::::38923::::org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> stack = tb.getStack()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("hr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::652::::32311::::32339::::return anyOtherEndTag(t, tb)::::INSERT::::STATEMENT::::if (notIgnored)    return tb.process(endTag);	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.ScriptDataEscapedDashDash	false
org.jsoup.parser.HtmlTreeBuilder::::644::::22744::::22745::::el::::contextElement	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33743::::33755::::furthestBlock::::replacement	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34734::::34762::::node = tb.aboveOnStack(node)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::691::::34680::::34695::::tb.onStack(node)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::726::::36762::::36774::::furthestBlock::::replacement	false
org.jsoup.parser.HtmlTreeBuilderState::::726::::36806::::36818::::furthestBlock::::replacement	false
org.jsoup.parser.HtmlTreeBuilderState::::687::::34474::::34486::::furthestBlock::::replacement	false
org.jsoup.parser.HtmlTreeBuilderState::::768::::38937::::38986::::java.util.Iterator<org.jsoup.nodes.Element> it = stack.descendingIterator()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("a"))	false
org.jsoup.parser.HtmlTreeBuilderState::::767::::38871::::38923::::org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> stack = tb.getStack()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("a"))	false
org.jsoup.parser.HtmlTreeBuilderState::::688::::34536::::34548::::furthestBlock::::replacement	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.ScriptDataDoubleEscapedDashDash	false
org.jsoup.parser.HtmlTreeBuilderState::::693::::34800::::34837::::!(tb.isInActiveFormattingElements(node))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("form"))	false
org.jsoup.parser.HtmlTreeBuilder::::641::::22587::::22649::::java.util.Iterator<org.jsoup.nodes.Element> it = formattingElements.descendingIterator()::::INSERT::::STATEMENT::::insertNode(el)	false
org.jsoup.parser.HtmlTreeBuilderState::::766::::38824::::38857::::java.lang.String name = t.asEndTag().name()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("select"))	false
org.jsoup.parser.HtmlTreeBuilderState::::721::::36499::::36516::::lastNode.remove()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("p"))	false
org.jsoup.parser.HtmlTreeBuilderState::::697::::35079::::35090::::break INNER::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("p"))	false
org.jsoup.parser.HtmlTreeBuilderState::::697::::35079::::35090::::break INNER::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("optgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::697::::35079::::35090::::break INNER::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("li"))	false
org.jsoup.parser.HtmlTreeBuilderState::::697::::35079::::35090::::break INNER::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("a"))	false
org.jsoup.parser.HtmlTreeBuilderState::::721::::36499::::36516::::lastNode.remove()::::INSERT::::STATEMENT::::if (lastNode == furthestBlock) {}	false
org.jsoup.parser.HtmlTreeBuilderState::::414::::18792::::18826::::tb.pushActiveFormattingElements(a)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::414::::18792::::18826::::tb.pushActiveFormattingElements(a)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::414::::18792::::18826::::tb.pushActiveFormattingElements(a)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("a"))	false
org.jsoup.parser.HtmlTreeBuilderState::::414::::18792::::18826::::tb.pushActiveFormattingElements(a)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.Character(prompt))	false
org.jsoup.parser.HtmlTreeBuilderState::::413::::18735::::18766::::org.jsoup.nodes.Element a = tb.insert(startTag)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::768::::38937::::38986::::java.util.Iterator<org.jsoup.nodes.Element> it = stack.descendingIterator()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("p"))	false
org.jsoup.parser.HtmlTreeBuilderState::::767::::38871::::38923::::org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> stack = tb.getStack()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("p"))	false
org.jsoup.parser.HtmlTreeBuilderState::::671::::33469::::33476::::formatEl::::adopter	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35025::::35028::::node::::commonAncestor	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.ScriptDataEscapedDash	false
org.jsoup.parser.HtmlTreeBuilderState::::715::::36092::::36173::::org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("body"))	false
org.jsoup.parser.HtmlTreeBuilderState::::721::::36499::::36516::::lastNode.remove()::::INSERT::::STATEMENT::::if (node == formatEl)    break INNER;	false
org.jsoup.parser.HtmlTreeBuilderState::::715::::36092::::36173::::org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32390::::32397::::formatEl::::adopter	false
org.jsoup.parser.HtmlTreeBuilderState::::652::::32311::::32339::::return anyOtherEndTag(t, tb)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("li"))	false
org.jsoup.parser.HtmlTreeBuilderState::::652::::32311::::32339::::return anyOtherEndTag(t, tb)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32628::::32635::::formatEl::::adopter	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18122::::18163::::(tb.getActiveFormattingElement("a")) != null::::tb.process(new org.jsoup.parser.Token.EndTag("button"))	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18122::::18163::::(tb.getActiveFormattingElement("a")) != null::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InBody)	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32808::::32815::::formatEl::::adopter	false
org.jsoup.parser.HtmlTreeBuilderState::::651::::32261::::32268::::formatEl::::adopter	false
org.jsoup.parser.Token::::61::::1763::::1791::::(pendingAttributeValue) == null::::(pendingAttributeValue) != null	false
org.jsoup.parser.Token::::132::::4007::::4035::::(pendingAttributeValue) == null::::(pendingAttributeValue) != null	false
org.jsoup.parser.HtmlTreeBuilderState::::766::::38824::::38857::::java.lang.String name = t.asEndTag().name()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("label"))	false
org.jsoup.parser.TokeniserState::::732::::24443::::24443::::c::::org.jsoup.parser.TokeniserState.nullChar	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34734::::34762::::node = tb.aboveOnStack(node)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("option"))	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.TagOpen	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.RcdataLessthanSign	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.CommentEnd	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.CharacterReferenceInRcdata	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.CharacterReferenceInData	false
org.jsoup.parser.HtmlTreeBuilder::::369::::12099::::12131::::int i = stack.lastIndexOf(after)::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.HtmlTreeBuilderState::::715::::36092::::36173::::org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("optgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36550::::36586::::commonAncestor.appendChild(lastNode)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag(name))	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35021::::35090::::if (node == formatEl)    break INNER;::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33743::::33761::::furthestBlock = el::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32390::::32397::::formatEl::::el	false
org.jsoup.parser.HtmlTreeBuilder::::568::::19853::::19917::::java.util.Iterator<org.jsoup.nodes.Element> iter = formattingElements.descendingIterator()::::INSERT::::STATEMENT::::insert(el)	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36550::::36586::::commonAncestor.appendChild(lastNode)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("button"))	false
org.jsoup.parser.HtmlTreeBuilderState::::413::::18735::::18766::::org.jsoup.nodes.Element a = tb.insert(startTag)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::413::::18735::::18766::::org.jsoup.nodes.Element a = tb.insert(startTag)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("a"))	false
org.jsoup.parser.HtmlTreeBuilderState::::768::::38937::::38986::::java.util.Iterator<org.jsoup.nodes.Element> it = stack.descendingIterator()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::767::::38871::::38923::::org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> stack = tb.getStack()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::669::::33334::::33338::::stack::::startTag.attributes	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32628::::32635::::formatEl::::el	false
org.jsoup.parser.HtmlTreeBuilderState::::691::::34680::::34695::::tb.onStack(node)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("option"))	false
org.jsoup.parser.HtmlTreeBuilderState::::414::::18792::::18826::::tb.pushActiveFormattingElements(a)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs))	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.RCDATAEndTagName	false
org.jsoup.parser.HtmlTreeBuilderState::::715::::36106::::36119::::commonAncestor::::remainingA	false
org.jsoup.parser.HtmlTreeBuilderState::::693::::34800::::34837::::!(tb.isInActiveFormattingElements(node))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("option"))	false
org.jsoup.parser.HtmlTreeBuilderState::::651::::32261::::32268::::formatEl::::el	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18122::::18163::::(tb.getActiveFormattingElement("a")) != null::::tb.process(new org.jsoup.parser.Token.EndTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18122::::18163::::(tb.getActiveFormattingElement("a")) != null::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.HtmlTreeBuilderState::::670::::33412::::33416::::stack::::startTag.attributes	false
org.jsoup.parser.HtmlTreeBuilderState::::768::::38937::::38986::::java.util.Iterator<org.jsoup.nodes.Element> it = stack.descendingIterator()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("select"))	false
org.jsoup.parser.HtmlTreeBuilderState::::767::::38871::::38923::::org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> stack = tb.getStack()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("select"))	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32808::::32815::::formatEl::::el	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.MarkupDeclarationOpen	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.EndTagOpen	false
org.jsoup.parser.HtmlTreeBuilder::::265::::9328::::9331::::next::::contextElement	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33534::::33538::::stack::::startTag.attributes	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33662::::33702::::seenFormattingElement && (tb.isSpecial(el))::::anythingElse(t, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::715::::36092::::36173::::org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("button"))	false
org.jsoup.parser.HtmlTreeBuilder::::644::::22736::::22745::::next == el::::el == null	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18122::::18163::::(tb.getActiveFormattingElement("a")) != null::::tb.process(new org.jsoup.parser.Token.EndTag("caption"))	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18122::::18163::::(tb.getActiveFormattingElement("a")) != null::::tb.process(new org.jsoup.parser.Token.EndTag("body"))	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35021::::35090::::if (node == formatEl)    break INNER;::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("option"))	false
org.jsoup.parser.HtmlTreeBuilderState::::413::::18735::::18766::::org.jsoup.nodes.Element a = tb.insert(startTag)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.Character(prompt))	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33743::::33761::::furthestBlock = el::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("option"))	false
org.jsoup.parser.HtmlTreeBuilderState::::414::::18792::::18826::::tb.pushActiveFormattingElements(a)::::INSERT::::STATEMENT::::tb.process(startTag)	false
org.jsoup.parser.HtmlTreeBuilderState::::414::::18792::::18826::::tb.pushActiveFormattingElements(a)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("nobr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::414::::18792::::18826::::tb.pushActiveFormattingElements(a)::::INSERT::::STATEMENT::::org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::652::::32311::::32339::::return anyOtherEndTag(t, tb)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag(name))	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.AttributeValue_doubleQuoted	false
org.jsoup.parser.HtmlTreeBuilderState::::784::::39568::::39579::::return true::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.HtmlTreeBuilder::::661::::23241::::23244::::next::::contextElement	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36550::::36563::::commonAncestor::::remainingA	false
org.jsoup.parser.HtmlTreeBuilderState::::715::::36092::::36173::::org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tbody"))	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.ScriptDataLessthanSign	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.RawtextLessthanSign	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.ScriptDataEscapedEndTagName	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.ScriptDataDoubleEscapeStart	false
org.jsoup.parser.HtmlTreeBuilderState::::715::::36092::::36173::::org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("colgroup"))	false
org.jsoup.parser.Token::::64::::1956::::1976::::pendingAttributeValue::::attributes	false
org.jsoup.parser.HtmlTreeBuilderState::::697::::35079::::35090::::break INNER::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32785::::32815::::(tb.currentElement()) != formatEl::::tb.process(new org.jsoup.parser.Token.EndTag("p"))	false
org.jsoup.parser.HtmlTreeBuilderState::::671::::33463::::33464::::el::::commonAncestor	false
org.jsoup.parser.HtmlTreeBuilder::::567::::19828::::19843::::int numSeen = 0::::INSERT::::STATEMENT::::insertNode(el)	false
org.jsoup.parser.HtmlTreeBuilderState::::413::::18735::::18766::::org.jsoup.nodes.Element a = tb.insert(startTag)::::INSERT::::STATEMENT::::tb.process(startTag)	false
org.jsoup.parser.HtmlTreeBuilderState::::413::::18735::::18766::::org.jsoup.nodes.Element a = tb.insert(startTag)::::INSERT::::STATEMENT::::org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33700::::33701::::el::::commonAncestor	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18122::::18163::::(tb.getActiveFormattingElement("a")) != null::::tb.process(new org.jsoup.parser.Token.EndTag("optgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::413::::18735::::18766::::org.jsoup.nodes.Element a = tb.insert(startTag)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs))	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.Rcdata	false
org.jsoup.parser.HtmlTreeBuilderState::::715::::36092::::36173::::org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilder::::642::::22659::::22824::::while (it.hasNext()) {    org.jsoup.nodes.Element next = it.next();    if (next == el) {        it.remove();        break;    }} ::::INSERT::::STATEMENT::::insertNode(el)	false
org.jsoup.parser.HtmlTreeBuilder::::358::::11798::::11847::::java.util.Iterator<org.jsoup.nodes.Element> it = stack.descendingIterator()::::INSERT::::STATEMENT::::insert(el)	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18122::::18163::::(tb.getActiveFormattingElement("a")) != null::::anyOtherEndTag(t, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18122::::18163::::(tb.getActiveFormattingElement("a")) != null::::tb.process(endTag)	false
org.jsoup.parser.HtmlTreeBuilderState::::671::::33463::::33476::::el == formatEl::::node == formatEl	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33662::::33702::::seenFormattingElement && (tb.isSpecial(el))::::tb.process(t)	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.AfterAttributeName	false
org.jsoup.parser.HtmlTreeBuilderState::::414::::18792::::18826::::tb.pushActiveFormattingElements(a)::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.HtmlTreeBuilderState::::414::::18792::::18826::::tb.pushActiveFormattingElements(a)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::414::::18792::::18826::::tb.pushActiveFormattingElements(a)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("hr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::414::::18792::::18826::::tb.pushActiveFormattingElements(a)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::414::::18792::::18826::::tb.pushActiveFormattingElements(a)::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36550::::36586::::commonAncestor.appendChild(lastNode)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("br"))	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36550::::36586::::commonAncestor.appendChild(lastNode)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18122::::18163::::(tb.getActiveFormattingElement("a")) != null::::tb.process(new org.jsoup.parser.Token.StartTag("tbody"))	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36550::::36586::::commonAncestor.appendChild(lastNode)::::INSERT::::STATEMENT::::if (notIgnored)    return tb.process(endTag);	false
org.jsoup.parser.HtmlTreeBuilderState::::413::::18735::::18766::::org.jsoup.nodes.Element a = tb.insert(startTag)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("nobr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18122::::18163::::(tb.getActiveFormattingElement("a")) != null::::tb.process(new org.jsoup.parser.Token.StartTag("br"))	false
org.jsoup.parser.HtmlTreeBuilderState::::715::::36092::::36173::::org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("noscript"))	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.Rawtext	false
org.jsoup.parser.HtmlTreeBuilder::::644::::22736::::22745::::next == el::::next == null	false
org.jsoup.parser.HtmlTreeBuilderState::::679::::33902::::33914::::furthestBlock::::lastNode	false
org.jsoup.parser.HtmlTreeBuilder::::662::::23298::::23301::::next::::contextElement	false
org.jsoup.parser.HtmlTreeBuilderState::::715::::36092::::36173::::org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")::::INSERT::::STATEMENT::::if (node == formatEl)    break INNER;	false
org.jsoup.parser.HtmlTreeBuilderState::::768::::38937::::38986::::java.util.Iterator<org.jsoup.nodes.Element> it = stack.descendingIterator()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::767::::38871::::38923::::org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> stack = tb.getStack()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::766::::38824::::38857::::java.lang.String name = t.asEndTag().name()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("head"))	false
org.jsoup.parser.HtmlTreeBuilderState::::766::::38824::::38857::::java.lang.String name = t.asEndTag().name()::::INSERT::::STATEMENT::::closeCell(tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::414::::18792::::18826::::tb.pushActiveFormattingElements(a)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("select"))	false
org.jsoup.parser.HtmlTreeBuilderState::::414::::18792::::18826::::tb.pushActiveFormattingElements(a)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("p"))	false
org.jsoup.parser.HtmlTreeBuilderState::::414::::18792::::18826::::tb.pushActiveFormattingElements(a)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("option"))	false
org.jsoup.parser.HtmlTreeBuilderState::::414::::18792::::18826::::tb.pushActiveFormattingElements(a)::::INSERT::::STATEMENT::::closeCell(tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::715::::36092::::36173::::org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("br"))	false
org.jsoup.parser.HtmlTreeBuilderState::::715::::36092::::36173::::org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("th"))	false
org.jsoup.parser.HtmlTreeBuilderState::::715::::36092::::36173::::org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("td"))	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.TagName	false
org.jsoup.parser.HtmlTreeBuilderState::::730::::37090::::37102::::furthestBlock::::commonAncestor	false
org.jsoup.parser.HtmlTreeBuilderState::::412::::18675::::18709::::tb.reconstructFormattingElements()::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.HtmlTreeBuilder::::567::::19828::::19843::::int numSeen = 0::::INSERT::::STATEMENT::::insert(el)	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36550::::36586::::commonAncestor.appendChild(lastNode)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tbody"))	false
org.jsoup.parser.HtmlTreeBuilderState::::766::::38824::::38857::::java.lang.String name = t.asEndTag().name()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("li"))	false
org.jsoup.parser.HtmlTreeBuilderState::::775::::39300::::39324::::tb.popStackToClose(name)::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::775::::39300::::39324::::tb.popStackToClose(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("p"))	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18122::::18163::::(tb.getActiveFormattingElement("a")) != null::::tb.process(new org.jsoup.parser.Token.StartTag("colgroup"))	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.ScriptDataEscapeStart	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.ScriptDataEndTagOpen	false
org.jsoup.parser.HtmlTreeBuilderState::::734::::37463::::37475::::furthestBlock::::commonAncestor	false
org.jsoup.parser.HtmlTreeBuilder::::641::::22587::::22649::::java.util.Iterator<org.jsoup.nodes.Element> it = formattingElements.descendingIterator()::::INSERT::::STATEMENT::::insert(el)	false
org.jsoup.parser.HtmlTreeBuilder::::370::::12141::::12165::::org.jsoup.helper.Validate.isTrue((i != (-1)))::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.HtmlTreeBuilderState::::766::::38824::::38857::::java.lang.String name = t.asEndTag().name()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag(name))	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.CommentEndBang	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.BeforeDoctypeSystemIdentifier	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.BeforeDoctypePublicIdentifier	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.AfterDoctypeName	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33743::::33755::::furthestBlock::::commonAncestor	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18118::::18649::::if ((tb.getActiveFormattingElement("a")) != null) {    tb.error(this);    tb.process(new org.jsoup.parser.Token.EndTag("a"));    org.jsoup.nodes.Element remainingA = tb.getFromStack("a");    if (remainingA != null) {        tb.removeFromActiveFormattingElements(remainingA);        tb.removeFromStack(remainingA);    }}::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::726::::36762::::36774::::furthestBlock::::commonAncestor	false
org.jsoup.parser.HtmlTreeBuilderState::::726::::36806::::36818::::furthestBlock::::commonAncestor	false
org.jsoup.parser.HtmlTreeBuilderState::::687::::34474::::34486::::furthestBlock::::commonAncestor	false
org.jsoup.parser.HtmlTreeBuilderState::::688::::34536::::34548::::furthestBlock::::commonAncestor	false
org.jsoup.parser.HtmlTreeBuilderState::::413::::18735::::18766::::org.jsoup.nodes.Element a = tb.insert(startTag)::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.HtmlTreeBuilderState::::413::::18735::::18766::::org.jsoup.nodes.Element a = tb.insert(startTag)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::413::::18735::::18766::::org.jsoup.nodes.Element a = tb.insert(startTag)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("hr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::413::::18735::::18766::::org.jsoup.nodes.Element a = tb.insert(startTag)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::413::::18735::::18766::::org.jsoup.nodes.Element a = tb.insert(startTag)::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34734::::34762::::node = tb.aboveOnStack(node)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("hr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34734::::34762::::node = tb.aboveOnStack(node)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("select"))	false
org.jsoup.parser.HtmlTreeBuilderState::::691::::34680::::34695::::tb.onStack(node)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("hr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::766::::38824::::38857::::java.lang.String name = t.asEndTag().name()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("nobr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::772::::39137::::39168::::tb.generateImpliedEndTags(name)::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::693::::34800::::34837::::!(tb.isInActiveFormattingElements(node))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("hr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::720::::36432::::36516::::if ((lastNode.parent()) != null)    lastNode.remove();::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.TokeniserState::::809::::27171::::27221::::java.lang.String value = r.consumeToAny('\'', '&', org.jsoup.parser.TokeniserState.nullChar)::::INSERT::::STATEMENT::::anythingElse(t, r)	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.BetweenDoctypePublicAndSystemIdentifiers	false
org.jsoup.parser.HtmlTreeBuilderState::::721::::36499::::36516::::lastNode.remove()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39194::::39237::::!(name.equals(tb.currentElement().nodeName()))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::691::::34680::::34695::::tb.onStack(node)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("select"))	false
org.jsoup.parser.HtmlTreeBuilderState::::771::::39085::::39112::::node.nodeName().equals(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::772::::39137::::39168::::tb.generateImpliedEndTags(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("p"))	false
org.jsoup.parser.HtmlTreeBuilderState::::693::::34800::::34837::::!(tb.isInActiveFormattingElements(node))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("select"))	false
org.jsoup.parser.HtmlTreeBuilderState::::652::::32311::::32339::::return anyOtherEndTag(t, tb)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("button"))	false
org.jsoup.parser.HtmlTreeBuilder::::370::::12141::::12165::::org.jsoup.helper.Validate.isTrue((i != (-1)))::::DELETE::::STATEMENT	false
org.jsoup.parser.HtmlTreeBuilderState::::769::::39000::::39554::::while (it.hasNext()) {    org.jsoup.nodes.Element node = it.next();    if (node.nodeName().equals(name)) {        tb.generateImpliedEndTags(name);        if (!(name.equals(tb.currentElement().nodeName())))            tb.error(this);        tb.popStackToClose(name);        break;    }else {        if (tb.isSpecial(node)) {            tb.error(this);            return false;        }    }} ::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("p"))	false
org.jsoup.parser.HtmlTreeBuilder::::555::::18886::::19725::::return org.jsoup.helper.StringUtil.in(name, "address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "command", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "marquee", "menu", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "style", "summary", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "title", "tr", "ul", "wbr", "xmp")::::INSERT::::STATEMENT::::insertNode(el)	false
org.jsoup.parser.HtmlTreeBuilderState::::652::::32311::::32339::::return anyOtherEndTag(t, tb)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tbody"))	false
org.jsoup.parser.HtmlTreeBuilderState::::414::::18792::::18826::::tb.pushActiveFormattingElements(a)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("head"))	false
org.jsoup.parser.HtmlTreeBuilderState::::413::::18735::::18766::::org.jsoup.nodes.Element a = tb.insert(startTag)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("select"))	false
org.jsoup.parser.HtmlTreeBuilderState::::413::::18735::::18766::::org.jsoup.nodes.Element a = tb.insert(startTag)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("p"))	false
org.jsoup.parser.HtmlTreeBuilderState::::413::::18735::::18766::::org.jsoup.nodes.Element a = tb.insert(startTag)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("option"))	false
org.jsoup.parser.HtmlTreeBuilderState::::413::::18735::::18766::::org.jsoup.nodes.Element a = tb.insert(startTag)::::INSERT::::STATEMENT::::closeCell(tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33662::::33702::::seenFormattingElement && (tb.isSpecial(el))::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InBody)	false
org.jsoup.parser.HtmlTreeBuilder::::582::::20248::::20274::::formattingElements.add(in)::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34734::::34762::::node = tb.aboveOnStack(node)::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34734::::34762::::node = tb.aboveOnStack(node)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.Character(prompt))	false
org.jsoup.parser.HtmlTreeBuilderState::::691::::34680::::34695::::tb.onStack(node)::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.HtmlTreeBuilderState::::691::::34680::::34695::::tb.onStack(node)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.Character(prompt))	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33743::::33761::::furthestBlock = el::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("select"))	false
org.jsoup.parser.HtmlTreeBuilderState::::693::::34800::::34837::::!(tb.isInActiveFormattingElements(node))::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.HtmlTreeBuilderState::::693::::34800::::34837::::!(tb.isInActiveFormattingElements(node))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.Character(prompt))	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39194::::39237::::!(name.equals(tb.currentElement().nodeName()))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39194::::39237::::!(name.equals(tb.currentElement().nodeName()))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("a"))	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35021::::35090::::if (node == formatEl)    break INNER;::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("hr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35021::::35090::::if (node == formatEl)    break INNER;::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("select"))	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39190::::39278::::if (!(name.equals(tb.currentElement().nodeName())))    tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::414::::18792::::18826::::tb.pushActiveFormattingElements(a)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("li"))	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36550::::36586::::commonAncestor.appendChild(lastNode)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("colgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36550::::36586::::commonAncestor.appendChild(lastNode)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("optgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34734::::34762::::node = tb.aboveOnStack(node)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("a"))	false
org.jsoup.parser.HtmlTreeBuilderState::::691::::34680::::34695::::tb.onStack(node)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("a"))	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33743::::33761::::furthestBlock = el::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("hr"))	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.Rawtext	false
org.jsoup.parser.HtmlTreeBuilderState::::766::::38824::::38857::::java.lang.String name = t.asEndTag().name()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::693::::34800::::34837::::!(tb.isInActiveFormattingElements(node))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("a"))	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39190::::39278::::if (!(name.equals(tb.currentElement().nodeName())))    tb.error(this);::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32785::::32815::::(tb.currentElement()) != formatEl::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InBody)	false
org.jsoup.parser.HtmlTreeBuilderState::::720::::36432::::36516::::if ((lastNode.parent()) != null)    lastNode.remove();::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("p"))	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39194::::39237::::!(name.equals(tb.currentElement().nodeName()))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("li"))	false
org.jsoup.parser.HtmlTreeBuilder::::284::::9780::::9829::::java.util.Iterator<org.jsoup.nodes.Element> it = stack.descendingIterator()::::INSERT::::STATEMENT::::insertNode(el)	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35021::::35090::::if (node == formatEl)    break INNER;::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35021::::35090::::if (node == formatEl)    break INNER;::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.Character(prompt))	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39190::::39278::::if (!(name.equals(tb.currentElement().nodeName())))    tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("option"))	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33743::::33761::::furthestBlock = el::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.HtmlTreeBuilderState::::771::::39085::::39112::::node.nodeName().equals(name)::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18122::::18163::::(tb.getActiveFormattingElement("a")) != null::::tb.process(new org.jsoup.parser.Token.StartTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39194::::39237::::!(name.equals(tb.currentElement().nodeName()))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("p"))	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39194::::39237::::!(name.equals(tb.currentElement().nodeName()))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("option"))	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18118::::18649::::if ((tb.getActiveFormattingElement("a")) != null) {    tb.error(this);    tb.process(new org.jsoup.parser.Token.EndTag("a"));    org.jsoup.nodes.Element remainingA = tb.getFromStack("a");    if (remainingA != null) {        tb.removeFromActiveFormattingElements(remainingA);        tb.removeFromStack(remainingA);    }}::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("p"))	false
org.jsoup.parser.Token::::76::::2434::::2448::::newAttribute()::::INSERT::::STATEMENT::::newAttribute()	false
org.jsoup.parser.HtmlTreeBuilder::::362::::11964::::11980::::return it.next()::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.HtmlTreeBuilderState::::721::::36499::::36516::::lastNode.remove()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("option"))	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33743::::33761::::furthestBlock = el::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("a"))	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33743::::33761::::furthestBlock = el::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.Character(prompt))	false
org.jsoup.parser.HtmlTreeBuilder::::652::::22896::::22943::::return isElementInQueue(formattingElements, el)::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.HtmlTreeBuilderState::::720::::36432::::36516::::if ((lastNode.parent()) != null)    lastNode.remove();::::INSERT::::STATEMENT::::if (lastNode == furthestBlock) {}	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39190::::39278::::if (!(name.equals(tb.currentElement().nodeName())))    tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("a"))	false
org.jsoup.parser.TokeniserState::::814::::27372::::27372::::c::::org.jsoup.parser.TokeniserState.replacementChar	false
org.jsoup.parser.HtmlTreeBuilderState::::414::::18792::::18826::::tb.pushActiveFormattingElements(a)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag(name))	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.TagName	false
org.jsoup.parser.HtmlTreeBuilderState::::652::::32311::::32339::::return anyOtherEndTag(t, tb)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("colgroup"))	false
org.jsoup.parser.Token::::64::::1934::::1953::::pendingAttributeName::::tagName	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.ScriptDataDoubleEscapedDash	false
org.jsoup.parser.HtmlTreeBuilder::::362::::11964::::11980::::return it.next()::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.HtmlTreeBuilder::::362::::11964::::11980::::return it.next()::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35021::::35090::::if (node == formatEl)    break INNER;::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("a"))	false
org.jsoup.parser.HtmlTreeBuilderState::::768::::38937::::38986::::java.util.Iterator<org.jsoup.nodes.Element> it = stack.descendingIterator()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("head"))	false
org.jsoup.parser.HtmlTreeBuilderState::::768::::38937::::38986::::java.util.Iterator<org.jsoup.nodes.Element> it = stack.descendingIterator()::::INSERT::::STATEMENT::::closeCell(tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::767::::38871::::38923::::org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> stack = tb.getStack()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("head"))	false
org.jsoup.parser.HtmlTreeBuilderState::::767::::38871::::38923::::org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> stack = tb.getStack()::::INSERT::::STATEMENT::::closeCell(tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34734::::34762::::node = tb.aboveOnStack(node)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("tr"))	false
org.jsoup.parser.TokeniserState::::810::::27239::::27243::::value::::"--"	false
org.jsoup.parser.HtmlTreeBuilder::::370::::12141::::12165::::org.jsoup.helper.Validate.isTrue((i != (-1)))::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39194::::39237::::!(name.equals(tb.currentElement().nodeName()))::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::693::::34800::::34837::::!(tb.isInActiveFormattingElements(node))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::413::::18735::::18766::::org.jsoup.nodes.Element a = tb.insert(startTag)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("head"))	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18122::::18163::::(tb.getActiveFormattingElement("a")) != null::::tb.process(new org.jsoup.parser.Token.StartTag("body"))	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39194::::39237::::!(name.equals(tb.currentElement().nodeName()))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("nobr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39190::::39278::::if (!(name.equals(tb.currentElement().nodeName())))    tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("p"))	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.ScriptDataDoubleEscapedDashDash	false
org.jsoup.parser.HtmlTreeBuilderState::::691::::34680::::34695::::tb.onStack(node)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::679::::33902::::33922::::furthestBlock == null::::lastNode == furthestBlock	false
org.jsoup.parser.HtmlTreeBuilderState::::649::::32138::::32138::::i::::si++	false
org.jsoup.parser.HtmlTreeBuilderState::::414::::18792::::18826::::tb.pushActiveFormattingElements(a)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("button"))	false
org.jsoup.parser.HtmlTreeBuilderState::::768::::38937::::38986::::java.util.Iterator<org.jsoup.nodes.Element> it = stack.descendingIterator()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("li"))	false
org.jsoup.parser.HtmlTreeBuilderState::::767::::38871::::38923::::org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> stack = tb.getStack()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("li"))	false
org.jsoup.parser.HtmlTreeBuilderState::::715::::36106::::36119::::commonAncestor::::body	false
org.jsoup.parser.HtmlTreeBuilderState::::414::::18792::::18826::::tb.pushActiveFormattingElements(a)::::INSERT::::STATEMENT::::if (notIgnored)    return tb.process(endTag);	false
org.jsoup.parser.HtmlTreeBuilderState::::414::::18792::::18826::::tb.pushActiveFormattingElements(a)::::INSERT::::STATEMENT::::if (lastNode == furthestBlock) {}	false
org.jsoup.parser.HtmlTreeBuilderState::::413::::18735::::18766::::org.jsoup.nodes.Element a = tb.insert(startTag)::::INSERT::::STATEMENT::::if (lastNode == furthestBlock) {}	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18859::::18989::::org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("p"))	false
org.jsoup.parser.HtmlTreeBuilderState::::771::::39085::::39112::::node.nodeName().equals(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("option"))	false
org.jsoup.parser.HtmlTreeBuilderState::::649::::32131::::32131::::i::::si++	false
org.jsoup.parser.HtmlTreeBuilderState::::413::::18735::::18766::::org.jsoup.nodes.Element a = tb.insert(startTag)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("li"))	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32785::::32815::::(tb.currentElement()) != formatEl::::tb.process(new org.jsoup.parser.Token.StartTag("form"))	false
org.jsoup.parser.Token::::118::::3596::::3632::::pendingAttributeValue.append(append)::::INSERT::::STATEMENT::::ensureAttributeValue()	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.ScriptDataEscapedDash	false
org.jsoup.parser.HtmlTreeBuilderState::::661::::32850::::32864::::tb.error(this)::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.TokeniserState::::888::::30063::::30063::::c::::org.jsoup.parser.TokeniserState.replacementChar	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18122::::18163::::(tb.getActiveFormattingElement("a")) != null::::tb.process(new org.jsoup.parser.Token.StartTag(name))	false
org.jsoup.parser.HtmlTreeBuilderState::::768::::38937::::38986::::java.util.Iterator<org.jsoup.nodes.Element> it = stack.descendingIterator()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag(name))	false
org.jsoup.parser.HtmlTreeBuilderState::::767::::38871::::38923::::org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> stack = tb.getStack()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag(name))	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33662::::33702::::seenFormattingElement && (tb.isSpecial(el))::::tb.process(new org.jsoup.parser.Token.EndTag("p"))	false
org.jsoup.parser.TokeniserState::::810::::27239::::27243::::value::::"--!"	false
org.jsoup.parser.TokeniserState::::810::::27239::::27243::::value::::"</"	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36550::::36563::::commonAncestor::::body	false
org.jsoup.parser.HtmlTreeBuilderState::::768::::38937::::38986::::java.util.Iterator<org.jsoup.nodes.Element> it = stack.descendingIterator()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("nobr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::767::::38871::::38923::::org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> stack = tb.getStack()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("nobr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33743::::33761::::furthestBlock = el::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("tr"))	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.TagOpen	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.RcdataLessthanSign	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.CommentEnd	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.CharacterReferenceInRcdata	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.CharacterReferenceInData	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39194::::39237::::!(name.equals(tb.currentElement().nodeName()))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag(name))	false
org.jsoup.parser.TokeniserState::::814::::27372::::27372::::c::::org.jsoup.parser.TokeniserState.eof	false
org.jsoup.parser.HtmlTreeBuilderState::::652::::32311::::32339::::return anyOtherEndTag(t, tb)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("br"))	false
org.jsoup.parser.HtmlTreeBuilderState::::652::::32311::::32339::::return anyOtherEndTag(t, tb)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("optgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18859::::18989::::org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.Token::::76::::2434::::2448::::newAttribute()::::INSERT::::STATEMENT::::ensureAttributeValue()	false
org.jsoup.parser.HtmlTreeBuilderState::::715::::36106::::36119::::commonAncestor::::second	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39190::::39278::::if (!(name.equals(tb.currentElement().nodeName())))    tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::413::::18735::::18766::::org.jsoup.nodes.Element a = tb.insert(startTag)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag(name))	false
org.jsoup.parser.HtmlTreeBuilderState::::771::::39085::::39112::::node.nodeName().equals(name)::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.MarkupDeclarationOpen	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.EndTagOpen	false
org.jsoup.parser.HtmlTreeBuilder::::569::::19927::::20238::::while (iter.hasNext()) {    org.jsoup.nodes.Element el = iter.next();    if (el == null)        break;    if (isSameFormattingElement(in, el))        numSeen++;    if (numSeen == 3) {        iter.remove();        break;    }} ::::INSERT::::STATEMENT::::insertNode(el)	false
org.jsoup.parser.HtmlTreeBuilderState::::771::::39085::::39112::::node.nodeName().equals(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("p"))	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32785::::32815::::(tb.currentElement()) != formatEl::::tb.process(new org.jsoup.parser.Token.EndTag("option"))	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34734::::34762::::node = tb.aboveOnStack(node)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::691::::34680::::34695::::tb.onStack(node)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::693::::34800::::34837::::!(tb.isInActiveFormattingElements(node))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18118::::18649::::if ((tb.getActiveFormattingElement("a")) != null) {    tb.error(this);    tb.process(new org.jsoup.parser.Token.EndTag("a"));    org.jsoup.nodes.Element remainingA = tb.getFromStack("a");    if (remainingA != null) {        tb.removeFromActiveFormattingElements(remainingA);        tb.removeFromStack(remainingA);    }}::::INSERT::::STATEMENT::::if (lastNode == furthestBlock) {}	false
org.jsoup.parser.HtmlTreeBuilder::::642::::22659::::22824::::while (it.hasNext()) {    org.jsoup.nodes.Element next = it.next();    if (next == el) {        it.remove();        break;    }} ::::INSERT::::STATEMENT::::insert(el)	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36550::::36563::::commonAncestor::::second	false
org.jsoup.parser.HtmlTreeBuilder::::361::::11934::::11943::::next == el::::isElementInQueue(stack, el)	false
org.jsoup.parser.HtmlTreeBuilder::::361::::11934::::11943::::next == el::::isElementInQueue(formattingElements, el)	false
org.jsoup.parser.HtmlTreeBuilderState::::766::::38824::::38857::::java.lang.String name = t.asEndTag().name()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("optgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::769::::39000::::39554::::while (it.hasNext()) {    org.jsoup.nodes.Element node = it.next();    if (node.nodeName().equals(name)) {        tb.generateImpliedEndTags(name);        if (!(name.equals(tb.currentElement().nodeName())))            tb.error(this);        tb.popStackToClose(name);        break;    }else {        if (tb.isSpecial(node)) {            tb.error(this);            return false;        }    }} ::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::697::::35079::::35090::::break INNER::::INSERT::::STATEMENT::::if (notIgnored)    return tb.process(endTag);	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.TagName	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39190::::39278::::if (!(name.equals(tb.currentElement().nodeName())))    tb.error(this);::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39190::::39278::::if (!(name.equals(tb.currentElement().nodeName())))    tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("hr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39190::::39278::::if (!(name.equals(tb.currentElement().nodeName())))    tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("select"))	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18122::::18163::::(tb.getActiveFormattingElement("a")) != null::::tb.process(new org.jsoup.parser.Token.EndTag("th"))	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18122::::18163::::(tb.getActiveFormattingElement("a")) != null::::tb.process(new org.jsoup.parser.Token.EndTag("td"))	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34734::::34762::::node = tb.aboveOnStack(node)::::INSERT::::STATEMENT::::tb.process(startTag)	false
org.jsoup.parser.HtmlTreeBuilderState::::679::::33902::::33914::::furthestBlock::::adopter	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39194::::39237::::!(name.equals(tb.currentElement().nodeName()))::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39194::::39237::::!(name.equals(tb.currentElement().nodeName()))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39194::::39237::::!(name.equals(tb.currentElement().nodeName()))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("hr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39194::::39237::::!(name.equals(tb.currentElement().nodeName()))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("head"))	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39194::::39237::::!(name.equals(tb.currentElement().nodeName()))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("select"))	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39194::::39237::::!(name.equals(tb.currentElement().nodeName()))::::INSERT::::STATEMENT::::closeCell(tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::413::::18735::::18766::::org.jsoup.nodes.Element a = tb.insert(startTag)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("button"))	false
org.jsoup.parser.HtmlTreeBuilderState::::413::::18735::::18766::::org.jsoup.nodes.Element a = tb.insert(startTag)::::INSERT::::STATEMENT::::if (notIgnored)    return tb.process(endTag);	false
org.jsoup.parser.HtmlTreeBuilderState::::679::::33902::::33914::::furthestBlock::::el	false
org.jsoup.parser.TokeniserState::::888::::30063::::30063::::c::::org.jsoup.parser.TokeniserState.eof	false
org.jsoup.parser.HtmlTreeBuilderState::::768::::38937::::38986::::java.util.Iterator<org.jsoup.nodes.Element> it = stack.descendingIterator()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::767::::38871::::38923::::org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> stack = tb.getStack()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::766::::38824::::38857::::java.lang.String name = t.asEndTag().name()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("body"))	false
org.jsoup.parser.HtmlTreeBuilderState::::691::::34680::::34695::::tb.onStack(node)::::INSERT::::STATEMENT::::tb.process(startTag)	false
org.jsoup.parser.HtmlTreeBuilderState::::771::::39085::::39112::::node.nodeName().equals(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("hr"))	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.ScriptDataDoubleEscapeEnd	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.ScriptDataLessthanSign	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.RawtextLessthanSign	false
org.jsoup.parser.Token::::64::::1908::::1989::::attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, pendingAttributeValue.toString())::::attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, "")	false
org.jsoup.parser.HtmlTreeBuilder::::132::::4504::::4518::::return baseUri::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.HtmlTreeBuilderState::::693::::34800::::34837::::!(tb.isInActiveFormattingElements(node))::::INSERT::::STATEMENT::::tb.process(startTag)	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36550::::36586::::commonAncestor.appendChild(lastNode)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::652::::32311::::32339::::return anyOtherEndTag(t, tb)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34734::::34762::::node = tb.aboveOnStack(node)::::INSERT::::STATEMENT::::org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb)	false
org.jsoup.parser.HtmlTreeBuilder::::652::::22896::::22943::::return isElementInQueue(formattingElements, el)::::INSERT::::STATEMENT::::if (el == null)    break;	false
org.jsoup.parser.HtmlTreeBuilderState::::771::::39085::::39112::::node.nodeName().equals(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("a"))	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35021::::35090::::if (node == formatEl)    break INNER;::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("label"))	false
org.jsoup.parser.HtmlTreeBuilder::::288::::9946::::9957::::it.remove()::::INSERT::::STATEMENT::::insertNode(el)	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33743::::33761::::furthestBlock = el::::INSERT::::STATEMENT::::tb.process(startTag)	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33743::::33761::::furthestBlock = el::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("label"))	false
org.jsoup.parser.Token::::118::::3625::::3630::::append::::this.tagName	false
org.jsoup.parser.HtmlTreeBuilderState::::691::::34680::::34695::::tb.onStack(node)::::INSERT::::STATEMENT::::org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb)	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.RCDATAEndTagName	false
org.jsoup.parser.HtmlTreeBuilderState::::715::::36106::::36119::::commonAncestor::::html	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.Rawtext	false
org.jsoup.parser.HtmlTreeBuilderState::::693::::34800::::34837::::!(tb.isInActiveFormattingElements(node))::::INSERT::::STATEMENT::::org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::414::::18792::::18826::::tb.pushActiveFormattingElements(a)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::771::::39085::::39112::::node.nodeName().equals(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("select"))	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34734::::34762::::node = tb.aboveOnStack(node)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs))	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34734::::34762::::node = tb.aboveOnStack(node)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("head"))	false
org.jsoup.parser.HtmlTreeBuilderState::::691::::34680::::34695::::tb.onStack(node)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs))	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35021::::35090::::if (node == formatEl)    break INNER;::::INSERT::::STATEMENT::::tb.process(startTag)	false
org.jsoup.parser.HtmlTreeBuilderState::::671::::33469::::33476::::formatEl::::replacement	false
org.jsoup.parser.HtmlTreeBuilderState::::693::::34800::::34837::::!(tb.isInActiveFormattingElements(node))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs))	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18122::::18163::::(tb.getActiveFormattingElement("a")) != null::::tb.process(new org.jsoup.parser.Token.EndTag("noscript"))	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32378::::32398::::!(tb.onStack(formatEl))::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.HtmlTreeBuilder::::555::::18886::::19725::::return org.jsoup.helper.StringUtil.in(name, "address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "command", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "marquee", "menu", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "style", "summary", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "title", "tr", "ul", "wbr", "xmp")::::INSERT::::STATEMENT::::insert(el)	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32616::::32647::::!(tb.inScope(formatEl.nodeName()))::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35021::::35090::::if (node == formatEl)    break INNER;::::INSERT::::STATEMENT::::org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::775::::39300::::39324::::tb.popStackToClose(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32390::::32397::::formatEl::::replacement	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36550::::36563::::commonAncestor::::html	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33743::::33761::::furthestBlock = el::::INSERT::::STATEMENT::::org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::721::::36499::::36516::::lastNode.remove()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("hr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::721::::36499::::36516::::lastNode.remove()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("select"))	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32628::::32635::::formatEl::::replacement	false
org.jsoup.parser.HtmlTreeBuilderState::::720::::36432::::36516::::if ((lastNode.parent()) != null)    lastNode.remove();::::INSERT::::STATEMENT::::if (node == formatEl)    break INNER;	false
org.jsoup.parser.HtmlTreeBuilderState::::414::::18792::::18826::::tb.pushActiveFormattingElements(a)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tbody"))	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32808::::32815::::formatEl::::replacement	false
org.jsoup.parser.HtmlTreeBuilderState::::651::::32261::::32268::::formatEl::::replacement	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39190::::39278::::if (!(name.equals(tb.currentElement().nodeName())))    tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("label"))	false
org.jsoup.parser.HtmlTreeBuilder::::359::::11857::::12004::::while (it.hasNext()) {    org.jsoup.nodes.Element next = it.next();    if (next == el) {        return it.next();    }} ::::INSERT::::STATEMENT::::if (el == null)    break;	false
org.jsoup.parser.HtmlTreeBuilder::::582::::20248::::20274::::formattingElements.add(in)::::DELETE::::STATEMENT	false
org.jsoup.parser.HtmlTreeBuilderState::::772::::39137::::39168::::tb.generateImpliedEndTags(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::676::::33799::::33804::::break::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34734::::34762::::node = tb.aboveOnStack(node)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("li"))	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35021::::35090::::if (node == formatEl)    break INNER;::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs))	false
org.jsoup.parser.HtmlTreeBuilderState::::766::::38824::::38857::::java.lang.String name = t.asEndTag().name()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::766::::38824::::38857::::java.lang.String name = t.asEndTag().name()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tbody"))	false
org.jsoup.parser.HtmlTreeBuilderState::::766::::38824::::38857::::java.lang.String name = t.asEndTag().name()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("colgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::673::::33589::::33617::::seenFormattingElement = true::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39190::::39278::::if (!(name.equals(tb.currentElement().nodeName())))    tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("li"))	false
org.jsoup.parser.TokeniserState::::732::::24443::::24443::::c::::org.jsoup.parser.TokeniserState.replacementChar	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32785::::32815::::(tb.currentElement()) != formatEl::::tb.process(new org.jsoup.parser.Token.Character(prompt))	false
org.jsoup.parser.HtmlTreeBuilderState::::730::::37116::::37122::::adopter::::remainingA	false
org.jsoup.parser.HtmlTreeBuilderState::::771::::39085::::39112::::node.nodeName().equals(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33517::::33551::::commonAncestor = stack.get((si - 1))::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.TokeniserState::::814::::27364::::28181::::switch (c) {    case '\'' :        t.transition(org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted);        break;    case '&' :        char[] ref = t.consumeCharacterReference('\'', true);        if (ref != null)            t.tagPending.appendAttributeValue(ref);        else            t.tagPending.appendAttributeValue('&');        break;    case org.jsoup.parser.TokeniserState.nullChar :        t.error(this);        t.tagPending.appendAttributeValue(org.jsoup.parser.TokeniserState.replacementChar);        break;    case org.jsoup.parser.TokeniserState.eof :        t.eofError(this);        t.transition(org.jsoup.parser.TokeniserState.Data);        break;}::::INSERT::::STATEMENT::::anythingElse(t, r)	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33743::::33761::::furthestBlock = el::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("li"))	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.ScriptDataEscapedEndTagName	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.ScriptDataDoubleEscapeStart	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33517::::33551::::commonAncestor = stack.get((si - 1))::::INSERT::::STATEMENT::::if (lastNode == furthestBlock) {}	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33743::::33761::::furthestBlock = el::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs))	false
org.jsoup.parser.HtmlTreeBuilderState::::673::::33589::::33617::::seenFormattingElement = true::::INSERT::::STATEMENT::::if (lastNode == furthestBlock) {}	false
org.jsoup.parser.HtmlTreeBuilderState::::715::::36106::::36119::::commonAncestor::::form	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39194::::39237::::!(name.equals(tb.currentElement().nodeName()))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("label"))	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.ScriptDataEscapedEndTagOpen	false
org.jsoup.parser.HtmlTreeBuilderState::::772::::39137::::39168::::tb.generateImpliedEndTags(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("option"))	false
org.jsoup.parser.HtmlTreeBuilderState::::414::::18792::::18826::::tb.pushActiveFormattingElements(a)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("colgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::414::::18792::::18826::::tb.pushActiveFormattingElements(a)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("optgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18118::::18649::::if ((tb.getActiveFormattingElement("a")) != null) {    tb.error(this);    tb.process(new org.jsoup.parser.Token.EndTag("a"));    org.jsoup.nodes.Element remainingA = tb.getFromStack("a");    if (remainingA != null) {        tb.removeFromActiveFormattingElements(remainingA);        tb.removeFromStack(remainingA);    }}::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35021::::35090::::if (node == formatEl)    break INNER;::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("li"))	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.ScriptDataEscapeStart	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.ScriptDataEndTagOpen	false
org.jsoup.parser.HtmlTreeBuilderState::::721::::36499::::36516::::lastNode.remove()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.Character(prompt))	false
org.jsoup.parser.HtmlTreeBuilderState::::413::::18735::::18766::::org.jsoup.nodes.Element a = tb.insert(startTag)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::766::::38824::::38857::::java.lang.String name = t.asEndTag().name()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("button"))	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32616::::32647::::!(tb.inScope(formatEl.nodeName()))::::INSERT::::STATEMENT::::if (lastNode == furthestBlock) {}	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39190::::39278::::if (!(name.equals(tb.currentElement().nodeName())))    tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("head"))	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39190::::39278::::if (!(name.equals(tb.currentElement().nodeName())))    tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("nobr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39190::::39278::::if (!(name.equals(tb.currentElement().nodeName())))    tb.error(this);::::INSERT::::STATEMENT::::closeCell(tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::414::::18792::::18826::::tb.pushActiveFormattingElements(a)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("br"))	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33743::::33761::::furthestBlock = el::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("head"))	false
org.jsoup.parser.HtmlTreeBuilderState::::413::::18735::::18766::::org.jsoup.nodes.Element a = tb.insert(startTag)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tbody"))	false
org.jsoup.parser.HtmlTreeBuilderState::::768::::38937::::38986::::java.util.Iterator<org.jsoup.nodes.Element> it = stack.descendingIterator()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("optgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::767::::38871::::38923::::org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> stack = tb.getStack()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("optgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32378::::32398::::!(tb.onStack(formatEl))::::INSERT::::STATEMENT::::if (lastNode == furthestBlock) {}	false
org.jsoup.parser.HtmlTreeBuilderState::::652::::32311::::32339::::return anyOtherEndTag(t, tb)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("body"))	false
org.jsoup.parser.HtmlTreeBuilderState::::720::::36432::::36516::::if ((lastNode.parent()) != null)    lastNode.remove();::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::691::::34680::::34695::::tb.onStack(node)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("head"))	false
org.jsoup.parser.HtmlTreeBuilderState::::721::::36499::::36516::::lastNode.remove()::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.HtmlTreeBuilderState::::766::::38824::::38857::::java.lang.String name = t.asEndTag().name()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("noscript"))	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31734::::name.equals("sarcasm")::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::769::::39000::::39554::::while (it.hasNext()) {    org.jsoup.nodes.Element node = it.next();    if (node.nodeName().equals(name)) {        tb.generateImpliedEndTags(name);        if (!(name.equals(tb.currentElement().nodeName())))            tb.error(this);        tb.popStackToClose(name);        break;    }else {        if (tb.isSpecial(node)) {            tb.error(this);            return false;        }    }} ::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32616::::32647::::!(tb.inScope(formatEl.nodeName()))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("p"))	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34734::::34762::::node = tb.aboveOnStack(node)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("nobr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::769::::39000::::39554::::while (it.hasNext()) {    org.jsoup.nodes.Element node = it.next();    if (node.nodeName().equals(name)) {        tb.generateImpliedEndTags(name);        if (!(name.equals(tb.currentElement().nodeName())))            tb.error(this);        tb.popStackToClose(name);        break;    }else {        if (tb.isSpecial(node)) {            tb.error(this);            return false;        }    }} ::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("option"))	false
org.jsoup.parser.HtmlTreeBuilderState::::693::::34800::::34837::::!(tb.isInActiveFormattingElements(node))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("head"))	false
org.jsoup.parser.TokeniserState::::732::::24443::::24443::::c::::org.jsoup.parser.TokeniserState.eof	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17545::::name.equals("button")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("p"))	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18089::::name.equals("a")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("p"))	false
org.jsoup.parser.HtmlTreeBuilder::::152::::5118::::5137::::errors.canAddError()::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.HtmlTreeBuilder::::370::::12162::::12163::::-1::::DELETE::::INFIX	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35021::::35090::::if (node == formatEl)    break INNER;::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("head"))	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18859::::18989::::org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::if (lastNode == furthestBlock) {}	false
org.jsoup.parser.HtmlTreeBuilderState::::414::::18792::::18826::::tb.pushActiveFormattingElements(a)::::INSERT::::STATEMENT::::if (node == formatEl)    break INNER;	false
org.jsoup.parser.HtmlTreeBuilderState::::413::::18735::::18766::::org.jsoup.nodes.Element a = tb.insert(startTag)::::INSERT::::STATEMENT::::if (node == formatEl)    break INNER;	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36550::::36563::::commonAncestor::::form	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32378::::32398::::!(tb.onStack(formatEl))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("p"))	false
org.jsoup.parser.HtmlTreeBuilder::::582::::20248::::20274::::formattingElements.add(in)::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.HtmlTreeBuilderState::::691::::34680::::34695::::tb.onStack(node)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("nobr"))	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.ScriptDataEscapeStartDash	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.ScriptDataEndTagName	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.RawtextEndTagOpen	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.RawtextEndTagName	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.RCDATAEndTagOpen	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.CommentStart	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.AfterDoctypeSystemKeyword	false
org.jsoup.parser.HtmlTreeBuilderState::::768::::38937::::38986::::java.util.Iterator<org.jsoup.nodes.Element> it = stack.descendingIterator()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("body"))	false
org.jsoup.parser.HtmlTreeBuilderState::::767::::38871::::38923::::org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> stack = tb.getStack()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("body"))	false
org.jsoup.parser.HtmlTreeBuilderState::::412::::18675::::18709::::tb.reconstructFormattingElements()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("p"))	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39194::::39237::::!(name.equals(tb.currentElement().nodeName()))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("optgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::693::::34800::::34837::::!(tb.isInActiveFormattingElements(node))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("nobr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::651::::32261::::32276::::formatEl == null::::el == formatEl	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32785::::32815::::(tb.currentElement()) != formatEl::::tb.process(new org.jsoup.parser.Token.EndTag("select"))	false
org.jsoup.parser.HtmlTreeBuilderState::::766::::38824::::38857::::java.lang.String name = t.asEndTag().name()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("th"))	false
org.jsoup.parser.HtmlTreeBuilderState::::766::::38824::::38857::::java.lang.String name = t.asEndTag().name()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("td"))	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39190::::39278::::if (!(name.equals(tb.currentElement().nodeName())))    tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag(name))	false
org.jsoup.parser.HtmlTreeBuilder::::554::::18849::::18876::::java.lang.String name = el.nodeName()::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.HtmlTreeBuilderState::::721::::36499::::36516::::lastNode.remove()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("a"))	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34734::::34762::::node = tb.aboveOnStack(node)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::691::::34680::::34695::::tb.onStack(node)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33743::::33761::::furthestBlock = el::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("nobr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::766::::38824::::38857::::java.lang.String name = t.asEndTag().name()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::693::::34800::::34837::::!(tb.isInActiveFormattingElements(node))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33517::::33551::::commonAncestor = stack.get((si - 1))::::INSERT::::STATEMENT::::if (node == formatEl)    break INNER;	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32785::::32815::::(tb.currentElement()) != formatEl::::tb.process(new org.jsoup.parser.Token.StartTag("hr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35021::::35090::::if (node == formatEl)    break INNER;::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilder::::152::::5118::::5137::::errors.canAddError()::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.HtmlTreeBuilderState::::413::::18735::::18766::::org.jsoup.nodes.Element a = tb.insert(startTag)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("colgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::413::::18735::::18766::::org.jsoup.nodes.Element a = tb.insert(startTag)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("optgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::721::::36499::::36516::::lastNode.remove()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33662::::33702::::seenFormattingElement && (tb.isSpecial(el))::::tb.process(new org.jsoup.parser.Token.StartTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35021::::35090::::if (node == formatEl)    break INNER;::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("nobr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::730::::37116::::37122::::adopter::::currentForm	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32785::::32815::::(tb.currentElement()) != formatEl::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33662::::33702::::seenFormattingElement && (tb.isSpecial(el))::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33517::::33551::::commonAncestor = stack.get((si - 1))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("p"))	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35021::::35090::::if (node == formatEl)    break INNER;::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18118::::18649::::if ((tb.getActiveFormattingElement("a")) != null) {    tb.error(this);    tb.process(new org.jsoup.parser.Token.EndTag("a"));    org.jsoup.nodes.Element remainingA = tb.getFromStack("a");    if (remainingA != null) {        tb.removeFromActiveFormattingElements(remainingA);        tb.removeFromStack(remainingA);    }}::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("option"))	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18118::::18649::::if ((tb.getActiveFormattingElement("a")) != null) {    tb.error(this);    tb.process(new org.jsoup.parser.Token.EndTag("a"));    org.jsoup.nodes.Element remainingA = tb.getFromStack("a");    if (remainingA != null) {        tb.removeFromActiveFormattingElements(remainingA);        tb.removeFromStack(remainingA);    }}::::INSERT::::STATEMENT::::if (node == formatEl)    break INNER;	false
org.jsoup.parser.HtmlTreeBuilderState::::414::::18792::::18826::::tb.pushActiveFormattingElements(a)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::413::::18735::::18766::::org.jsoup.nodes.Element a = tb.insert(startTag)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("br"))	false
org.jsoup.parser.Token::::64::::1956::::1976::::pendingAttributeValue::::attribute	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18859::::18989::::org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18089::::name.equals("a")::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32785::::32815::::(tb.currentElement()) != formatEl::::tb.process(new org.jsoup.parser.Token.EndTag("a"))	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17545::::name.equals("button")::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::734::::37478::::37484::::adopter::::remainingA	false
org.jsoup.parser.HtmlTreeBuilderState::::772::::39137::::39168::::tb.generateImpliedEndTags(name)::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.HtmlTreeBuilderState::::734::::37478::::37484::::adopter::::currentForm	false
org.jsoup.parser.HtmlTreeBuilderState::::721::::36499::::36516::::lastNode.remove()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::771::::39085::::39112::::node.nodeName().equals(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("label"))	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.CdataSection	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.AfterDoctypePublicKeyword	false
org.jsoup.parser.HtmlTreeBuilderState::::768::::38937::::38986::::java.util.Iterator<org.jsoup.nodes.Element> it = stack.descendingIterator()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::768::::38937::::38986::::java.util.Iterator<org.jsoup.nodes.Element> it = stack.descendingIterator()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tbody"))	false
org.jsoup.parser.HtmlTreeBuilderState::::768::::38937::::38986::::java.util.Iterator<org.jsoup.nodes.Element> it = stack.descendingIterator()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("colgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::767::::38871::::38923::::org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> stack = tb.getStack()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::767::::38871::::38923::::org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> stack = tb.getStack()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tbody"))	false
org.jsoup.parser.HtmlTreeBuilderState::::767::::38871::::38923::::org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> stack = tb.getStack()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("colgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32785::::32815::::(tb.currentElement()) != formatEl::::tb.process(startTag)	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18089::::name.equals("a")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("form"))	false
org.jsoup.parser.HtmlTreeBuilder::::359::::11857::::12004::::while (it.hasNext()) {    org.jsoup.nodes.Element next = it.next();    if (next == el) {        return it.next();    }} ::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.HtmlTreeBuilder::::284::::9780::::9829::::java.util.Iterator<org.jsoup.nodes.Element> it = stack.descendingIterator()::::INSERT::::STATEMENT::::insert(el)	false
org.jsoup.parser.HtmlTreeBuilderState::::693::::34800::::34837::::!(tb.isInActiveFormattingElements(node))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("li"))	false
org.jsoup.parser.HtmlTreeBuilderState::::720::::36432::::36516::::if ((lastNode.parent()) != null)    lastNode.remove();::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("option"))	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32616::::32647::::!(tb.inScope(formatEl.nodeName()))::::INSERT::::STATEMENT::::if (node == formatEl)    break INNER;	false
org.jsoup.parser.Token::::69::::2152::::2215::::pendingAttributeValue.delete(0, pendingAttributeValue.length())::::INSERT::::STATEMENT::::if ((pendingAttributeValue) == null)    attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, "");else    attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, pendingAttributeValue.toString());	false
org.jsoup.parser.Token::::69::::2152::::2215::::pendingAttributeValue.delete(0, pendingAttributeValue.length())::::INSERT::::STATEMENT::::if ((pendingAttributeName) != null) {    newAttribute();}	false
org.jsoup.parser.Token::::69::::2152::::2215::::pendingAttributeValue.delete(0, pendingAttributeValue.length())::::INSERT::::STATEMENT::::if ((attributes) == null)    attributes = new org.jsoup.nodes.Attributes();	false
org.jsoup.parser.Token::::64::::1908::::1989::::attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, pendingAttributeValue.toString())::::INSERT::::STATEMENT::::if ((pendingAttributeValue) == null)    attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, "");else    attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, pendingAttributeValue.toString());	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39194::::39237::::!(name.equals(tb.currentElement().nodeName()))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39194::::39237::::!(name.equals(tb.currentElement().nodeName()))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tbody"))	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39194::::39237::::!(name.equals(tb.currentElement().nodeName()))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("colgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39194::::39237::::!(name.equals(tb.currentElement().nodeName()))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("button"))	false
org.jsoup.parser.Token::::76::::2434::::2448::::newAttribute()::::INSERT::::STATEMENT::::if ((pendingAttributeName) != null) {    newAttribute();}	false
org.jsoup.parser.Token::::76::::2434::::2448::::newAttribute()::::INSERT::::STATEMENT::::if ((attributes) == null)    attributes = new org.jsoup.nodes.Attributes();	false
org.jsoup.parser.HtmlTreeBuilderState::::414::::18792::::18826::::tb.pushActiveFormattingElements(a)::::DELETE::::STATEMENT	false
org.jsoup.parser.Token::::61::::1759::::1989::::if ((pendingAttributeValue) == null)    attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, "");else    attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, pendingAttributeValue.toString());::::INSERT::::STATEMENT::::if ((pendingAttributeValue) == null)    attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, "");else    attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, pendingAttributeValue.toString());	false
org.jsoup.parser.Token::::133::::4054::::4097::::pendingAttributeValue = new java.lang.StringBuilder()::::INSERT::::STATEMENT::::if ((pendingAttributeValue) == null)    pendingAttributeValue = new java.lang.StringBuilder();	false
org.jsoup.parser.Token::::133::::4054::::4097::::pendingAttributeValue = new java.lang.StringBuilder()::::INSERT::::STATEMENT::::if ((attributes) == null)    attributes = new org.jsoup.nodes.Attributes();	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33743::::33761::::furthestBlock = el::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::728::::36935::::36941::::adopter::::currentForm	false
org.jsoup.parser.HtmlTreeBuilderState::::775::::39300::::39324::::tb.popStackToClose(name)::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34734::::34762::::node = tb.aboveOnStack(node)::::INSERT::::STATEMENT::::closeCell(tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33662::::33702::::seenFormattingElement && (tb.isSpecial(el))::::tb.process(new org.jsoup.parser.Token.EndTag("option"))	false
org.jsoup.parser.HtmlTreeBuilderState::::414::::18792::::18826::::tb.pushActiveFormattingElements(a)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("body"))	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17545::::name.equals("button")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18122::::18163::::(tb.getActiveFormattingElement("a")) != null::::exitTableBody(t, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33759::::33760::::el::::currentForm	false
org.jsoup.parser.HtmlTreeBuilderState::::652::::32311::::32339::::return anyOtherEndTag(t, tb)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("noscript"))	false
org.jsoup.parser.HtmlTreeBuilder::::152::::5114::::5269::::if (errors.canAddError())    errors.add(new org.jsoup.parser.ParseError(reader.pos(), "Unexpected token [%s] when in state [%s]", currentToken.tokenType(), state));::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.Token::::65::::2007::::2032::::attributes.put(attribute)::::INSERT::::STATEMENT::::if ((pendingAttributeValue) == null)    attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, "");else    attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, pendingAttributeValue.toString());	false
org.jsoup.parser.HtmlTreeBuilder::::258::::9047::::9081::::return isElementInQueue(stack, el)::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.HtmlTreeBuilder::::258::::9047::::9081::::return isElementInQueue(stack, el)::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.HtmlTreeBuilderState::::766::::38824::::38857::::java.lang.String name = t.asEndTag().name()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("br"))	false
org.jsoup.parser.HtmlTreeBuilderState::::775::::39300::::39324::::tb.popStackToClose(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("option"))	false
org.jsoup.parser.HtmlTreeBuilderState::::693::::34800::::34837::::!(tb.isInActiveFormattingElements(node))::::INSERT::::STATEMENT::::closeCell(tb)	false
org.jsoup.parser.HtmlTreeBuilder::::569::::19927::::20238::::while (iter.hasNext()) {    org.jsoup.nodes.Element el = iter.next();    if (el == null)        break;    if (isSameFormattingElement(in, el))        numSeen++;    if (numSeen == 3) {        iter.remove();        break;    }} ::::INSERT::::STATEMENT::::insert(el)	false
org.jsoup.parser.HtmlTreeBuilderState::::691::::34680::::34695::::tb.onStack(node)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("li"))	false
org.jsoup.parser.HtmlTreeBuilderState::::768::::38937::::38986::::java.util.Iterator<org.jsoup.nodes.Element> it = stack.descendingIterator()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("button"))	false
org.jsoup.parser.HtmlTreeBuilderState::::767::::38871::::38923::::org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> stack = tb.getStack()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("button"))	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33743::::33761::::furthestBlock = el::::INSERT::::STATEMENT::::closeCell(tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36550::::36586::::commonAncestor.appendChild(lastNode)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("body"))	false
org.jsoup.parser.HtmlTreeBuilderState::::769::::39000::::39554::::while (it.hasNext()) {    org.jsoup.nodes.Element node = it.next();    if (node.nodeName().equals(name)) {        tb.generateImpliedEndTags(name);        if (!(name.equals(tb.currentElement().nodeName())))            tb.error(this);        tb.popStackToClose(name);        break;    }else {        if (tb.isSpecial(node)) {            tb.error(this);            return false;        }    }} ::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("hr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31734::::name.equals("sarcasm")::::INSERT::::STATEMENT::::if (lastNode == furthestBlock) {}	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32785::::32815::::(tb.currentElement()) != formatEl::::tb.process(new org.jsoup.parser.Token.EndTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::671::::33469::::33476::::formatEl::::commonAncestor	false
org.jsoup.parser.HtmlTreeBuilderState::::413::::18735::::18766::::org.jsoup.nodes.Element a = tb.insert(startTag)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::673::::33589::::33617::::seenFormattingElement = true::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("p"))	false
org.jsoup.parser.ParseErrorList::::20::::449::::455::::maxSize::::org.jsoup.parser.ParseErrorList.INITIAL_CAPACITY	false
org.jsoup.parser.HtmlTreeBuilderState::::691::::34680::::34695::::tb.onStack(node)::::INSERT::::STATEMENT::::closeCell(tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32390::::32397::::formatEl::::commonAncestor	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39194::::39237::::!(name.equals(tb.currentElement().nodeName()))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("body"))	false
org.jsoup.parser.HtmlTreeBuilder::::288::::9946::::9957::::it.remove()::::INSERT::::STATEMENT::::insert(el)	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32781::::32864::::if ((tb.currentElement()) != formatEl)    tb.error(this);::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32628::::32635::::formatEl::::commonAncestor	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32785::::32815::::(tb.currentElement()) != formatEl::::tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs))	false
org.jsoup.parser.TokeniserState::::748::::24962::::24988::::org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted::::org.jsoup.parser.TokeniserState.Doctype	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32808::::32815::::formatEl::::commonAncestor	false
org.jsoup.parser.HtmlTreeBuilderState::::768::::38937::::38986::::java.util.Iterator<org.jsoup.nodes.Element> it = stack.descendingIterator()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("noscript"))	false
org.jsoup.parser.HtmlTreeBuilderState::::767::::38871::::38923::::org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> stack = tb.getStack()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("noscript"))	false
org.jsoup.parser.HtmlTreeBuilderState::::651::::32261::::32268::::formatEl::::commonAncestor	false
org.jsoup.parser.HtmlTreeBuilderState::::669::::33334::::33338::::stack::::inputAttribs	false
org.jsoup.parser.HtmlTreeBuilderState::::721::::36499::::36516::::lastNode.remove()::::INSERT::::STATEMENT::::tb.process(startTag)	false
org.jsoup.parser.HtmlTreeBuilderState::::721::::36499::::36516::::lastNode.remove()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs))	false
org.jsoup.parser.HtmlTreeBuilder::::289::::9975::::9986::::return true::::INSERT::::STATEMENT::::insertNode(el)	false
org.jsoup.parser.HtmlTreeBuilderState::::769::::39000::::39554::::while (it.hasNext()) {    org.jsoup.nodes.Element node = it.next();    if (node.nodeName().equals(name)) {        tb.generateImpliedEndTags(name);        if (!(name.equals(tb.currentElement().nodeName())))            tb.error(this);        tb.popStackToClose(name);        break;    }else {        if (tb.isSpecial(node)) {            tb.error(this);            return false;        }    }} ::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::769::::39000::::39554::::while (it.hasNext()) {    org.jsoup.nodes.Element node = it.next();    if (node.nodeName().equals(name)) {        tb.generateImpliedEndTags(name);        if (!(name.equals(tb.currentElement().nodeName())))            tb.error(this);        tb.popStackToClose(name);        break;    }else {        if (tb.isSpecial(node)) {            tb.error(this);            return false;        }    }} ::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("a"))	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33662::::33702::::seenFormattingElement && (tb.isSpecial(el))::::tb.process(new org.jsoup.parser.Token.Character(prompt))	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32378::::32398::::!(tb.onStack(formatEl))::::INSERT::::STATEMENT::::if (node == formatEl)    break INNER;	false
org.jsoup.parser.HtmlTreeBuilderState::::775::::39300::::39324::::tb.popStackToClose(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("hr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18859::::18989::::org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("option"))	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39190::::39278::::if (!(name.equals(tb.currentElement().nodeName())))    tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("optgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39190::::39278::::if (!(name.equals(tb.currentElement().nodeName())))    tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::769::::39000::::39554::::while (it.hasNext()) {    org.jsoup.nodes.Element node = it.next();    if (node.nodeName().equals(name)) {        tb.generateImpliedEndTags(name);        if (!(name.equals(tb.currentElement().nodeName())))            tb.error(this);        tb.popStackToClose(name);        break;    }else {        if (tb.isSpecial(node)) {            tb.error(this);            return false;        }    }} ::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("select"))	false
org.jsoup.parser.HtmlTreeBuilderState::::768::::38937::::38986::::java.util.Iterator<org.jsoup.nodes.Element> it = stack.descendingIterator()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("th"))	false
org.jsoup.parser.HtmlTreeBuilderState::::768::::38937::::38986::::java.util.Iterator<org.jsoup.nodes.Element> it = stack.descendingIterator()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("td"))	false
org.jsoup.parser.HtmlTreeBuilderState::::767::::38871::::38923::::org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> stack = tb.getStack()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("th"))	false
org.jsoup.parser.HtmlTreeBuilderState::::767::::38871::::38923::::org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> stack = tb.getStack()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("td"))	false
org.jsoup.parser.HtmlTreeBuilderState::::413::::18735::::18766::::org.jsoup.nodes.Element a = tb.insert(startTag)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("body"))	false
org.jsoup.parser.HtmlTreeBuilderState::::771::::39085::::39112::::node.nodeName().equals(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("head"))	false
org.jsoup.parser.HtmlTreeBuilderState::::771::::39085::::39112::::node.nodeName().equals(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("li"))	false
org.jsoup.parser.HtmlTreeBuilderState::::771::::39085::::39112::::node.nodeName().equals(name)::::INSERT::::STATEMENT::::closeCell(tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33759::::33760::::el::::remainingA	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18122::::18163::::(tb.getActiveFormattingElement("a")) != null::::handleMissingTr(t, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18089::::name.equals("a")::::INSERT::::STATEMENT::::if (lastNode == furthestBlock) {}	false
org.jsoup.parser.HtmlTreeBuilderState::::768::::38937::::38986::::java.util.Iterator<org.jsoup.nodes.Element> it = stack.descendingIterator()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::767::::38871::::38923::::org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> stack = tb.getStack()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33658::::33838::::if (seenFormattingElement && (tb.isSpecial(el))) {    furthestBlock = el;    break;}::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::721::::36499::::36516::::lastNode.remove()::::INSERT::::STATEMENT::::org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17545::::name.equals("button")::::INSERT::::STATEMENT::::if (lastNode == furthestBlock) {}	false
org.jsoup.parser.HtmlTreeBuilderState::::772::::39137::::39168::::tb.generateImpliedEndTags(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("hr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::772::::39137::::39168::::tb.generateImpliedEndTags(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("select"))	false
org.jsoup.parser.HtmlTreeBuilderState::::772::::39137::::39168::::tb.generateImpliedEndTags(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("a"))	false
org.jsoup.parser.HtmlTreeBuilder::::152::::5118::::5137::::errors.canAddError()::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17545::::name.equals("button")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("option"))	false
org.jsoup.parser.HtmlTreeBuilderState::::691::::34680::::34695::::tb.onStack(node)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag(name))	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18118::::18649::::if ((tb.getActiveFormattingElement("a")) != null) {    tb.error(this);    tb.process(new org.jsoup.parser.Token.EndTag("a"));    org.jsoup.nodes.Element remainingA = tb.getFromStack("a");    if (remainingA != null) {        tb.removeFromActiveFormattingElements(remainingA);        tb.removeFromStack(remainingA);    }}::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("hr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34734::::34762::::node = tb.aboveOnStack(node)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag(name))	false
org.jsoup.parser.HtmlTreeBuilderState::::728::::36935::::36941::::adopter::::remainingA	false
org.jsoup.parser.HtmlTreeBuilderState::::771::::39085::::39112::::node.nodeName().equals(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("nobr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::693::::34800::::34837::::!(tb.isInActiveFormattingElements(node))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag(name))	false
org.jsoup.parser.HtmlTreeBuilderState::::720::::36432::::36516::::if ((lastNode.parent()) != null)    lastNode.remove();::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("hr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32785::::32815::::(tb.currentElement()) != formatEl::::tb.process(new org.jsoup.parser.Token.StartTag("label"))	false
org.jsoup.parser.HtmlTreeBuilder::::152::::5114::::5269::::if (errors.canAddError())    errors.add(new org.jsoup.parser.ParseError(reader.pos(), "Unexpected token [%s] when in state [%s]", currentToken.tokenType(), state));::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.HtmlTreeBuilder::::359::::11857::::12004::::while (it.hasNext()) {    org.jsoup.nodes.Element next = it.next();    if (next == el) {        return it.next();    }} ::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.RCDATAEndTagName	false
org.jsoup.parser.HtmlTreeBuilder::::554::::18849::::18876::::java.lang.String name = el.nodeName()::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32781::::32864::::if ((tb.currentElement()) != formatEl)    tb.error(this);::::INSERT::::STATEMENT::::if (lastNode == furthestBlock) {}	false
org.jsoup.parser.Token::::64::::1908::::1989::::attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, pendingAttributeValue.toString())::::INSERT::::STATEMENT::::if ((attributes) == null)    attributes = new org.jsoup.nodes.Attributes();	false
org.jsoup.parser.HtmlTreeBuilderState::::771::::39085::::39112::::node.nodeName().equals(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag(name))	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34734::::34762::::node = tb.aboveOnStack(node)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("button"))	false
org.jsoup.parser.HtmlTreeBuilderState::::721::::36499::::36506::::lastNode::::inputAttribs	false
org.jsoup.parser.HtmlTreeBuilderState::::720::::36432::::36516::::if ((lastNode.parent()) != null)    lastNode.remove();::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("select"))	false
org.jsoup.parser.HtmlTreeBuilderState::::673::::33589::::33617::::seenFormattingElement = true::::INSERT::::STATEMENT::::if (node == formatEl)    break INNER;	false
org.jsoup.parser.HtmlTreeBuilderState::::632::::31114::::31168::::org.jsoup.helper.StringUtil.in(name, "h1", "h2", "h3", "h4", "h5", "h6")::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31734::::name.equals("sarcasm")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("p"))	false
org.jsoup.parser.HtmlTreeBuilderState::::784::::39568::::39579::::return true::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33658::::33838::::if (seenFormattingElement && (tb.isSpecial(el))) {    furthestBlock = el;    break;}::::INSERT::::STATEMENT::::if (lastNode == furthestBlock) {}	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32378::::32398::::!(tb.onStack(formatEl))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32616::::32647::::!(tb.inScope(formatEl.nodeName()))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::414::::18792::::18826::::tb.pushActiveFormattingElements(a)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("noscript"))	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32785::::32815::::(tb.currentElement()) != formatEl::::anyOtherEndTag(t, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::622::::30613::::30643::::org.jsoup.helper.StringUtil.in(name, "dd", "dt")::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::649::::32138::::32138::::i::::j	false
org.jsoup.parser.HtmlTreeBuilderState::::775::::39300::::39324::::tb.popStackToClose(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("select"))	false
org.jsoup.parser.HtmlTreeBuilderState::::649::::32131::::32131::::i::::j	false
org.jsoup.parser.HtmlTreeBuilderState::::661::::32850::::32864::::tb.error(this)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("p"))	false
org.jsoup.parser.Token::::65::::2007::::2032::::attributes.put(attribute)::::INSERT::::STATEMENT::::if ((attributes) == null)    attributes = new org.jsoup.nodes.Attributes();	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32781::::32864::::if ((tb.currentElement()) != formatEl)    tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("p"))	false
org.jsoup.parser.HtmlTreeBuilder::::288::::9946::::9957::::it.remove()::::INSERT::::STATEMENT::::if (el == null)    break;	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36550::::36586::::commonAncestor.appendChild(lastNode)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("th"))	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36550::::36586::::commonAncestor.appendChild(lastNode)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("td"))	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33743::::33761::::furthestBlock = el::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("button"))	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32781::::32864::::if ((tb.currentElement()) != formatEl)    tb.error(this);::::INSERT::::STATEMENT::::if (node == formatEl)    break INNER;	false
org.jsoup.parser.HtmlTreeBuilderState::::412::::18675::::18709::::tb.reconstructFormattingElements()::::INSERT::::STATEMENT::::if (lastNode == furthestBlock) {}	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18118::::18649::::if ((tb.getActiveFormattingElement("a")) != null) {    tb.error(this);    tb.process(new org.jsoup.parser.Token.EndTag("a"));    org.jsoup.nodes.Element remainingA = tb.getFromStack("a");    if (remainingA != null) {        tb.removeFromActiveFormattingElements(remainingA);        tb.removeFromStack(remainingA);    }}::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.Character(prompt))	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.ScriptDataEscapedEndTagName	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.ScriptDataDoubleEscapeStart	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33658::::33838::::if (seenFormattingElement && (tb.isSpecial(el))) {    furthestBlock = el;    break;}::::INSERT::::STATEMENT::::if (node == formatEl)    break INNER;	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18118::::18649::::if ((tb.getActiveFormattingElement("a")) != null) {    tb.error(this);    tb.process(new org.jsoup.parser.Token.EndTag("a"));    org.jsoup.nodes.Element remainingA = tb.getFromStack("a");    if (remainingA != null) {        tb.removeFromActiveFormattingElements(remainingA);        tb.removeFromStack(remainingA);    }}::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("select"))	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36550::::36586::::commonAncestor.appendChild(lastNode)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("noscript"))	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35021::::35090::::if (node == formatEl)    break INNER;::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("button"))	false
org.jsoup.parser.HtmlTreeBuilderState::::768::::38937::::38986::::java.util.Iterator<org.jsoup.nodes.Element> it = stack.descendingIterator()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("br"))	false
org.jsoup.parser.HtmlTreeBuilderState::::767::::38871::::38923::::org.jsoup.helper.DescendableLinkedList<org.jsoup.nodes.Element> stack = tb.getStack()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("br"))	false
org.jsoup.parser.HtmlTreeBuilderState::::775::::39300::::39324::::tb.popStackToClose(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("a"))	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35033::::35040::::formatEl::::remainingA	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30134::::name.equals("li")::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.TokeniserState::::888::::30055::::30818::::switch (c) {    case '\t' :    case '\n' :    case '\r' :    case '\f' :    case ' ' :        t.transition(org.jsoup.parser.TokeniserState.BeforeAttributeName);        break;    case '/' :        t.transition(org.jsoup.parser.TokeniserState.SelfClosingStartTag);        break;    case '>' :        t.emitTagPending();        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case org.jsoup.parser.TokeniserState.eof :        t.eofError(this);        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    default :        t.error(this);        r.unconsume();        t.transition(org.jsoup.parser.TokeniserState.BeforeAttributeName);}::::INSERT::::STATEMENT::::anythingElse(t, r)	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39194::::39237::::!(name.equals(tb.currentElement().nodeName()))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("br"))	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39194::::39237::::!(name.equals(tb.currentElement().nodeName()))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("noscript"))	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39194::::39237::::!(name.equals(tb.currentElement().nodeName()))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::715::::36106::::36119::::commonAncestor::::a	false
org.jsoup.parser.HtmlTreeBuilderState::::691::::34680::::34695::::tb.onStack(node)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("button"))	false
org.jsoup.parser.HtmlTreeBuilderState::::772::::39137::::39168::::tb.generateImpliedEndTags(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33743::::33761::::furthestBlock = el::::INSERT::::STATEMENT::::if (notIgnored)    return tb.process(endTag);	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33662::::33702::::seenFormattingElement && (tb.isSpecial(el))::::tb.process(new org.jsoup.parser.Token.StartTag("hr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::693::::34800::::34837::::!(tb.isInActiveFormattingElements(node))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("button"))	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18118::::18649::::if ((tb.getActiveFormattingElement("a")) != null) {    tb.error(this);    tb.process(new org.jsoup.parser.Token.EndTag("a"));    org.jsoup.nodes.Element remainingA = tb.getFromStack("a");    if (remainingA != null) {        tb.removeFromActiveFormattingElements(remainingA);        tb.removeFromStack(remainingA);    }}::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18118::::18649::::if ((tb.getActiveFormattingElement("a")) != null) {    tb.error(this);    tb.process(new org.jsoup.parser.Token.EndTag("a"));    org.jsoup.nodes.Element remainingA = tb.getFromStack("a");    if (remainingA != null) {        tb.removeFromActiveFormattingElements(remainingA);        tb.removeFromStack(remainingA);    }}::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("a"))	false
org.jsoup.parser.HtmlTreeBuilderState::::775::::39300::::39324::::tb.popStackToClose(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36550::::36563::::commonAncestor::::a	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33743::::33761::::furthestBlock = el::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag(name))	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39194::::39237::::!(name.equals(tb.currentElement().nodeName()))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("th"))	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39194::::39237::::!(name.equals(tb.currentElement().nodeName()))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("td"))	false
org.jsoup.parser.HtmlTreeBuilderState::::661::::32850::::32864::::tb.error(this)::::INSERT::::STATEMENT::::if (lastNode == furthestBlock) {}	false
org.jsoup.parser.HtmlTreeBuilderState::::645::::31858::::32001::::org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32616::::32647::::!(tb.inScope(formatEl.nodeName()))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("option"))	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33517::::33530::::commonAncestor::::currentForm	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33662::::33702::::seenFormattingElement && (tb.isSpecial(el))::::tb.process(new org.jsoup.parser.Token.EndTag("select"))	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33662::::33702::::seenFormattingElement && (tb.isSpecial(el))::::tb.process(startTag)	false
org.jsoup.parser.HtmlTreeBuilderState::::670::::33412::::33416::::stack::::inputAttribs	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.ScriptDataDoubleEscapeEnd	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32785::::32815::::(tb.currentElement()) != formatEl::::tb.process(new org.jsoup.parser.Token.EndTag("table"))	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39190::::39278::::if (!(name.equals(tb.currentElement().nodeName())))    tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39190::::39278::::if (!(name.equals(tb.currentElement().nodeName())))    tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tbody"))	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39190::::39278::::if (!(name.equals(tb.currentElement().nodeName())))    tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("colgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39190::::39278::::if (!(name.equals(tb.currentElement().nodeName())))    tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("button"))	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39190::::39278::::if (!(name.equals(tb.currentElement().nodeName())))    tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("body"))	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33517::::33551::::commonAncestor = stack.get((si - 1))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32785::::32815::::(tb.currentElement()) != formatEl::::tb.process(endTag)	false
org.jsoup.parser.HtmlTreeBuilderState::::413::::18735::::18766::::org.jsoup.nodes.Element a = tb.insert(startTag)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("noscript"))	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32378::::32398::::!(tb.onStack(formatEl))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("option"))	false
org.jsoup.parser.HtmlTreeBuilderState::::412::::18675::::18709::::tb.reconstructFormattingElements()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("form"))	false
org.jsoup.parser.HtmlTreeBuilder::::289::::9975::::9986::::return true::::INSERT::::STATEMENT::::if (el == null)    break;	false
org.jsoup.parser.HtmlTreeBuilder::::554::::18849::::18876::::java.lang.String name = el.nodeName()::::INSERT::::STATEMENT::::if (el == null)    break;	false
org.jsoup.parser.HtmlTreeBuilderState::::720::::36432::::36516::::if ((lastNode.parent()) != null)    lastNode.remove();::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.HtmlTreeBuilderState::::720::::36432::::36516::::if ((lastNode.parent()) != null)    lastNode.remove();::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.Character(prompt))	false
org.jsoup.parser.HtmlTreeBuilderState::::679::::33902::::33914::::furthestBlock::::replacement	false
org.jsoup.parser.HtmlTreeBuilderState::::730::::37116::::37122::::adopter::::body	false
org.jsoup.parser.HtmlTreeBuilderState::::721::::36499::::36516::::lastNode.remove()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::769::::39000::::39554::::while (it.hasNext()) {    org.jsoup.nodes.Element node = it.next();    if (node.nodeName().equals(name)) {        tb.generateImpliedEndTags(name);        if (!(name.equals(tb.currentElement().nodeName())))            tb.error(this);        tb.popStackToClose(name);        break;    }else {        if (tb.isSpecial(node)) {            tb.error(this);            return false;        }    }} ::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34734::::34762::::node = tb.aboveOnStack(node)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("br"))	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34734::::34762::::node = tb.aboveOnStack(node)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::691::::34680::::34695::::tb.onStack(node)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18089::::name.equals("a")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("hr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18859::::18989::::org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("hr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::697::::35079::::35090::::break INNER::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("th"))	false
org.jsoup.parser.HtmlTreeBuilderState::::697::::35079::::35090::::break INNER::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("td"))	false
org.jsoup.parser.HtmlTreeBuilderState::::784::::39568::::39579::::return true::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("p"))	false
org.jsoup.parser.HtmlTreeBuilder::::285::::9839::::10010::::while (it.hasNext()) {    org.jsoup.nodes.Element next = it.next();    if (next == el) {        it.remove();        return true;    }} ::::INSERT::::STATEMENT::::if (el == null)    break;	false
org.jsoup.parser.HtmlTreeBuilderState::::693::::34800::::34837::::!(tb.isInActiveFormattingElements(node))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18089::::name.equals("a")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("option"))	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34734::::34762::::node = tb.aboveOnStack(node)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tbody"))	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32612::::32864::::if (!(tb.inScope(formatEl.nodeName()))) {    tb.error(this);    return false;}else    if ((tb.currentElement()) != formatEl)        tb.error(this);::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.HtmlTreeBuilder::::554::::18863::::18864::::el::::getFromStack("table")	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33658::::33838::::if (seenFormattingElement && (tb.isSpecial(el))) {    furthestBlock = el;    break;}::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("p"))	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18118::::18649::::if ((tb.getActiveFormattingElement("a")) != null) {    tb.error(this);    tb.process(new org.jsoup.parser.Token.EndTag("a"));    org.jsoup.nodes.Element remainingA = tb.getFromStack("a");    if (remainingA != null) {        tb.removeFromActiveFormattingElements(remainingA);        tb.removeFromStack(remainingA);    }}::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::771::::39085::::39112::::node.nodeName().equals(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35021::::35090::::if (node == formatEl)    break INNER;::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag(name))	false
org.jsoup.parser.HtmlTreeBuilder::::289::::9975::::9986::::return true::::INSERT::::STATEMENT::::insert(el)	false
org.jsoup.parser.HtmlTreeBuilder::::582::::20248::::20274::::formattingElements.add(in)::::INSERT::::STATEMENT::::if (el == null)    break;	false
org.jsoup.parser.HtmlTreeBuilder::::567::::19828::::19843::::int numSeen = 0::::INSERT::::STATEMENT::::if (el == null)    break;	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33662::::33702::::seenFormattingElement && (tb.isSpecial(el))::::tb.process(new org.jsoup.parser.Token.EndTag("a"))	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17545::::name.equals("button")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("hr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::784::::39568::::39579::::return true::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("hr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35021::::35090::::if (node == formatEl)    break INNER;::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("br"))	false
org.jsoup.parser.HtmlTreeBuilderState::::651::::32261::::32276::::formatEl == null::::node == formatEl	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33517::::33551::::commonAncestor = stack.get((si - 1))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("option"))	false
org.jsoup.parser.HtmlTreeBuilderState::::730::::37116::::37122::::adopter::::form	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33743::::33761::::furthestBlock = el::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("br"))	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33743::::33761::::furthestBlock = el::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("form"))	false
org.jsoup.parser.HtmlTreeBuilder::::645::::22766::::22777::::it.remove()::::INSERT::::STATEMENT::::insertNode(el)	false
org.jsoup.parser.HtmlTreeBuilderState::::691::::34680::::34695::::tb.onStack(node)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tbody"))	false
org.jsoup.parser.HtmlTreeBuilder::::371::::12175::::12193::::stack.add((i + 1), in)::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.HtmlTreeBuilderState::::412::::18675::::18709::::tb.reconstructFormattingElements()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("hr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::693::::34800::::34837::::!(tb.isInActiveFormattingElements(node))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tbody"))	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32785::::32815::::(tb.currentElement()) != formatEl::::tb.process(new org.jsoup.parser.Token.EndTag("nobr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18859::::18989::::org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34734::::34762::::node = tb.aboveOnStack(node)::::INSERT::::STATEMENT::::if (notIgnored)    return tb.process(endTag);	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31734::::name.equals("sarcasm")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33662::::33702::::seenFormattingElement && (tb.isSpecial(el))::::tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs))	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18089::::name.equals("a")::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.TokeniserState::::810::::27235::::27315::::if ((value.length()) > 0)    t.tagPending.appendAttributeValue(value);::::INSERT::::STATEMENT::::anythingElse(t, r)	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39190::::39278::::if (!(name.equals(tb.currentElement().nodeName())))    tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("th"))	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39190::::39278::::if (!(name.equals(tb.currentElement().nodeName())))    tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("td"))	false
org.jsoup.parser.HtmlTreeBuilder::::287::::9916::::9925::::next == el::::isElementInQueue(formattingElements, el)	false
org.jsoup.parser.HtmlTreeBuilderState::::652::::32311::::32339::::return anyOtherEndTag(t, tb)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("th"))	false
org.jsoup.parser.HtmlTreeBuilderState::::652::::32311::::32339::::return anyOtherEndTag(t, tb)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("td"))	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35021::::35090::::if (node == formatEl)    break INNER;::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::414::::18792::::18826::::tb.pushActiveFormattingElements(a)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("th"))	false
org.jsoup.parser.HtmlTreeBuilderState::::414::::18792::::18826::::tb.pushActiveFormattingElements(a)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("td"))	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18122::::18163::::(tb.getActiveFormattingElement("a")) != null::::org.jsoup.parser.HtmlTreeBuilderState.InBody.process(t, tb)	false
org.jsoup.parser.HtmlTreeBuilder::::289::::9975::::9986::::return true::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.HtmlTreeBuilderState::::720::::36432::::36516::::if ((lastNode.parent()) != null)    lastNode.remove();::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("a"))	false
org.jsoup.parser.HtmlTreeBuilderState::::693::::34800::::34837::::!(tb.isInActiveFormattingElements(node))::::INSERT::::STATEMENT::::if (notIgnored)    return tb.process(endTag);	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18859::::18989::::org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("select"))	false
org.jsoup.parser.Token::::69::::2152::::2215::::pendingAttributeValue.delete(0, pendingAttributeValue.length())::::INSERT::::STATEMENT::::newAttribute()	false
org.jsoup.parser.HtmlTreeBuilderState::::775::::39300::::39324::::tb.popStackToClose(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::721::::36499::::36516::::lastNode.remove()::::INSERT::::STATEMENT::::closeCell(tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36577::::36584::::lastNode::::currentForm	false
org.jsoup.parser.HtmlTreeBuilderState::::721::::36499::::36506::::lastNode::::currentForm	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18089::::name.equals("a")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.Character(prompt))	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18859::::18989::::org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.Character(prompt))	false
org.jsoup.parser.HtmlTreeBuilderState::::720::::36436::::36443::::lastNode::::currentForm	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33534::::33538::::stack::::inputAttribs	false
org.jsoup.parser.HtmlTreeBuilderState::::673::::33589::::33617::::seenFormattingElement = true::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17545::::name.equals("button")::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32785::::32815::::(tb.currentElement()) != formatEl::::tb.process(new org.jsoup.parser.Token.StartTag("head"))	false
org.jsoup.parser.HtmlTreeBuilderState::::720::::36432::::36516::::if ((lastNode.parent()) != null)    lastNode.remove();::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18118::::18649::::if ((tb.getActiveFormattingElement("a")) != null) {    tb.error(this);    tb.process(new org.jsoup.parser.Token.EndTag("a"));    org.jsoup.nodes.Element remainingA = tb.getFromStack("a");    if (remainingA != null) {        tb.removeFromActiveFormattingElements(remainingA);        tb.removeFromStack(remainingA);    }}::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34734::::34762::::node = tb.aboveOnStack(node)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("optgroup"))	false
org.jsoup.parser.HtmlTreeBuilder::::568::::19853::::19917::::java.util.Iterator<org.jsoup.nodes.Element> iter = formattingElements.descendingIterator()::::INSERT::::STATEMENT::::if (el == null)    break;	false
org.jsoup.parser.HtmlTreeBuilderState::::772::::39137::::39168::::tb.generateImpliedEndTags(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::771::::39085::::39112::::node.nodeName().equals(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("optgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17545::::name.equals("button")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("select"))	false
org.jsoup.parser.HtmlTreeBuilderState::::691::::34680::::34695::::tb.onStack(node)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("colgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::769::::39000::::39554::::while (it.hasNext()) {    org.jsoup.nodes.Element node = it.next();    if (node.nodeName().equals(name)) {        tb.generateImpliedEndTags(name);        if (!(name.equals(tb.currentElement().nodeName())))            tb.error(this);        tb.popStackToClose(name);        break;    }else {        if (tb.isSpecial(node)) {            tb.error(this);            return false;        }    }} ::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("head"))	false
org.jsoup.parser.Token::::69::::2152::::2215::::pendingAttributeValue.delete(0, pendingAttributeValue.length())::::DELETE::::STATEMENT	false
org.jsoup.parser.Token::::76::::2434::::2448::::newAttribute()::::DELETE::::STATEMENT	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33517::::33530::::commonAncestor::::remainingA	false
org.jsoup.parser.HtmlTreeBuilderState::::691::::34680::::34695::::tb.onStack(node)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("br"))	false
org.jsoup.parser.HtmlTreeBuilderState::::661::::32850::::32864::::tb.error(this)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("form"))	false
org.jsoup.parser.Token::::65::::2007::::2032::::attributes.put(attribute)::::DELETE::::STATEMENT	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17545::::name.equals("button")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.Character(prompt))	false
org.jsoup.parser.HtmlTreeBuilderState::::693::::34800::::34837::::!(tb.isInActiveFormattingElements(node))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("colgroup"))	false
org.jsoup.parser.HtmlTreeBuilder::::262::::9192::::9241::::java.util.Iterator<org.jsoup.nodes.Element> it = queue.descendingIterator()::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.HtmlTreeBuilderState::::730::::37116::::37122::::adopter::::second	false
org.jsoup.parser.HtmlTreeBuilderState::::645::::31858::::32001::::org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::if (lastNode == furthestBlock) {}	false
org.jsoup.parser.HtmlTreeBuilderState::::693::::34800::::34837::::!(tb.isInActiveFormattingElements(node))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("br"))	false
org.jsoup.parser.HtmlTreeBuilder::::568::::19853::::19917::::java.util.Iterator<org.jsoup.nodes.Element> iter = formattingElements.descendingIterator()::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.HtmlTreeBuilder::::254::::8984::::8996::::return stack::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33662::::33702::::seenFormattingElement && (tb.isSpecial(el))::::tb.process(new org.jsoup.parser.Token.EndTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::734::::37478::::37484::::adopter::::body	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33743::::33761::::furthestBlock = el::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tbody"))	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32612::::32864::::if (!(tb.inScope(formatEl.nodeName()))) {    tb.error(this);    return false;}else    if ((tb.currentElement()) != formatEl)        tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("p"))	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18859::::18989::::org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("a"))	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.ScriptDataEscapedEndTagOpen	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32785::::32815::::(tb.currentElement()) != formatEl::::tb.process(new org.jsoup.parser.Token.EndTag("li"))	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18089::::name.equals("a")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("select"))	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32785::::32815::::(tb.currentElement()) != formatEl::::tb.process(new org.jsoup.parser.Token.EndTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::720::::36432::::36516::::if ((lastNode.parent()) != null)    lastNode.remove();::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34734::::34762::::node = tb.aboveOnStack(node)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("colgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35021::::35090::::if (node == formatEl)    break INNER;::::INSERT::::STATEMENT::::closeCell(tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32612::::32864::::if (!(tb.inScope(formatEl.nodeName()))) {    tb.error(this);    return false;}else    if ((tb.currentElement()) != formatEl)        tb.error(this);::::INSERT::::STATEMENT::::if (lastNode == furthestBlock) {}	false
org.jsoup.parser.HtmlTreeBuilderState::::673::::33589::::33617::::seenFormattingElement = true::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("option"))	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39190::::39278::::if (!(name.equals(tb.currentElement().nodeName())))    tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("noscript"))	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32785::::32815::::(tb.currentElement()) != formatEl::::tb.process(new org.jsoup.parser.Token.EndTag("body"))	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33662::::33702::::seenFormattingElement && (tb.isSpecial(el))::::anyOtherEndTag(t, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17545::::name.equals("button")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("a"))	false
org.jsoup.parser.HtmlTreeBuilderState::::413::::18735::::18766::::org.jsoup.nodes.Element a = tb.insert(startTag)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("th"))	false
org.jsoup.parser.HtmlTreeBuilderState::::413::::18735::::18766::::org.jsoup.nodes.Element a = tb.insert(startTag)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("td"))	false
org.jsoup.parser.HtmlTreeBuilderState::::775::::39300::::39324::::tb.popStackToClose(name)::::INSERT::::STATEMENT::::closeCell(tb)	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.AfterDoctypeSystemKeyword	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18118::::18649::::if ((tb.getActiveFormattingElement("a")) != null) {    tb.error(this);    tb.process(new org.jsoup.parser.Token.EndTag("a"));    org.jsoup.nodes.Element remainingA = tb.getFromStack("a");    if (remainingA != null) {        tb.removeFromActiveFormattingElements(remainingA);        tb.removeFromStack(remainingA);    }}::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs))	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"html"	false
org.jsoup.parser.HtmlTreeBuilderState::::691::::34680::::34695::::tb.onStack(node)::::INSERT::::STATEMENT::::if (notIgnored)    return tb.process(endTag);	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.ScriptDataEscapeStartDash	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.ScriptDataEndTagName	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.RawtextEndTagOpen	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.RawtextEndTagName	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.RCDATAEndTagOpen	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.CommentStart	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35021::::35090::::if (node == formatEl)    break INNER;::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tbody"))	false
org.jsoup.parser.HtmlTreeBuilder::::287::::9916::::9925::::next == el::::isElementInQueue(stack, el)	false
org.jsoup.parser.HtmlTreeBuilderState::::769::::39000::::39554::::while (it.hasNext()) {    org.jsoup.nodes.Element node = it.next();    if (node.nodeName().equals(name)) {        tb.generateImpliedEndTags(name);        if (!(name.equals(tb.currentElement().nodeName())))            tb.error(this);        tb.popStackToClose(name);        break;    }else {        if (tb.isSpecial(node)) {            tb.error(this);            return false;        }    }} ::::INSERT::::STATEMENT::::closeCell(tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32378::::32398::::!(tb.onStack(formatEl))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("select"))	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32374::::32864::::if (!(tb.onStack(formatEl))) {    tb.error(this);    tb.removeFromActiveFormattingElements(formatEl);    return true;}else    if (!(tb.inScope(formatEl.nodeName()))) {        tb.error(this);        return false;    }else        if ((tb.currentElement()) != formatEl)            tb.error(this);::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32616::::32647::::!(tb.inScope(formatEl.nodeName()))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("select"))	false
org.jsoup.parser.Token::::132::::4003::::4097::::if ((pendingAttributeValue) == null)    pendingAttributeValue = new java.lang.StringBuilder();::::INSERT::::STATEMENT::::if ((pendingAttributeValue) == null)    pendingAttributeValue = new java.lang.StringBuilder();	false
org.jsoup.parser.Token::::132::::4003::::4097::::if ((pendingAttributeValue) == null)    pendingAttributeValue = new java.lang.StringBuilder();::::INSERT::::STATEMENT::::if ((attributes) == null)    attributes = new org.jsoup.nodes.Attributes();	false
org.jsoup.parser.HtmlTreeBuilderState::::730::::37116::::37122::::adopter::::html	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35025::::35028::::node::::remainingA	false
org.jsoup.parser.HtmlTreeBuilderState::::693::::34800::::34837::::!(tb.isInActiveFormattingElements(node))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("optgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::734::::37478::::37484::::adopter::::second	false
org.jsoup.parser.Token::::65::::2007::::2016::::attributes::::new org.jsoup.nodes.Attributes()	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18859::::18989::::org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::720::::36436::::36443::::lastNode::::remainingA	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33662::::33702::::seenFormattingElement && (tb.isSpecial(el))::::tb.process(endTag)	false
org.jsoup.parser.HtmlTreeBuilderState::::691::::34680::::34695::::tb.onStack(node)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33759::::33760::::el::::body	false
org.jsoup.parser.HtmlTreeBuilderState::::720::::36432::::36516::::if ((lastNode.parent()) != null)    lastNode.remove();::::INSERT::::STATEMENT::::tb.process(startTag)	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32781::::32864::::if ((tb.currentElement()) != formatEl)    tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::721::::36499::::36506::::lastNode::::remainingA	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32378::::32398::::!(tb.onStack(formatEl))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("hr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32616::::32647::::!(tb.inScope(formatEl.nodeName()))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("hr"))	false
org.jsoup.parser.TokeniserState::::811::::27275::::27315::::t.tagPending.appendAttributeValue(value)::::INSERT::::STATEMENT::::anythingElse(t, r)	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36577::::36584::::lastNode::::remainingA	false
org.jsoup.parser.HtmlTreeBuilderState::::693::::34800::::34837::::!(tb.isInActiveFormattingElements(node))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tr"))	false
org.jsoup.parser.Token::::118::::3596::::3632::::pendingAttributeValue.append(append)::::INSERT::::STATEMENT::::newAttribute()	false
org.jsoup.parser.HtmlTreeBuilderState::::769::::39000::::39554::::while (it.hasNext()) {    org.jsoup.nodes.Element node = it.next();    if (node.nodeName().equals(name)) {        tb.generateImpliedEndTags(name);        if (!(name.equals(tb.currentElement().nodeName())))            tb.error(this);        tb.popStackToClose(name);        break;    }else {        if (tb.isSpecial(node)) {            tb.error(this);            return false;        }    }} ::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("li"))	false
org.jsoup.parser.HtmlTreeBuilderState::::645::::31858::::32001::::org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("p"))	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33743::::33761::::furthestBlock = el::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("optgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33662::::33702::::seenFormattingElement && (tb.isSpecial(el))::::tb.process(new org.jsoup.parser.Token.StartTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18118::::18649::::if ((tb.getActiveFormattingElement("a")) != null) {    tb.error(this);    tb.process(new org.jsoup.parser.Token.EndTag("a"));    org.jsoup.nodes.Element remainingA = tb.getFromStack("a");    if (remainingA != null) {        tb.removeFromActiveFormattingElements(remainingA);        tb.removeFromStack(remainingA);    }}::::INSERT::::STATEMENT::::tb.process(startTag)	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18118::::18649::::if ((tb.getActiveFormattingElement("a")) != null) {    tb.error(this);    tb.process(new org.jsoup.parser.Token.EndTag("a"));    org.jsoup.nodes.Element remainingA = tb.getFromStack("a");    if (remainingA != null) {        tb.removeFromActiveFormattingElements(remainingA);        tb.removeFromStack(remainingA);    }}::::INSERT::::STATEMENT::::org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb)	false
org.jsoup.parser.TokeniserState::::810::::27239::::27243::::value::::"<"	false
org.jsoup.parser.Token::::64::::1908::::1989::::attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, pendingAttributeValue.toString())::::INSERT::::STATEMENT::::if ((pendingAttributeValue) == null)    pendingAttributeValue = new java.lang.StringBuilder();	false
org.jsoup.parser.HtmlTreeBuilderState::::728::::36935::::36941::::adopter::::body	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39190::::39278::::if (!(name.equals(tb.currentElement().nodeName())))    tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("br"))	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39190::::39278::::if (!(name.equals(tb.currentElement().nodeName())))    tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32378::::32398::::!(tb.onStack(formatEl))::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.HtmlTreeBuilderState::::772::::39137::::39168::::tb.generateImpliedEndTags(name)::::INSERT::::STATEMENT::::closeCell(tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32616::::32647::::!(tb.inScope(formatEl.nodeName()))::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.HtmlTreeBuilderState::::720::::36432::::36516::::if ((lastNode.parent()) != null)    lastNode.remove();::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs))	false
org.jsoup.parser.HtmlTreeBuilderState::::771::::39085::::39112::::node.nodeName().equals(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::771::::39085::::39112::::node.nodeName().equals(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tbody"))	false
org.jsoup.parser.HtmlTreeBuilderState::::771::::39085::::39112::::node.nodeName().equals(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("colgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::771::::39085::::39112::::node.nodeName().equals(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("body"))	false
org.jsoup.parser.HtmlTreeBuilderState::::691::::34680::::34695::::tb.onStack(node)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("body"))	false
org.jsoup.parser.HtmlTreeBuilderState::::693::::34800::::34837::::!(tb.isInActiveFormattingElements(node))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("body"))	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.AfterDoctypeSystemKeyword	false
org.jsoup.parser.HtmlTreeBuilderState::::769::::39000::::39554::::while (it.hasNext()) {    org.jsoup.nodes.Element node = it.next();    if (node.nodeName().equals(name)) {        tb.generateImpliedEndTags(name);        if (!(name.equals(tb.currentElement().nodeName())))            tb.error(this);        tb.popStackToClose(name);        break;    }else {        if (tb.isSpecial(node)) {            tb.error(this);            return false;        }    }} ::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("nobr"))	false
org.jsoup.parser.HtmlTreeBuilder::::369::::12099::::12131::::int i = stack.lastIndexOf(after)::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32378::::32398::::!(tb.onStack(formatEl))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.Character(prompt))	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32616::::32647::::!(tb.inScope(formatEl.nodeName()))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.Character(prompt))	false
org.jsoup.parser.HtmlTreeBuilderState::::734::::37478::::37484::::adopter::::form	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32785::::32815::::(tb.currentElement()) != formatEl::::tb.process(new org.jsoup.parser.Token.EndTag("caption"))	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17545::::name.equals("button")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35033::::35040::::formatEl::::currentForm	false
org.jsoup.parser.HtmlTreeBuilder::::359::::11857::::12004::::while (it.hasNext()) {    org.jsoup.nodes.Element next = it.next();    if (next == el) {        return it.next();    }} ::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32785::::32815::::(tb.currentElement()) != formatEl::::tb.process(new org.jsoup.parser.Token.StartTag(name))	false
org.jsoup.parser.HtmlTreeBuilder::::285::::9839::::10010::::while (it.hasNext()) {    org.jsoup.nodes.Element next = it.next();    if (next == el) {        it.remove();        return true;    }} ::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.HtmlTreeBuilderState::::661::::32850::::32864::::tb.error(this)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("hr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33759::::33760::::el::::second	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33743::::33761::::furthestBlock = el::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("colgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18122::::18155::::tb.getActiveFormattingElement("a")::::DELETE::::INFIX	false
org.jsoup.parser.HtmlTreeBuilderState::::771::::39085::::39112::::node.nodeName().equals(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("button"))	false
org.jsoup.parser.HtmlTreeBuilder::::582::::20248::::20274::::formattingElements.add(in)::::INSERT::::STATEMENT::::if (isSameFormattingElement(in, el))    numSeen++;	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32616::::32647::::!(tb.inScope(formatEl.nodeName()))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("a"))	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35021::::35090::::if (node == formatEl)    break INNER;::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("optgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::769::::39000::::39554::::while (it.hasNext()) {    org.jsoup.nodes.Element node = it.next();    if (node.nodeName().equals(name)) {        tb.generateImpliedEndTags(name);        if (!(name.equals(tb.currentElement().nodeName())))            tb.error(this);        tb.popStackToClose(name);        break;    }else {        if (tb.isSpecial(node)) {            tb.error(this);            return false;        }    }} ::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag(name))	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.ScriptDataEscapedEndTagOpen	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.ScriptDataDoubleEscapeEnd	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.CdataSection	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.AfterDoctypePublicKeyword	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33544::::33545::::si::::j	false
org.jsoup.parser.HtmlTreeBuilderState::::691::::34680::::34695::::tb.onStack(node)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("optgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::670::::33422::::33423::::si::::j	false
org.jsoup.parser.HtmlTreeBuilderState::::669::::33359::::33360::::si::::j	false
org.jsoup.parser.HtmlTreeBuilderState::::734::::37478::::37484::::adopter::::html	false
org.jsoup.parser.HtmlTreeBuilderState::::769::::39000::::39554::::while (it.hasNext()) {    org.jsoup.nodes.Element node = it.next();    if (node.nodeName().equals(name)) {        tb.generateImpliedEndTags(name);        if (!(name.equals(tb.currentElement().nodeName())))            tb.error(this);        tb.popStackToClose(name);        break;    }else {        if (tb.isSpecial(node)) {            tb.error(this);            return false;        }    }} ::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::669::::33350::::33351::::si::::j	false
org.jsoup.parser.HtmlTreeBuilderState::::728::::36935::::36941::::adopter::::second	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31734::::name.equals("sarcasm")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("option"))	false
org.jsoup.parser.HtmlTreeBuilderState::::669::::33329::::33330::::si::::j	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18089::::name.equals("a")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18859::::18989::::org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32612::::32864::::if (!(tb.inScope(formatEl.nodeName()))) {    tb.error(this);    return false;}else    if ((tb.currentElement()) != formatEl)        tb.error(this);::::INSERT::::STATEMENT::::if (node == formatEl)    break INNER;	false
org.jsoup.parser.HtmlTreeBuilder::::568::::19853::::19917::::java.util.Iterator<org.jsoup.nodes.Element> iter = formattingElements.descendingIterator()::::INSERT::::STATEMENT::::if (isSameFormattingElement(in, el))    numSeen++;	false
org.jsoup.parser.HtmlTreeBuilderState::::720::::36432::::36516::::if ((lastNode.parent()) != null)    lastNode.remove();::::INSERT::::STATEMENT::::org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32378::::32398::::!(tb.onStack(formatEl))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("a"))	false
org.jsoup.parser.HtmlTreeBuilderState::::721::::36499::::36516::::lastNode.remove()::::INSERT::::STATEMENT::::if (notIgnored)    return tb.process(endTag);	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18859::::18989::::org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb)	false
org.jsoup.parser.HtmlTreeBuilder::::567::::19828::::19843::::int numSeen = 0::::INSERT::::STATEMENT::::if (isSameFormattingElement(in, el))    numSeen++;	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33517::::33551::::commonAncestor = stack.get((si - 1))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("hr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33517::::33551::::commonAncestor = stack.get((si - 1))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("select"))	false
org.jsoup.parser.HtmlTreeBuilderState::::669::::33329::::33330::::si::::i++	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18859::::18989::::org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::tb.process(startTag)	false
org.jsoup.parser.HtmlTreeBuilderState::::679::::33902::::33914::::furthestBlock::::commonAncestor	false
org.jsoup.parser.HtmlTreeBuilder::::262::::9192::::9241::::java.util.Iterator<org.jsoup.nodes.Element> it = queue.descendingIterator()::::INSERT::::STATEMENT::::if (next == element) {    return true;}	false
org.jsoup.parser.HtmlTreeBuilder::::661::::23241::::23272::::next.nodeName().equals(nodeName)::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17545::::name.equals("button")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("label"))	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.CdataSection	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.AfterDoctypePublicKeyword	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32781::::32864::::if ((tb.currentElement()) != formatEl)    tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("option"))	false
org.jsoup.parser.Token::::69::::2152::::2215::::pendingAttributeValue.delete(0, pendingAttributeValue.length())::::INSERT::::STATEMENT::::ensureAttributeValue()	false
org.jsoup.parser.HtmlTreeBuilderState::::669::::33350::::33351::::si::::i++	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32374::::32864::::if (!(tb.onStack(formatEl))) {    tb.error(this);    tb.removeFromActiveFormattingElements(formatEl);    return true;}else    if (!(tb.inScope(formatEl.nodeName()))) {        tb.error(this);        return false;    }else        if ((tb.currentElement()) != formatEl)            tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("p"))	false
org.jsoup.parser.HtmlTreeBuilderState::::784::::39568::::39579::::return true::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("select"))	false
org.jsoup.parser.HtmlTreeBuilderState::::669::::33359::::33360::::si::::i++	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35021::::35090::::if (node == formatEl)    break INNER;::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("colgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32378::::32398::::!(tb.onStack(formatEl))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32616::::32647::::!(tb.inScope(formatEl.nodeName()))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::670::::33422::::33423::::si::::i++	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33662::::33702::::seenFormattingElement && (tb.isSpecial(el))::::tb.process(new org.jsoup.parser.Token.EndTag("table"))	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18118::::18649::::if ((tb.getActiveFormattingElement("a")) != null) {    tb.error(this);    tb.process(new org.jsoup.parser.Token.EndTag("a"));    org.jsoup.nodes.Element remainingA = tb.getFromStack("a");    if (remainingA != null) {        tb.removeFromActiveFormattingElements(remainingA);        tb.removeFromStack(remainingA);    }}::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33658::::33838::::if (seenFormattingElement && (tb.isSpecial(el))) {    furthestBlock = el;    break;}::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33517::::33551::::commonAncestor = stack.get((si - 1))::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33544::::33545::::si::::i++	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18089::::name.equals("a")::::INSERT::::STATEMENT::::tb.process(startTag)	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33759::::33760::::el::::html	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18118::::18649::::if ((tb.getActiveFormattingElement("a")) != null) {    tb.error(this);    tb.process(new org.jsoup.parser.Token.EndTag("a"));    org.jsoup.nodes.Element remainingA = tb.getFromStack("a");    if (remainingA != null) {        tb.removeFromActiveFormattingElements(remainingA);        tb.removeFromStack(remainingA);    }}::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("head"))	false
org.jsoup.parser.HtmlTreeBuilderState::::784::::39568::::39579::::return true::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18089::::name.equals("a")::::INSERT::::STATEMENT::::org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb)	false
org.jsoup.parser.HtmlTreeBuilder::::265::::9336::::9342::::element::::headElement	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17545::::name.equals("button")::::INSERT::::STATEMENT::::org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::728::::36935::::36941::::adopter::::html	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33517::::33551::::commonAncestor = stack.get((si - 1))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("a"))	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33517::::33551::::commonAncestor = stack.get((si - 1))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.Character(prompt))	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32374::::32864::::if (!(tb.onStack(formatEl))) {    tb.error(this);    tb.removeFromActiveFormattingElements(formatEl);    return true;}else    if (!(tb.inScope(formatEl.nodeName()))) {        tb.error(this);        return false;    }else        if ((tb.currentElement()) != formatEl)            tb.error(this);::::INSERT::::STATEMENT::::if (lastNode == furthestBlock) {}	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17545::::name.equals("button")::::INSERT::::STATEMENT::::tb.process(startTag)	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33662::::33702::::seenFormattingElement && (tb.isSpecial(el))::::tb.process(new org.jsoup.parser.Token.EndTag("li"))	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33662::::33702::::seenFormattingElement && (tb.isSpecial(el))::::tb.process(new org.jsoup.parser.Token.EndTag("body"))	false
org.jsoup.parser.HtmlTreeBuilder::::641::::22587::::22649::::java.util.Iterator<org.jsoup.nodes.Element> it = formattingElements.descendingIterator()::::INSERT::::STATEMENT::::if (el == null)    break;	false
org.jsoup.parser.HtmlTreeBuilderState::::731::::37192::::37199::::formatEl::::remainingA	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18089::::name.equals("a")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::691::::34680::::34695::::tb.onStack(node)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("noscript"))	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18118::::18649::::if ((tb.getActiveFormattingElement("a")) != null) {    tb.error(this);    tb.process(new org.jsoup.parser.Token.EndTag("a"));    org.jsoup.nodes.Element remainingA = tb.getFromStack("a");    if (remainingA != null) {        tb.removeFromActiveFormattingElements(remainingA);        tb.removeFromStack(remainingA);    }}::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("nobr"))	false
org.jsoup.parser.Token::::61::::1759::::1989::::if ((pendingAttributeValue) == null)    attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, "");else    attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, pendingAttributeValue.toString());::::INSERT::::STATEMENT::::if ((attributes) == null)    attributes = new org.jsoup.nodes.Attributes();	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33662::::33702::::seenFormattingElement && (tb.isSpecial(el))::::tb.process(new org.jsoup.parser.Token.StartTag("head"))	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18089::::name.equals("a")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs))	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18859::::18989::::org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs))	false
org.jsoup.parser.HtmlTreeBuilderState::::693::::34800::::34837::::!(tb.isInActiveFormattingElements(node))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("noscript"))	false
org.jsoup.parser.HtmlTreeBuilderState::::632::::31114::::31168::::org.jsoup.helper.StringUtil.in(name, "h1", "h2", "h3", "h4", "h5", "h6")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("p"))	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18089::::name.equals("a")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("a"))	false
org.jsoup.parser.HtmlTreeBuilderState::::661::::32850::::32864::::tb.error(this)::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.TokeniserState::::816::::27437::::27462::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted::::org.jsoup.parser.TokeniserState.Doctype	false
org.jsoup.parser.HtmlTreeBuilderState::::673::::33589::::33617::::seenFormattingElement = true::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("hr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31734::::name.equals("sarcasm")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("hr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32785::::32815::::(tb.currentElement()) != formatEl::::tb.process(new org.jsoup.parser.Token.EndTag("button"))	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"html"	false
org.jsoup.parser.HtmlTreeBuilderState::::772::::39137::::39168::::tb.generateImpliedEndTags(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("label"))	false
org.jsoup.parser.HtmlTreeBuilder::::661::::23241::::23244::::next::::getFromStack("table")	false
org.jsoup.parser.HtmlTreeBuilderState::::771::::39085::::39112::::node.nodeName().equals(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("th"))	false
org.jsoup.parser.HtmlTreeBuilderState::::771::::39085::::39112::::node.nodeName().equals(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("td"))	false
org.jsoup.parser.HtmlTreeBuilderState::::771::::39085::::39112::::node.nodeName().equals(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("noscript"))	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18118::::18649::::if ((tb.getActiveFormattingElement("a")) != null) {    tb.error(this);    tb.process(new org.jsoup.parser.Token.EndTag("a"));    org.jsoup.nodes.Element remainingA = tb.getFromStack("a");    if (remainingA != null) {        tb.removeFromActiveFormattingElements(remainingA);        tb.removeFromStack(remainingA);    }}::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("li"))	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33662::::33702::::seenFormattingElement && (tb.isSpecial(el))::::tb.process(new org.jsoup.parser.Token.EndTag("nobr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17545::::name.equals("button")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs))	false
org.jsoup.parser.Token::::117::::3560::::3582::::ensureAttributeValue()::::DELETE::::STATEMENT	false
org.jsoup.parser.HtmlTreeBuilderState::::775::::39300::::39324::::tb.popStackToClose(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("label"))	false
org.jsoup.parser.TokeniserState::::810::::27239::::27243::::value::::"script"	false
org.jsoup.parser.HtmlTreeBuilder::::358::::11798::::11847::::java.util.Iterator<org.jsoup.nodes.Element> it = stack.descendingIterator()::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.HtmlTreeBuilder::::358::::11798::::11847::::java.util.Iterator<org.jsoup.nodes.Element> it = stack.descendingIterator()::::INSERT::::STATEMENT::::if (el == null)    break;	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.ScriptDataEscapeStartDash	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.ScriptDataEndTagName	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.RawtextEndTagOpen	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.RawtextEndTagName	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.RCDATAEndTagOpen	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.Doctype	false
org.jsoup.parser.TokeniserState::::661::::22044::::22063::::org.jsoup.parser.TokeniserState.BeforeAttributeValue::::org.jsoup.parser.TokeniserState.CommentStart	false
org.jsoup.parser.HtmlTreeBuilderState::::721::::36499::::36516::::lastNode.remove()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::721::::36499::::36516::::lastNode.remove()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("head"))	false
org.jsoup.parser.HtmlTreeBuilderState::::673::::33589::::33617::::seenFormattingElement = true::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("select"))	false
org.jsoup.parser.HtmlTreeBuilderState::::769::::39000::::39554::::while (it.hasNext()) {    org.jsoup.nodes.Element node = it.next();    if (node.nodeName().equals(name)) {        tb.generateImpliedEndTags(name);        if (!(name.equals(tb.currentElement().nodeName())))            tb.error(this);        tb.popStackToClose(name);        break;    }else {        if (tb.isSpecial(node)) {            tb.error(this);            return false;        }    }} ::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("body"))	false
org.jsoup.parser.HtmlTreeBuilderState::::669::::33329::::33330::::si::::i--	false
org.jsoup.parser.HtmlTreeBuilderState::::412::::18675::::18709::::tb.reconstructFormattingElements()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.Character(prompt))	false
org.jsoup.parser.HtmlTreeBuilderState::::622::::30613::::30643::::org.jsoup.helper.StringUtil.in(name, "dd", "dt")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("p"))	false
org.jsoup.parser.Token::::64::::1908::::1989::::attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, pendingAttributeValue.toString())::::INSERT::::STATEMENT::::if ((pendingAttributeName) != null) {    newAttribute();}	false
org.jsoup.parser.HtmlTreeBuilderState::::669::::33350::::33351::::si::::i--	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34734::::34762::::node = tb.aboveOnStack(node)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilder::::642::::22659::::22824::::while (it.hasNext()) {    org.jsoup.nodes.Element next = it.next();    if (next == el) {        it.remove();        break;    }} ::::INSERT::::STATEMENT::::if (el == null)    break;	false
org.jsoup.parser.HtmlTreeBuilderState::::669::::33359::::33360::::si::::i--	false
org.jsoup.parser.HtmlTreeBuilderState::::412::::18675::::18709::::tb.reconstructFormattingElements()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("option"))	false
org.jsoup.parser.HtmlTreeBuilderState::::670::::33422::::33423::::si::::i--	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32378::::32398::::!(tb.onStack(formatEl))::::INSERT::::STATEMENT::::tb.process(startTag)	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32378::::32398::::!(tb.onStack(formatEl))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32616::::32647::::!(tb.inScope(formatEl.nodeName()))::::INSERT::::STATEMENT::::tb.process(startTag)	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32616::::32647::::!(tb.inScope(formatEl.nodeName()))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33544::::33545::::si::::i--	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33759::::33760::::el::::form	false
org.jsoup.parser.Token::::64::::1934::::1953::::pendingAttributeName::::this.tagName	false
org.jsoup.parser.HtmlTreeBuilderState::::645::::31858::::32001::::org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::771::::39085::::39112::::node.nodeName().equals(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::733::::37402::::37409::::formatEl::::remainingA	false
org.jsoup.parser.HtmlTreeBuilder::::258::::9047::::9081::::return isElementInQueue(stack, el)::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33658::::33838::::if (seenFormattingElement && (tb.isSpecial(el))) {    furthestBlock = el;    break;}::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("option"))	false
org.jsoup.parser.HtmlTreeBuilderState::::772::::39137::::39168::::tb.generateImpliedEndTags(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("nobr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::721::::36499::::36516::::lastNode.remove()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("nobr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33517::::33551::::commonAncestor = stack.get((si - 1))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32612::::32864::::if (!(tb.inScope(formatEl.nodeName()))) {    tb.error(this);    return false;}else    if ((tb.currentElement()) != formatEl)        tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"html"	false
org.jsoup.parser.HtmlTreeBuilderState::::769::::39000::::39554::::while (it.hasNext()) {    org.jsoup.nodes.Element node = it.next();    if (node.nodeName().equals(name)) {        tb.generateImpliedEndTags(name);        if (!(name.equals(tb.currentElement().nodeName())))            tb.error(this);        tb.popStackToClose(name);        break;    }else {        if (tb.isSpecial(node)) {            tb.error(this);            return false;        }    }} ::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("optgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::720::::36432::::36516::::if ((lastNode.parent()) != null)    lastNode.remove();::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::769::::39000::::39554::::while (it.hasNext()) {    org.jsoup.nodes.Element node = it.next();    if (node.nodeName().equals(name)) {        tb.generateImpliedEndTags(name);        if (!(name.equals(tb.currentElement().nodeName())))            tb.error(this);        tb.popStackToClose(name);        break;    }else {        if (tb.isSpecial(node)) {            tb.error(this);            return false;        }    }} ::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::769::::39000::::39554::::while (it.hasNext()) {    org.jsoup.nodes.Element node = it.next();    if (node.nodeName().equals(name)) {        tb.generateImpliedEndTags(name);        if (!(name.equals(tb.currentElement().nodeName())))            tb.error(this);        tb.popStackToClose(name);        break;    }else {        if (tb.isSpecial(node)) {            tb.error(this);            return false;        }    }} ::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tbody"))	false
org.jsoup.parser.HtmlTreeBuilderState::::769::::39000::::39554::::while (it.hasNext()) {    org.jsoup.nodes.Element node = it.next();    if (node.nodeName().equals(name)) {        tb.generateImpliedEndTags(name);        if (!(name.equals(tb.currentElement().nodeName())))            tb.error(this);        tb.popStackToClose(name);        break;    }else {        if (tb.isSpecial(node)) {            tb.error(this);            return false;        }    }} ::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("colgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::673::::33589::::33617::::seenFormattingElement = true::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31734::::name.equals("sarcasm")::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35033::::35040::::formatEl::::form	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33662::::33702::::seenFormattingElement && (tb.isSpecial(el))::::tb.process(new org.jsoup.parser.Token.EndTag("caption"))	false
org.jsoup.parser.HtmlTreeBuilder::::645::::22766::::22777::::it.remove()::::INSERT::::STATEMENT::::insert(el)	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32785::::32815::::(tb.currentElement()) != formatEl::::tb.process(new org.jsoup.parser.Token.EndTag("form"))	false
org.jsoup.parser.HtmlTreeBuilder::::285::::9839::::10010::::while (it.hasNext()) {    org.jsoup.nodes.Element next = it.next();    if (next == el) {        it.remove();        return true;    }} ::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.HtmlTreeBuilderState::::632::::31114::::31168::::org.jsoup.helper.StringUtil.in(name, "h1", "h2", "h3", "h4", "h5", "h6")::::INSERT::::STATEMENT::::if (lastNode == furthestBlock) {}	false
org.jsoup.parser.HtmlTreeBuilderState::::784::::39568::::39579::::return true::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("label"))	false
org.jsoup.parser.TokeniserState::::901::::30491::::30494::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.Comment	false
org.jsoup.parser.HtmlTreeBuilderState::::673::::33589::::33617::::seenFormattingElement = true::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("a"))	false
org.jsoup.parser.HtmlTreeBuilderState::::673::::33589::::33617::::seenFormattingElement = true::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.Character(prompt))	false
org.jsoup.parser.HtmlTreeBuilderState::::731::::37192::::37199::::formatEl::::currentForm	false
org.jsoup.parser.Token::::118::::3625::::3630::::append::::data	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31734::::name.equals("sarcasm")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.Character(prompt))	false
org.jsoup.parser.HtmlTreeBuilderState::::771::::39085::::39112::::node.nodeName().equals(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("br"))	false
org.jsoup.parser.HtmlTreeBuilderState::::632::::31114::::31168::::org.jsoup.helper.StringUtil.in(name, "h1", "h2", "h3", "h4", "h5", "h6")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::728::::36935::::36941::::adopter::::form	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18859::::18989::::org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::if (node == formatEl)    break INNER;	false
org.jsoup.parser.Token::::65::::2007::::2032::::attributes.put(attribute)::::INSERT::::STATEMENT::::if ((pendingAttributeValue) == null)    pendingAttributeValue = new java.lang.StringBuilder();	false
org.jsoup.parser.HtmlTreeBuilder::::661::::23237::::23302::::if (next.nodeName().equals(nodeName))    return next;::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33662::::33702::::seenFormattingElement && (tb.isSpecial(el))::::tb.process(new org.jsoup.parser.Token.EndTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::775::::39300::::39324::::tb.popStackToClose(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("nobr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35033::::35040::::formatEl::::body	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32616::::32647::::!(tb.inScope(formatEl.nodeName()))::::INSERT::::STATEMENT::::org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"html"	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33517::::33530::::commonAncestor::::body	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"html"	false
org.jsoup.parser.HtmlTreeBuilderState::::733::::37402::::37409::::formatEl::::currentForm	false
org.jsoup.parser.ParseErrorList::::20::::440::::445::::size()::::DELETE::::INFIX	false
org.jsoup.parser.TokeniserState::::901::::30491::::30494::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.BogusDoctype	false
org.jsoup.parser.HtmlTreeBuilderState::::721::::36499::::36516::::lastNode.remove()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("li"))	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31734::::name.equals("sarcasm")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("select"))	false
org.jsoup.parser.HtmlTreeBuilderState::::772::::39137::::39168::::tb.generateImpliedEndTags(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("head"))	false
org.jsoup.parser.HtmlTreeBuilderState::::772::::39137::::39168::::tb.generateImpliedEndTags(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("li"))	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33662::::33702::::seenFormattingElement && (tb.isSpecial(el))::::tb.process(new org.jsoup.parser.Token.StartTag(name))	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32378::::32398::::!(tb.onStack(formatEl))::::INSERT::::STATEMENT::::org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::775::::39300::::39324::::tb.popStackToClose(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag(name))	false
org.jsoup.parser.HtmlTreeBuilderState::::775::::39300::::39324::::tb.popStackToClose(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("head"))	false
org.jsoup.parser.HtmlTreeBuilder::::641::::22587::::22649::::java.util.Iterator<org.jsoup.nodes.Element> it = formattingElements.descendingIterator()::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.HtmlTreeBuilderState::::776::::39346::::39351::::break::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.HtmlTreeBuilder::::645::::22766::::22777::::it.remove()::::INSERT::::STATEMENT::::if (el == null)    break;	false
org.jsoup.parser.HtmlTreeBuilder::::656::::23018::::23080::::java.util.Iterator<org.jsoup.nodes.Element> it = formattingElements.descendingIterator()::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32378::::32398::::!(tb.onStack(formatEl))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs))	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32616::::32647::::!(tb.inScope(formatEl.nodeName()))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs))	false
org.jsoup.parser.HtmlTreeBuilder::::262::::9192::::9241::::java.util.Iterator<org.jsoup.nodes.Element> it = queue.descendingIterator()::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.HtmlTreeBuilder::::568::::19853::::19917::::java.util.Iterator<org.jsoup.nodes.Element> iter = formattingElements.descendingIterator()::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31734::::name.equals("sarcasm")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("a"))	false
org.jsoup.parser.Token::::69::::2152::::2215::::pendingAttributeValue.delete(0, pendingAttributeValue.length())::::INSERT::::STATEMENT::::if ((pendingAttributeValue) == null)    pendingAttributeValue = new java.lang.StringBuilder();	false
org.jsoup.parser.HtmlTreeBuilderState::::622::::30613::::30643::::org.jsoup.helper.StringUtil.in(name, "dd", "dt")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::720::::36432::::36516::::if ((lastNode.parent()) != null)    lastNode.remove();::::INSERT::::STATEMENT::::closeCell(tb)	false
org.jsoup.parser.TokeniserState::::732::::24435::::25930::::switch (c) {    case '\t' :    case '\n' :    case '\r' :    case '\f' :    case ' ' :        break;    case '"' :        t.transition(org.jsoup.parser.TokeniserState.AttributeValue_doubleQuoted);        break;    case '&' :        r.unconsume();        t.transition(org.jsoup.parser.TokeniserState.AttributeValue_unquoted);        break;    case '\'' :        t.transition(org.jsoup.parser.TokeniserState.AttributeValue_singleQuoted);        break;    case org.jsoup.parser.TokeniserState.nullChar :        t.error(this);        t.tagPending.appendAttributeValue(org.jsoup.parser.TokeniserState.replacementChar);        t.transition(org.jsoup.parser.TokeniserState.AttributeValue_unquoted);        break;    case org.jsoup.parser.TokeniserState.eof :        t.eofError(this);        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case '>' :        t.error(this);        t.emitTagPending();        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case '<' :    case '=' :    case '`' :        t.error(this);        t.tagPending.appendAttributeValue(c);        t.transition(org.jsoup.parser.TokeniserState.AttributeValue_unquoted);        break;    default :        r.unconsume();        t.transition(org.jsoup.parser.TokeniserState.AttributeValue_unquoted);}::::INSERT::::STATEMENT::::anythingElse(t, r)	false
org.jsoup.parser.HtmlTreeBuilder::::644::::22736::::22745::::next == el::::isElementInQueue(formattingElements, el)	false
org.jsoup.parser.HtmlTreeBuilderState::::769::::39000::::39554::::while (it.hasNext()) {    org.jsoup.nodes.Element node = it.next();    if (node.nodeName().equals(name)) {        tb.generateImpliedEndTags(name);        if (!(name.equals(tb.currentElement().nodeName())))            tb.error(this);        tb.popStackToClose(name);        break;    }else {        if (tb.isSpecial(node)) {            tb.error(this);            return false;        }    }} ::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("noscript"))	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33517::::33530::::commonAncestor::::second	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33517::::33551::::commonAncestor = stack.get((si - 1))::::INSERT::::STATEMENT::::tb.process(startTag)	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33517::::33551::::commonAncestor = stack.get((si - 1))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32781::::32864::::if ((tb.currentElement()) != formatEl)    tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("hr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32781::::32864::::if ((tb.currentElement()) != formatEl)    tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("select"))	false
org.jsoup.parser.HtmlTreeBuilderState::::622::::30613::::30643::::org.jsoup.helper.StringUtil.in(name, "dd", "dt")::::INSERT::::STATEMENT::::if (lastNode == furthestBlock) {}	false
org.jsoup.parser.HtmlTreeBuilder::::266::::9363::::9374::::return true::::INSERT::::STATEMENT::::if (next == element) {    return true;}	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32785::::32815::::(tb.currentElement()) != formatEl::::exitTableBody(t, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18118::::18649::::if ((tb.getActiveFormattingElement("a")) != null) {    tb.error(this);    tb.process(new org.jsoup.parser.Token.EndTag("a"));    org.jsoup.nodes.Element remainingA = tb.getFromStack("a");    if (remainingA != null) {        tb.removeFromActiveFormattingElements(remainingA);        tb.removeFromStack(remainingA);    }}::::INSERT::::STATEMENT::::closeCell(tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31734::::name.equals("sarcasm")::::INSERT::::STATEMENT::::if (node == formatEl)    break INNER;	false
org.jsoup.parser.HtmlTreeBuilderState::::661::::32850::::32864::::tb.error(this)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("select"))	false
org.jsoup.parser.HtmlTreeBuilderState::::673::::33589::::33617::::seenFormattingElement = true::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("tr"))	false
org.jsoup.parser.Token::::117::::3560::::3582::::ensureAttributeValue()::::INSERT::::STATEMENT::::newAttribute()	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31734::::name.equals("sarcasm")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::661::::32850::::32864::::tb.error(this)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.Character(prompt))	false
org.jsoup.parser.HtmlTreeBuilderState::::649::::32131::::32131::::i::::j++	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32785::::32815::::(tb.currentElement()) != formatEl::::tb.process(new org.jsoup.parser.Token.StartTag("br"))	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33517::::33551::::commonAncestor = stack.get((si - 1))::::INSERT::::STATEMENT::::org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32612::::32864::::if (!(tb.inScope(formatEl.nodeName()))) {    tb.error(this);    return false;}else    if ((tb.currentElement()) != formatEl)        tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("option"))	false
org.jsoup.parser.HtmlTreeBuilderState::::412::::18675::::18709::::tb.reconstructFormattingElements()::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32374::::32864::::if (!(tb.onStack(formatEl))) {    tb.error(this);    tb.removeFromActiveFormattingElements(formatEl);    return true;}else    if (!(tb.inScope(formatEl.nodeName()))) {        tb.error(this);        return false;    }else        if ((tb.currentElement()) != formatEl)            tb.error(this);::::INSERT::::STATEMENT::::if (node == formatEl)    break INNER;	false
org.jsoup.parser.HtmlTreeBuilderState::::769::::39000::::39554::::while (it.hasNext()) {    org.jsoup.nodes.Element node = it.next();    if (node.nodeName().equals(name)) {        tb.generateImpliedEndTags(name);        if (!(name.equals(tb.currentElement().nodeName())))            tb.error(this);        tb.popStackToClose(name);        break;    }else {        if (tb.isSpecial(node)) {            tb.error(this);            return false;        }    }} ::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("button"))	false
org.jsoup.parser.HtmlTreeBuilderState::::772::::39137::::39168::::tb.generateImpliedEndTags(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag(name))	false
org.jsoup.parser.HtmlTreeBuilderState::::720::::36436::::36443::::lastNode::::body	false
org.jsoup.parser.HtmlTreeBuilderState::::721::::36499::::36506::::lastNode::::body	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36577::::36584::::lastNode::::body	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18859::::18989::::org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("head"))	false
org.jsoup.parser.HtmlTreeBuilderState::::691::::34691::::34694::::node::::currentForm	false
org.jsoup.parser.HtmlTreeBuilderState::::769::::39000::::39554::::while (it.hasNext()) {    org.jsoup.nodes.Element node = it.next();    if (node.nodeName().equals(name)) {        tb.generateImpliedEndTags(name);        if (!(name.equals(tb.currentElement().nodeName())))            tb.error(this);        tb.popStackToClose(name);        break;    }else {        if (tb.isSpecial(node)) {            tb.error(this);            return false;        }    }} ::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34734::::34737::::node::::currentForm	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18089::::name.equals("a")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18859::::18989::::org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::649::::32138::::32138::::i::::j++	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34757::::34760::::node::::currentForm	false
org.jsoup.parser.HtmlTreeBuilderState::::691::::34691::::34694::::node::::remainingA	false
org.jsoup.parser.HtmlTreeBuilderState::::412::::18675::::18709::::tb.reconstructFormattingElements()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::693::::34833::::34836::::node::::currentForm	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33743::::33761::::furthestBlock = el::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32785::::32815::::(tb.currentElement()) != formatEl::::tb.process(new org.jsoup.parser.Token.StartTag("tbody"))	false
org.jsoup.parser.HtmlTreeBuilder::::152::::5114::::5269::::if (errors.canAddError())    errors.add(new org.jsoup.parser.ParseError(reader.pos(), "Unexpected token [%s] when in state [%s]", currentToken.tokenType(), state));::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.HtmlTreeBuilder::::662::::23291::::23302::::return next::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17545::::name.equals("button")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("head"))	false
org.jsoup.parser.HtmlTreeBuilder::::258::::9047::::9081::::return isElementInQueue(stack, el)::::INSERT::::STATEMENT::::if (el == null)    break;	false
org.jsoup.parser.HtmlTreeBuilderState::::693::::34800::::34837::::!(tb.isInActiveFormattingElements(node))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("th"))	false
org.jsoup.parser.HtmlTreeBuilderState::::693::::34800::::34837::::!(tb.isInActiveFormattingElements(node))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("td"))	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32781::::32864::::if ((tb.currentElement()) != formatEl)    tb.error(this);::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32781::::32864::::if ((tb.currentElement()) != formatEl)    tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.Character(prompt))	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32374::::32864::::if (!(tb.onStack(formatEl))) {    tb.error(this);    tb.removeFromActiveFormattingElements(formatEl);    return true;}else    if (!(tb.inScope(formatEl.nodeName()))) {        tb.error(this);        return false;    }else        if ((tb.currentElement()) != formatEl)            tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("form"))	false
org.jsoup.parser.HtmlTreeBuilder::::661::::23241::::23272::::next.nodeName().equals(nodeName)::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17545::::name.equals("button")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32378::::32398::::!(tb.onStack(formatEl))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("head"))	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34734::::34737::::node::::remainingA	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18859::::18989::::org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::closeCell(tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33517::::33530::::commonAncestor::::html	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33517::::33551::::commonAncestor = stack.get((si - 1))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs))	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33517::::33551::::commonAncestor = stack.get((si - 1))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("head"))	false
org.jsoup.parser.HtmlTreeBuilderState::::720::::36436::::36443::::lastNode::::second	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35021::::35090::::if (node == formatEl)    break INNER;::::INSERT::::STATEMENT::::if (notIgnored)    return tb.process(endTag);	false
org.jsoup.parser.HtmlTreeBuilderState::::721::::36499::::36506::::lastNode::::second	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36577::::36584::::lastNode::::second	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35033::::35040::::formatEl::::second	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32616::::32647::::!(tb.inScope(formatEl.nodeName()))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("head"))	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34757::::34760::::node::::remainingA	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"body"	false
org.jsoup.parser.Token::::118::::3625::::3630::::append::::this.data	false
org.jsoup.parser.HtmlTreeBuilderState::::769::::39000::::39554::::while (it.hasNext()) {    org.jsoup.nodes.Element node = it.next();    if (node.nodeName().equals(name)) {        tb.generateImpliedEndTags(name);        if (!(name.equals(tb.currentElement().nodeName())))            tb.error(this);        tb.popStackToClose(name);        break;    }else {        if (tb.isSpecial(node)) {            tb.error(this);            return false;        }    }} ::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("th"))	false
org.jsoup.parser.HtmlTreeBuilderState::::769::::39000::::39554::::while (it.hasNext()) {    org.jsoup.nodes.Element node = it.next();    if (node.nodeName().equals(name)) {        tb.generateImpliedEndTags(name);        if (!(name.equals(tb.currentElement().nodeName())))            tb.error(this);        tb.popStackToClose(name);        break;    }else {        if (tb.isSpecial(node)) {            tb.error(this);            return false;        }    }} ::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("td"))	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17545::::name.equals("button")::::INSERT::::STATEMENT::::closeCell(tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32616::::32647::::!(tb.inScope(formatEl.nodeName()))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("nobr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::412::::18675::::18709::::tb.reconstructFormattingElements()::::INSERT::::STATEMENT::::org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32781::::32864::::if ((tb.currentElement()) != formatEl)    tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("a"))	false
org.jsoup.parser.HtmlTreeBuilderState::::693::::34833::::34836::::node::::remainingA	false
org.jsoup.parser.HtmlTreeBuilderState::::676::::33799::::33804::::break::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::673::::33589::::33617::::seenFormattingElement = true::::INSERT::::STATEMENT::::tb.process(startTag)	false
org.jsoup.parser.HtmlTreeBuilderState::::673::::33589::::33617::::seenFormattingElement = true::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31734::::name.equals("sarcasm")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::412::::18675::::18709::::tb.reconstructFormattingElements()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("select"))	false
org.jsoup.parser.HtmlTreeBuilder::::370::::12141::::12165::::org.jsoup.helper.Validate.isTrue((i != (-1)))::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33517::::33551::::commonAncestor = stack.get((si - 1))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("li"))	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35021::::35090::::if (node == formatEl)    break INNER;::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18089::::name.equals("a")::::INSERT::::STATEMENT::::closeCell(tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::645::::31858::::32001::::org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("option"))	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32378::::32398::::!(tb.onStack(formatEl))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("nobr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33658::::33838::::if (seenFormattingElement && (tb.isSpecial(el))) {    furthestBlock = el;    break;}::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("hr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33658::::33838::::if (seenFormattingElement && (tb.isSpecial(el))) {    furthestBlock = el;    break;}::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("select"))	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32785::::32815::::(tb.currentElement()) != formatEl::::tb.process(new org.jsoup.parser.Token.EndTag("optgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32785::::32815::::(tb.currentElement()) != formatEl::::handleMissingTr(t, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18122::::18163::::(tb.getActiveFormattingElement("a")) != null::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InTable)	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32781::::32864::::if ((tb.currentElement()) != formatEl)    tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::412::::18675::::18709::::tb.reconstructFormattingElements()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("a"))	false
org.jsoup.parser.Token::::118::::3596::::3632::::pendingAttributeValue.append(append)::::INSERT::::STATEMENT::::if ((attributes) == null)    attributes = new org.jsoup.nodes.Attributes();	false
org.jsoup.parser.HtmlTreeBuilder::::642::::22659::::22824::::while (it.hasNext()) {    org.jsoup.nodes.Element next = it.next();    if (next == el) {        it.remove();        break;    }} ::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.HtmlTreeBuilderState::::673::::33589::::33617::::seenFormattingElement = true::::INSERT::::STATEMENT::::org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33662::::33702::::seenFormattingElement && (tb.isSpecial(el))::::tb.process(new org.jsoup.parser.Token.EndTag("button"))	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35025::::35028::::node::::form	false
org.jsoup.parser.HtmlTreeBuilderState::::720::::36432::::36516::::if ((lastNode.parent()) != null)    lastNode.remove();::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("head"))	false
org.jsoup.parser.HtmlTreeBuilderState::::632::::31114::::31168::::org.jsoup.helper.StringUtil.in(name, "h1", "h2", "h3", "h4", "h5", "h6")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("hr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::769::::39000::::39554::::while (it.hasNext()) {    org.jsoup.nodes.Element node = it.next();    if (node.nodeName().equals(name)) {        tb.generateImpliedEndTags(name);        if (!(name.equals(tb.currentElement().nodeName())))            tb.error(this);        tb.popStackToClose(name);        break;    }else {        if (tb.isSpecial(node)) {            tb.error(this);            return false;        }    }} ::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("br"))	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18118::::18649::::if ((tb.getActiveFormattingElement("a")) != null) {    tb.error(this);    tb.process(new org.jsoup.parser.Token.EndTag("a"));    org.jsoup.nodes.Element remainingA = tb.getFromStack("a");    if (remainingA != null) {        tb.removeFromActiveFormattingElements(remainingA);        tb.removeFromStack(remainingA);    }}::::INSERT::::STATEMENT::::if (notIgnored)    return tb.process(endTag);	false
org.jsoup.parser.HtmlTreeBuilder::::569::::19927::::20238::::while (iter.hasNext()) {    org.jsoup.nodes.Element el = iter.next();    if (el == null)        break;    if (isSameFormattingElement(in, el))        numSeen++;    if (numSeen == 3) {        iter.remove();        break;    }} ::::INSERT::::STATEMENT::::if (el == null)    break;	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35025::::35028::::node::::currentForm	false
org.jsoup.parser.HtmlTreeBuilderState::::412::::18675::::18709::::tb.reconstructFormattingElements()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::622::::30613::::30643::::org.jsoup.helper.StringUtil.in(name, "dd", "dt")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("hr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30134::::name.equals("li")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("p"))	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32616::::32647::::!(tb.inScope(formatEl.nodeName()))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("li"))	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32378::::32398::::!(tb.onStack(formatEl))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32378::::32398::::!(tb.onStack(formatEl))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("li"))	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32616::::32647::::!(tb.inScope(formatEl.nodeName()))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17545::::name.equals("button")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("nobr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::661::::32850::::32864::::tb.error(this)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("option"))	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18118::::18649::::if ((tb.getActiveFormattingElement("a")) != null) {    tb.error(this);    tb.process(new org.jsoup.parser.Token.EndTag("a"));    org.jsoup.nodes.Element remainingA = tb.getFromStack("a");    if (remainingA != null) {        tb.removeFromActiveFormattingElements(remainingA);        tb.removeFromStack(remainingA);    }}::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("button"))	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18859::::18989::::org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("nobr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36577::::36584::::lastNode::::html	false
org.jsoup.parser.HtmlTreeBuilderState::::721::::36499::::36506::::lastNode::::html	false
org.jsoup.parser.HtmlTreeBuilderState::::720::::36436::::36443::::lastNode::::html	false
org.jsoup.parser.HtmlTreeBuilderState::::784::::39568::::39579::::return true::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35033::::35040::::formatEl::::html	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32612::::32864::::if (!(tb.inScope(formatEl.nodeName()))) {    tb.error(this);    return false;}else    if ((tb.currentElement()) != formatEl)        tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("select"))	false
org.jsoup.parser.HtmlTreeBuilder::::266::::9363::::9374::::return true::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32785::::32815::::(tb.currentElement()) != formatEl::::tb.process(new org.jsoup.parser.Token.StartTag("colgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33517::::33551::::commonAncestor = stack.get((si - 1))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("nobr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::661::::32850::::32864::::tb.error(this)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17545::::name.equals("button")::::INSERT::::STATEMENT::::if (node == formatEl)    break INNER;	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33658::::33838::::if (seenFormattingElement && (tb.isSpecial(el))) {    furthestBlock = el;    break;}::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33658::::33838::::if (seenFormattingElement && (tb.isSpecial(el))) {    furthestBlock = el;    break;}::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.Character(prompt))	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31734::::name.equals("sarcasm")::::INSERT::::STATEMENT::::tb.process(startTag)	false
org.jsoup.parser.HtmlTreeBuilderState::::673::::33589::::33617::::seenFormattingElement = true::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs))	false
org.jsoup.parser.HtmlTreeBuilderState::::673::::33589::::33617::::seenFormattingElement = true::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("head"))	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33517::::33530::::commonAncestor::::form	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31734::::name.equals("sarcasm")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs))	false
org.jsoup.parser.HtmlTreeBuilderState::::412::::18675::::18709::::tb.reconstructFormattingElements()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs))	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32378::::32398::::!(tb.onStack(formatEl))::::INSERT::::STATEMENT::::closeCell(tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32616::::32647::::!(tb.inScope(formatEl.nodeName()))::::INSERT::::STATEMENT::::closeCell(tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18118::::18649::::if ((tb.getActiveFormattingElement("a")) != null) {    tb.error(this);    tb.process(new org.jsoup.parser.Token.EndTag("a"));    org.jsoup.nodes.Element remainingA = tb.getFromStack("a");    if (remainingA != null) {        tb.removeFromActiveFormattingElements(remainingA);        tb.removeFromStack(remainingA);    }}::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::772::::39137::::39168::::tb.generateImpliedEndTags(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::720::::36432::::36516::::if ((lastNode.parent()) != null)    lastNode.remove();::::INSERT::::STATEMENT::::if (notIgnored)    return tb.process(endTag);	false
org.jsoup.parser.TokeniserState::::901::::30491::::30494::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.SelfClosingStartTag	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18118::::18649::::if ((tb.getActiveFormattingElement("a")) != null) {    tb.error(this);    tb.process(new org.jsoup.parser.Token.EndTag("a"));    org.jsoup.nodes.Element remainingA = tb.getFromStack("a");    if (remainingA != null) {        tb.removeFromActiveFormattingElements(remainingA);        tb.removeFromStack(remainingA);    }}::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag(name))	false
org.jsoup.parser.HtmlTreeBuilderState::::661::::32850::::32864::::tb.error(this)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::720::::36432::::36516::::if ((lastNode.parent()) != null)    lastNode.remove();::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("li"))	false
org.jsoup.parser.HtmlTreeBuilderState::::691::::34680::::34695::::tb.onStack(node)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("th"))	false
org.jsoup.parser.HtmlTreeBuilderState::::691::::34680::::34695::::tb.onStack(node)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("td"))	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32374::::32864::::if (!(tb.onStack(formatEl))) {    tb.error(this);    tb.removeFromActiveFormattingElements(formatEl);    return true;}else    if (!(tb.inScope(formatEl.nodeName()))) {        tb.error(this);        return false;    }else        if ((tb.currentElement()) != formatEl)            tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("option"))	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18855::::26999::::if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {    tb.reconstructFormattingElements();    org.jsoup.nodes.Element el = tb.insert(startTag);    tb.pushActiveFormattingElements(el);}else    if (name.equals("nobr")) {        tb.reconstructFormattingElements();        if (tb.inScope("nobr")) {            tb.error(this);            tb.process(new org.jsoup.parser.Token.EndTag("nobr"));            tb.reconstructFormattingElements();        }        org.jsoup.nodes.Element el = tb.insert(startTag);        tb.pushActiveFormattingElements(el);    }else        if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {            tb.reconstructFormattingElements();            tb.insert(startTag);            tb.insertMarkerToFormattingElements();            tb.framesetOk(false);        }else            if (name.equals("table")) {                if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                }                tb.insert(startTag);                tb.framesetOk(false);                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);            }else                if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                    tb.reconstructFormattingElements();                    tb.insertEmpty(startTag);                    tb.framesetOk(false);                }else                    if (name.equals("input")) {                        tb.reconstructFormattingElements();                        org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                        if (!(el.attr("type").equalsIgnoreCase("hidden")))                            tb.framesetOk(false);                    }else                        if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                            tb.insertEmpty(startTag);                        }else                            if (name.equals("hr")) {                                if (tb.inButtonScope("p")) {                                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                                }                                tb.insertEmpty(startTag);                                tb.framesetOk(false);                            }else                                if (name.equals("image")) {                                    startTag.name("img");                                    return tb.process(startTag);                                }else                                    if (name.equals("isindex")) {                                        tb.error(this);                                        if ((tb.getFormElement()) != null)                                            return false;                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                        tb.process(new org.jsoup.parser.Token.StartTag("form"));                                        if (startTag.attributes.hasKey("action")) {                                            org.jsoup.nodes.Element form = tb.getFormElement();                                            form.attr("action", startTag.attributes.get("action"));                                        }                                        tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                        tb.process(new org.jsoup.parser.Token.StartTag("label"));                                        java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                        tb.process(new org.jsoup.parser.Token.Character(prompt));                                        org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                        for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                            if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                inputAttribs.put(attr);                                        }                                        inputAttribs.put("name", "isindex");                                        tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                        tb.process(new org.jsoup.parser.Token.EndTag("label"));                                        tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                        tb.process(new org.jsoup.parser.Token.EndTag("form"));                                    }else                                        if (name.equals("textarea")) {                                            tb.insert(startTag);                                            tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                            tb.markInsertionMode();                                            tb.framesetOk(false);                                            tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                        }else                                            if (name.equals("xmp")) {                                                if (tb.inButtonScope("p")) {                                                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                }                                                tb.reconstructFormattingElements();                                                tb.framesetOk(false);                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                            }else                                                if (name.equals("iframe")) {                                                    tb.framesetOk(false);                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                }else                                                    if (name.equals("noembed")) {                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("select")) {                                                            tb.reconstructFormattingElements();                                                            tb.insert(startTag);                                                            tb.framesetOk(false);                                                            org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                            if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                            else                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                        }else                                                            if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                if (tb.currentElement().nodeName().equals("option"))                                                                    tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                tb.reconstructFormattingElements();                                                                tb.insert(startTag);                                                            }else                                                                if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                    if (tb.inScope("ruby")) {                                                                        tb.generateImpliedEndTags();                                                                        if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                            tb.error(this);                                                                            tb.popStackToBefore("ruby");                                                                        }                                                                        tb.insert(startTag);                                                                    }                                                                }else                                                                    if (name.equals("math")) {                                                                        tb.reconstructFormattingElements();                                                                        tb.insert(startTag);                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                    }else                                                                        if (name.equals("svg")) {                                                                            tb.reconstructFormattingElements();                                                                            tb.insert(startTag);                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                        }else                                                                            if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                tb.error(this);                                                                                return false;                                                                            }else {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                            }::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::730::::37116::::37122::::adopter::::a	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32612::::32864::::if (!(tb.inScope(formatEl.nodeName()))) {    tb.error(this);    return false;}else    if ((tb.currentElement()) != formatEl)        tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("hr"))	false
org.jsoup.parser.HtmlTreeBuilder::::263::::9251::::9398::::while (it.hasNext()) {    org.jsoup.nodes.Element next = it.next();    if (next == element) {        return true;    }} ::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.HtmlTreeBuilderState::::645::::31858::::32001::::org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("hr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::649::::32131::::32131::::i::::si - 1	false
org.jsoup.parser.HtmlTreeBuilderState::::673::::33589::::33617::::seenFormattingElement = true::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("li"))	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33658::::33838::::if (seenFormattingElement && (tb.isSpecial(el))) {    furthestBlock = el;    break;}::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("a"))	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32781::::32864::::if ((tb.currentElement()) != formatEl)    tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33662::::33702::::seenFormattingElement && (tb.isSpecial(el))::::exitTableBody(t, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::720::::36432::::36516::::if ((lastNode.parent()) != null)    lastNode.remove();::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("nobr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::669::::33334::::33338::::stack::::new org.jsoup.nodes.Attributes()	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18855::::26999::::if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {    tb.reconstructFormattingElements();    org.jsoup.nodes.Element el = tb.insert(startTag);    tb.pushActiveFormattingElements(el);}else    if (name.equals("nobr")) {        tb.reconstructFormattingElements();        if (tb.inScope("nobr")) {            tb.error(this);            tb.process(new org.jsoup.parser.Token.EndTag("nobr"));            tb.reconstructFormattingElements();        }        org.jsoup.nodes.Element el = tb.insert(startTag);        tb.pushActiveFormattingElements(el);    }else        if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {            tb.reconstructFormattingElements();            tb.insert(startTag);            tb.insertMarkerToFormattingElements();            tb.framesetOk(false);        }else            if (name.equals("table")) {                if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                }                tb.insert(startTag);                tb.framesetOk(false);                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);            }else                if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                    tb.reconstructFormattingElements();                    tb.insertEmpty(startTag);                    tb.framesetOk(false);                }else                    if (name.equals("input")) {                        tb.reconstructFormattingElements();                        org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                        if (!(el.attr("type").equalsIgnoreCase("hidden")))                            tb.framesetOk(false);                    }else                        if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                            tb.insertEmpty(startTag);                        }else                            if (name.equals("hr")) {                                if (tb.inButtonScope("p")) {                                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                                }                                tb.insertEmpty(startTag);                                tb.framesetOk(false);                            }else                                if (name.equals("image")) {                                    startTag.name("img");                                    return tb.process(startTag);                                }else                                    if (name.equals("isindex")) {                                        tb.error(this);                                        if ((tb.getFormElement()) != null)                                            return false;                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                        tb.process(new org.jsoup.parser.Token.StartTag("form"));                                        if (startTag.attributes.hasKey("action")) {                                            org.jsoup.nodes.Element form = tb.getFormElement();                                            form.attr("action", startTag.attributes.get("action"));                                        }                                        tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                        tb.process(new org.jsoup.parser.Token.StartTag("label"));                                        java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                        tb.process(new org.jsoup.parser.Token.Character(prompt));                                        org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                        for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                            if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                inputAttribs.put(attr);                                        }                                        inputAttribs.put("name", "isindex");                                        tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                        tb.process(new org.jsoup.parser.Token.EndTag("label"));                                        tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                        tb.process(new org.jsoup.parser.Token.EndTag("form"));                                    }else                                        if (name.equals("textarea")) {                                            tb.insert(startTag);                                            tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                            tb.markInsertionMode();                                            tb.framesetOk(false);                                            tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                        }else                                            if (name.equals("xmp")) {                                                if (tb.inButtonScope("p")) {                                                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                }                                                tb.reconstructFormattingElements();                                                tb.framesetOk(false);                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                            }else                                                if (name.equals("iframe")) {                                                    tb.framesetOk(false);                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                }else                                                    if (name.equals("noembed")) {                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("select")) {                                                            tb.reconstructFormattingElements();                                                            tb.insert(startTag);                                                            tb.framesetOk(false);                                                            org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                            if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                            else                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                        }else                                                            if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                if (tb.currentElement().nodeName().equals("option"))                                                                    tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                tb.reconstructFormattingElements();                                                                tb.insert(startTag);                                                            }else                                                                if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                    if (tb.inScope("ruby")) {                                                                        tb.generateImpliedEndTags();                                                                        if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                            tb.error(this);                                                                            tb.popStackToBefore("ruby");                                                                        }                                                                        tb.insert(startTag);                                                                    }                                                                }else                                                                    if (name.equals("math")) {                                                                        tb.reconstructFormattingElements();                                                                        tb.insert(startTag);                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                    }else                                                                        if (name.equals("svg")) {                                                                            tb.reconstructFormattingElements();                                                                            tb.insert(startTag);                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                        }else                                                                            if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                tb.error(this);                                                                                return false;                                                                            }else {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                            }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("p"))	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33658::::33838::::if (seenFormattingElement && (tb.isSpecial(el))) {    furthestBlock = el;    break;}::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::730::::37090::::37102::::furthestBlock::::remainingA	false
org.jsoup.parser.Token::::65::::2007::::2032::::attributes.put(attribute)::::INSERT::::STATEMENT::::if ((pendingAttributeName) != null) {    newAttribute();}	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32781::::32864::::if ((tb.currentElement()) != formatEl)    tb.error(this);::::INSERT::::STATEMENT::::tb.process(startTag)	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33517::::33551::::commonAncestor = stack.get((si - 1))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33662::::33702::::seenFormattingElement && (tb.isSpecial(el))::::org.jsoup.parser.HtmlTreeBuilderState.InBody.process(t, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32612::::32864::::if (!(tb.inScope(formatEl.nodeName()))) {    tb.error(this);    return false;}else    if ((tb.currentElement()) != formatEl)        tb.error(this);::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.HtmlTreeBuilderState::::721::::36499::::36516::::lastNode.remove()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("button"))	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31734::::name.equals("sarcasm")::::INSERT::::STATEMENT::::org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::772::::39137::::39168::::tb.generateImpliedEndTags(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("optgroup"))	false
org.jsoup.parser.HtmlTreeBuilder::::582::::20248::::20274::::formattingElements.add(in)::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.HtmlTreeBuilderState::::734::::37478::::37484::::adopter::::a	false
org.jsoup.parser.HtmlTreeBuilder::::285::::9839::::10010::::while (it.hasNext()) {    org.jsoup.nodes.Element next = it.next();    if (next == el) {        it.remove();        return true;    }} ::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33662::::33702::::seenFormattingElement && (tb.isSpecial(el))::::tb.process(new org.jsoup.parser.Token.EndTag("form"))	false
org.jsoup.parser.TokeniserState::::901::::30491::::30494::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.AttributeName	false
org.jsoup.parser.HtmlTreeBuilderState::::784::::39568::::39579::::return true::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::775::::39300::::39324::::tb.popStackToClose(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("form"))	false
org.jsoup.parser.TokeniserState::::809::::27171::::27221::::java.lang.String value = r.consumeToAny('\'', '&', org.jsoup.parser.TokeniserState.nullChar)::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataEndTag(t, r, org.jsoup.parser.TokeniserState.ScriptDataEscaped)	false
org.jsoup.parser.TokeniserState::::809::::27171::::27221::::java.lang.String value = r.consumeToAny('\'', '&', org.jsoup.parser.TokeniserState.nullChar)::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataEndTag(t, r, org.jsoup.parser.TokeniserState.ScriptData)	false
org.jsoup.parser.TokeniserState::::809::::27171::::27221::::java.lang.String value = r.consumeToAny('\'', '&', org.jsoup.parser.TokeniserState.nullChar)::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataEndTag(t, r, org.jsoup.parser.TokeniserState.Rawtext)	false
org.jsoup.parser.TokeniserState::::809::::27171::::27221::::java.lang.String value = r.consumeToAny('\'', '&', org.jsoup.parser.TokeniserState.nullChar)::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataDoubleEscapeTag(t, r, org.jsoup.parser.TokeniserState.ScriptDataEscaped, org.jsoup.parser.TokeniserState.ScriptDataDoubleEscaped)	false
org.jsoup.parser.TokeniserState::::809::::27171::::27221::::java.lang.String value = r.consumeToAny('\'', '&', org.jsoup.parser.TokeniserState.nullChar)::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataDoubleEscapeTag(t, r, org.jsoup.parser.TokeniserState.ScriptDataDoubleEscaped, org.jsoup.parser.TokeniserState.ScriptDataEscaped)	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35025::::35028::::node::::body	false
org.jsoup.parser.HtmlTreeBuilderState::::721::::36499::::36516::::lastNode.remove()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag(name))	false
org.jsoup.parser.HtmlTreeBuilderState::::645::::31858::::32001::::org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::if (node == formatEl)    break INNER;	false
org.jsoup.parser.HtmlTreeBuilderState::::720::::36436::::36443::::lastNode::::form	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32612::::32864::::if (!(tb.inScope(formatEl.nodeName()))) {    tb.error(this);    return false;}else    if ((tb.currentElement()) != formatEl)        tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.Character(prompt))	false
org.jsoup.parser.HtmlTreeBuilderState::::721::::36499::::36506::::lastNode::::form	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36577::::36584::::lastNode::::form	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18118::::18649::::if ((tb.getActiveFormattingElement("a")) != null) {    tb.error(this);    tb.process(new org.jsoup.parser.Token.EndTag("a"));    org.jsoup.nodes.Element remainingA = tb.getFromStack("a");    if (remainingA != null) {        tb.removeFromActiveFormattingElements(remainingA);        tb.removeFromStack(remainingA);    }}::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("optgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::645::::31858::::32001::::org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.Character(prompt))	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32785::::32815::::(tb.currentElement()) != formatEl::::org.jsoup.parser.HtmlTreeBuilderState.InBody.process(t, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::731::::37192::::37199::::formatEl::::body	false
org.jsoup.parser.HtmlTreeBuilderState::::673::::33589::::33617::::seenFormattingElement = true::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("nobr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::645::::31858::::32001::::org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.HtmlTreeBuilderState::::673::::33589::::33609::::seenFormattingElement::::notIgnored	false
org.jsoup.parser.HtmlTreeBuilderState::::772::::39137::::39168::::tb.generateImpliedEndTags(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("button"))	false
org.jsoup.parser.TokeniserState::::810::::27239::::27243::::value::::"]]>"	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33517::::33551::::commonAncestor = stack.get((si - 1))::::INSERT::::STATEMENT::::closeCell(tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33759::::33760::::el::::a	false
org.jsoup.parser.HtmlTreeBuilderState::::645::::31858::::32001::::org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("select"))	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33662::::33702::::seenFormattingElement && (tb.isSpecial(el))::::tb.process(new org.jsoup.parser.Token.StartTag("br"))	false
org.jsoup.parser.HtmlTreeBuilderState::::775::::39300::::39324::::tb.popStackToClose(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("li"))	false
org.jsoup.parser.HtmlTreeBuilderState::::720::::36432::::36516::::if ((lastNode.parent()) != null)    lastNode.remove();::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::649::::32138::::32138::::i::::si - 1	false
org.jsoup.parser.TokeniserState::::901::::30491::::30494::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.BeforeAttributeName	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32781::::32864::::if ((tb.currentElement()) != formatEl)    tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs))	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32781::::32864::::if ((tb.currentElement()) != formatEl)    tb.error(this);::::INSERT::::STATEMENT::::org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32378::::32398::::!(tb.onStack(formatEl))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag(name))	false
org.jsoup.parser.HtmlTreeBuilderState::::728::::36935::::36941::::adopter::::a	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18118::::18649::::if ((tb.getActiveFormattingElement("a")) != null) {    tb.error(this);    tb.process(new org.jsoup.parser.Token.EndTag("a"));    org.jsoup.nodes.Element remainingA = tb.getFromStack("a");    if (remainingA != null) {        tb.removeFromActiveFormattingElements(remainingA);        tb.removeFromStack(remainingA);    }}::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("br"))	false
org.jsoup.parser.HtmlTreeBuilder::::656::::23018::::23080::::java.util.Iterator<org.jsoup.nodes.Element> it = formattingElements.descendingIterator()::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"body"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17545::::name.equals("button")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag(name))	false
org.jsoup.parser.HtmlTreeBuilderState::::661::::32850::::32864::::tb.error(this)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs))	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18118::::18649::::if ((tb.getActiveFormattingElement("a")) != null) {    tb.error(this);    tb.process(new org.jsoup.parser.Token.EndTag("a"));    org.jsoup.nodes.Element remainingA = tb.getFromStack("a");    if (remainingA != null) {        tb.removeFromActiveFormattingElements(remainingA);        tb.removeFromStack(remainingA);    }}::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tbody"))	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32374::::32864::::if (!(tb.onStack(formatEl))) {    tb.error(this);    tb.removeFromActiveFormattingElements(formatEl);    return true;}else    if (!(tb.inScope(formatEl.nodeName()))) {        tb.error(this);        return false;    }else        if ((tb.currentElement()) != formatEl)            tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("select"))	false
org.jsoup.parser.HtmlTreeBuilderState::::775::::39300::::39324::::tb.popStackToClose(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("body"))	false
org.jsoup.parser.HtmlTreeBuilderState::::412::::18675::::18709::::tb.reconstructFormattingElements()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18859::::18989::::org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag(name))	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33662::::33682::::seenFormattingElement::::notIgnored	false
org.jsoup.parser.HtmlTreeBuilderState::::733::::37402::::37409::::formatEl::::body	false
org.jsoup.parser.HtmlTreeBuilder::::641::::22587::::22649::::java.util.Iterator<org.jsoup.nodes.Element> it = formattingElements.descendingIterator()::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.HtmlTreeBuilderState::::671::::33463::::33464::::el::::currentForm	false
org.jsoup.parser.HtmlTreeBuilderState::::632::::31114::::31168::::org.jsoup.helper.StringUtil.in(name, "h1", "h2", "h3", "h4", "h5", "h6")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.Character(prompt))	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33700::::33701::::el::::currentForm	false
org.jsoup.parser.HtmlTreeBuilderState::::645::::31858::::32001::::org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33662::::33702::::seenFormattingElement && (tb.isSpecial(el))::::tb.process(new org.jsoup.parser.Token.StartTag("tbody"))	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17545::::name.equals("button")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("body"))	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33658::::33838::::if (seenFormattingElement && (tb.isSpecial(el))) {    furthestBlock = el;    break;}::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::412::::18675::::18709::::tb.reconstructFormattingElements()::::INSERT::::STATEMENT::::tb.process(startTag)	false
org.jsoup.parser.HtmlTreeBuilderState::::721::::36499::::36516::::lastNode.remove()::::DELETE::::STATEMENT	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"body"	false
org.jsoup.parser.HtmlTreeBuilderState::::721::::36499::::36506::::lastNode::::new org.jsoup.nodes.Attributes()	false
org.jsoup.parser.HtmlTreeBuilder::::661::::23241::::23272::::next.nodeName().equals(nodeName)::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33662::::33702::::seenFormattingElement && (tb.isSpecial(el))::::handleMissingTr(t, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32616::::32647::::!(tb.inScope(formatEl.nodeName()))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag(name))	false
org.jsoup.parser.HtmlTreeBuilderState::::645::::31858::::32001::::org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("a"))	false
org.jsoup.parser.HtmlTreeBuilderState::::412::::18675::::18709::::tb.reconstructFormattingElements()::::INSERT::::STATEMENT::::if (node == formatEl)    break INNER;	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32374::::32864::::if (!(tb.onStack(formatEl))) {    tb.error(this);    tb.removeFromActiveFormattingElements(formatEl);    return true;}else    if (!(tb.inScope(formatEl.nodeName()))) {        tb.error(this);        return false;    }else        if ((tb.currentElement()) != formatEl)            tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("hr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32612::::32864::::if (!(tb.inScope(formatEl.nodeName()))) {    tb.error(this);    return false;}else    if ((tb.currentElement()) != formatEl)        tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::775::::39300::::39324::::tb.popStackToClose(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("button"))	false
org.jsoup.parser.HtmlTreeBuilderState::::673::::33589::::33617::::seenFormattingElement = true::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("label"))	false
org.jsoup.parser.Token::::65::::2007::::2016::::attributes::::this.attributes	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31734::::name.equals("sarcasm")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::731::::37192::::37199::::formatEl::::form	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18089::::name.equals("a")::::INSERT::::STATEMENT::::if (node == formatEl)    break INNER;	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18859::::18989::::org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("body"))	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18089::::name.equals("a")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("head"))	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32612::::32864::::if (!(tb.inScope(formatEl.nodeName()))) {    tb.error(this);    return false;}else    if ((tb.currentElement()) != formatEl)        tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("a"))	false
org.jsoup.parser.HtmlTreeBuilderState::::772::::39137::::39168::::tb.generateImpliedEndTags(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tbody"))	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35025::::35028::::node::::second	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33658::::33838::::if (seenFormattingElement && (tb.isSpecial(el))) {    furthestBlock = el;    break;}::::INSERT::::STATEMENT::::tb.process(startTag)	false
org.jsoup.parser.HtmlTreeBuilderState::::772::::39137::::39168::::tb.generateImpliedEndTags(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("body"))	false
org.jsoup.parser.Token::::64::::1908::::1989::::attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, pendingAttributeValue.toString())::::pendingAttributeValue = new java.lang.StringBuilder()	false
org.jsoup.parser.Token::::64::::1908::::1989::::attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, pendingAttributeValue.toString())::::pendingAttributeName = null	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32781::::32864::::if ((tb.currentElement()) != formatEl)    tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("head"))	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32378::::32398::::!(tb.onStack(formatEl))::::INSERT::::STATEMENT::::if (notIgnored)    return tb.process(endTag);	false
org.jsoup.parser.HtmlTreeBuilderState::::731::::37192::::37199::::formatEl::::second	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32616::::32647::::!(tb.inScope(formatEl.nodeName()))::::INSERT::::STATEMENT::::if (notIgnored)    return tb.process(endTag);	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18118::::18649::::if ((tb.getActiveFormattingElement("a")) != null) {    tb.error(this);    tb.process(new org.jsoup.parser.Token.EndTag("a"));    org.jsoup.nodes.Element remainingA = tb.getFromStack("a");    if (remainingA != null) {        tb.removeFromActiveFormattingElements(remainingA);        tb.removeFromStack(remainingA);    }}::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("colgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32374::::32864::::if (!(tb.onStack(formatEl))) {    tb.error(this);    tb.removeFromActiveFormattingElements(formatEl);    return true;}else    if (!(tb.inScope(formatEl.nodeName()))) {        tb.error(this);        return false;    }else        if ((tb.currentElement()) != formatEl)            tb.error(this);::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.Token::::61::::1759::::1989::::if ((pendingAttributeValue) == null)    attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, "");else    attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, pendingAttributeValue.toString());::::INSERT::::STATEMENT::::if ((pendingAttributeValue) == null)    pendingAttributeValue = new java.lang.StringBuilder();	false
org.jsoup.parser.HtmlTreeBuilder::::642::::22659::::22824::::while (it.hasNext()) {    org.jsoup.nodes.Element next = it.next();    if (next == el) {        it.remove();        break;    }} ::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.Token::::118::::3596::::3632::::pendingAttributeValue.append(append)::::DELETE::::STATEMENT	false
org.jsoup.parser.HtmlTreeBuilder::::664::::23322::::23333::::return null::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.Token::::64::::1956::::1976::::pendingAttributeValue::::new org.jsoup.nodes.Attribute(pendingAttributeName, pendingAttributeValue.toString())	false
org.jsoup.parser.HtmlTreeBuilderState::::622::::30613::::30643::::org.jsoup.helper.StringUtil.in(name, "dd", "dt")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.Character(prompt))	false
org.jsoup.parser.Token::::132::::4003::::4097::::if ((pendingAttributeValue) == null)    pendingAttributeValue = new java.lang.StringBuilder();::::INSERT::::STATEMENT::::if ((pendingAttributeName) != null) {    newAttribute();}	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"body"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"body"	false
org.jsoup.parser.HtmlTreeBuilderState::::775::::39300::::39324::::tb.popStackToClose(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tbody"))	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32785::::32815::::(tb.currentElement()) != formatEl::::tb.process(new org.jsoup.parser.Token.StartTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::772::::39137::::39168::::tb.generateImpliedEndTags(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("colgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::673::::33589::::33617::::seenFormattingElement = true::::INSERT::::STATEMENT::::closeCell(tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18855::::26999::::if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {    tb.reconstructFormattingElements();    org.jsoup.nodes.Element el = tb.insert(startTag);    tb.pushActiveFormattingElements(el);}else    if (name.equals("nobr")) {        tb.reconstructFormattingElements();        if (tb.inScope("nobr")) {            tb.error(this);            tb.process(new org.jsoup.parser.Token.EndTag("nobr"));            tb.reconstructFormattingElements();        }        org.jsoup.nodes.Element el = tb.insert(startTag);        tb.pushActiveFormattingElements(el);    }else        if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {            tb.reconstructFormattingElements();            tb.insert(startTag);            tb.insertMarkerToFormattingElements();            tb.framesetOk(false);        }else            if (name.equals("table")) {                if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                }                tb.insert(startTag);                tb.framesetOk(false);                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);            }else                if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                    tb.reconstructFormattingElements();                    tb.insertEmpty(startTag);                    tb.framesetOk(false);                }else                    if (name.equals("input")) {                        tb.reconstructFormattingElements();                        org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                        if (!(el.attr("type").equalsIgnoreCase("hidden")))                            tb.framesetOk(false);                    }else                        if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                            tb.insertEmpty(startTag);                        }else                            if (name.equals("hr")) {                                if (tb.inButtonScope("p")) {                                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                                }                                tb.insertEmpty(startTag);                                tb.framesetOk(false);                            }else                                if (name.equals("image")) {                                    startTag.name("img");                                    return tb.process(startTag);                                }else                                    if (name.equals("isindex")) {                                        tb.error(this);                                        if ((tb.getFormElement()) != null)                                            return false;                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                        tb.process(new org.jsoup.parser.Token.StartTag("form"));                                        if (startTag.attributes.hasKey("action")) {                                            org.jsoup.nodes.Element form = tb.getFormElement();                                            form.attr("action", startTag.attributes.get("action"));                                        }                                        tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                        tb.process(new org.jsoup.parser.Token.StartTag("label"));                                        java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                        tb.process(new org.jsoup.parser.Token.Character(prompt));                                        org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                        for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                            if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                inputAttribs.put(attr);                                        }                                        inputAttribs.put("name", "isindex");                                        tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                        tb.process(new org.jsoup.parser.Token.EndTag("label"));                                        tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                        tb.process(new org.jsoup.parser.Token.EndTag("form"));                                    }else                                        if (name.equals("textarea")) {                                            tb.insert(startTag);                                            tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                            tb.markInsertionMode();                                            tb.framesetOk(false);                                            tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                        }else                                            if (name.equals("xmp")) {                                                if (tb.inButtonScope("p")) {                                                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                }                                                tb.reconstructFormattingElements();                                                tb.framesetOk(false);                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                            }else                                                if (name.equals("iframe")) {                                                    tb.framesetOk(false);                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                }else                                                    if (name.equals("noembed")) {                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("select")) {                                                            tb.reconstructFormattingElements();                                                            tb.insert(startTag);                                                            tb.framesetOk(false);                                                            org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                            if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                            else                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                        }else                                                            if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                if (tb.currentElement().nodeName().equals("option"))                                                                    tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                tb.reconstructFormattingElements();                                                                tb.insert(startTag);                                                            }else                                                                if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                    if (tb.inScope("ruby")) {                                                                        tb.generateImpliedEndTags();                                                                        if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                            tb.error(this);                                                                            tb.popStackToBefore("ruby");                                                                        }                                                                        tb.insert(startTag);                                                                    }                                                                }else                                                                    if (name.equals("math")) {                                                                        tb.reconstructFormattingElements();                                                                        tb.insert(startTag);                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                    }else                                                                        if (name.equals("svg")) {                                                                            tb.reconstructFormattingElements();                                                                            tb.insert(startTag);                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                        }else                                                                            if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                tb.error(this);                                                                                return false;                                                                            }else {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                            }::::INSERT::::STATEMENT::::if (lastNode == furthestBlock) {}	false
org.jsoup.parser.HtmlTreeBuilderState::::661::::32850::::32864::::tb.error(this)::::INSERT::::STATEMENT::::tb.process(startTag)	false
org.jsoup.parser.HtmlTreeBuilderState::::721::::36499::::36516::::lastNode.remove()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("br"))	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"p"	false
org.jsoup.parser.HtmlTreeBuilderState::::775::::39300::::39324::::tb.popStackToClose(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("colgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30134::::name.equals("li")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("hr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33700::::33701::::el::::remainingA	false
org.jsoup.parser.HtmlTreeBuilderState::::720::::36432::::36516::::if ((lastNode.parent()) != null)    lastNode.remove();::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag(name))	false
org.jsoup.parser.HtmlTreeBuilder::::661::::23237::::23302::::if (next.nodeName().equals(nodeName))    return next;::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32616::::32647::::!(tb.inScope(formatEl.nodeName()))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("button"))	false
org.jsoup.parser.HtmlTreeBuilderState::::733::::37402::::37409::::formatEl::::second	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32612::::32864::::if (!(tb.inScope(formatEl.nodeName()))) {    tb.error(this);    return false;}else    if ((tb.currentElement()) != formatEl)        tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("label"))	false
org.jsoup.parser.TokeniserState::::810::::27239::::27243::::value::::org.jsoup.parser.TokeniserState.replacementStr	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33662::::33702::::seenFormattingElement && (tb.isSpecial(el))::::tb.process(new org.jsoup.parser.Token.EndTag("optgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33658::::33838::::if (seenFormattingElement && (tb.isSpecial(el))) {    furthestBlock = el;    break;}::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs))	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33658::::33838::::if (seenFormattingElement && (tb.isSpecial(el))) {    furthestBlock = el;    break;}::::INSERT::::STATEMENT::::org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::670::::33412::::33416::::stack::::new org.jsoup.nodes.Attributes()	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31734::::name.equals("sarcasm")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("head"))	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33517::::33551::::commonAncestor = stack.get((si - 1))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag(name))	false
org.jsoup.parser.HtmlTreeBuilderState::::671::::33463::::33464::::el::::remainingA	false
org.jsoup.parser.HtmlTreeBuilderState::::733::::37402::::37409::::formatEl::::form	false
org.jsoup.parser.HtmlTreeBuilderState::::721::::36499::::36516::::lastNode.remove()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tbody"))	false
org.jsoup.parser.HtmlTreeBuilderState::::661::::32850::::32864::::tb.error(this)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("a"))	false
org.jsoup.parser.TokeniserState::::811::::27309::::27313::::value::::org.jsoup.parser.TokeniserState.replacementStr	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32378::::32398::::!(tb.onStack(formatEl))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("button"))	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18089::::name.equals("a")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18859::::18989::::org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33658::::33838::::if (seenFormattingElement && (tb.isSpecial(el))) {    furthestBlock = el;    break;}::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("head"))	false
org.jsoup.parser.HtmlTreeBuilderState::::669::::33329::::33330::::si::::j++	false
org.jsoup.parser.HtmlTreeBuilder::::288::::9946::::9957::::it.remove()::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.HtmlTreeBuilderState::::775::::39300::::39324::::tb.popStackToClose(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::730::::37090::::37102::::furthestBlock::::currentForm	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33517::::33551::::commonAncestor = stack.get((si - 1))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("button"))	false
org.jsoup.parser.HtmlTreeBuilderState::::645::::31858::::32001::::org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32612::::32864::::if (!(tb.inScope(formatEl.nodeName()))) {    tb.error(this);    return false;}else    if ((tb.currentElement()) != formatEl)        tb.error(this);::::INSERT::::STATEMENT::::tb.process(startTag)	false
org.jsoup.parser.HtmlTreeBuilderState::::772::::39137::::39168::::tb.generateImpliedEndTags(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::784::::39568::::39579::::return true::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("option"))	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32374::::32864::::if (!(tb.onStack(formatEl))) {    tb.error(this);    tb.removeFromActiveFormattingElements(formatEl);    return true;}else    if (!(tb.inScope(formatEl.nodeName()))) {        tb.error(this);        return false;    }else        if ((tb.currentElement()) != formatEl)            tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.Character(prompt))	false
org.jsoup.parser.HtmlTreeBuilder::::569::::19927::::20238::::while (iter.hasNext()) {    org.jsoup.nodes.Element el = iter.next();    if (el == null)        break;    if (isSameFormattingElement(in, el))        numSeen++;    if (numSeen == 3) {        iter.remove();        break;    }} ::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.HtmlTreeBuilderState::::669::::33350::::33351::::si::::j++	false
org.jsoup.parser.HtmlTreeBuilder::::284::::9780::::9829::::java.util.Iterator<org.jsoup.nodes.Element> it = stack.descendingIterator()::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32781::::32864::::if ((tb.currentElement()) != formatEl)    tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("nobr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32781::::32864::::if ((tb.currentElement()) != formatEl)    tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::731::::37192::::37199::::formatEl::::html	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17545::::name.equals("button")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34734::::34762::::node = tb.aboveOnStack(node)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("th"))	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34734::::34762::::node = tb.aboveOnStack(node)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("td"))	false
org.jsoup.parser.HtmlTreeBuilder::::263::::9251::::9398::::while (it.hasNext()) {    org.jsoup.nodes.Element next = it.next();    if (next == element) {        return true;    }} ::::INSERT::::STATEMENT::::if (next == element) {    return true;}	false
org.jsoup.parser.HtmlTreeBuilderState::::669::::33359::::33360::::si::::j++	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32781::::32864::::if ((tb.currentElement()) != formatEl)    tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("li"))	false
org.jsoup.parser.TokeniserState::::901::::30491::::30494::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.ScriptDataEscaped	false
org.jsoup.parser.HtmlTreeBuilderState::::691::::34691::::34694::::node::::body	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32378::::32398::::!(tb.onStack(formatEl))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32616::::32647::::!(tb.inScope(formatEl.nodeName()))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::734::::37463::::37475::::furthestBlock::::remainingA	false
org.jsoup.parser.HtmlTreeBuilderState::::670::::33422::::33423::::si::::j++	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30134::::name.equals("li")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33662::::33702::::seenFormattingElement && (tb.isSpecial(el))::::tb.process(new org.jsoup.parser.Token.StartTag("colgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33544::::33545::::si::::j++	false
org.jsoup.parser.HtmlTreeBuilderState::::661::::32850::::32864::::tb.error(this)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34734::::34737::::node::::body	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17545::::name.equals("button")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("button"))	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33658::::33838::::if (seenFormattingElement && (tb.isSpecial(el))) {    furthestBlock = el;    break;}::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("li"))	false
org.jsoup.parser.HtmlTreeBuilderState::::673::::33589::::33617::::seenFormattingElement = true::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag(name))	false
org.jsoup.parser.HtmlTreeBuilderState::::775::::39300::::39324::::tb.popStackToClose(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("noscript"))	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31734::::name.equals("sarcasm")::::INSERT::::STATEMENT::::closeCell(tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::721::::36499::::36516::::lastNode.remove()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("optgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33517::::33551::::commonAncestor = stack.get((si - 1))::::INSERT::::STATEMENT::::if (notIgnored)    return tb.process(endTag);	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32378::::32398::::!(tb.onStack(formatEl))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tbody"))	false
org.jsoup.parser.HtmlTreeBuilder::::657::::23090::::23312::::while (it.hasNext()) {    org.jsoup.nodes.Element next = it.next();    if (next == null)        break;    else        if (next.nodeName().equals(nodeName))            return next;} ::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18859::::18989::::org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("button"))	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34757::::34760::::node::::body	false
org.jsoup.parser.HtmlTreeBuilderState::::772::::39137::::39168::::tb.generateImpliedEndTags(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("br"))	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32612::::32864::::if (!(tb.inScope(formatEl.nodeName()))) {    tb.error(this);    return false;}else    if ((tb.currentElement()) != formatEl)        tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs))	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"p"	false
org.jsoup.parser.HtmlTreeBuilder::::555::::18886::::19725::::return org.jsoup.helper.StringUtil.in(name, "address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "command", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "marquee", "menu", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "style", "summary", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "title", "tr", "ul", "wbr", "xmp")::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.HtmlTreeBuilderState::::734::::37463::::37475::::furthestBlock::::currentForm	false
org.jsoup.parser.HtmlTreeBuilderState::::733::::37402::::37409::::formatEl::::html	false
org.jsoup.parser.HtmlTreeBuilderState::::772::::39137::::39168::::tb.generateImpliedEndTags(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("th"))	false
org.jsoup.parser.HtmlTreeBuilderState::::772::::39137::::39168::::tb.generateImpliedEndTags(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("td"))	false
org.jsoup.parser.HtmlTreeBuilderState::::693::::34833::::34836::::node::::body	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18118::::18649::::if ((tb.getActiveFormattingElement("a")) != null) {    tb.error(this);    tb.process(new org.jsoup.parser.Token.EndTag("a"));    org.jsoup.nodes.Element remainingA = tb.getFromStack("a");    if (remainingA != null) {        tb.removeFromActiveFormattingElements(remainingA);        tb.removeFromStack(remainingA);    }}::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tr"))	false
org.jsoup.parser.TokeniserState::::814::::27364::::28181::::switch (c) {    case '\'' :        t.transition(org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted);        break;    case '&' :        char[] ref = t.consumeCharacterReference('\'', true);        if (ref != null)            t.tagPending.appendAttributeValue(ref);        else            t.tagPending.appendAttributeValue('&');        break;    case org.jsoup.parser.TokeniserState.nullChar :        t.error(this);        t.tagPending.appendAttributeValue(org.jsoup.parser.TokeniserState.replacementChar);        break;    case org.jsoup.parser.TokeniserState.eof :        t.eofError(this);        t.transition(org.jsoup.parser.TokeniserState.Data);        break;}::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataEndTag(t, r, org.jsoup.parser.TokeniserState.ScriptDataEscaped)	false
org.jsoup.parser.TokeniserState::::814::::27364::::28181::::switch (c) {    case '\'' :        t.transition(org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted);        break;    case '&' :        char[] ref = t.consumeCharacterReference('\'', true);        if (ref != null)            t.tagPending.appendAttributeValue(ref);        else            t.tagPending.appendAttributeValue('&');        break;    case org.jsoup.parser.TokeniserState.nullChar :        t.error(this);        t.tagPending.appendAttributeValue(org.jsoup.parser.TokeniserState.replacementChar);        break;    case org.jsoup.parser.TokeniserState.eof :        t.eofError(this);        t.transition(org.jsoup.parser.TokeniserState.Data);        break;}::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataEndTag(t, r, org.jsoup.parser.TokeniserState.ScriptData)	false
org.jsoup.parser.TokeniserState::::814::::27364::::28181::::switch (c) {    case '\'' :        t.transition(org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted);        break;    case '&' :        char[] ref = t.consumeCharacterReference('\'', true);        if (ref != null)            t.tagPending.appendAttributeValue(ref);        else            t.tagPending.appendAttributeValue('&');        break;    case org.jsoup.parser.TokeniserState.nullChar :        t.error(this);        t.tagPending.appendAttributeValue(org.jsoup.parser.TokeniserState.replacementChar);        break;    case org.jsoup.parser.TokeniserState.eof :        t.eofError(this);        t.transition(org.jsoup.parser.TokeniserState.Data);        break;}::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataEndTag(t, r, org.jsoup.parser.TokeniserState.Rawtext)	false
org.jsoup.parser.TokeniserState::::814::::27364::::28181::::switch (c) {    case '\'' :        t.transition(org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted);        break;    case '&' :        char[] ref = t.consumeCharacterReference('\'', true);        if (ref != null)            t.tagPending.appendAttributeValue(ref);        else            t.tagPending.appendAttributeValue('&');        break;    case org.jsoup.parser.TokeniserState.nullChar :        t.error(this);        t.tagPending.appendAttributeValue(org.jsoup.parser.TokeniserState.replacementChar);        break;    case org.jsoup.parser.TokeniserState.eof :        t.eofError(this);        t.transition(org.jsoup.parser.TokeniserState.Data);        break;}::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataDoubleEscapeTag(t, r, org.jsoup.parser.TokeniserState.ScriptDataEscaped, org.jsoup.parser.TokeniserState.ScriptDataDoubleEscaped)	false
org.jsoup.parser.TokeniserState::::814::::27364::::28181::::switch (c) {    case '\'' :        t.transition(org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted);        break;    case '&' :        char[] ref = t.consumeCharacterReference('\'', true);        if (ref != null)            t.tagPending.appendAttributeValue(ref);        else            t.tagPending.appendAttributeValue('&');        break;    case org.jsoup.parser.TokeniserState.nullChar :        t.error(this);        t.tagPending.appendAttributeValue(org.jsoup.parser.TokeniserState.replacementChar);        break;    case org.jsoup.parser.TokeniserState.eof :        t.eofError(this);        t.transition(org.jsoup.parser.TokeniserState.Data);        break;}::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataDoubleEscapeTag(t, r, org.jsoup.parser.TokeniserState.ScriptDataDoubleEscaped, org.jsoup.parser.TokeniserState.ScriptDataEscaped)	false
org.jsoup.parser.Token::::64::::1956::::1976::::pendingAttributeValue::::this	false
org.jsoup.parser.HtmlTreeBuilderState::::632::::31114::::31168::::org.jsoup.helper.StringUtil.in(name, "h1", "h2", "h3", "h4", "h5", "h6")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("label"))	false
org.jsoup.parser.Token::::133::::4054::::4097::::pendingAttributeValue = new java.lang.StringBuilder()::::INSERT::::STATEMENT::::if ((pendingAttributeName) != null) {    newAttribute();}	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17545::::name.equals("button")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18122::::18163::::(tb.getActiveFormattingElement("a")) != null::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InSelect)	false
org.jsoup.parser.HtmlTreeBuilderState::::772::::39137::::39168::::tb.generateImpliedEndTags(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("noscript"))	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18855::::26999::::if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {    tb.reconstructFormattingElements();    org.jsoup.nodes.Element el = tb.insert(startTag);    tb.pushActiveFormattingElements(el);}else    if (name.equals("nobr")) {        tb.reconstructFormattingElements();        if (tb.inScope("nobr")) {            tb.error(this);            tb.process(new org.jsoup.parser.Token.EndTag("nobr"));            tb.reconstructFormattingElements();        }        org.jsoup.nodes.Element el = tb.insert(startTag);        tb.pushActiveFormattingElements(el);    }else        if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {            tb.reconstructFormattingElements();            tb.insert(startTag);            tb.insertMarkerToFormattingElements();            tb.framesetOk(false);        }else            if (name.equals("table")) {                if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                }                tb.insert(startTag);                tb.framesetOk(false);                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);            }else                if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                    tb.reconstructFormattingElements();                    tb.insertEmpty(startTag);                    tb.framesetOk(false);                }else                    if (name.equals("input")) {                        tb.reconstructFormattingElements();                        org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                        if (!(el.attr("type").equalsIgnoreCase("hidden")))                            tb.framesetOk(false);                    }else                        if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                            tb.insertEmpty(startTag);                        }else                            if (name.equals("hr")) {                                if (tb.inButtonScope("p")) {                                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                                }                                tb.insertEmpty(startTag);                                tb.framesetOk(false);                            }else                                if (name.equals("image")) {                                    startTag.name("img");                                    return tb.process(startTag);                                }else                                    if (name.equals("isindex")) {                                        tb.error(this);                                        if ((tb.getFormElement()) != null)                                            return false;                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                        tb.process(new org.jsoup.parser.Token.StartTag("form"));                                        if (startTag.attributes.hasKey("action")) {                                            org.jsoup.nodes.Element form = tb.getFormElement();                                            form.attr("action", startTag.attributes.get("action"));                                        }                                        tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                        tb.process(new org.jsoup.parser.Token.StartTag("label"));                                        java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                        tb.process(new org.jsoup.parser.Token.Character(prompt));                                        org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                        for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                            if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                inputAttribs.put(attr);                                        }                                        inputAttribs.put("name", "isindex");                                        tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                        tb.process(new org.jsoup.parser.Token.EndTag("label"));                                        tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                        tb.process(new org.jsoup.parser.Token.EndTag("form"));                                    }else                                        if (name.equals("textarea")) {                                            tb.insert(startTag);                                            tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                            tb.markInsertionMode();                                            tb.framesetOk(false);                                            tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                        }else                                            if (name.equals("xmp")) {                                                if (tb.inButtonScope("p")) {                                                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                }                                                tb.reconstructFormattingElements();                                                tb.framesetOk(false);                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                            }else                                                if (name.equals("iframe")) {                                                    tb.framesetOk(false);                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                }else                                                    if (name.equals("noembed")) {                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("select")) {                                                            tb.reconstructFormattingElements();                                                            tb.insert(startTag);                                                            tb.framesetOk(false);                                                            org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                            if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                            else                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                        }else                                                            if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                if (tb.currentElement().nodeName().equals("option"))                                                                    tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                tb.reconstructFormattingElements();                                                                tb.insert(startTag);                                                            }else                                                                if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                    if (tb.inScope("ruby")) {                                                                        tb.generateImpliedEndTags();                                                                        if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                            tb.error(this);                                                                            tb.popStackToBefore("ruby");                                                                        }                                                                        tb.insert(startTag);                                                                    }                                                                }else                                                                    if (name.equals("math")) {                                                                        tb.reconstructFormattingElements();                                                                        tb.insert(startTag);                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                    }else                                                                        if (name.equals("svg")) {                                                                            tb.reconstructFormattingElements();                                                                            tb.insert(startTag);                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                        }else                                                                            if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                tb.error(this);                                                                                return false;                                                                            }else {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                            }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::645::::31858::::32001::::org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs))	false
org.jsoup.parser.HtmlTreeBuilder::::569::::19927::::20238::::while (iter.hasNext()) {    org.jsoup.nodes.Element el = iter.next();    if (el == null)        break;    if (isSameFormattingElement(in, el))        numSeen++;    if (numSeen == 3) {        iter.remove();        break;    }} ::::INSERT::::STATEMENT::::if (isSameFormattingElement(in, el))    numSeen++;	false
org.jsoup.parser.HtmlTreeBuilderState::::691::::34691::::34694::::node::::second	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33743::::33755::::furthestBlock::::currentForm	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18859::::18989::::org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17545::::name.equals("button")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("noscript"))	false
org.jsoup.parser.HtmlTreeBuilderState::::726::::36762::::36774::::furthestBlock::::currentForm	false
org.jsoup.parser.HtmlTreeBuilderState::::726::::36806::::36818::::furthestBlock::::currentForm	false
org.jsoup.parser.HtmlTreeBuilderState::::687::::34474::::34486::::furthestBlock::::currentForm	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32616::::32647::::!(tb.inScope(formatEl.nodeName()))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tbody"))	false
org.jsoup.parser.HtmlTreeBuilderState::::688::::34536::::34548::::furthestBlock::::currentForm	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35025::::35028::::node::::html	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32781::::32864::::if ((tb.currentElement()) != formatEl)    tb.error(this);::::INSERT::::STATEMENT::::closeCell(tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32378::::32398::::!(tb.onStack(formatEl))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("br"))	false
org.jsoup.parser.HtmlTreeBuilder::::662::::23291::::23302::::return next::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.HtmlTreeBuilderState::::721::::36499::::36516::::lastNode.remove()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("colgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34734::::34737::::node::::second	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30134::::name.equals("li")::::INSERT::::STATEMENT::::if (lastNode == furthestBlock) {}	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33534::::33538::::stack::::new org.jsoup.nodes.Attributes()	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32374::::32864::::if (!(tb.onStack(formatEl))) {    tb.error(this);    tb.removeFromActiveFormattingElements(formatEl);    return true;}else    if (!(tb.inScope(formatEl.nodeName()))) {        tb.error(this);        return false;    }else        if ((tb.currentElement()) != formatEl)            tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18859::::18989::::org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("noscript"))	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34757::::34760::::node::::second	false
org.jsoup.parser.Token::::64::::1956::::1976::::pendingAttributeValue::::new org.jsoup.nodes.Attributes()	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32616::::32647::::!(tb.inScope(formatEl.nodeName()))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("br"))	false
org.jsoup.parser.HtmlTreeBuilder::::288::::9946::::9957::::it.remove()::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.HtmlTreeBuilderState::::720::::36432::::36516::::if ((lastNode.parent()) != null)    lastNode.remove();::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("button"))	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32378::::32398::::!(tb.onStack(formatEl))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("colgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::645::::31858::::32001::::org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::tb.process(startTag)	false
org.jsoup.parser.HtmlTreeBuilderState::::784::::39568::::39579::::return true::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33517::::33530::::commonAncestor::::a	false
org.jsoup.parser.HtmlTreeBuilderState::::673::::33589::::33617::::seenFormattingElement = true::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("button"))	false
org.jsoup.parser.Token::::61::::1759::::1989::::if ((pendingAttributeValue) == null)    attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, "");else    attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, pendingAttributeValue.toString());::::INSERT::::STATEMENT::::if ((pendingAttributeName) != null) {    newAttribute();}	false
org.jsoup.parser.HtmlTreeBuilderState::::693::::34833::::34836::::node::::second	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18089::::name.equals("a")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("nobr"))	false
org.jsoup.parser.HtmlTreeBuilder::::284::::9780::::9829::::java.util.Iterator<org.jsoup.nodes.Element> it = stack.descendingIterator()::::INSERT::::STATEMENT::::if (el == null)    break;	false
org.jsoup.parser.HtmlTreeBuilder::::567::::19828::::19843::::int numSeen = 0::::INSERT::::STATEMENT::::numSeen++	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18118::::18649::::if ((tb.getActiveFormattingElement("a")) != null) {    tb.error(this);    tb.process(new org.jsoup.parser.Token.EndTag("a"));    org.jsoup.nodes.Element remainingA = tb.getFromStack("a");    if (remainingA != null) {        tb.removeFromActiveFormattingElements(remainingA);        tb.removeFromStack(remainingA);    }}::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("body"))	false
org.jsoup.parser.HtmlTreeBuilderState::::622::::30613::::30643::::org.jsoup.helper.StringUtil.in(name, "dd", "dt")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32374::::32864::::if (!(tb.onStack(formatEl))) {    tb.error(this);    tb.removeFromActiveFormattingElements(formatEl);    return true;}else    if (!(tb.inScope(formatEl.nodeName()))) {        tb.error(this);        return false;    }else        if ((tb.currentElement()) != formatEl)            tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("a"))	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32612::::32864::::if (!(tb.inScope(formatEl.nodeName()))) {    tb.error(this);    return false;}else    if ((tb.currentElement()) != formatEl)        tb.error(this);::::INSERT::::STATEMENT::::org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33517::::33551::::commonAncestor = stack.get((si - 1))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("br"))	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33517::::33551::::commonAncestor = stack.get((si - 1))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32378::::32398::::!(tb.onStack(formatEl))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("optgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::412::::18675::::18709::::tb.reconstructFormattingElements()::::INSERT::::STATEMENT::::closeCell(tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33658::::33838::::if (seenFormattingElement && (tb.isSpecial(el))) {    furthestBlock = el;    break;}::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("nobr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33658::::33838::::if (seenFormattingElement && (tb.isSpecial(el))) {    furthestBlock = el;    break;}::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33517::::33551::::commonAncestor = stack.get((si - 1))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tbody"))	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32374::::32864::::if (!(tb.onStack(formatEl))) {    tb.error(this);    tb.removeFromActiveFormattingElements(formatEl);    return true;}else    if (!(tb.inScope(formatEl.nodeName()))) {        tb.error(this);        return false;    }else        if ((tb.currentElement()) != formatEl)            tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("label"))	false
org.jsoup.parser.HtmlTreeBuilder::::661::::23237::::23302::::if (next.nodeName().equals(nodeName))    return next;::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.HtmlTreeBuilderState::::775::::39300::::39324::::tb.popStackToClose(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("br"))	false
org.jsoup.parser.HtmlTreeBuilderState::::676::::33799::::33804::::break::::INSERT::::STATEMENT::::if (lastNode == furthestBlock) {}	false
org.jsoup.parser.HtmlTreeBuilder::::555::::18886::::19725::::return org.jsoup.helper.StringUtil.in(name, "address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "command", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "marquee", "menu", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "style", "summary", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "title", "tr", "ul", "wbr", "xmp")::::INSERT::::STATEMENT::::if (el == null)    break;	false
org.jsoup.parser.Token::::64::::1908::::1989::::attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, pendingAttributeValue.toString())::::INSERT::::STATEMENT::::newAttribute()	false
org.jsoup.parser.Token::::64::::1908::::1989::::attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, pendingAttributeValue.toString())::::INSERT::::STATEMENT::::ensureAttributeValue()	false
org.jsoup.parser.HtmlTreeBuilderState::::632::::31114::::31168::::org.jsoup.helper.StringUtil.in(name, "h1", "h2", "h3", "h4", "h5", "h6")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs))	false
org.jsoup.parser.HtmlTreeBuilderState::::673::::33589::::33617::::seenFormattingElement = true::::INSERT::::STATEMENT::::if (notIgnored)    return tb.process(endTag);	false
org.jsoup.parser.HtmlTreeBuilderState::::661::::32850::::32864::::tb.error(this)::::INSERT::::STATEMENT::::org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::691::::34691::::34694::::node::::form	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32612::::32864::::if (!(tb.inScope(formatEl.nodeName()))) {    tb.error(this);    return false;}else    if ((tb.currentElement()) != formatEl)        tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("head"))	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"p"	false
org.jsoup.parser.HtmlTreeBuilder::::567::::19828::::19843::::int numSeen = 0::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.HtmlTreeBuilderState::::720::::36432::::36516::::if ((lastNode.parent()) != null)    lastNode.remove();::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("optgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32616::::32647::::!(tb.inScope(formatEl.nodeName()))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("optgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::720::::36432::::36516::::if ((lastNode.parent()) != null)    lastNode.remove();::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tbody"))	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32616::::32647::::!(tb.inScope(formatEl.nodeName()))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("colgroup"))	false
org.jsoup.parser.HtmlTreeBuilder::::568::::19853::::19917::::java.util.Iterator<org.jsoup.nodes.Element> iter = formattingElements.descendingIterator()::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.Tag::::82::::2641::::2653::::formatAsBlock::::!(canContainInline)	false
org.jsoup.parser.HtmlTreeBuilderState::::661::::32850::::32864::::tb.error(this)::::INSERT::::STATEMENT::::closeCell(tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18859::::18989::::org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::if (notIgnored)    return tb.process(endTag);	false
org.jsoup.parser.HtmlTreeBuilder::::652::::22940::::22941::::el::::headElement	false
org.jsoup.parser.HtmlTreeBuilderState::::691::::34691::::34694::::node::::html	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34734::::34737::::node::::form	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32374::::32864::::if (!(tb.onStack(formatEl))) {    tb.error(this);    tb.removeFromActiveFormattingElements(formatEl);    return true;}else    if (!(tb.inScope(formatEl.nodeName()))) {        tb.error(this);        return false;    }else        if ((tb.currentElement()) != formatEl)            tb.error(this);::::INSERT::::STATEMENT::::tb.process(startTag)	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34734::::34737::::node::::html	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18859::::18989::::org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("li"))	false
org.jsoup.parser.HtmlTreeBuilder::::358::::11798::::11847::::java.util.Iterator<org.jsoup.nodes.Element> it = stack.descendingIterator()::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.HtmlTreeBuilderState::::632::::31114::::31168::::org.jsoup.helper.StringUtil.in(name, "h1", "h2", "h3", "h4", "h5", "h6")::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.TokeniserState::::811::::27275::::27315::::t.tagPending.appendAttributeValue(value)::::DELETE::::STATEMENT	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33743::::33755::::furthestBlock::::remainingA	false
org.jsoup.parser.HtmlTreeBuilderState::::722::::36577::::36584::::lastNode::::a	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17545::::name.equals("button")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("li"))	false
org.jsoup.parser.HtmlTreeBuilderState::::721::::36499::::36506::::lastNode::::a	false
org.jsoup.parser.HtmlTreeBuilderState::::720::::36436::::36443::::lastNode::::a	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34757::::34760::::node::::html	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18070::::26999::::if (name.equals("a")) {    if ((tb.getActiveFormattingElement("a")) != null) {        tb.error(this);        tb.process(new org.jsoup.parser.Token.EndTag("a"));        org.jsoup.nodes.Element remainingA = tb.getFromStack("a");        if (remainingA != null) {            tb.removeFromActiveFormattingElements(remainingA);            tb.removeFromStack(remainingA);        }    }    tb.reconstructFormattingElements();    org.jsoup.nodes.Element a = tb.insert(startTag);    tb.pushActiveFormattingElements(a);}else    if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {        tb.reconstructFormattingElements();        org.jsoup.nodes.Element el = tb.insert(startTag);        tb.pushActiveFormattingElements(el);    }else        if (name.equals("nobr")) {            tb.reconstructFormattingElements();            if (tb.inScope("nobr")) {                tb.error(this);                tb.process(new org.jsoup.parser.Token.EndTag("nobr"));                tb.reconstructFormattingElements();            }            org.jsoup.nodes.Element el = tb.insert(startTag);            tb.pushActiveFormattingElements(el);        }else            if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {                tb.reconstructFormattingElements();                tb.insert(startTag);                tb.insertMarkerToFormattingElements();                tb.framesetOk(false);            }else                if (name.equals("table")) {                    if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                        tb.process(new org.jsoup.parser.Token.EndTag("p"));                    }                    tb.insert(startTag);                    tb.framesetOk(false);                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                }else                    if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                        tb.reconstructFormattingElements();                        tb.insertEmpty(startTag);                        tb.framesetOk(false);                    }else                        if (name.equals("input")) {                            tb.reconstructFormattingElements();                            org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                            if (!(el.attr("type").equalsIgnoreCase("hidden")))                                tb.framesetOk(false);                        }else                            if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                                tb.insertEmpty(startTag);                            }else                                if (name.equals("hr")) {                                    if (tb.inButtonScope("p")) {                                        tb.process(new org.jsoup.parser.Token.EndTag("p"));                                    }                                    tb.insertEmpty(startTag);                                    tb.framesetOk(false);                                }else                                    if (name.equals("image")) {                                        startTag.name("img");                                        return tb.process(startTag);                                    }else                                        if (name.equals("isindex")) {                                            tb.error(this);                                            if ((tb.getFormElement()) != null)                                                return false;                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                            tb.process(new org.jsoup.parser.Token.StartTag("form"));                                            if (startTag.attributes.hasKey("action")) {                                                org.jsoup.nodes.Element form = tb.getFormElement();                                                form.attr("action", startTag.attributes.get("action"));                                            }                                            tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                            tb.process(new org.jsoup.parser.Token.StartTag("label"));                                            java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                            tb.process(new org.jsoup.parser.Token.Character(prompt));                                            org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                            for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                                if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                    inputAttribs.put(attr);                                            }                                            inputAttribs.put("name", "isindex");                                            tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                            tb.process(new org.jsoup.parser.Token.EndTag("label"));                                            tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                            tb.process(new org.jsoup.parser.Token.EndTag("form"));                                        }else                                            if (name.equals("textarea")) {                                                tb.insert(startTag);                                                tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                                tb.markInsertionMode();                                                tb.framesetOk(false);                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                            }else                                                if (name.equals("xmp")) {                                                    if (tb.inButtonScope("p")) {                                                        tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                    }                                                    tb.reconstructFormattingElements();                                                    tb.framesetOk(false);                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                }else                                                    if (name.equals("iframe")) {                                                        tb.framesetOk(false);                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("noembed")) {                                                            org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                        }else                                                            if (name.equals("select")) {                                                                tb.reconstructFormattingElements();                                                                tb.insert(startTag);                                                                tb.framesetOk(false);                                                                org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                                if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                                else                                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                            }else                                                                if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                    if (tb.currentElement().nodeName().equals("option"))                                                                        tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                    tb.reconstructFormattingElements();                                                                    tb.insert(startTag);                                                                }else                                                                    if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                        if (tb.inScope("ruby")) {                                                                            tb.generateImpliedEndTags();                                                                            if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                                tb.error(this);                                                                                tb.popStackToBefore("ruby");                                                                            }                                                                            tb.insert(startTag);                                                                        }                                                                    }else                                                                        if (name.equals("math")) {                                                                            tb.reconstructFormattingElements();                                                                            tb.insert(startTag);                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                        }else                                                                            if (name.equals("svg")) {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                                tb.tokeniser.acknowledgeSelfClosingFlag();                                                                            }else                                                                                if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                    tb.error(this);                                                                                    return false;                                                                                }else {                                                                                    tb.reconstructFormattingElements();                                                                                    tb.insert(startTag);                                                                                }::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.TokeniserState::::901::::30491::::30494::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.ScriptDataDoubleEscaped	false
org.jsoup.parser.TokeniserState::::810::::27239::::27243::::value::::"PUBLIC"	false
org.jsoup.parser.HtmlTreeBuilderState::::645::::31858::::32001::::org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::676::::33799::::33804::::break::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("option"))	false
org.jsoup.parser.HtmlTreeBuilderState::::412::::18675::::18709::::tb.reconstructFormattingElements()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("head"))	false
org.jsoup.parser.HtmlTreeBuilderState::::693::::34833::::34836::::node::::html	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34757::::34760::::node::::form	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17545::::name.equals("button")::::INSERT::::STATEMENT::::if (notIgnored)    return tb.process(endTag);	false
org.jsoup.parser.HtmlTreeBuilder::::262::::9192::::9241::::java.util.Iterator<org.jsoup.nodes.Element> it = queue.descendingIterator()::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.HtmlTreeBuilderState::::673::::33589::::33617::::seenFormattingElement = true::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tbody"))	false
org.jsoup.parser.HtmlTreeBuilderState::::622::::30613::::30643::::org.jsoup.helper.StringUtil.in(name, "dd", "dt")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs))	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18118::::18649::::if ((tb.getActiveFormattingElement("a")) != null) {    tb.error(this);    tb.process(new org.jsoup.parser.Token.EndTag("a"));    org.jsoup.nodes.Element remainingA = tb.getFromStack("a");    if (remainingA != null) {        tb.removeFromActiveFormattingElements(remainingA);        tb.removeFromStack(remainingA);    }}::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("th"))	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18118::::18649::::if ((tb.getActiveFormattingElement("a")) != null) {    tb.error(this);    tb.process(new org.jsoup.parser.Token.EndTag("a"));    org.jsoup.nodes.Element remainingA = tb.getFromStack("a");    if (remainingA != null) {        tb.removeFromActiveFormattingElements(remainingA);        tb.removeFromStack(remainingA);    }}::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("td"))	false
org.jsoup.parser.HtmlTreeBuilderState::::720::::36432::::36516::::if ((lastNode.parent()) != null)    lastNode.remove();::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("colgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33658::::33838::::if (seenFormattingElement && (tb.isSpecial(el))) {    furthestBlock = el;    break;}::::INSERT::::STATEMENT::::closeCell(tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33517::::33551::::commonAncestor = stack.get((si - 1))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("optgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::661::::32850::::32864::::tb.error(this)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("head"))	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32378::::32398::::!(tb.onStack(formatEl))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::726::::36762::::36774::::furthestBlock::::remainingA	false
org.jsoup.parser.HtmlTreeBuilderState::::726::::36806::::36818::::furthestBlock::::remainingA	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34734::::34762::::node = tb.aboveOnStack(node)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("body"))	false
org.jsoup.parser.HtmlTreeBuilderState::::693::::34833::::34836::::node::::form	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31734::::name.equals("sarcasm")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("nobr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17521::::26999::::if (name.equals("button")) {    if (tb.inButtonScope("button")) {        tb.error(this);        tb.process(new org.jsoup.parser.Token.EndTag("button"));        tb.process(startTag);    }else {        tb.reconstructFormattingElements();        tb.insert(startTag);        tb.framesetOk(false);    }}else    if (name.equals("a")) {        if ((tb.getActiveFormattingElement("a")) != null) {            tb.error(this);            tb.process(new org.jsoup.parser.Token.EndTag("a"));            org.jsoup.nodes.Element remainingA = tb.getFromStack("a");            if (remainingA != null) {                tb.removeFromActiveFormattingElements(remainingA);                tb.removeFromStack(remainingA);            }        }        tb.reconstructFormattingElements();        org.jsoup.nodes.Element a = tb.insert(startTag);        tb.pushActiveFormattingElements(a);    }else        if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {            tb.reconstructFormattingElements();            org.jsoup.nodes.Element el = tb.insert(startTag);            tb.pushActiveFormattingElements(el);        }else            if (name.equals("nobr")) {                tb.reconstructFormattingElements();                if (tb.inScope("nobr")) {                    tb.error(this);                    tb.process(new org.jsoup.parser.Token.EndTag("nobr"));                    tb.reconstructFormattingElements();                }                org.jsoup.nodes.Element el = tb.insert(startTag);                tb.pushActiveFormattingElements(el);            }else                if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {                    tb.reconstructFormattingElements();                    tb.insert(startTag);                    tb.insertMarkerToFormattingElements();                    tb.framesetOk(false);                }else                    if (name.equals("table")) {                        if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                            tb.process(new org.jsoup.parser.Token.EndTag("p"));                        }                        tb.insert(startTag);                        tb.framesetOk(false);                        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                    }else                        if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                            tb.reconstructFormattingElements();                            tb.insertEmpty(startTag);                            tb.framesetOk(false);                        }else                            if (name.equals("input")) {                                tb.reconstructFormattingElements();                                org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                                if (!(el.attr("type").equalsIgnoreCase("hidden")))                                    tb.framesetOk(false);                            }else                                if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                                    tb.insertEmpty(startTag);                                }else                                    if (name.equals("hr")) {                                        if (tb.inButtonScope("p")) {                                            tb.process(new org.jsoup.parser.Token.EndTag("p"));                                        }                                        tb.insertEmpty(startTag);                                        tb.framesetOk(false);                                    }else                                        if (name.equals("image")) {                                            startTag.name("img");                                            return tb.process(startTag);                                        }else                                            if (name.equals("isindex")) {                                                tb.error(this);                                                if ((tb.getFormElement()) != null)                                                    return false;                                                tb.tokeniser.acknowledgeSelfClosingFlag();                                                tb.process(new org.jsoup.parser.Token.StartTag("form"));                                                if (startTag.attributes.hasKey("action")) {                                                    org.jsoup.nodes.Element form = tb.getFormElement();                                                    form.attr("action", startTag.attributes.get("action"));                                                }                                                tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                                tb.process(new org.jsoup.parser.Token.StartTag("label"));                                                java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                                tb.process(new org.jsoup.parser.Token.Character(prompt));                                                org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                                for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                                    if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                        inputAttribs.put(attr);                                                }                                                inputAttribs.put("name", "isindex");                                                tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                                tb.process(new org.jsoup.parser.Token.EndTag("label"));                                                tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                                tb.process(new org.jsoup.parser.Token.EndTag("form"));                                            }else                                                if (name.equals("textarea")) {                                                    tb.insert(startTag);                                                    tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                                    tb.markInsertionMode();                                                    tb.framesetOk(false);                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                                }else                                                    if (name.equals("xmp")) {                                                        if (tb.inButtonScope("p")) {                                                            tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                        }                                                        tb.reconstructFormattingElements();                                                        tb.framesetOk(false);                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("iframe")) {                                                            tb.framesetOk(false);                                                            org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                        }else                                                            if (name.equals("noembed")) {                                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                            }else                                                                if (name.equals("select")) {                                                                    tb.reconstructFormattingElements();                                                                    tb.insert(startTag);                                                                    tb.framesetOk(false);                                                                    org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                                    if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                                    else                                                                        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                                }else                                                                    if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                        if (tb.currentElement().nodeName().equals("option"))                                                                            tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                        tb.reconstructFormattingElements();                                                                        tb.insert(startTag);                                                                    }else                                                                        if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                            if (tb.inScope("ruby")) {                                                                                tb.generateImpliedEndTags();                                                                                if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                                    tb.error(this);                                                                                    tb.popStackToBefore("ruby");                                                                                }                                                                                tb.insert(startTag);                                                                            }                                                                        }else                                                                            if (name.equals("math")) {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                                tb.tokeniser.acknowledgeSelfClosingFlag();                                                                            }else                                                                                if (name.equals("svg")) {                                                                                    tb.reconstructFormattingElements();                                                                                    tb.insert(startTag);                                                                                    tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                }else                                                                                    if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                        tb.error(this);                                                                                        return false;                                                                                    }else {                                                                                        tb.reconstructFormattingElements();                                                                                        tb.insert(startTag);                                                                                    }::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::775::::39300::::39324::::tb.popStackToClose(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("optgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::622::::30613::::30643::::org.jsoup.helper.StringUtil.in(name, "dd", "dt")::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.TokeniserState::::810::::27239::::27243::::value::::"DOCTYPE"	false
org.jsoup.parser.HtmlTreeBuilderState::::687::::34474::::34486::::furthestBlock::::remainingA	false
org.jsoup.parser.HtmlTreeBuilderState::::412::::18675::::18709::::tb.reconstructFormattingElements()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32374::::32864::::if (!(tb.onStack(formatEl))) {    tb.error(this);    tb.removeFromActiveFormattingElements(formatEl);    return true;}else    if (!(tb.inScope(formatEl.nodeName()))) {        tb.error(this);        return false;    }else        if ((tb.currentElement()) != formatEl)            tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs))	false
org.jsoup.parser.HtmlTreeBuilderState::::688::::34536::::34548::::furthestBlock::::remainingA	false
org.jsoup.parser.HtmlTreeBuilderState::::645::::31858::::32001::::org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18070::::26999::::if (name.equals("a")) {    if ((tb.getActiveFormattingElement("a")) != null) {        tb.error(this);        tb.process(new org.jsoup.parser.Token.EndTag("a"));        org.jsoup.nodes.Element remainingA = tb.getFromStack("a");        if (remainingA != null) {            tb.removeFromActiveFormattingElements(remainingA);            tb.removeFromStack(remainingA);        }    }    tb.reconstructFormattingElements();    org.jsoup.nodes.Element a = tb.insert(startTag);    tb.pushActiveFormattingElements(a);}else    if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {        tb.reconstructFormattingElements();        org.jsoup.nodes.Element el = tb.insert(startTag);        tb.pushActiveFormattingElements(el);    }else        if (name.equals("nobr")) {            tb.reconstructFormattingElements();            if (tb.inScope("nobr")) {                tb.error(this);                tb.process(new org.jsoup.parser.Token.EndTag("nobr"));                tb.reconstructFormattingElements();            }            org.jsoup.nodes.Element el = tb.insert(startTag);            tb.pushActiveFormattingElements(el);        }else            if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {                tb.reconstructFormattingElements();                tb.insert(startTag);                tb.insertMarkerToFormattingElements();                tb.framesetOk(false);            }else                if (name.equals("table")) {                    if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                        tb.process(new org.jsoup.parser.Token.EndTag("p"));                    }                    tb.insert(startTag);                    tb.framesetOk(false);                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                }else                    if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                        tb.reconstructFormattingElements();                        tb.insertEmpty(startTag);                        tb.framesetOk(false);                    }else                        if (name.equals("input")) {                            tb.reconstructFormattingElements();                            org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                            if (!(el.attr("type").equalsIgnoreCase("hidden")))                                tb.framesetOk(false);                        }else                            if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                                tb.insertEmpty(startTag);                            }else                                if (name.equals("hr")) {                                    if (tb.inButtonScope("p")) {                                        tb.process(new org.jsoup.parser.Token.EndTag("p"));                                    }                                    tb.insertEmpty(startTag);                                    tb.framesetOk(false);                                }else                                    if (name.equals("image")) {                                        startTag.name("img");                                        return tb.process(startTag);                                    }else                                        if (name.equals("isindex")) {                                            tb.error(this);                                            if ((tb.getFormElement()) != null)                                                return false;                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                            tb.process(new org.jsoup.parser.Token.StartTag("form"));                                            if (startTag.attributes.hasKey("action")) {                                                org.jsoup.nodes.Element form = tb.getFormElement();                                                form.attr("action", startTag.attributes.get("action"));                                            }                                            tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                            tb.process(new org.jsoup.parser.Token.StartTag("label"));                                            java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                            tb.process(new org.jsoup.parser.Token.Character(prompt));                                            org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                            for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                                if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                    inputAttribs.put(attr);                                            }                                            inputAttribs.put("name", "isindex");                                            tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                            tb.process(new org.jsoup.parser.Token.EndTag("label"));                                            tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                            tb.process(new org.jsoup.parser.Token.EndTag("form"));                                        }else                                            if (name.equals("textarea")) {                                                tb.insert(startTag);                                                tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                                tb.markInsertionMode();                                                tb.framesetOk(false);                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                            }else                                                if (name.equals("xmp")) {                                                    if (tb.inButtonScope("p")) {                                                        tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                    }                                                    tb.reconstructFormattingElements();                                                    tb.framesetOk(false);                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                }else                                                    if (name.equals("iframe")) {                                                        tb.framesetOk(false);                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("noembed")) {                                                            org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                        }else                                                            if (name.equals("select")) {                                                                tb.reconstructFormattingElements();                                                                tb.insert(startTag);                                                                tb.framesetOk(false);                                                                org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                                if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                                else                                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                            }else                                                                if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                    if (tb.currentElement().nodeName().equals("option"))                                                                        tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                    tb.reconstructFormattingElements();                                                                    tb.insert(startTag);                                                                }else                                                                    if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                        if (tb.inScope("ruby")) {                                                                            tb.generateImpliedEndTags();                                                                            if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                                tb.error(this);                                                                                tb.popStackToBefore("ruby");                                                                            }                                                                            tb.insert(startTag);                                                                        }                                                                    }else                                                                        if (name.equals("math")) {                                                                            tb.reconstructFormattingElements();                                                                            tb.insert(startTag);                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                        }else                                                                            if (name.equals("svg")) {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                                tb.tokeniser.acknowledgeSelfClosingFlag();                                                                            }else                                                                                if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                    tb.error(this);                                                                                    return false;                                                                                }else {                                                                                    tb.reconstructFormattingElements();                                                                                    tb.insert(startTag);                                                                                }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("p"))	false
org.jsoup.parser.TokeniserState::::901::::30491::::30494::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.AttributeValue_unquoted	false
org.jsoup.parser.HtmlTreeBuilderState::::673::::33589::::33617::::seenFormattingElement = true::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("br"))	false
org.jsoup.parser.HtmlTreeBuilderState::::673::::33589::::33617::::seenFormattingElement = true::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("form"))	false
org.jsoup.parser.Token::::117::::3560::::3582::::ensureAttributeValue()::::INSERT::::STATEMENT::::if ((attributes) == null)    attributes = new org.jsoup.nodes.Attributes();	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31734::::name.equals("sarcasm")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("form"))	false
org.jsoup.parser.TokeniserState::::810::::27239::::27243::::value::::"<!"	false
org.jsoup.parser.HtmlTreeBuilderState::::412::::18675::::18709::::tb.reconstructFormattingElements()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("nobr"))	false
org.jsoup.parser.Token::::65::::2007::::2032::::attributes.put(attribute)::::INSERT::::STATEMENT::::newAttribute()	false
org.jsoup.parser.Token::::65::::2007::::2032::::attributes.put(attribute)::::INSERT::::STATEMENT::::ensureAttributeValue()	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31734::::name.equals("sarcasm")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag(name))	false
org.jsoup.parser.HtmlTreeBuilder::::358::::11798::::11847::::java.util.Iterator<org.jsoup.nodes.Element> it = stack.descendingIterator()::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.HtmlTreeBuilderState::::632::::31114::::31168::::org.jsoup.helper.StringUtil.in(name, "h1", "h2", "h3", "h4", "h5", "h6")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("select"))	false
org.jsoup.parser.HtmlTreeBuilderState::::720::::36432::::36516::::if ((lastNode.parent()) != null)    lastNode.remove();::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("br"))	false
org.jsoup.parser.HtmlTreeBuilderState::::673::::33589::::33617::::seenFormattingElement = true::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("optgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::645::::31858::::32001::::org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("head"))	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32612::::32864::::if (!(tb.inScope(formatEl.nodeName()))) {    tb.error(this);    return false;}else    if ((tb.currentElement()) != formatEl)        tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17545::::name.equals("button")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tbody"))	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"p"	false
org.jsoup.parser.HtmlTreeBuilderState::::720::::36432::::36516::::if ((lastNode.parent()) != null)    lastNode.remove();::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("body"))	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17521::::26999::::if (name.equals("button")) {    if (tb.inButtonScope("button")) {        tb.error(this);        tb.process(new org.jsoup.parser.Token.EndTag("button"));        tb.process(startTag);    }else {        tb.reconstructFormattingElements();        tb.insert(startTag);        tb.framesetOk(false);    }}else    if (name.equals("a")) {        if ((tb.getActiveFormattingElement("a")) != null) {            tb.error(this);            tb.process(new org.jsoup.parser.Token.EndTag("a"));            org.jsoup.nodes.Element remainingA = tb.getFromStack("a");            if (remainingA != null) {                tb.removeFromActiveFormattingElements(remainingA);                tb.removeFromStack(remainingA);            }        }        tb.reconstructFormattingElements();        org.jsoup.nodes.Element a = tb.insert(startTag);        tb.pushActiveFormattingElements(a);    }else        if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {            tb.reconstructFormattingElements();            org.jsoup.nodes.Element el = tb.insert(startTag);            tb.pushActiveFormattingElements(el);        }else            if (name.equals("nobr")) {                tb.reconstructFormattingElements();                if (tb.inScope("nobr")) {                    tb.error(this);                    tb.process(new org.jsoup.parser.Token.EndTag("nobr"));                    tb.reconstructFormattingElements();                }                org.jsoup.nodes.Element el = tb.insert(startTag);                tb.pushActiveFormattingElements(el);            }else                if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {                    tb.reconstructFormattingElements();                    tb.insert(startTag);                    tb.insertMarkerToFormattingElements();                    tb.framesetOk(false);                }else                    if (name.equals("table")) {                        if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                            tb.process(new org.jsoup.parser.Token.EndTag("p"));                        }                        tb.insert(startTag);                        tb.framesetOk(false);                        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                    }else                        if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                            tb.reconstructFormattingElements();                            tb.insertEmpty(startTag);                            tb.framesetOk(false);                        }else                            if (name.equals("input")) {                                tb.reconstructFormattingElements();                                org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                                if (!(el.attr("type").equalsIgnoreCase("hidden")))                                    tb.framesetOk(false);                            }else                                if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                                    tb.insertEmpty(startTag);                                }else                                    if (name.equals("hr")) {                                        if (tb.inButtonScope("p")) {                                            tb.process(new org.jsoup.parser.Token.EndTag("p"));                                        }                                        tb.insertEmpty(startTag);                                        tb.framesetOk(false);                                    }else                                        if (name.equals("image")) {                                            startTag.name("img");                                            return tb.process(startTag);                                        }else                                            if (name.equals("isindex")) {                                                tb.error(this);                                                if ((tb.getFormElement()) != null)                                                    return false;                                                tb.tokeniser.acknowledgeSelfClosingFlag();                                                tb.process(new org.jsoup.parser.Token.StartTag("form"));                                                if (startTag.attributes.hasKey("action")) {                                                    org.jsoup.nodes.Element form = tb.getFormElement();                                                    form.attr("action", startTag.attributes.get("action"));                                                }                                                tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                                tb.process(new org.jsoup.parser.Token.StartTag("label"));                                                java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                                tb.process(new org.jsoup.parser.Token.Character(prompt));                                                org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                                for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                                    if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                        inputAttribs.put(attr);                                                }                                                inputAttribs.put("name", "isindex");                                                tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                                tb.process(new org.jsoup.parser.Token.EndTag("label"));                                                tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                                tb.process(new org.jsoup.parser.Token.EndTag("form"));                                            }else                                                if (name.equals("textarea")) {                                                    tb.insert(startTag);                                                    tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                                    tb.markInsertionMode();                                                    tb.framesetOk(false);                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                                }else                                                    if (name.equals("xmp")) {                                                        if (tb.inButtonScope("p")) {                                                            tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                        }                                                        tb.reconstructFormattingElements();                                                        tb.framesetOk(false);                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("iframe")) {                                                            tb.framesetOk(false);                                                            org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                        }else                                                            if (name.equals("noembed")) {                                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                            }else                                                                if (name.equals("select")) {                                                                    tb.reconstructFormattingElements();                                                                    tb.insert(startTag);                                                                    tb.framesetOk(false);                                                                    org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                                    if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                                    else                                                                        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                                }else                                                                    if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                        if (tb.currentElement().nodeName().equals("option"))                                                                            tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                        tb.reconstructFormattingElements();                                                                        tb.insert(startTag);                                                                    }else                                                                        if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                            if (tb.inScope("ruby")) {                                                                                tb.generateImpliedEndTags();                                                                                if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                                    tb.error(this);                                                                                    tb.popStackToBefore("ruby");                                                                                }                                                                                tb.insert(startTag);                                                                            }                                                                        }else                                                                            if (name.equals("math")) {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                                tb.tokeniser.acknowledgeSelfClosingFlag();                                                                            }else                                                                                if (name.equals("svg")) {                                                                                    tb.reconstructFormattingElements();                                                                                    tb.insert(startTag);                                                                                    tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                }else                                                                                    if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                        tb.error(this);                                                                                        return false;                                                                                    }else {                                                                                        tb.reconstructFormattingElements();                                                                                        tb.insert(startTag);                                                                                    }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("p"))	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18859::::18989::::org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tbody"))	false
org.jsoup.parser.HtmlTreeBuilderState::::661::::32850::::32864::::tb.error(this)::::INSERT::::STATEMENT::::if (node == formatEl)    break INNER;	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33517::::33551::::commonAncestor = stack.get((si - 1))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("colgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::632::::31114::::31168::::org.jsoup.helper.StringUtil.in(name, "h1", "h2", "h3", "h4", "h5", "h6")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("option"))	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17545::::name.equals("button")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("colgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::401::::18118::::18649::::if ((tb.getActiveFormattingElement("a")) != null) {    tb.error(this);    tb.process(new org.jsoup.parser.Token.EndTag("a"));    org.jsoup.nodes.Element remainingA = tb.getFromStack("a");    if (remainingA != null) {        tb.removeFromActiveFormattingElements(remainingA);        tb.removeFromStack(remainingA);    }}::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("noscript"))	false
org.jsoup.parser.HtmlTreeBuilder::::641::::22587::::22649::::java.util.Iterator<org.jsoup.nodes.Element> it = formattingElements.descendingIterator()::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32378::::32398::::!(tb.onStack(formatEl))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("body"))	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32612::::32864::::if (!(tb.inScope(formatEl.nodeName()))) {    tb.error(this);    return false;}else    if ((tb.currentElement()) != formatEl)        tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("li"))	false
org.jsoup.parser.HtmlTreeBuilder::::656::::23018::::23080::::java.util.Iterator<org.jsoup.nodes.Element> it = formattingElements.descendingIterator()::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18859::::18989::::org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("colgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32612::::32864::::if (!(tb.inScope(formatEl.nodeName()))) {    tb.error(this);    return false;}else    if ((tb.currentElement()) != formatEl)        tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("nobr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::720::::36432::::36516::::if ((lastNode.parent()) != null)    lastNode.remove();::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilder::::555::::18886::::19725::::return org.jsoup.helper.StringUtil.in(name, "address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "command", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "marquee", "menu", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "style", "summary", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "title", "tr", "ul", "wbr", "xmp")::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.HtmlTreeBuilderState::::622::::30613::::30643::::org.jsoup.helper.StringUtil.in(name, "dd", "dt")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("option"))	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18855::::26999::::if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {    tb.reconstructFormattingElements();    org.jsoup.nodes.Element el = tb.insert(startTag);    tb.pushActiveFormattingElements(el);}else    if (name.equals("nobr")) {        tb.reconstructFormattingElements();        if (tb.inScope("nobr")) {            tb.error(this);            tb.process(new org.jsoup.parser.Token.EndTag("nobr"));            tb.reconstructFormattingElements();        }        org.jsoup.nodes.Element el = tb.insert(startTag);        tb.pushActiveFormattingElements(el);    }else        if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {            tb.reconstructFormattingElements();            tb.insert(startTag);            tb.insertMarkerToFormattingElements();            tb.framesetOk(false);        }else            if (name.equals("table")) {                if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                }                tb.insert(startTag);                tb.framesetOk(false);                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);            }else                if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                    tb.reconstructFormattingElements();                    tb.insertEmpty(startTag);                    tb.framesetOk(false);                }else                    if (name.equals("input")) {                        tb.reconstructFormattingElements();                        org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                        if (!(el.attr("type").equalsIgnoreCase("hidden")))                            tb.framesetOk(false);                    }else                        if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                            tb.insertEmpty(startTag);                        }else                            if (name.equals("hr")) {                                if (tb.inButtonScope("p")) {                                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                                }                                tb.insertEmpty(startTag);                                tb.framesetOk(false);                            }else                                if (name.equals("image")) {                                    startTag.name("img");                                    return tb.process(startTag);                                }else                                    if (name.equals("isindex")) {                                        tb.error(this);                                        if ((tb.getFormElement()) != null)                                            return false;                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                        tb.process(new org.jsoup.parser.Token.StartTag("form"));                                        if (startTag.attributes.hasKey("action")) {                                            org.jsoup.nodes.Element form = tb.getFormElement();                                            form.attr("action", startTag.attributes.get("action"));                                        }                                        tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                        tb.process(new org.jsoup.parser.Token.StartTag("label"));                                        java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                        tb.process(new org.jsoup.parser.Token.Character(prompt));                                        org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                        for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                            if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                inputAttribs.put(attr);                                        }                                        inputAttribs.put("name", "isindex");                                        tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                        tb.process(new org.jsoup.parser.Token.EndTag("label"));                                        tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                        tb.process(new org.jsoup.parser.Token.EndTag("form"));                                    }else                                        if (name.equals("textarea")) {                                            tb.insert(startTag);                                            tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                            tb.markInsertionMode();                                            tb.framesetOk(false);                                            tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                        }else                                            if (name.equals("xmp")) {                                                if (tb.inButtonScope("p")) {                                                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                }                                                tb.reconstructFormattingElements();                                                tb.framesetOk(false);                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                            }else                                                if (name.equals("iframe")) {                                                    tb.framesetOk(false);                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                }else                                                    if (name.equals("noembed")) {                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("select")) {                                                            tb.reconstructFormattingElements();                                                            tb.insert(startTag);                                                            tb.framesetOk(false);                                                            org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                            if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                            else                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                        }else                                                            if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                if (tb.currentElement().nodeName().equals("option"))                                                                    tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                tb.reconstructFormattingElements();                                                                tb.insert(startTag);                                                            }else                                                                if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                    if (tb.inScope("ruby")) {                                                                        tb.generateImpliedEndTags();                                                                        if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                            tb.error(this);                                                                            tb.popStackToBefore("ruby");                                                                        }                                                                        tb.insert(startTag);                                                                    }                                                                }else                                                                    if (name.equals("math")) {                                                                        tb.reconstructFormattingElements();                                                                        tb.insert(startTag);                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                    }else                                                                        if (name.equals("svg")) {                                                                            tb.reconstructFormattingElements();                                                                            tb.insert(startTag);                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                        }else                                                                            if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                tb.error(this);                                                                                return false;                                                                            }else {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                            }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("option"))	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"p"	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"div"	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"address"	false
org.jsoup.parser.HtmlTreeBuilder::::361::::11934::::11937::::next::::headElement	false
org.jsoup.parser.HtmlTreeBuilderState::::721::::36499::::36516::::lastNode.remove()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::622::::30613::::30643::::org.jsoup.helper.StringUtil.in(name, "dd", "dt")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("select"))	false
org.jsoup.parser.HtmlTreeBuilderState::::730::::37090::::37102::::furthestBlock::::body	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33662::::33702::::seenFormattingElement && (tb.isSpecial(el))::::tb.process(new org.jsoup.parser.Token.StartTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32781::::32864::::if ((tb.currentElement()) != formatEl)    tb.error(this);::::INSERT::::STATEMENT::::if (notIgnored)    return tb.process(endTag);	false
org.jsoup.parser.HtmlTreeBuilderState::::730::::37090::::37102::::furthestBlock::::form	false
org.jsoup.parser.HtmlTreeBuilderState::::673::::33589::::33617::::seenFormattingElement = true::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("colgroup"))	false
org.jsoup.parser.Token::::118::::3596::::3632::::pendingAttributeValue.append(append)::::INSERT::::STATEMENT::::if ((pendingAttributeName) != null) {    newAttribute();}	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18089::::name.equals("a")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag(name))	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"form"	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32781::::32864::::if ((tb.currentElement()) != formatEl)    tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("button"))	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35033::::35040::::formatEl::::a	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32616::::32647::::!(tb.inScope(formatEl.nodeName()))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18855::::26999::::if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {    tb.reconstructFormattingElements();    org.jsoup.nodes.Element el = tb.insert(startTag);    tb.pushActiveFormattingElements(el);}else    if (name.equals("nobr")) {        tb.reconstructFormattingElements();        if (tb.inScope("nobr")) {            tb.error(this);            tb.process(new org.jsoup.parser.Token.EndTag("nobr"));            tb.reconstructFormattingElements();        }        org.jsoup.nodes.Element el = tb.insert(startTag);        tb.pushActiveFormattingElements(el);    }else        if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {            tb.reconstructFormattingElements();            tb.insert(startTag);            tb.insertMarkerToFormattingElements();            tb.framesetOk(false);        }else            if (name.equals("table")) {                if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                }                tb.insert(startTag);                tb.framesetOk(false);                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);            }else                if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                    tb.reconstructFormattingElements();                    tb.insertEmpty(startTag);                    tb.framesetOk(false);                }else                    if (name.equals("input")) {                        tb.reconstructFormattingElements();                        org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                        if (!(el.attr("type").equalsIgnoreCase("hidden")))                            tb.framesetOk(false);                    }else                        if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                            tb.insertEmpty(startTag);                        }else                            if (name.equals("hr")) {                                if (tb.inButtonScope("p")) {                                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                                }                                tb.insertEmpty(startTag);                                tb.framesetOk(false);                            }else                                if (name.equals("image")) {                                    startTag.name("img");                                    return tb.process(startTag);                                }else                                    if (name.equals("isindex")) {                                        tb.error(this);                                        if ((tb.getFormElement()) != null)                                            return false;                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                        tb.process(new org.jsoup.parser.Token.StartTag("form"));                                        if (startTag.attributes.hasKey("action")) {                                            org.jsoup.nodes.Element form = tb.getFormElement();                                            form.attr("action", startTag.attributes.get("action"));                                        }                                        tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                        tb.process(new org.jsoup.parser.Token.StartTag("label"));                                        java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                        tb.process(new org.jsoup.parser.Token.Character(prompt));                                        org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                        for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                            if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                inputAttribs.put(attr);                                        }                                        inputAttribs.put("name", "isindex");                                        tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                        tb.process(new org.jsoup.parser.Token.EndTag("label"));                                        tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                        tb.process(new org.jsoup.parser.Token.EndTag("form"));                                    }else                                        if (name.equals("textarea")) {                                            tb.insert(startTag);                                            tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                            tb.markInsertionMode();                                            tb.framesetOk(false);                                            tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                        }else                                            if (name.equals("xmp")) {                                                if (tb.inButtonScope("p")) {                                                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                }                                                tb.reconstructFormattingElements();                                                tb.framesetOk(false);                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                            }else                                                if (name.equals("iframe")) {                                                    tb.framesetOk(false);                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                }else                                                    if (name.equals("noembed")) {                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("select")) {                                                            tb.reconstructFormattingElements();                                                            tb.insert(startTag);                                                            tb.framesetOk(false);                                                            org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                            if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                            else                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                        }else                                                            if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                if (tb.currentElement().nodeName().equals("option"))                                                                    tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                tb.reconstructFormattingElements();                                                                tb.insert(startTag);                                                            }else                                                                if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                    if (tb.inScope("ruby")) {                                                                        tb.generateImpliedEndTags();                                                                        if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                            tb.error(this);                                                                            tb.popStackToBefore("ruby");                                                                        }                                                                        tb.insert(startTag);                                                                    }                                                                }else                                                                    if (name.equals("math")) {                                                                        tb.reconstructFormattingElements();                                                                        tb.insert(startTag);                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                    }else                                                                        if (name.equals("svg")) {                                                                            tb.reconstructFormattingElements();                                                                            tb.insert(startTag);                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                        }else                                                                            if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                tb.error(this);                                                                                return false;                                                                            }else {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                            }::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.HtmlTreeBuilderState::::632::::31114::::31168::::org.jsoup.helper.StringUtil.in(name, "h1", "h2", "h3", "h4", "h5", "h6")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32374::::32864::::if (!(tb.onStack(formatEl))) {    tb.error(this);    tb.removeFromActiveFormattingElements(formatEl);    return true;}else    if (!(tb.inScope(formatEl.nodeName()))) {        tb.error(this);        return false;    }else        if ((tb.currentElement()) != formatEl)            tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("head"))	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32374::::32864::::if (!(tb.onStack(formatEl))) {    tb.error(this);    tb.removeFromActiveFormattingElements(formatEl);    return true;}else    if (!(tb.inScope(formatEl.nodeName()))) {        tb.error(this);        return false;    }else        if ((tb.currentElement()) != formatEl)            tb.error(this);::::INSERT::::STATEMENT::::org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::784::::39568::::39579::::return true::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("head"))	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32612::::32864::::if (!(tb.inScope(formatEl.nodeName()))) {    tb.error(this);    return false;}else    if ((tb.currentElement()) != formatEl)        tb.error(this);::::INSERT::::STATEMENT::::closeCell(tb)	false
org.jsoup.parser.HtmlTreeBuilder::::657::::23090::::23312::::while (it.hasNext()) {    org.jsoup.nodes.Element next = it.next();    if (next == null)        break;    else        if (next.nodeName().equals(nodeName))            return next;} ::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.Tag::::82::::2641::::2653::::formatAsBlock::::!(canContainInline)) && (!(isEmpty())	false
org.jsoup.parser.HtmlTreeBuilderState::::784::::39568::::39579::::return true::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("a"))	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33700::::33701::::el::::body	false
org.jsoup.parser.HtmlTreeBuilderState::::671::::33463::::33464::::el::::body	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32781::::32864::::if ((tb.currentElement()) != formatEl)    tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag(name))	false
org.jsoup.parser.Token::::61::::1759::::1989::::if ((pendingAttributeValue) == null)    attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, "");else    attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, pendingAttributeValue.toString());::::INSERT::::STATEMENT::::ensureAttributeValue()	false
org.jsoup.parser.Token::::64::::1956::::1976::::pendingAttributeValue::::new org.jsoup.nodes.Attribute(pendingAttributeName, "")	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34734::::34762::::node = tb.aboveOnStack(node)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("noscript"))	false
org.jsoup.parser.HtmlTreeBuilder::::554::::18849::::18876::::java.lang.String name = el.nodeName()::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.TokeniserState::::811::::27275::::27315::::t.tagPending.appendAttributeValue(value)::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataEndTag(t, r, org.jsoup.parser.TokeniserState.ScriptDataEscaped)	false
org.jsoup.parser.TokeniserState::::811::::27275::::27315::::t.tagPending.appendAttributeValue(value)::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataEndTag(t, r, org.jsoup.parser.TokeniserState.ScriptData)	false
org.jsoup.parser.TokeniserState::::811::::27275::::27315::::t.tagPending.appendAttributeValue(value)::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataEndTag(t, r, org.jsoup.parser.TokeniserState.Rawtext)	false
org.jsoup.parser.TokeniserState::::811::::27275::::27315::::t.tagPending.appendAttributeValue(value)::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataDoubleEscapeTag(t, r, org.jsoup.parser.TokeniserState.ScriptDataEscaped, org.jsoup.parser.TokeniserState.ScriptDataDoubleEscaped)	false
org.jsoup.parser.TokeniserState::::811::::27275::::27315::::t.tagPending.appendAttributeValue(value)::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataDoubleEscapeTag(t, r, org.jsoup.parser.TokeniserState.ScriptDataDoubleEscaped, org.jsoup.parser.TokeniserState.ScriptDataEscaped)	false
org.jsoup.parser.TokeniserState::::901::::30491::::30494::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.ScriptData	false
org.jsoup.parser.HtmlTreeBuilderState::::622::::30613::::30643::::org.jsoup.helper.StringUtil.in(name, "dd", "dt")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18089::::name.equals("a")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("body"))	false
org.jsoup.parser.HtmlTreeBuilderState::::645::::31858::::32001::::org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::closeCell(tb)	false
org.jsoup.parser.HtmlTreeBuilder::::263::::9251::::9398::::while (it.hasNext()) {    org.jsoup.nodes.Element next = it.next();    if (next == element) {        return true;    }} ::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"ul"	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"summary"	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"section"	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"ol"	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"nav"	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"menu"	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"hgroup"	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"header"	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"footer"	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"figure"	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"figcaption"	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"fieldset"	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"dl"	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"dir"	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"details"	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"center"	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"blockquote"	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"aside"	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"article"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17545::::name.equals("button")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("br"))	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33687::::33702::::tb.isSpecial(el)::::DELETE::::INFIX	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18859::::18989::::org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("br"))	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18070::::26999::::if (name.equals("a")) {    if ((tb.getActiveFormattingElement("a")) != null) {        tb.error(this);        tb.process(new org.jsoup.parser.Token.EndTag("a"));        org.jsoup.nodes.Element remainingA = tb.getFromStack("a");        if (remainingA != null) {            tb.removeFromActiveFormattingElements(remainingA);            tb.removeFromStack(remainingA);        }    }    tb.reconstructFormattingElements();    org.jsoup.nodes.Element a = tb.insert(startTag);    tb.pushActiveFormattingElements(a);}else    if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {        tb.reconstructFormattingElements();        org.jsoup.nodes.Element el = tb.insert(startTag);        tb.pushActiveFormattingElements(el);    }else        if (name.equals("nobr")) {            tb.reconstructFormattingElements();            if (tb.inScope("nobr")) {                tb.error(this);                tb.process(new org.jsoup.parser.Token.EndTag("nobr"));                tb.reconstructFormattingElements();            }            org.jsoup.nodes.Element el = tb.insert(startTag);            tb.pushActiveFormattingElements(el);        }else            if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {                tb.reconstructFormattingElements();                tb.insert(startTag);                tb.insertMarkerToFormattingElements();                tb.framesetOk(false);            }else                if (name.equals("table")) {                    if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                        tb.process(new org.jsoup.parser.Token.EndTag("p"));                    }                    tb.insert(startTag);                    tb.framesetOk(false);                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                }else                    if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                        tb.reconstructFormattingElements();                        tb.insertEmpty(startTag);                        tb.framesetOk(false);                    }else                        if (name.equals("input")) {                            tb.reconstructFormattingElements();                            org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                            if (!(el.attr("type").equalsIgnoreCase("hidden")))                                tb.framesetOk(false);                        }else                            if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                                tb.insertEmpty(startTag);                            }else                                if (name.equals("hr")) {                                    if (tb.inButtonScope("p")) {                                        tb.process(new org.jsoup.parser.Token.EndTag("p"));                                    }                                    tb.insertEmpty(startTag);                                    tb.framesetOk(false);                                }else                                    if (name.equals("image")) {                                        startTag.name("img");                                        return tb.process(startTag);                                    }else                                        if (name.equals("isindex")) {                                            tb.error(this);                                            if ((tb.getFormElement()) != null)                                                return false;                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                            tb.process(new org.jsoup.parser.Token.StartTag("form"));                                            if (startTag.attributes.hasKey("action")) {                                                org.jsoup.nodes.Element form = tb.getFormElement();                                                form.attr("action", startTag.attributes.get("action"));                                            }                                            tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                            tb.process(new org.jsoup.parser.Token.StartTag("label"));                                            java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                            tb.process(new org.jsoup.parser.Token.Character(prompt));                                            org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                            for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                                if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                    inputAttribs.put(attr);                                            }                                            inputAttribs.put("name", "isindex");                                            tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                            tb.process(new org.jsoup.parser.Token.EndTag("label"));                                            tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                            tb.process(new org.jsoup.parser.Token.EndTag("form"));                                        }else                                            if (name.equals("textarea")) {                                                tb.insert(startTag);                                                tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                                tb.markInsertionMode();                                                tb.framesetOk(false);                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                            }else                                                if (name.equals("xmp")) {                                                    if (tb.inButtonScope("p")) {                                                        tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                    }                                                    tb.reconstructFormattingElements();                                                    tb.framesetOk(false);                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                }else                                                    if (name.equals("iframe")) {                                                        tb.framesetOk(false);                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("noembed")) {                                                            org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                        }else                                                            if (name.equals("select")) {                                                                tb.reconstructFormattingElements();                                                                tb.insert(startTag);                                                                tb.framesetOk(false);                                                                org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                                if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                                else                                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                            }else                                                                if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                    if (tb.currentElement().nodeName().equals("option"))                                                                        tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                    tb.reconstructFormattingElements();                                                                    tb.insert(startTag);                                                                }else                                                                    if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                        if (tb.inScope("ruby")) {                                                                            tb.generateImpliedEndTags();                                                                            if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                                tb.error(this);                                                                                tb.popStackToBefore("ruby");                                                                            }                                                                            tb.insert(startTag);                                                                        }                                                                    }else                                                                        if (name.equals("math")) {                                                                            tb.reconstructFormattingElements();                                                                            tb.insert(startTag);                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                        }else                                                                            if (name.equals("svg")) {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                                tb.tokeniser.acknowledgeSelfClosingFlag();                                                                            }else                                                                                if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                    tb.error(this);                                                                                    return false;                                                                                }else {                                                                                    tb.reconstructFormattingElements();                                                                                    tb.insert(startTag);                                                                                }::::INSERT::::STATEMENT::::if (lastNode == furthestBlock) {}	false
org.jsoup.parser.HtmlTreeBuilderState::::720::::36432::::36516::::if ((lastNode.parent()) != null)    lastNode.remove();::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("noscript"))	false
org.jsoup.parser.TokeniserState::::901::::30491::::30494::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.DoctypeSystemIdentifier_singleQuoted	false
org.jsoup.parser.TokeniserState::::901::::30491::::30494::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.DoctypeSystemIdentifier_doubleQuoted	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31734::::name.equals("sarcasm")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("body"))	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33700::::33701::::el::::second	false
org.jsoup.parser.HtmlTreeBuilderState::::671::::33463::::33464::::el::::second	false
org.jsoup.parser.HtmlTreeBuilder::::569::::19927::::20238::::while (iter.hasNext()) {    org.jsoup.nodes.Element el = iter.next();    if (el == null)        break;    if (isSameFormattingElement(in, el))        numSeen++;    if (numSeen == 3) {        iter.remove();        break;    }} ::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33658::::33838::::if (seenFormattingElement && (tb.isSpecial(el))) {    furthestBlock = el;    break;}::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("button"))	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32785::::32815::::(tb.currentElement()) != formatEl::::tb.process(new org.jsoup.parser.Token.EndTag("th"))	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32785::::32815::::(tb.currentElement()) != formatEl::::tb.process(new org.jsoup.parser.Token.EndTag("td"))	false
org.jsoup.parser.HtmlTreeBuilderState::::730::::37090::::37102::::furthestBlock::::second	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18855::::26999::::if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {    tb.reconstructFormattingElements();    org.jsoup.nodes.Element el = tb.insert(startTag);    tb.pushActiveFormattingElements(el);}else    if (name.equals("nobr")) {        tb.reconstructFormattingElements();        if (tb.inScope("nobr")) {            tb.error(this);            tb.process(new org.jsoup.parser.Token.EndTag("nobr"));            tb.reconstructFormattingElements();        }        org.jsoup.nodes.Element el = tb.insert(startTag);        tb.pushActiveFormattingElements(el);    }else        if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {            tb.reconstructFormattingElements();            tb.insert(startTag);            tb.insertMarkerToFormattingElements();            tb.framesetOk(false);        }else            if (name.equals("table")) {                if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                }                tb.insert(startTag);                tb.framesetOk(false);                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);            }else                if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                    tb.reconstructFormattingElements();                    tb.insertEmpty(startTag);                    tb.framesetOk(false);                }else                    if (name.equals("input")) {                        tb.reconstructFormattingElements();                        org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                        if (!(el.attr("type").equalsIgnoreCase("hidden")))                            tb.framesetOk(false);                    }else                        if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                            tb.insertEmpty(startTag);                        }else                            if (name.equals("hr")) {                                if (tb.inButtonScope("p")) {                                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                                }                                tb.insertEmpty(startTag);                                tb.framesetOk(false);                            }else                                if (name.equals("image")) {                                    startTag.name("img");                                    return tb.process(startTag);                                }else                                    if (name.equals("isindex")) {                                        tb.error(this);                                        if ((tb.getFormElement()) != null)                                            return false;                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                        tb.process(new org.jsoup.parser.Token.StartTag("form"));                                        if (startTag.attributes.hasKey("action")) {                                            org.jsoup.nodes.Element form = tb.getFormElement();                                            form.attr("action", startTag.attributes.get("action"));                                        }                                        tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                        tb.process(new org.jsoup.parser.Token.StartTag("label"));                                        java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                        tb.process(new org.jsoup.parser.Token.Character(prompt));                                        org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                        for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                            if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                inputAttribs.put(attr);                                        }                                        inputAttribs.put("name", "isindex");                                        tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                        tb.process(new org.jsoup.parser.Token.EndTag("label"));                                        tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                        tb.process(new org.jsoup.parser.Token.EndTag("form"));                                    }else                                        if (name.equals("textarea")) {                                            tb.insert(startTag);                                            tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                            tb.markInsertionMode();                                            tb.framesetOk(false);                                            tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                        }else                                            if (name.equals("xmp")) {                                                if (tb.inButtonScope("p")) {                                                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                }                                                tb.reconstructFormattingElements();                                                tb.framesetOk(false);                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                            }else                                                if (name.equals("iframe")) {                                                    tb.framesetOk(false);                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                }else                                                    if (name.equals("noembed")) {                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("select")) {                                                            tb.reconstructFormattingElements();                                                            tb.insert(startTag);                                                            tb.framesetOk(false);                                                            org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                            if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                            else                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                        }else                                                            if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                if (tb.currentElement().nodeName().equals("option"))                                                                    tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                tb.reconstructFormattingElements();                                                                tb.insert(startTag);                                                            }else                                                                if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                    if (tb.inScope("ruby")) {                                                                        tb.generateImpliedEndTags();                                                                        if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                            tb.error(this);                                                                            tb.popStackToBefore("ruby");                                                                        }                                                                        tb.insert(startTag);                                                                    }                                                                }else                                                                    if (name.equals("math")) {                                                                        tb.reconstructFormattingElements();                                                                        tb.insert(startTag);                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                    }else                                                                        if (name.equals("svg")) {                                                                            tb.reconstructFormattingElements();                                                                            tb.insert(startTag);                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                        }else                                                                            if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                tb.error(this);                                                                                return false;                                                                            }else {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                            }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("hr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32378::::32398::::!(tb.onStack(formatEl))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("noscript"))	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32781::::32864::::if ((tb.currentElement()) != formatEl)    tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("form"))	false
org.jsoup.parser.Token::::64::::1934::::1953::::pendingAttributeName::::data	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33658::::33838::::if (seenFormattingElement && (tb.isSpecial(el))) {    furthestBlock = el;    break;}::::INSERT::::STATEMENT::::if (notIgnored)    return tb.process(endTag);	false
org.jsoup.parser.HtmlTreeBuilderState::::720::::36432::::36516::::if ((lastNode.parent()) != null)    lastNode.remove();::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("th"))	false
org.jsoup.parser.HtmlTreeBuilderState::::720::::36432::::36516::::if ((lastNode.parent()) != null)    lastNode.remove();::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("td"))	false
org.jsoup.parser.Token::::118::::3596::::3616::::pendingAttributeValue::::new java.lang.StringBuilder()	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17521::::26999::::if (name.equals("button")) {    if (tb.inButtonScope("button")) {        tb.error(this);        tb.process(new org.jsoup.parser.Token.EndTag("button"));        tb.process(startTag);    }else {        tb.reconstructFormattingElements();        tb.insert(startTag);        tb.framesetOk(false);    }}else    if (name.equals("a")) {        if ((tb.getActiveFormattingElement("a")) != null) {            tb.error(this);            tb.process(new org.jsoup.parser.Token.EndTag("a"));            org.jsoup.nodes.Element remainingA = tb.getFromStack("a");            if (remainingA != null) {                tb.removeFromActiveFormattingElements(remainingA);                tb.removeFromStack(remainingA);            }        }        tb.reconstructFormattingElements();        org.jsoup.nodes.Element a = tb.insert(startTag);        tb.pushActiveFormattingElements(a);    }else        if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {            tb.reconstructFormattingElements();            org.jsoup.nodes.Element el = tb.insert(startTag);            tb.pushActiveFormattingElements(el);        }else            if (name.equals("nobr")) {                tb.reconstructFormattingElements();                if (tb.inScope("nobr")) {                    tb.error(this);                    tb.process(new org.jsoup.parser.Token.EndTag("nobr"));                    tb.reconstructFormattingElements();                }                org.jsoup.nodes.Element el = tb.insert(startTag);                tb.pushActiveFormattingElements(el);            }else                if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {                    tb.reconstructFormattingElements();                    tb.insert(startTag);                    tb.insertMarkerToFormattingElements();                    tb.framesetOk(false);                }else                    if (name.equals("table")) {                        if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                            tb.process(new org.jsoup.parser.Token.EndTag("p"));                        }                        tb.insert(startTag);                        tb.framesetOk(false);                        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                    }else                        if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                            tb.reconstructFormattingElements();                            tb.insertEmpty(startTag);                            tb.framesetOk(false);                        }else                            if (name.equals("input")) {                                tb.reconstructFormattingElements();                                org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                                if (!(el.attr("type").equalsIgnoreCase("hidden")))                                    tb.framesetOk(false);                            }else                                if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                                    tb.insertEmpty(startTag);                                }else                                    if (name.equals("hr")) {                                        if (tb.inButtonScope("p")) {                                            tb.process(new org.jsoup.parser.Token.EndTag("p"));                                        }                                        tb.insertEmpty(startTag);                                        tb.framesetOk(false);                                    }else                                        if (name.equals("image")) {                                            startTag.name("img");                                            return tb.process(startTag);                                        }else                                            if (name.equals("isindex")) {                                                tb.error(this);                                                if ((tb.getFormElement()) != null)                                                    return false;                                                tb.tokeniser.acknowledgeSelfClosingFlag();                                                tb.process(new org.jsoup.parser.Token.StartTag("form"));                                                if (startTag.attributes.hasKey("action")) {                                                    org.jsoup.nodes.Element form = tb.getFormElement();                                                    form.attr("action", startTag.attributes.get("action"));                                                }                                                tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                                tb.process(new org.jsoup.parser.Token.StartTag("label"));                                                java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                                tb.process(new org.jsoup.parser.Token.Character(prompt));                                                org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                                for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                                    if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                        inputAttribs.put(attr);                                                }                                                inputAttribs.put("name", "isindex");                                                tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                                tb.process(new org.jsoup.parser.Token.EndTag("label"));                                                tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                                tb.process(new org.jsoup.parser.Token.EndTag("form"));                                            }else                                                if (name.equals("textarea")) {                                                    tb.insert(startTag);                                                    tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                                    tb.markInsertionMode();                                                    tb.framesetOk(false);                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                                }else                                                    if (name.equals("xmp")) {                                                        if (tb.inButtonScope("p")) {                                                            tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                        }                                                        tb.reconstructFormattingElements();                                                        tb.framesetOk(false);                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("iframe")) {                                                            tb.framesetOk(false);                                                            org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                        }else                                                            if (name.equals("noembed")) {                                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                            }else                                                                if (name.equals("select")) {                                                                    tb.reconstructFormattingElements();                                                                    tb.insert(startTag);                                                                    tb.framesetOk(false);                                                                    org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                                    if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                                    else                                                                        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                                }else                                                                    if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                        if (tb.currentElement().nodeName().equals("option"))                                                                            tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                        tb.reconstructFormattingElements();                                                                        tb.insert(startTag);                                                                    }else                                                                        if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                            if (tb.inScope("ruby")) {                                                                                tb.generateImpliedEndTags();                                                                                if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                                    tb.error(this);                                                                                    tb.popStackToBefore("ruby");                                                                                }                                                                                tb.insert(startTag);                                                                            }                                                                        }else                                                                            if (name.equals("math")) {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                                tb.tokeniser.acknowledgeSelfClosingFlag();                                                                            }else                                                                                if (name.equals("svg")) {                                                                                    tb.reconstructFormattingElements();                                                                                    tb.insert(startTag);                                                                                    tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                }else                                                                                    if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                        tb.error(this);                                                                                        return false;                                                                                    }else {                                                                                        tb.reconstructFormattingElements();                                                                                        tb.insert(startTag);                                                                                    }::::INSERT::::STATEMENT::::if (lastNode == furthestBlock) {}	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33658::::33838::::if (seenFormattingElement && (tb.isSpecial(el))) {    furthestBlock = el;    break;}::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag(name))	false
org.jsoup.parser.HtmlTreeBuilderState::::661::::32850::::32864::::tb.error(this)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("form"))	false
org.jsoup.parser.HtmlTreeBuilder::::288::::9946::::9957::::it.remove()::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"pre"	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"listing"	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30134::::name.equals("li")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.Character(prompt))	false
org.jsoup.parser.HtmlTreeBuilderState::::412::::18675::::18709::::tb.reconstructFormattingElements()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag(name))	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18855::::26999::::if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {    tb.reconstructFormattingElements();    org.jsoup.nodes.Element el = tb.insert(startTag);    tb.pushActiveFormattingElements(el);}else    if (name.equals("nobr")) {        tb.reconstructFormattingElements();        if (tb.inScope("nobr")) {            tb.error(this);            tb.process(new org.jsoup.parser.Token.EndTag("nobr"));            tb.reconstructFormattingElements();        }        org.jsoup.nodes.Element el = tb.insert(startTag);        tb.pushActiveFormattingElements(el);    }else        if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {            tb.reconstructFormattingElements();            tb.insert(startTag);            tb.insertMarkerToFormattingElements();            tb.framesetOk(false);        }else            if (name.equals("table")) {                if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                }                tb.insert(startTag);                tb.framesetOk(false);                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);            }else                if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                    tb.reconstructFormattingElements();                    tb.insertEmpty(startTag);                    tb.framesetOk(false);                }else                    if (name.equals("input")) {                        tb.reconstructFormattingElements();                        org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                        if (!(el.attr("type").equalsIgnoreCase("hidden")))                            tb.framesetOk(false);                    }else                        if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                            tb.insertEmpty(startTag);                        }else                            if (name.equals("hr")) {                                if (tb.inButtonScope("p")) {                                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                                }                                tb.insertEmpty(startTag);                                tb.framesetOk(false);                            }else                                if (name.equals("image")) {                                    startTag.name("img");                                    return tb.process(startTag);                                }else                                    if (name.equals("isindex")) {                                        tb.error(this);                                        if ((tb.getFormElement()) != null)                                            return false;                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                        tb.process(new org.jsoup.parser.Token.StartTag("form"));                                        if (startTag.attributes.hasKey("action")) {                                            org.jsoup.nodes.Element form = tb.getFormElement();                                            form.attr("action", startTag.attributes.get("action"));                                        }                                        tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                        tb.process(new org.jsoup.parser.Token.StartTag("label"));                                        java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                        tb.process(new org.jsoup.parser.Token.Character(prompt));                                        org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                        for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                            if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                inputAttribs.put(attr);                                        }                                        inputAttribs.put("name", "isindex");                                        tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                        tb.process(new org.jsoup.parser.Token.EndTag("label"));                                        tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                        tb.process(new org.jsoup.parser.Token.EndTag("form"));                                    }else                                        if (name.equals("textarea")) {                                            tb.insert(startTag);                                            tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                            tb.markInsertionMode();                                            tb.framesetOk(false);                                            tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                        }else                                            if (name.equals("xmp")) {                                                if (tb.inButtonScope("p")) {                                                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                }                                                tb.reconstructFormattingElements();                                                tb.framesetOk(false);                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                            }else                                                if (name.equals("iframe")) {                                                    tb.framesetOk(false);                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                }else                                                    if (name.equals("noembed")) {                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("select")) {                                                            tb.reconstructFormattingElements();                                                            tb.insert(startTag);                                                            tb.framesetOk(false);                                                            org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                            if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                            else                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                        }else                                                            if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                if (tb.currentElement().nodeName().equals("option"))                                                                    tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                tb.reconstructFormattingElements();                                                                tb.insert(startTag);                                                            }else                                                                if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                    if (tb.inScope("ruby")) {                                                                        tb.generateImpliedEndTags();                                                                        if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                            tb.error(this);                                                                            tb.popStackToBefore("ruby");                                                                        }                                                                        tb.insert(startTag);                                                                    }                                                                }else                                                                    if (name.equals("math")) {                                                                        tb.reconstructFormattingElements();                                                                        tb.insert(startTag);                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                    }else                                                                        if (name.equals("svg")) {                                                                            tb.reconstructFormattingElements();                                                                            tb.insert(startTag);                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                        }else                                                                            if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                tb.error(this);                                                                                return false;                                                                            }else {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                            }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("select"))	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32374::::32864::::if (!(tb.onStack(formatEl))) {    tb.error(this);    tb.removeFromActiveFormattingElements(formatEl);    return true;}else    if (!(tb.inScope(formatEl.nodeName()))) {        tb.error(this);        return false;    }else        if ((tb.currentElement()) != formatEl)            tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18089::::name.equals("a")::::INSERT::::STATEMENT::::if (notIgnored)    return tb.process(endTag);	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32785::::32815::::(tb.currentElement()) != formatEl::::tb.process(new org.jsoup.parser.Token.StartTag("body"))	false
org.jsoup.parser.HtmlTreeBuilderState::::649::::32115::::37512::::OUTER : for (int i = 0; i < 8; i++) {    org.jsoup.nodes.Element formatEl = tb.getActiveFormattingElement(name);    if (formatEl == null)        return anyOtherEndTag(t, tb);    else        if (!(tb.onStack(formatEl))) {            tb.error(this);            tb.removeFromActiveFormattingElements(formatEl);            return true;        }else            if (!(tb.inScope(formatEl.nodeName()))) {                tb.error(this);                return false;            }else                if ((tb.currentElement()) != formatEl)                    tb.error(this);    org.jsoup.nodes.Element furthestBlock = null;    org.jsoup.nodes.Element commonAncestor = null;    boolean seenFormattingElement = false;    java.util.LinkedList<org.jsoup.nodes.Element> stack = tb.getStack();    for (int si = 0; (si < (stack.size())) && (si < 64); si++) {        org.jsoup.nodes.Element el = stack.get(si);        if (el == formatEl) {            commonAncestor = stack.get((si - 1));            seenFormattingElement = true;        }else            if (seenFormattingElement && (tb.isSpecial(el))) {                furthestBlock = el;                break;            }    }    if (furthestBlock == null) {        tb.popStackToClose(formatEl.nodeName());        tb.removeFromActiveFormattingElements(formatEl);        return true;    }    org.jsoup.nodes.Element node = furthestBlock;    org.jsoup.nodes.Element lastNode = furthestBlock;    INNER : for (int j = 0; j < 3; j++) {        if (tb.onStack(node))            node = tb.aboveOnStack(node);        if (!(tb.isInActiveFormattingElements(node))) {            tb.removeFromStack(node);            continue INNER;        }else            if (node == formatEl)                break INNER;        org.jsoup.nodes.Element replacement = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(node.nodeName()), tb.getBaseUri());        tb.replaceActiveFormattingElement(node, replacement);        tb.replaceOnStack(node, replacement);        node = replacement;        if (lastNode == furthestBlock) {        }        if ((lastNode.parent()) != null)            lastNode.remove();        node.appendChild(lastNode);        lastNode = node;    }    if (org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")) {        if ((lastNode.parent()) != null)            lastNode.remove();        tb.insertInFosterParent(lastNode);    }else {        if ((lastNode.parent()) != null)            lastNode.remove();        commonAncestor.appendChild(lastNode);    }    org.jsoup.nodes.Element adopter = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(name), tb.getBaseUri());    org.jsoup.nodes.Node[] childNodes = furthestBlock.childNodes().toArray(new org.jsoup.nodes.Node[furthestBlock.childNodeSize()]);    for (org.jsoup.nodes.Node childNode : childNodes) {        adopter.appendChild(childNode);    }    furthestBlock.appendChild(adopter);    tb.removeFromActiveFormattingElements(formatEl);    tb.removeFromStack(formatEl);    tb.insertOnStackAfter(furthestBlock, adopter);}::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33743::::33761::::furthestBlock = el::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("th"))	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33743::::33761::::furthestBlock = el::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("td"))	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18089::::name.equals("a")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("button"))	false
org.jsoup.parser.HtmlTreeBuilderState::::645::::31858::::32001::::org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("nobr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"li"	false
org.jsoup.parser.HtmlTreeBuilderState::::734::::37463::::37475::::furthestBlock::::body	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32374::::32864::::if (!(tb.onStack(formatEl))) {    tb.error(this);    tb.removeFromActiveFormattingElements(formatEl);    return true;}else    if (!(tb.inScope(formatEl.nodeName()))) {        tb.error(this);        return false;    }else        if ((tb.currentElement()) != formatEl)            tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("li"))	false
org.jsoup.parser.HtmlTreeBuilder::::646::::22795::::22800::::break::::INSERT::::STATEMENT::::if (el == null)    break;	false
org.jsoup.parser.HtmlTreeBuilderState::::632::::31114::::31168::::org.jsoup.helper.StringUtil.in(name, "h1", "h2", "h3", "h4", "h5", "h6")::::INSERT::::STATEMENT::::org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18855::::26999::::if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {    tb.reconstructFormattingElements();    org.jsoup.nodes.Element el = tb.insert(startTag);    tb.pushActiveFormattingElements(el);}else    if (name.equals("nobr")) {        tb.reconstructFormattingElements();        if (tb.inScope("nobr")) {            tb.error(this);            tb.process(new org.jsoup.parser.Token.EndTag("nobr"));            tb.reconstructFormattingElements();        }        org.jsoup.nodes.Element el = tb.insert(startTag);        tb.pushActiveFormattingElements(el);    }else        if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {            tb.reconstructFormattingElements();            tb.insert(startTag);            tb.insertMarkerToFormattingElements();            tb.framesetOk(false);        }else            if (name.equals("table")) {                if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                }                tb.insert(startTag);                tb.framesetOk(false);                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);            }else                if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                    tb.reconstructFormattingElements();                    tb.insertEmpty(startTag);                    tb.framesetOk(false);                }else                    if (name.equals("input")) {                        tb.reconstructFormattingElements();                        org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                        if (!(el.attr("type").equalsIgnoreCase("hidden")))                            tb.framesetOk(false);                    }else                        if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                            tb.insertEmpty(startTag);                        }else                            if (name.equals("hr")) {                                if (tb.inButtonScope("p")) {                                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                                }                                tb.insertEmpty(startTag);                                tb.framesetOk(false);                            }else                                if (name.equals("image")) {                                    startTag.name("img");                                    return tb.process(startTag);                                }else                                    if (name.equals("isindex")) {                                        tb.error(this);                                        if ((tb.getFormElement()) != null)                                            return false;                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                        tb.process(new org.jsoup.parser.Token.StartTag("form"));                                        if (startTag.attributes.hasKey("action")) {                                            org.jsoup.nodes.Element form = tb.getFormElement();                                            form.attr("action", startTag.attributes.get("action"));                                        }                                        tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                        tb.process(new org.jsoup.parser.Token.StartTag("label"));                                        java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                        tb.process(new org.jsoup.parser.Token.Character(prompt));                                        org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                        for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                            if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                inputAttribs.put(attr);                                        }                                        inputAttribs.put("name", "isindex");                                        tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                        tb.process(new org.jsoup.parser.Token.EndTag("label"));                                        tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                        tb.process(new org.jsoup.parser.Token.EndTag("form"));                                    }else                                        if (name.equals("textarea")) {                                            tb.insert(startTag);                                            tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                            tb.markInsertionMode();                                            tb.framesetOk(false);                                            tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                        }else                                            if (name.equals("xmp")) {                                                if (tb.inButtonScope("p")) {                                                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                }                                                tb.reconstructFormattingElements();                                                tb.framesetOk(false);                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                            }else                                                if (name.equals("iframe")) {                                                    tb.framesetOk(false);                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                }else                                                    if (name.equals("noembed")) {                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("select")) {                                                            tb.reconstructFormattingElements();                                                            tb.insert(startTag);                                                            tb.framesetOk(false);                                                            org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                            if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                            else                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                        }else                                                            if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                if (tb.currentElement().nodeName().equals("option"))                                                                    tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                tb.reconstructFormattingElements();                                                                tb.insert(startTag);                                                            }else                                                                if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                    if (tb.inScope("ruby")) {                                                                        tb.generateImpliedEndTags();                                                                        if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                            tb.error(this);                                                                            tb.popStackToBefore("ruby");                                                                        }                                                                        tb.insert(startTag);                                                                    }                                                                }else                                                                    if (name.equals("math")) {                                                                        tb.reconstructFormattingElements();                                                                        tb.insert(startTag);                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                    }else                                                                        if (name.equals("svg")) {                                                                            tb.reconstructFormattingElements();                                                                            tb.insert(startTag);                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                        }else                                                                            if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                tb.error(this);                                                                                return false;                                                                            }else {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                            }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.Character(prompt))	false
org.jsoup.parser.Token::::64::::1956::::1976::::pendingAttributeValue::::new java.lang.StringBuilder()	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32616::::32647::::!(tb.inScope(formatEl.nodeName()))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("body"))	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"h6"	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"h5"	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"h4"	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"h3"	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"h2"	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"h1"	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32781::::32864::::if ((tb.currentElement()) != formatEl)    tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("br"))	false
org.jsoup.parser.HtmlTreeBuilderState::::645::::31858::::32001::::org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag(name))	false
org.jsoup.parser.HtmlTreeBuilderState::::671::::33463::::33464::::el::::html	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33700::::33701::::el::::html	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32374::::32864::::if (!(tb.onStack(formatEl))) {    tb.error(this);    tb.removeFromActiveFormattingElements(formatEl);    return true;}else    if (!(tb.inScope(formatEl.nodeName()))) {        tb.error(this);        return false;    }else        if ((tb.currentElement()) != formatEl)            tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("nobr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::622::::30613::::30643::::org.jsoup.helper.StringUtil.in(name, "dd", "dt")::::INSERT::::STATEMENT::::org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::673::::33589::::33617::::seenFormattingElement = true::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31734::::name.equals("sarcasm")::::INSERT::::STATEMENT::::if (notIgnored)    return tb.process(endTag);	false
org.jsoup.parser.HtmlTreeBuilder::::569::::19927::::20238::::while (iter.hasNext()) {    org.jsoup.nodes.Element el = iter.next();    if (el == null)        break;    if (isSameFormattingElement(in, el))        numSeen++;    if (numSeen == 3) {        iter.remove();        break;    }} ::::INSERT::::STATEMENT::::numSeen++	false
org.jsoup.parser.HtmlTreeBuilderState::::412::::18675::::18709::::tb.reconstructFormattingElements()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("body"))	false
org.jsoup.parser.HtmlTreeBuilder::::288::::9946::::9957::::it.remove()::::DELETE::::STATEMENT	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31734::::name.equals("sarcasm")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"button"	false
org.jsoup.parser.HtmlTreeBuilderState::::730::::37090::::37102::::furthestBlock::::html	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"div"	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"address"	false
org.jsoup.parser.HtmlTreeBuilderState::::784::::39568::::39579::::return true::::INSERT::::STATEMENT::::closeCell(tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32781::::32864::::if ((tb.currentElement()) != formatEl)    tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tbody"))	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35021::::35090::::if (node == formatEl)    break INNER;::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("th"))	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35021::::35090::::if (node == formatEl)    break INNER;::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("td"))	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18070::::26999::::if (name.equals("a")) {    if ((tb.getActiveFormattingElement("a")) != null) {        tb.error(this);        tb.process(new org.jsoup.parser.Token.EndTag("a"));        org.jsoup.nodes.Element remainingA = tb.getFromStack("a");        if (remainingA != null) {            tb.removeFromActiveFormattingElements(remainingA);            tb.removeFromStack(remainingA);        }    }    tb.reconstructFormattingElements();    org.jsoup.nodes.Element a = tb.insert(startTag);    tb.pushActiveFormattingElements(a);}else    if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {        tb.reconstructFormattingElements();        org.jsoup.nodes.Element el = tb.insert(startTag);        tb.pushActiveFormattingElements(el);    }else        if (name.equals("nobr")) {            tb.reconstructFormattingElements();            if (tb.inScope("nobr")) {                tb.error(this);                tb.process(new org.jsoup.parser.Token.EndTag("nobr"));                tb.reconstructFormattingElements();            }            org.jsoup.nodes.Element el = tb.insert(startTag);            tb.pushActiveFormattingElements(el);        }else            if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {                tb.reconstructFormattingElements();                tb.insert(startTag);                tb.insertMarkerToFormattingElements();                tb.framesetOk(false);            }else                if (name.equals("table")) {                    if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                        tb.process(new org.jsoup.parser.Token.EndTag("p"));                    }                    tb.insert(startTag);                    tb.framesetOk(false);                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                }else                    if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                        tb.reconstructFormattingElements();                        tb.insertEmpty(startTag);                        tb.framesetOk(false);                    }else                        if (name.equals("input")) {                            tb.reconstructFormattingElements();                            org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                            if (!(el.attr("type").equalsIgnoreCase("hidden")))                                tb.framesetOk(false);                        }else                            if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                                tb.insertEmpty(startTag);                            }else                                if (name.equals("hr")) {                                    if (tb.inButtonScope("p")) {                                        tb.process(new org.jsoup.parser.Token.EndTag("p"));                                    }                                    tb.insertEmpty(startTag);                                    tb.framesetOk(false);                                }else                                    if (name.equals("image")) {                                        startTag.name("img");                                        return tb.process(startTag);                                    }else                                        if (name.equals("isindex")) {                                            tb.error(this);                                            if ((tb.getFormElement()) != null)                                                return false;                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                            tb.process(new org.jsoup.parser.Token.StartTag("form"));                                            if (startTag.attributes.hasKey("action")) {                                                org.jsoup.nodes.Element form = tb.getFormElement();                                                form.attr("action", startTag.attributes.get("action"));                                            }                                            tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                            tb.process(new org.jsoup.parser.Token.StartTag("label"));                                            java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                            tb.process(new org.jsoup.parser.Token.Character(prompt));                                            org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                            for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                                if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                    inputAttribs.put(attr);                                            }                                            inputAttribs.put("name", "isindex");                                            tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                            tb.process(new org.jsoup.parser.Token.EndTag("label"));                                            tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                            tb.process(new org.jsoup.parser.Token.EndTag("form"));                                        }else                                            if (name.equals("textarea")) {                                                tb.insert(startTag);                                                tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                                tb.markInsertionMode();                                                tb.framesetOk(false);                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                            }else                                                if (name.equals("xmp")) {                                                    if (tb.inButtonScope("p")) {                                                        tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                    }                                                    tb.reconstructFormattingElements();                                                    tb.framesetOk(false);                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                }else                                                    if (name.equals("iframe")) {                                                        tb.framesetOk(false);                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("noembed")) {                                                            org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                        }else                                                            if (name.equals("select")) {                                                                tb.reconstructFormattingElements();                                                                tb.insert(startTag);                                                                tb.framesetOk(false);                                                                org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                                if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                                else                                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                            }else                                                                if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                    if (tb.currentElement().nodeName().equals("option"))                                                                        tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                    tb.reconstructFormattingElements();                                                                    tb.insert(startTag);                                                                }else                                                                    if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                        if (tb.inScope("ruby")) {                                                                            tb.generateImpliedEndTags();                                                                            if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                                tb.error(this);                                                                                tb.popStackToBefore("ruby");                                                                            }                                                                            tb.insert(startTag);                                                                        }                                                                    }else                                                                        if (name.equals("math")) {                                                                            tb.reconstructFormattingElements();                                                                            tb.insert(startTag);                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                        }else                                                                            if (name.equals("svg")) {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                                tb.tokeniser.acknowledgeSelfClosingFlag();                                                                            }else                                                                                if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                    tb.error(this);                                                                                    return false;                                                                                }else {                                                                                    tb.reconstructFormattingElements();                                                                                    tb.insert(startTag);                                                                                }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32612::::32864::::if (!(tb.inScope(formatEl.nodeName()))) {    tb.error(this);    return false;}else    if ((tb.currentElement()) != formatEl)        tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag(name))	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32374::::32864::::if (!(tb.onStack(formatEl))) {    tb.error(this);    tb.removeFromActiveFormattingElements(formatEl);    return true;}else    if (!(tb.inScope(formatEl.nodeName()))) {        tb.error(this);        return false;    }else        if ((tb.currentElement()) != formatEl)            tb.error(this);::::INSERT::::STATEMENT::::closeCell(tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17545::::name.equals("button")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("optgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18859::::18989::::org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("optgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31734::::name.equals("sarcasm")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("button"))	false
org.jsoup.parser.HtmlTreeBuilderState::::720::::36436::::36452::::lastNode.parent()::::DELETE::::INFIX	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"form"	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32378::::32398::::!(tb.onStack(formatEl))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("th"))	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32378::::32398::::!(tb.onStack(formatEl))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("td"))	false
org.jsoup.parser.HtmlTreeBuilderState::::676::::33799::::33804::::break::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::632::::31114::::31168::::org.jsoup.helper.StringUtil.in(name, "h1", "h2", "h3", "h4", "h5", "h6")::::INSERT::::STATEMENT::::if (node == formatEl)    break INNER;	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18089::::name.equals("a")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18089::::name.equals("a")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("li"))	false
org.jsoup.parser.Token::::69::::2152::::2172::::pendingAttributeValue::::new java.lang.StringBuilder()	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33658::::33838::::if (seenFormattingElement && (tb.isSpecial(el))) {    furthestBlock = el;    break;}::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("br"))	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33658::::33838::::if (seenFormattingElement && (tb.isSpecial(el))) {    furthestBlock = el;    break;}::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("form"))	false
org.jsoup.parser.HtmlTreeBuilder::::361::::11942::::11943::::el::::headElement	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33517::::33551::::commonAncestor = stack.get((si - 1))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31734::::name.equals("sarcasm")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("noscript"))	false
org.jsoup.parser.HtmlTreeBuilderState::::734::::37463::::37475::::furthestBlock::::second	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32612::::32864::::if (!(tb.inScope(formatEl.nodeName()))) {    tb.error(this);    return false;}else    if ((tb.currentElement()) != formatEl)        tb.error(this);::::INSERT::::STATEMENT::::if (notIgnored)    return tb.process(endTag);	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17521::::26999::::if (name.equals("button")) {    if (tb.inButtonScope("button")) {        tb.error(this);        tb.process(new org.jsoup.parser.Token.EndTag("button"));        tb.process(startTag);    }else {        tb.reconstructFormattingElements();        tb.insert(startTag);        tb.framesetOk(false);    }}else    if (name.equals("a")) {        if ((tb.getActiveFormattingElement("a")) != null) {            tb.error(this);            tb.process(new org.jsoup.parser.Token.EndTag("a"));            org.jsoup.nodes.Element remainingA = tb.getFromStack("a");            if (remainingA != null) {                tb.removeFromActiveFormattingElements(remainingA);                tb.removeFromStack(remainingA);            }        }        tb.reconstructFormattingElements();        org.jsoup.nodes.Element a = tb.insert(startTag);        tb.pushActiveFormattingElements(a);    }else        if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {            tb.reconstructFormattingElements();            org.jsoup.nodes.Element el = tb.insert(startTag);            tb.pushActiveFormattingElements(el);        }else            if (name.equals("nobr")) {                tb.reconstructFormattingElements();                if (tb.inScope("nobr")) {                    tb.error(this);                    tb.process(new org.jsoup.parser.Token.EndTag("nobr"));                    tb.reconstructFormattingElements();                }                org.jsoup.nodes.Element el = tb.insert(startTag);                tb.pushActiveFormattingElements(el);            }else                if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {                    tb.reconstructFormattingElements();                    tb.insert(startTag);                    tb.insertMarkerToFormattingElements();                    tb.framesetOk(false);                }else                    if (name.equals("table")) {                        if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                            tb.process(new org.jsoup.parser.Token.EndTag("p"));                        }                        tb.insert(startTag);                        tb.framesetOk(false);                        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                    }else                        if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                            tb.reconstructFormattingElements();                            tb.insertEmpty(startTag);                            tb.framesetOk(false);                        }else                            if (name.equals("input")) {                                tb.reconstructFormattingElements();                                org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                                if (!(el.attr("type").equalsIgnoreCase("hidden")))                                    tb.framesetOk(false);                            }else                                if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                                    tb.insertEmpty(startTag);                                }else                                    if (name.equals("hr")) {                                        if (tb.inButtonScope("p")) {                                            tb.process(new org.jsoup.parser.Token.EndTag("p"));                                        }                                        tb.insertEmpty(startTag);                                        tb.framesetOk(false);                                    }else                                        if (name.equals("image")) {                                            startTag.name("img");                                            return tb.process(startTag);                                        }else                                            if (name.equals("isindex")) {                                                tb.error(this);                                                if ((tb.getFormElement()) != null)                                                    return false;                                                tb.tokeniser.acknowledgeSelfClosingFlag();                                                tb.process(new org.jsoup.parser.Token.StartTag("form"));                                                if (startTag.attributes.hasKey("action")) {                                                    org.jsoup.nodes.Element form = tb.getFormElement();                                                    form.attr("action", startTag.attributes.get("action"));                                                }                                                tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                                tb.process(new org.jsoup.parser.Token.StartTag("label"));                                                java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                                tb.process(new org.jsoup.parser.Token.Character(prompt));                                                org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                                for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                                    if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                        inputAttribs.put(attr);                                                }                                                inputAttribs.put("name", "isindex");                                                tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                                tb.process(new org.jsoup.parser.Token.EndTag("label"));                                                tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                                tb.process(new org.jsoup.parser.Token.EndTag("form"));                                            }else                                                if (name.equals("textarea")) {                                                    tb.insert(startTag);                                                    tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                                    tb.markInsertionMode();                                                    tb.framesetOk(false);                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                                }else                                                    if (name.equals("xmp")) {                                                        if (tb.inButtonScope("p")) {                                                            tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                        }                                                        tb.reconstructFormattingElements();                                                        tb.framesetOk(false);                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("iframe")) {                                                            tb.framesetOk(false);                                                            org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                        }else                                                            if (name.equals("noembed")) {                                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                            }else                                                                if (name.equals("select")) {                                                                    tb.reconstructFormattingElements();                                                                    tb.insert(startTag);                                                                    tb.framesetOk(false);                                                                    org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                                    if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                                    else                                                                        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                                }else                                                                    if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                        if (tb.currentElement().nodeName().equals("option"))                                                                            tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                        tb.reconstructFormattingElements();                                                                        tb.insert(startTag);                                                                    }else                                                                        if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                            if (tb.inScope("ruby")) {                                                                                tb.generateImpliedEndTags();                                                                                if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                                    tb.error(this);                                                                                    tb.popStackToBefore("ruby");                                                                                }                                                                                tb.insert(startTag);                                                                            }                                                                        }else                                                                            if (name.equals("math")) {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                                tb.tokeniser.acknowledgeSelfClosingFlag();                                                                            }else                                                                                if (name.equals("svg")) {                                                                                    tb.reconstructFormattingElements();                                                                                    tb.insert(startTag);                                                                                    tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                }else                                                                                    if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                        tb.error(this);                                                                                        return false;                                                                                    }else {                                                                                        tb.reconstructFormattingElements();                                                                                        tb.insert(startTag);                                                                                    }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"form"	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"table"	false
org.jsoup.parser.HtmlTreeBuilderState::::632::::31114::::31168::::org.jsoup.helper.StringUtil.in(name, "h1", "h2", "h3", "h4", "h5", "h6")::::INSERT::::STATEMENT::::tb.process(startTag)	false
org.jsoup.parser.HtmlTreeBuilderState::::676::::33799::::33804::::break::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("p"))	false
org.jsoup.parser.HtmlTreeBuilderState::::412::::18675::::18709::::tb.reconstructFormattingElements()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("button"))	false
org.jsoup.parser.Token::::69::::2184::::2204::::pendingAttributeValue::::new java.lang.StringBuilder()	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"tr"	false
org.jsoup.parser.HtmlTreeBuilderState::::775::::39300::::39324::::tb.popStackToClose(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("th"))	false
org.jsoup.parser.HtmlTreeBuilderState::::775::::39300::::39324::::tb.popStackToClose(name)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("td"))	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33700::::33701::::el::::form	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"div"	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"address"	false
org.jsoup.parser.HtmlTreeBuilderState::::731::::37192::::37199::::formatEl::::a	false
org.jsoup.parser.HtmlTreeBuilderState::::776::::39346::::39351::::break::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33743::::33755::::furthestBlock::::body	false
org.jsoup.parser.HtmlTreeBuilderState::::645::::31854::::38455::::if (org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")) {    OUTER : for (int i = 0; i < 8; i++) {        org.jsoup.nodes.Element formatEl = tb.getActiveFormattingElement(name);        if (formatEl == null)            return anyOtherEndTag(t, tb);        else            if (!(tb.onStack(formatEl))) {                tb.error(this);                tb.removeFromActiveFormattingElements(formatEl);                return true;            }else                if (!(tb.inScope(formatEl.nodeName()))) {                    tb.error(this);                    return false;                }else                    if ((tb.currentElement()) != formatEl)                        tb.error(this);        org.jsoup.nodes.Element furthestBlock = null;        org.jsoup.nodes.Element commonAncestor = null;        boolean seenFormattingElement = false;        java.util.LinkedList<org.jsoup.nodes.Element> stack = tb.getStack();        for (int si = 0; (si < (stack.size())) && (si < 64); si++) {            org.jsoup.nodes.Element el = stack.get(si);            if (el == formatEl) {                commonAncestor = stack.get((si - 1));                seenFormattingElement = true;            }else                if (seenFormattingElement && (tb.isSpecial(el))) {                    furthestBlock = el;                    break;                }        }        if (furthestBlock == null) {            tb.popStackToClose(formatEl.nodeName());            tb.removeFromActiveFormattingElements(formatEl);            return true;        }        org.jsoup.nodes.Element node = furthestBlock;        org.jsoup.nodes.Element lastNode = furthestBlock;        INNER : for (int j = 0; j < 3; j++) {            if (tb.onStack(node))                node = tb.aboveOnStack(node);            if (!(tb.isInActiveFormattingElements(node))) {                tb.removeFromStack(node);                continue INNER;            }else                if (node == formatEl)                    break INNER;            org.jsoup.nodes.Element replacement = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(node.nodeName()), tb.getBaseUri());            tb.replaceActiveFormattingElement(node, replacement);            tb.replaceOnStack(node, replacement);            node = replacement;            if (lastNode == furthestBlock) {            }            if ((lastNode.parent()) != null)                lastNode.remove();            node.appendChild(lastNode);            lastNode = node;        }        if (org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")) {            if ((lastNode.parent()) != null)                lastNode.remove();            tb.insertInFosterParent(lastNode);        }else {            if ((lastNode.parent()) != null)                lastNode.remove();            commonAncestor.appendChild(lastNode);        }        org.jsoup.nodes.Element adopter = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(name), tb.getBaseUri());        org.jsoup.nodes.Node[] childNodes = furthestBlock.childNodes().toArray(new org.jsoup.nodes.Node[furthestBlock.childNodeSize()]);        for (org.jsoup.nodes.Node childNode : childNodes) {            adopter.appendChild(childNode);        }        furthestBlock.appendChild(adopter);        tb.removeFromActiveFormattingElements(formatEl);        tb.removeFromStack(formatEl);        tb.insertOnStackAfter(furthestBlock, adopter);    }}else    if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {        if (!(tb.inScope("name"))) {            if (!(tb.inScope(name))) {                tb.error(this);                return false;            }            tb.generateImpliedEndTags();            if (!(tb.currentElement().nodeName().equals(name)))                tb.error(this);            tb.popStackToClose(name);            tb.clearFormattingElementsToLastMarker();        }    }else        if (name.equals("br")) {            tb.error(this);            tb.process(new org.jsoup.parser.Token.StartTag("br"));            return false;        }else {            return anyOtherEndTag(t, tb);        }::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::622::::30613::::30643::::org.jsoup.helper.StringUtil.in(name, "dd", "dt")::::INSERT::::STATEMENT::::if (node == formatEl)    break INNER;	false
org.jsoup.parser.HtmlTreeBuilderState::::632::::31114::::31168::::org.jsoup.helper.StringUtil.in(name, "h1", "h2", "h3", "h4", "h5", "h6")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"dt"	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"dd"	false
org.jsoup.parser.HtmlTreeBuilderState::::734::::37463::::37475::::furthestBlock::::form	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18089::::name.equals("a")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("noscript"))	false
org.jsoup.parser.HtmlTreeBuilderState::::622::::30613::::30643::::org.jsoup.helper.StringUtil.in(name, "dd", "dt")::::INSERT::::STATEMENT::::tb.process(startTag)	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30134::::name.equals("li")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("option"))	false
org.jsoup.parser.HtmlTreeBuilderState::::671::::33463::::33464::::el::::form	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32781::::32864::::if ((tb.currentElement()) != formatEl)    tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("optgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::726::::36762::::36774::::furthestBlock::::body	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31709::::38455::::if (name.equals("sarcasm")) {    return anyOtherEndTag(t, tb);}else    if (org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")) {        OUTER : for (int i = 0; i < 8; i++) {            org.jsoup.nodes.Element formatEl = tb.getActiveFormattingElement(name);            if (formatEl == null)                return anyOtherEndTag(t, tb);            else                if (!(tb.onStack(formatEl))) {                    tb.error(this);                    tb.removeFromActiveFormattingElements(formatEl);                    return true;                }else                    if (!(tb.inScope(formatEl.nodeName()))) {                        tb.error(this);                        return false;                    }else                        if ((tb.currentElement()) != formatEl)                            tb.error(this);            org.jsoup.nodes.Element furthestBlock = null;            org.jsoup.nodes.Element commonAncestor = null;            boolean seenFormattingElement = false;            java.util.LinkedList<org.jsoup.nodes.Element> stack = tb.getStack();            for (int si = 0; (si < (stack.size())) && (si < 64); si++) {                org.jsoup.nodes.Element el = stack.get(si);                if (el == formatEl) {                    commonAncestor = stack.get((si - 1));                    seenFormattingElement = true;                }else                    if (seenFormattingElement && (tb.isSpecial(el))) {                        furthestBlock = el;                        break;                    }            }            if (furthestBlock == null) {                tb.popStackToClose(formatEl.nodeName());                tb.removeFromActiveFormattingElements(formatEl);                return true;            }            org.jsoup.nodes.Element node = furthestBlock;            org.jsoup.nodes.Element lastNode = furthestBlock;            INNER : for (int j = 0; j < 3; j++) {                if (tb.onStack(node))                    node = tb.aboveOnStack(node);                if (!(tb.isInActiveFormattingElements(node))) {                    tb.removeFromStack(node);                    continue INNER;                }else                    if (node == formatEl)                        break INNER;                org.jsoup.nodes.Element replacement = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(node.nodeName()), tb.getBaseUri());                tb.replaceActiveFormattingElement(node, replacement);                tb.replaceOnStack(node, replacement);                node = replacement;                if (lastNode == furthestBlock) {                }                if ((lastNode.parent()) != null)                    lastNode.remove();                node.appendChild(lastNode);                lastNode = node;            }            if (org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")) {                if ((lastNode.parent()) != null)                    lastNode.remove();                tb.insertInFosterParent(lastNode);            }else {                if ((lastNode.parent()) != null)                    lastNode.remove();                commonAncestor.appendChild(lastNode);            }            org.jsoup.nodes.Element adopter = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(name), tb.getBaseUri());            org.jsoup.nodes.Node[] childNodes = furthestBlock.childNodes().toArray(new org.jsoup.nodes.Node[furthestBlock.childNodeSize()]);            for (org.jsoup.nodes.Node childNode : childNodes) {                adopter.appendChild(childNode);            }            furthestBlock.appendChild(adopter);            tb.removeFromActiveFormattingElements(formatEl);            tb.removeFromStack(formatEl);            tb.insertOnStackAfter(furthestBlock, adopter);        }    }else        if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {            if (!(tb.inScope("name"))) {                if (!(tb.inScope(name))) {                    tb.error(this);                    return false;                }                tb.generateImpliedEndTags();                if (!(tb.currentElement().nodeName().equals(name)))                    tb.error(this);                tb.popStackToClose(name);                tb.clearFormattingElementsToLastMarker();            }        }else            if (name.equals("br")) {                tb.error(this);                tb.process(new org.jsoup.parser.Token.StartTag("br"));                return false;            }else {                return anyOtherEndTag(t, tb);            }::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::726::::36806::::36818::::furthestBlock::::body	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"tbody"	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32612::::32864::::if (!(tb.inScope(formatEl.nodeName()))) {    tb.error(this);    return false;}else    if ((tb.currentElement()) != formatEl)        tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("button"))	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30134::::name.equals("li")::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.HtmlTreeBuilderState::::687::::34474::::34486::::furthestBlock::::body	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31734::::name.equals("sarcasm")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("li"))	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33658::::33838::::if (seenFormattingElement && (tb.isSpecial(el))) {    furthestBlock = el;    break;}::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tbody"))	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32785::::32815::::(tb.currentElement()) != formatEl::::tb.process(new org.jsoup.parser.Token.EndTag("noscript"))	false
org.jsoup.parser.Token::::64::::1934::::1953::::pendingAttributeName::::this.data	false
org.jsoup.parser.HtmlTreeBuilder::::645::::22766::::22777::::it.remove()::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.HtmlTreeBuilderState::::688::::34536::::34548::::furthestBlock::::body	false
org.jsoup.parser.HtmlTreeBuilderState::::733::::37402::::37409::::formatEl::::a	false
org.jsoup.parser.HtmlTreeBuilderState::::412::::18675::::18709::::tb.reconstructFormattingElements()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("li"))	false
org.jsoup.parser.HtmlTreeBuilder::::642::::22659::::22824::::while (it.hasNext()) {    org.jsoup.nodes.Element next = it.next();    if (next == el) {        it.remove();        break;    }} ::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"div"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"address"	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"a"	false
org.jsoup.parser.TokeniserState::::810::::27239::::27243::::value::::"SYSTEM"	false
org.jsoup.parser.HtmlTreeBuilderState::::669::::33334::::33345::::stack.size()::::DELETE::::INFIX	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"div"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"address"	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"thead"	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"tfoot"	false
org.jsoup.parser.HtmlTreeBuilderState::::632::::31110::::38455::::if (org.jsoup.helper.StringUtil.in(name, "h1", "h2", "h3", "h4", "h5", "h6")) {    if (!(tb.inScope(new java.lang.String[]{ "h1", "h2", "h3", "h4", "h5", "h6" }))) {        tb.error(this);        return false;    }else {        tb.generateImpliedEndTags(name);        if (!(tb.currentElement().nodeName().equals(name)))            tb.error(this);        tb.popStackToClose("h1", "h2", "h3", "h4", "h5", "h6");    }}else    if (name.equals("sarcasm")) {        return anyOtherEndTag(t, tb);    }else        if (org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")) {            OUTER : for (int i = 0; i < 8; i++) {                org.jsoup.nodes.Element formatEl = tb.getActiveFormattingElement(name);                if (formatEl == null)                    return anyOtherEndTag(t, tb);                else                    if (!(tb.onStack(formatEl))) {                        tb.error(this);                        tb.removeFromActiveFormattingElements(formatEl);                        return true;                    }else                        if (!(tb.inScope(formatEl.nodeName()))) {                            tb.error(this);                            return false;                        }else                            if ((tb.currentElement()) != formatEl)                                tb.error(this);                org.jsoup.nodes.Element furthestBlock = null;                org.jsoup.nodes.Element commonAncestor = null;                boolean seenFormattingElement = false;                java.util.LinkedList<org.jsoup.nodes.Element> stack = tb.getStack();                for (int si = 0; (si < (stack.size())) && (si < 64); si++) {                    org.jsoup.nodes.Element el = stack.get(si);                    if (el == formatEl) {                        commonAncestor = stack.get((si - 1));                        seenFormattingElement = true;                    }else                        if (seenFormattingElement && (tb.isSpecial(el))) {                            furthestBlock = el;                            break;                        }                }                if (furthestBlock == null) {                    tb.popStackToClose(formatEl.nodeName());                    tb.removeFromActiveFormattingElements(formatEl);                    return true;                }                org.jsoup.nodes.Element node = furthestBlock;                org.jsoup.nodes.Element lastNode = furthestBlock;                INNER : for (int j = 0; j < 3; j++) {                    if (tb.onStack(node))                        node = tb.aboveOnStack(node);                    if (!(tb.isInActiveFormattingElements(node))) {                        tb.removeFromStack(node);                        continue INNER;                    }else                        if (node == formatEl)                            break INNER;                    org.jsoup.nodes.Element replacement = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(node.nodeName()), tb.getBaseUri());                    tb.replaceActiveFormattingElement(node, replacement);                    tb.replaceOnStack(node, replacement);                    node = replacement;                    if (lastNode == furthestBlock) {                    }                    if ((lastNode.parent()) != null)                        lastNode.remove();                    node.appendChild(lastNode);                    lastNode = node;                }                if (org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")) {                    if ((lastNode.parent()) != null)                        lastNode.remove();                    tb.insertInFosterParent(lastNode);                }else {                    if ((lastNode.parent()) != null)                        lastNode.remove();                    commonAncestor.appendChild(lastNode);                }                org.jsoup.nodes.Element adopter = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(name), tb.getBaseUri());                org.jsoup.nodes.Node[] childNodes = furthestBlock.childNodes().toArray(new org.jsoup.nodes.Node[furthestBlock.childNodeSize()]);                for (org.jsoup.nodes.Node childNode : childNodes) {                    adopter.appendChild(childNode);                }                furthestBlock.appendChild(adopter);                tb.removeFromActiveFormattingElements(formatEl);                tb.removeFromStack(formatEl);                tb.insertOnStackAfter(furthestBlock, adopter);            }        }else            if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {                if (!(tb.inScope("name"))) {                    if (!(tb.inScope(name))) {                        tb.error(this);                        return false;                    }                    tb.generateImpliedEndTags();                    if (!(tb.currentElement().nodeName().equals(name)))                        tb.error(this);                    tb.popStackToClose(name);                    tb.clearFormattingElementsToLastMarker();                }            }else                if (name.equals("br")) {                    tb.error(this);                    tb.process(new org.jsoup.parser.Token.StartTag("br"));                    return false;                }else {                    return anyOtherEndTag(t, tb);                }::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.HtmlTreeBuilder::::263::::9251::::9398::::while (it.hasNext()) {    org.jsoup.nodes.Element next = it.next();    if (next == element) {        return true;    }} ::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31734::::name.equals("sarcasm")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tbody"))	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32616::::32647::::!(tb.inScope(formatEl.nodeName()))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("noscript"))	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30134::::name.equals("li")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"form"	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"ul"	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"summary"	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"section"	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"ol"	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"nav"	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"menu"	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"hgroup"	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"header"	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"footer"	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"figure"	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"figcaption"	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"fieldset"	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"dl"	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"dir"	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"details"	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"center"	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"blockquote"	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"aside"	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"article"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"form"	false
org.jsoup.parser.HtmlTreeBuilderState::::645::::31858::::32001::::org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("body"))	false
org.jsoup.parser.HtmlTreeBuilderState::::622::::30613::::30643::::org.jsoup.helper.StringUtil.in(name, "dd", "dt")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::412::::18675::::18709::::tb.reconstructFormattingElements()::::INSERT::::STATEMENT::::if (notIgnored)    return tb.process(endTag);	false
org.jsoup.parser.HtmlTreeBuilderState::::632::::31114::::31168::::org.jsoup.helper.StringUtil.in(name, "h1", "h2", "h3", "h4", "h5", "h6")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("a"))	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33743::::33755::::furthestBlock::::second	false
org.jsoup.parser.HtmlTreeBuilderState::::734::::37463::::37475::::furthestBlock::::html	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"li"	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32781::::32864::::if ((tb.currentElement()) != formatEl)    tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("colgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::622::::30609::::38455::::if (org.jsoup.helper.StringUtil.in(name, "dd", "dt")) {    if (!(tb.inScope(name))) {        tb.error(this);        return false;    }else {        tb.generateImpliedEndTags(name);        if (!(tb.currentElement().nodeName().equals(name)))            tb.error(this);        tb.popStackToClose(name);    }}else    if (org.jsoup.helper.StringUtil.in(name, "h1", "h2", "h3", "h4", "h5", "h6")) {        if (!(tb.inScope(new java.lang.String[]{ "h1", "h2", "h3", "h4", "h5", "h6" }))) {            tb.error(this);            return false;        }else {            tb.generateImpliedEndTags(name);            if (!(tb.currentElement().nodeName().equals(name)))                tb.error(this);            tb.popStackToClose("h1", "h2", "h3", "h4", "h5", "h6");        }    }else        if (name.equals("sarcasm")) {            return anyOtherEndTag(t, tb);        }else            if (org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")) {                OUTER : for (int i = 0; i < 8; i++) {                    org.jsoup.nodes.Element formatEl = tb.getActiveFormattingElement(name);                    if (formatEl == null)                        return anyOtherEndTag(t, tb);                    else                        if (!(tb.onStack(formatEl))) {                            tb.error(this);                            tb.removeFromActiveFormattingElements(formatEl);                            return true;                        }else                            if (!(tb.inScope(formatEl.nodeName()))) {                                tb.error(this);                                return false;                            }else                                if ((tb.currentElement()) != formatEl)                                    tb.error(this);                    org.jsoup.nodes.Element furthestBlock = null;                    org.jsoup.nodes.Element commonAncestor = null;                    boolean seenFormattingElement = false;                    java.util.LinkedList<org.jsoup.nodes.Element> stack = tb.getStack();                    for (int si = 0; (si < (stack.size())) && (si < 64); si++) {                        org.jsoup.nodes.Element el = stack.get(si);                        if (el == formatEl) {                            commonAncestor = stack.get((si - 1));                            seenFormattingElement = true;                        }else                            if (seenFormattingElement && (tb.isSpecial(el))) {                                furthestBlock = el;                                break;                            }                    }                    if (furthestBlock == null) {                        tb.popStackToClose(formatEl.nodeName());                        tb.removeFromActiveFormattingElements(formatEl);                        return true;                    }                    org.jsoup.nodes.Element node = furthestBlock;                    org.jsoup.nodes.Element lastNode = furthestBlock;                    INNER : for (int j = 0; j < 3; j++) {                        if (tb.onStack(node))                            node = tb.aboveOnStack(node);                        if (!(tb.isInActiveFormattingElements(node))) {                            tb.removeFromStack(node);                            continue INNER;                        }else                            if (node == formatEl)                                break INNER;                        org.jsoup.nodes.Element replacement = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(node.nodeName()), tb.getBaseUri());                        tb.replaceActiveFormattingElement(node, replacement);                        tb.replaceOnStack(node, replacement);                        node = replacement;                        if (lastNode == furthestBlock) {                        }                        if ((lastNode.parent()) != null)                            lastNode.remove();                        node.appendChild(lastNode);                        lastNode = node;                    }                    if (org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")) {                        if ((lastNode.parent()) != null)                            lastNode.remove();                        tb.insertInFosterParent(lastNode);                    }else {                        if ((lastNode.parent()) != null)                            lastNode.remove();                        commonAncestor.appendChild(lastNode);                    }                    org.jsoup.nodes.Element adopter = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(name), tb.getBaseUri());                    org.jsoup.nodes.Node[] childNodes = furthestBlock.childNodes().toArray(new org.jsoup.nodes.Node[furthestBlock.childNodeSize()]);                    for (org.jsoup.nodes.Node childNode : childNodes) {                        adopter.appendChild(childNode);                    }                    furthestBlock.appendChild(adopter);                    tb.removeFromActiveFormattingElements(formatEl);                    tb.removeFromStack(formatEl);                    tb.insertOnStackAfter(furthestBlock, adopter);                }            }else                if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {                    if (!(tb.inScope("name"))) {                        if (!(tb.inScope(name))) {                            tb.error(this);                            return false;                        }                        tb.generateImpliedEndTags();                        if (!(tb.currentElement().nodeName().equals(name)))                            tb.error(this);                        tb.popStackToClose(name);                        tb.clearFormattingElementsToLastMarker();                    }                }else                    if (name.equals("br")) {                        tb.error(this);                        tb.process(new org.jsoup.parser.Token.StartTag("br"));                        return false;                    }else {                        return anyOtherEndTag(t, tb);                    }::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18855::::26999::::if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {    tb.reconstructFormattingElements();    org.jsoup.nodes.Element el = tb.insert(startTag);    tb.pushActiveFormattingElements(el);}else    if (name.equals("nobr")) {        tb.reconstructFormattingElements();        if (tb.inScope("nobr")) {            tb.error(this);            tb.process(new org.jsoup.parser.Token.EndTag("nobr"));            tb.reconstructFormattingElements();        }        org.jsoup.nodes.Element el = tb.insert(startTag);        tb.pushActiveFormattingElements(el);    }else        if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {            tb.reconstructFormattingElements();            tb.insert(startTag);            tb.insertMarkerToFormattingElements();            tb.framesetOk(false);        }else            if (name.equals("table")) {                if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                }                tb.insert(startTag);                tb.framesetOk(false);                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);            }else                if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                    tb.reconstructFormattingElements();                    tb.insertEmpty(startTag);                    tb.framesetOk(false);                }else                    if (name.equals("input")) {                        tb.reconstructFormattingElements();                        org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                        if (!(el.attr("type").equalsIgnoreCase("hidden")))                            tb.framesetOk(false);                    }else                        if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                            tb.insertEmpty(startTag);                        }else                            if (name.equals("hr")) {                                if (tb.inButtonScope("p")) {                                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                                }                                tb.insertEmpty(startTag);                                tb.framesetOk(false);                            }else                                if (name.equals("image")) {                                    startTag.name("img");                                    return tb.process(startTag);                                }else                                    if (name.equals("isindex")) {                                        tb.error(this);                                        if ((tb.getFormElement()) != null)                                            return false;                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                        tb.process(new org.jsoup.parser.Token.StartTag("form"));                                        if (startTag.attributes.hasKey("action")) {                                            org.jsoup.nodes.Element form = tb.getFormElement();                                            form.attr("action", startTag.attributes.get("action"));                                        }                                        tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                        tb.process(new org.jsoup.parser.Token.StartTag("label"));                                        java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                        tb.process(new org.jsoup.parser.Token.Character(prompt));                                        org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                        for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                            if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                inputAttribs.put(attr);                                        }                                        inputAttribs.put("name", "isindex");                                        tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                        tb.process(new org.jsoup.parser.Token.EndTag("label"));                                        tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                        tb.process(new org.jsoup.parser.Token.EndTag("form"));                                    }else                                        if (name.equals("textarea")) {                                            tb.insert(startTag);                                            tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                            tb.markInsertionMode();                                            tb.framesetOk(false);                                            tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                        }else                                            if (name.equals("xmp")) {                                                if (tb.inButtonScope("p")) {                                                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                }                                                tb.reconstructFormattingElements();                                                tb.framesetOk(false);                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                            }else                                                if (name.equals("iframe")) {                                                    tb.framesetOk(false);                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                }else                                                    if (name.equals("noembed")) {                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("select")) {                                                            tb.reconstructFormattingElements();                                                            tb.insert(startTag);                                                            tb.framesetOk(false);                                                            org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                            if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                            else                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                        }else                                                            if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                if (tb.currentElement().nodeName().equals("option"))                                                                    tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                tb.reconstructFormattingElements();                                                                tb.insert(startTag);                                                            }else                                                                if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                    if (tb.inScope("ruby")) {                                                                        tb.generateImpliedEndTags();                                                                        if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                            tb.error(this);                                                                            tb.popStackToBefore("ruby");                                                                        }                                                                        tb.insert(startTag);                                                                    }                                                                }else                                                                    if (name.equals("math")) {                                                                        tb.reconstructFormattingElements();                                                                        tb.insert(startTag);                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                    }else                                                                        if (name.equals("svg")) {                                                                            tb.reconstructFormattingElements();                                                                            tb.insert(startTag);                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                        }else                                                                            if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                tb.error(this);                                                                                return false;                                                                            }else {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                            }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("a"))	false
org.jsoup.parser.HtmlTreeBuilder::::357::::11785::::11786::::el::::headElement	false
org.jsoup.parser.HtmlTreeBuilderState::::412::::18675::::18709::::tb.reconstructFormattingElements()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::645::::31858::::32001::::org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31734::::name.equals("sarcasm")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("colgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::726::::36762::::36774::::furthestBlock::::second	false
org.jsoup.parser.HtmlTreeBuilderState::::726::::36806::::36818::::furthestBlock::::second	false
org.jsoup.parser.HtmlTreeBuilderState::::661::::32850::::32864::::tb.error(this)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag(name))	false
org.jsoup.parser.TokeniserState::::810::::27239::::27243::::value::::"[CDATA["	false
org.jsoup.parser.HtmlTreeBuilderState::::687::::34474::::34486::::furthestBlock::::second	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32785::::32815::::(tb.currentElement()) != formatEl::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InSelect)	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18855::::26999::::if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {    tb.reconstructFormattingElements();    org.jsoup.nodes.Element el = tb.insert(startTag);    tb.pushActiveFormattingElements(el);}else    if (name.equals("nobr")) {        tb.reconstructFormattingElements();        if (tb.inScope("nobr")) {            tb.error(this);            tb.process(new org.jsoup.parser.Token.EndTag("nobr"));            tb.reconstructFormattingElements();        }        org.jsoup.nodes.Element el = tb.insert(startTag);        tb.pushActiveFormattingElements(el);    }else        if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {            tb.reconstructFormattingElements();            tb.insert(startTag);            tb.insertMarkerToFormattingElements();            tb.framesetOk(false);        }else            if (name.equals("table")) {                if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                }                tb.insert(startTag);                tb.framesetOk(false);                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);            }else                if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                    tb.reconstructFormattingElements();                    tb.insertEmpty(startTag);                    tb.framesetOk(false);                }else                    if (name.equals("input")) {                        tb.reconstructFormattingElements();                        org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                        if (!(el.attr("type").equalsIgnoreCase("hidden")))                            tb.framesetOk(false);                    }else                        if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                            tb.insertEmpty(startTag);                        }else                            if (name.equals("hr")) {                                if (tb.inButtonScope("p")) {                                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                                }                                tb.insertEmpty(startTag);                                tb.framesetOk(false);                            }else                                if (name.equals("image")) {                                    startTag.name("img");                                    return tb.process(startTag);                                }else                                    if (name.equals("isindex")) {                                        tb.error(this);                                        if ((tb.getFormElement()) != null)                                            return false;                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                        tb.process(new org.jsoup.parser.Token.StartTag("form"));                                        if (startTag.attributes.hasKey("action")) {                                            org.jsoup.nodes.Element form = tb.getFormElement();                                            form.attr("action", startTag.attributes.get("action"));                                        }                                        tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                        tb.process(new org.jsoup.parser.Token.StartTag("label"));                                        java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                        tb.process(new org.jsoup.parser.Token.Character(prompt));                                        org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                        for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                            if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                inputAttribs.put(attr);                                        }                                        inputAttribs.put("name", "isindex");                                        tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                        tb.process(new org.jsoup.parser.Token.EndTag("label"));                                        tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                        tb.process(new org.jsoup.parser.Token.EndTag("form"));                                    }else                                        if (name.equals("textarea")) {                                            tb.insert(startTag);                                            tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                            tb.markInsertionMode();                                            tb.framesetOk(false);                                            tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                        }else                                            if (name.equals("xmp")) {                                                if (tb.inButtonScope("p")) {                                                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                }                                                tb.reconstructFormattingElements();                                                tb.framesetOk(false);                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                            }else                                                if (name.equals("iframe")) {                                                    tb.framesetOk(false);                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                }else                                                    if (name.equals("noembed")) {                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("select")) {                                                            tb.reconstructFormattingElements();                                                            tb.insert(startTag);                                                            tb.framesetOk(false);                                                            org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                            if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                            else                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                        }else                                                            if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                if (tb.currentElement().nodeName().equals("option"))                                                                    tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                tb.reconstructFormattingElements();                                                                tb.insert(startTag);                                                            }else                                                                if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                    if (tb.inScope("ruby")) {                                                                        tb.generateImpliedEndTags();                                                                        if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                            tb.error(this);                                                                            tb.popStackToBefore("ruby");                                                                        }                                                                        tb.insert(startTag);                                                                    }                                                                }else                                                                    if (name.equals("math")) {                                                                        tb.reconstructFormattingElements();                                                                        tb.insert(startTag);                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                    }else                                                                        if (name.equals("svg")) {                                                                            tb.reconstructFormattingElements();                                                                            tb.insert(startTag);                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                        }else                                                                            if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                tb.error(this);                                                                                return false;                                                                            }else {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                            }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::688::::34536::::34548::::furthestBlock::::second	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"h6"	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"h5"	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"h4"	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"h3"	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"h2"	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"h1"	false
org.jsoup.parser.HtmlTreeBuilderState::::721::::36499::::36516::::lastNode.remove()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("body"))	false
org.jsoup.parser.HtmlTreeBuilderState::::632::::31114::::31168::::org.jsoup.helper.StringUtil.in(name, "h1", "h2", "h3", "h4", "h5", "h6")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("form"))	false
org.jsoup.parser.HtmlTreeBuilder::::568::::19853::::19917::::java.util.Iterator<org.jsoup.nodes.Element> iter = formattingElements.descendingIterator()::::INSERT::::STATEMENT::::numSeen++	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32374::::32864::::if (!(tb.onStack(formatEl))) {    tb.error(this);    tb.removeFromActiveFormattingElements(formatEl);    return true;}else    if (!(tb.inScope(formatEl.nodeName()))) {        tb.error(this);        return false;    }else        if ((tb.currentElement()) != formatEl)            tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag(name))	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32612::::32864::::if (!(tb.inScope(formatEl.nodeName()))) {    tb.error(this);    return false;}else    if ((tb.currentElement()) != formatEl)        tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"pre"	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"listing"	false
org.jsoup.parser.HtmlTreeBuilderState::::412::::18675::::18709::::tb.reconstructFormattingElements()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("noscript"))	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33658::::33838::::if (seenFormattingElement && (tb.isSpecial(el))) {    furthestBlock = el;    break;}::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("optgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18089::::name.equals("a")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tbody"))	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30114::::38455::::if (name.equals("li")) {    if (!(tb.inListItemScope(name))) {        tb.error(this);        return false;    }else {        tb.generateImpliedEndTags(name);        if (!(tb.currentElement().nodeName().equals(name)))            tb.error(this);        tb.popStackToClose(name);    }}else    if (org.jsoup.helper.StringUtil.in(name, "dd", "dt")) {        if (!(tb.inScope(name))) {            tb.error(this);            return false;        }else {            tb.generateImpliedEndTags(name);            if (!(tb.currentElement().nodeName().equals(name)))                tb.error(this);            tb.popStackToClose(name);        }    }else        if (org.jsoup.helper.StringUtil.in(name, "h1", "h2", "h3", "h4", "h5", "h6")) {            if (!(tb.inScope(new java.lang.String[]{ "h1", "h2", "h3", "h4", "h5", "h6" }))) {                tb.error(this);                return false;            }else {                tb.generateImpliedEndTags(name);                if (!(tb.currentElement().nodeName().equals(name)))                    tb.error(this);                tb.popStackToClose("h1", "h2", "h3", "h4", "h5", "h6");            }        }else            if (name.equals("sarcasm")) {                return anyOtherEndTag(t, tb);            }else                if (org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")) {                    OUTER : for (int i = 0; i < 8; i++) {                        org.jsoup.nodes.Element formatEl = tb.getActiveFormattingElement(name);                        if (formatEl == null)                            return anyOtherEndTag(t, tb);                        else                            if (!(tb.onStack(formatEl))) {                                tb.error(this);                                tb.removeFromActiveFormattingElements(formatEl);                                return true;                            }else                                if (!(tb.inScope(formatEl.nodeName()))) {                                    tb.error(this);                                    return false;                                }else                                    if ((tb.currentElement()) != formatEl)                                        tb.error(this);                        org.jsoup.nodes.Element furthestBlock = null;                        org.jsoup.nodes.Element commonAncestor = null;                        boolean seenFormattingElement = false;                        java.util.LinkedList<org.jsoup.nodes.Element> stack = tb.getStack();                        for (int si = 0; (si < (stack.size())) && (si < 64); si++) {                            org.jsoup.nodes.Element el = stack.get(si);                            if (el == formatEl) {                                commonAncestor = stack.get((si - 1));                                seenFormattingElement = true;                            }else                                if (seenFormattingElement && (tb.isSpecial(el))) {                                    furthestBlock = el;                                    break;                                }                        }                        if (furthestBlock == null) {                            tb.popStackToClose(formatEl.nodeName());                            tb.removeFromActiveFormattingElements(formatEl);                            return true;                        }                        org.jsoup.nodes.Element node = furthestBlock;                        org.jsoup.nodes.Element lastNode = furthestBlock;                        INNER : for (int j = 0; j < 3; j++) {                            if (tb.onStack(node))                                node = tb.aboveOnStack(node);                            if (!(tb.isInActiveFormattingElements(node))) {                                tb.removeFromStack(node);                                continue INNER;                            }else                                if (node == formatEl)                                    break INNER;                            org.jsoup.nodes.Element replacement = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(node.nodeName()), tb.getBaseUri());                            tb.replaceActiveFormattingElement(node, replacement);                            tb.replaceOnStack(node, replacement);                            node = replacement;                            if (lastNode == furthestBlock) {                            }                            if ((lastNode.parent()) != null)                                lastNode.remove();                            node.appendChild(lastNode);                            lastNode = node;                        }                        if (org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")) {                            if ((lastNode.parent()) != null)                                lastNode.remove();                            tb.insertInFosterParent(lastNode);                        }else {                            if ((lastNode.parent()) != null)                                lastNode.remove();                            commonAncestor.appendChild(lastNode);                        }                        org.jsoup.nodes.Element adopter = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(name), tb.getBaseUri());                        org.jsoup.nodes.Node[] childNodes = furthestBlock.childNodes().toArray(new org.jsoup.nodes.Node[furthestBlock.childNodeSize()]);                        for (org.jsoup.nodes.Node childNode : childNodes) {                            adopter.appendChild(childNode);                        }                        furthestBlock.appendChild(adopter);                        tb.removeFromActiveFormattingElements(formatEl);                        tb.removeFromStack(formatEl);                        tb.insertOnStackAfter(furthestBlock, adopter);                    }                }else                    if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {                        if (!(tb.inScope("name"))) {                            if (!(tb.inScope(name))) {                                tb.error(this);                                return false;                            }                            tb.generateImpliedEndTags();                            if (!(tb.currentElement().nodeName().equals(name)))                                tb.error(this);                            tb.popStackToClose(name);                            tb.clearFormattingElementsToLastMarker();                        }                    }else                        if (name.equals("br")) {                            tb.error(this);                            tb.process(new org.jsoup.parser.Token.StartTag("br"));                            return false;                        }else {                            return anyOtherEndTag(t, tb);                        }::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.HtmlTreeBuilder::::657::::23090::::23312::::while (it.hasNext()) {    org.jsoup.nodes.Element next = it.next();    if (next == null)        break;    else        if (next.nodeName().equals(nodeName))            return next;} ::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32616::::32647::::!(tb.inScope(formatEl.nodeName()))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("th"))	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32616::::32647::::!(tb.inScope(formatEl.nodeName()))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("td"))	false
org.jsoup.parser.HtmlTreeBuilderState::::412::::18675::::18709::::tb.reconstructFormattingElements()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tbody"))	false
org.jsoup.parser.HtmlTreeBuilderState::::721::::36499::::36516::::lastNode.remove()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("th"))	false
org.jsoup.parser.HtmlTreeBuilderState::::721::::36499::::36516::::lastNode.remove()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("td"))	false
org.jsoup.parser.HtmlTreeBuilderState::::622::::30613::::30643::::org.jsoup.helper.StringUtil.in(name, "dd", "dt")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("a"))	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18855::::26999::::if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {    tb.reconstructFormattingElements();    org.jsoup.nodes.Element el = tb.insert(startTag);    tb.pushActiveFormattingElements(el);}else    if (name.equals("nobr")) {        tb.reconstructFormattingElements();        if (tb.inScope("nobr")) {            tb.error(this);            tb.process(new org.jsoup.parser.Token.EndTag("nobr"));            tb.reconstructFormattingElements();        }        org.jsoup.nodes.Element el = tb.insert(startTag);        tb.pushActiveFormattingElements(el);    }else        if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {            tb.reconstructFormattingElements();            tb.insert(startTag);            tb.insertMarkerToFormattingElements();            tb.framesetOk(false);        }else            if (name.equals("table")) {                if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                }                tb.insert(startTag);                tb.framesetOk(false);                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);            }else                if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                    tb.reconstructFormattingElements();                    tb.insertEmpty(startTag);                    tb.framesetOk(false);                }else                    if (name.equals("input")) {                        tb.reconstructFormattingElements();                        org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                        if (!(el.attr("type").equalsIgnoreCase("hidden")))                            tb.framesetOk(false);                    }else                        if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                            tb.insertEmpty(startTag);                        }else                            if (name.equals("hr")) {                                if (tb.inButtonScope("p")) {                                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                                }                                tb.insertEmpty(startTag);                                tb.framesetOk(false);                            }else                                if (name.equals("image")) {                                    startTag.name("img");                                    return tb.process(startTag);                                }else                                    if (name.equals("isindex")) {                                        tb.error(this);                                        if ((tb.getFormElement()) != null)                                            return false;                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                        tb.process(new org.jsoup.parser.Token.StartTag("form"));                                        if (startTag.attributes.hasKey("action")) {                                            org.jsoup.nodes.Element form = tb.getFormElement();                                            form.attr("action", startTag.attributes.get("action"));                                        }                                        tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                        tb.process(new org.jsoup.parser.Token.StartTag("label"));                                        java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                        tb.process(new org.jsoup.parser.Token.Character(prompt));                                        org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                        for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                            if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                inputAttribs.put(attr);                                        }                                        inputAttribs.put("name", "isindex");                                        tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                        tb.process(new org.jsoup.parser.Token.EndTag("label"));                                        tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                        tb.process(new org.jsoup.parser.Token.EndTag("form"));                                    }else                                        if (name.equals("textarea")) {                                            tb.insert(startTag);                                            tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                            tb.markInsertionMode();                                            tb.framesetOk(false);                                            tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                        }else                                            if (name.equals("xmp")) {                                                if (tb.inButtonScope("p")) {                                                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                }                                                tb.reconstructFormattingElements();                                                tb.framesetOk(false);                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                            }else                                                if (name.equals("iframe")) {                                                    tb.framesetOk(false);                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                }else                                                    if (name.equals("noembed")) {                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("select")) {                                                            tb.reconstructFormattingElements();                                                            tb.insert(startTag);                                                            tb.framesetOk(false);                                                            org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                            if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                            else                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                        }else                                                            if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                if (tb.currentElement().nodeName().equals("option"))                                                                    tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                tb.reconstructFormattingElements();                                                                tb.insert(startTag);                                                            }else                                                                if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                    if (tb.inScope("ruby")) {                                                                        tb.generateImpliedEndTags();                                                                        if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                            tb.error(this);                                                                            tb.popStackToBefore("ruby");                                                                        }                                                                        tb.insert(startTag);                                                                    }                                                                }else                                                                    if (name.equals("math")) {                                                                        tb.reconstructFormattingElements();                                                                        tb.insert(startTag);                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                    }else                                                                        if (name.equals("svg")) {                                                                            tb.reconstructFormattingElements();                                                                            tb.insert(startTag);                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                        }else                                                                            if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                tb.error(this);                                                                                return false;                                                                            }else {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                            }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::696::::35025::::35028::::node::::a	false
org.jsoup.parser.HtmlTreeBuilderState::::691::::34691::::34694::::node::::a	false
org.jsoup.parser.HtmlTreeBuilderState::::412::::18675::::18709::::tb.reconstructFormattingElements()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("colgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::671::::33469::::33476::::formatEl::::currentForm	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34734::::34737::::node::::a	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"ul"	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"summary"	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"section"	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"ol"	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"nav"	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"menu"	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"hgroup"	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"header"	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"footer"	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"figure"	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"figcaption"	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"fieldset"	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"dl"	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"dir"	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"details"	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"center"	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"blockquote"	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"aside"	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"article"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18089::::name.equals("a")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("colgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32390::::32397::::formatEl::::currentForm	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32612::::32864::::if (!(tb.inScope(formatEl.nodeName()))) {    tb.error(this);    return false;}else    if ((tb.currentElement()) != formatEl)        tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tbody"))	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"ul"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"summary"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"section"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"ol"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"nav"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"menu"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"hgroup"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"header"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"footer"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"figure"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"figcaption"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"fieldset"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"dl"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"dir"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"details"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"center"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"blockquote"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"aside"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"article"	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32628::::32635::::formatEl::::currentForm	false
org.jsoup.parser.HtmlTreeBuilderState::::692::::34757::::34760::::node::::a	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33743::::33755::::furthestBlock::::html	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30134::::name.equals("li")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs))	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32785::::32815::::(tb.currentElement()) != formatEl::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InTable)	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32808::::32815::::formatEl::::currentForm	false
org.jsoup.parser.HtmlTreeBuilderState::::693::::34833::::34836::::node::::a	false
org.jsoup.parser.HtmlTreeBuilderState::::651::::32261::::32268::::formatEl::::currentForm	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"ul"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"summary"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"section"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"ol"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"nav"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"menu"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"hgroup"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"header"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"footer"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"figure"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"figcaption"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"fieldset"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"dl"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"dir"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"details"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"center"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"blockquote"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"aside"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"article"	false
org.jsoup.parser.HtmlTreeBuilderState::::622::::30613::::30643::::org.jsoup.helper.StringUtil.in(name, "dd", "dt")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::726::::36762::::36774::::furthestBlock::::html	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33662::::33702::::seenFormattingElement && (tb.isSpecial(el))::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InSelect)	false
org.jsoup.parser.HtmlTreeBuilderState::::726::::36806::::36818::::furthestBlock::::html	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32612::::32864::::if (!(tb.inScope(formatEl.nodeName()))) {    tb.error(this);    return false;}else    if ((tb.currentElement()) != formatEl)        tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("br"))	false
org.jsoup.parser.HtmlTreeBuilderState::::687::::34474::::34486::::furthestBlock::::html	false
org.jsoup.parser.HtmlTreeBuilder::::645::::22766::::22777::::it.remove()::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.parser.HtmlTreeBuilderState::::688::::34536::::34548::::furthestBlock::::html	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33658::::33838::::if (seenFormattingElement && (tb.isSpecial(el))) {    furthestBlock = el;    break;}::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("colgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"button"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17545::::name.equals("button")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("th"))	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17545::::name.equals("button")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("td"))	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"tr"	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30134::::name.equals("li")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("select"))	false
org.jsoup.parser.HtmlTreeBuilder::::662::::23291::::23302::::return next::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32374::::32864::::if (!(tb.onStack(formatEl))) {    tb.error(this);    tb.removeFromActiveFormattingElements(formatEl);    return true;}else    if (!(tb.inScope(formatEl.nodeName()))) {        tb.error(this);        return false;    }else        if ((tb.currentElement()) != formatEl)            tb.error(this);::::INSERT::::STATEMENT::::if (notIgnored)    return tb.process(endTag);	false
org.jsoup.parser.HtmlTreeBuilderState::::645::::31858::::32001::::org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"pre"	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"listing"	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18859::::18989::::org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("th"))	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18859::::18989::::org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("td"))	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31734::::name.equals("sarcasm")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("br"))	false
org.jsoup.parser.HtmlTreeBuilderState::::661::::32850::::32864::::tb.error(this)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("body"))	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"pre"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"listing"	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"dt"	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"dd"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"li"	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"tbody"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"pre"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"listing"	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"table"	false
org.jsoup.parser.HtmlTreeBuilderState::::673::::33589::::33617::::seenFormattingElement = true::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("body"))	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"button"	false
org.jsoup.parser.HtmlTreeBuilderState::::645::::31858::::32001::::org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("button"))	false
org.jsoup.parser.HtmlTreeBuilderState::::645::::31858::::32001::::org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::if (notIgnored)    return tb.process(endTag);	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"h6"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"h5"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"h4"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"h3"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"h2"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"h1"	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"table"	false
org.jsoup.parser.TokeniserState::::888::::30055::::30818::::switch (c) {    case '\t' :    case '\n' :    case '\r' :    case '\f' :    case ' ' :        t.transition(org.jsoup.parser.TokeniserState.BeforeAttributeName);        break;    case '/' :        t.transition(org.jsoup.parser.TokeniserState.SelfClosingStartTag);        break;    case '>' :        t.emitTagPending();        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case org.jsoup.parser.TokeniserState.eof :        t.eofError(this);        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    default :        t.error(this);        r.unconsume();        t.transition(org.jsoup.parser.TokeniserState.BeforeAttributeName);}::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataEndTag(t, r, org.jsoup.parser.TokeniserState.ScriptDataEscaped)	false
org.jsoup.parser.TokeniserState::::888::::30055::::30818::::switch (c) {    case '\t' :    case '\n' :    case '\r' :    case '\f' :    case ' ' :        t.transition(org.jsoup.parser.TokeniserState.BeforeAttributeName);        break;    case '/' :        t.transition(org.jsoup.parser.TokeniserState.SelfClosingStartTag);        break;    case '>' :        t.emitTagPending();        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case org.jsoup.parser.TokeniserState.eof :        t.eofError(this);        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    default :        t.error(this);        r.unconsume();        t.transition(org.jsoup.parser.TokeniserState.BeforeAttributeName);}::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataEndTag(t, r, org.jsoup.parser.TokeniserState.ScriptData)	false
org.jsoup.parser.TokeniserState::::888::::30055::::30818::::switch (c) {    case '\t' :    case '\n' :    case '\r' :    case '\f' :    case ' ' :        t.transition(org.jsoup.parser.TokeniserState.BeforeAttributeName);        break;    case '/' :        t.transition(org.jsoup.parser.TokeniserState.SelfClosingStartTag);        break;    case '>' :        t.emitTagPending();        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case org.jsoup.parser.TokeniserState.eof :        t.eofError(this);        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    default :        t.error(this);        r.unconsume();        t.transition(org.jsoup.parser.TokeniserState.BeforeAttributeName);}::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataEndTag(t, r, org.jsoup.parser.TokeniserState.Rawtext)	false
org.jsoup.parser.TokeniserState::::888::::30055::::30818::::switch (c) {    case '\t' :    case '\n' :    case '\r' :    case '\f' :    case ' ' :        t.transition(org.jsoup.parser.TokeniserState.BeforeAttributeName);        break;    case '/' :        t.transition(org.jsoup.parser.TokeniserState.SelfClosingStartTag);        break;    case '>' :        t.emitTagPending();        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case org.jsoup.parser.TokeniserState.eof :        t.eofError(this);        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    default :        t.error(this);        r.unconsume();        t.transition(org.jsoup.parser.TokeniserState.BeforeAttributeName);}::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataDoubleEscapeTag(t, r, org.jsoup.parser.TokeniserState.ScriptDataEscaped, org.jsoup.parser.TokeniserState.ScriptDataDoubleEscaped)	false
org.jsoup.parser.TokeniserState::::888::::30055::::30818::::switch (c) {    case '\t' :    case '\n' :    case '\r' :    case '\f' :    case ' ' :        t.transition(org.jsoup.parser.TokeniserState.BeforeAttributeName);        break;    case '/' :        t.transition(org.jsoup.parser.TokeniserState.SelfClosingStartTag);        break;    case '>' :        t.emitTagPending();        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    case org.jsoup.parser.TokeniserState.eof :        t.eofError(this);        t.transition(org.jsoup.parser.TokeniserState.Data);        break;    default :        t.error(this);        r.unconsume();        t.transition(org.jsoup.parser.TokeniserState.BeforeAttributeName);}::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataDoubleEscapeTag(t, r, org.jsoup.parser.TokeniserState.ScriptDataDoubleEscaped, org.jsoup.parser.TokeniserState.ScriptDataEscaped)	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"tr"	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32390::::32397::::formatEl::::remainingA	false
org.jsoup.parser.HtmlTreeBuilderState::::645::::31858::::32001::::org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("noscript"))	false
org.jsoup.parser.HtmlTreeBuilderState::::661::::32850::::32864::::tb.error(this)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("nobr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18855::::26999::::if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {    tb.reconstructFormattingElements();    org.jsoup.nodes.Element el = tb.insert(startTag);    tb.pushActiveFormattingElements(el);}else    if (name.equals("nobr")) {        tb.reconstructFormattingElements();        if (tb.inScope("nobr")) {            tb.error(this);            tb.process(new org.jsoup.parser.Token.EndTag("nobr"));            tb.reconstructFormattingElements();        }        org.jsoup.nodes.Element el = tb.insert(startTag);        tb.pushActiveFormattingElements(el);    }else        if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {            tb.reconstructFormattingElements();            tb.insert(startTag);            tb.insertMarkerToFormattingElements();            tb.framesetOk(false);        }else            if (name.equals("table")) {                if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                }                tb.insert(startTag);                tb.framesetOk(false);                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);            }else                if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                    tb.reconstructFormattingElements();                    tb.insertEmpty(startTag);                    tb.framesetOk(false);                }else                    if (name.equals("input")) {                        tb.reconstructFormattingElements();                        org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                        if (!(el.attr("type").equalsIgnoreCase("hidden")))                            tb.framesetOk(false);                    }else                        if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                            tb.insertEmpty(startTag);                        }else                            if (name.equals("hr")) {                                if (tb.inButtonScope("p")) {                                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                                }                                tb.insertEmpty(startTag);                                tb.framesetOk(false);                            }else                                if (name.equals("image")) {                                    startTag.name("img");                                    return tb.process(startTag);                                }else                                    if (name.equals("isindex")) {                                        tb.error(this);                                        if ((tb.getFormElement()) != null)                                            return false;                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                        tb.process(new org.jsoup.parser.Token.StartTag("form"));                                        if (startTag.attributes.hasKey("action")) {                                            org.jsoup.nodes.Element form = tb.getFormElement();                                            form.attr("action", startTag.attributes.get("action"));                                        }                                        tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                        tb.process(new org.jsoup.parser.Token.StartTag("label"));                                        java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                        tb.process(new org.jsoup.parser.Token.Character(prompt));                                        org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                        for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                            if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                inputAttribs.put(attr);                                        }                                        inputAttribs.put("name", "isindex");                                        tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                        tb.process(new org.jsoup.parser.Token.EndTag("label"));                                        tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                        tb.process(new org.jsoup.parser.Token.EndTag("form"));                                    }else                                        if (name.equals("textarea")) {                                            tb.insert(startTag);                                            tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                            tb.markInsertionMode();                                            tb.framesetOk(false);                                            tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                        }else                                            if (name.equals("xmp")) {                                                if (tb.inButtonScope("p")) {                                                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                }                                                tb.reconstructFormattingElements();                                                tb.framesetOk(false);                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                            }else                                                if (name.equals("iframe")) {                                                    tb.framesetOk(false);                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                }else                                                    if (name.equals("noembed")) {                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("select")) {                                                            tb.reconstructFormattingElements();                                                            tb.insert(startTag);                                                            tb.framesetOk(false);                                                            org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                            if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                            else                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                        }else                                                            if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                if (tb.currentElement().nodeName().equals("option"))                                                                    tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                tb.reconstructFormattingElements();                                                                tb.insert(startTag);                                                            }else                                                                if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                    if (tb.inScope("ruby")) {                                                                        tb.generateImpliedEndTags();                                                                        if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                            tb.error(this);                                                                            tb.popStackToBefore("ruby");                                                                        }                                                                        tb.insert(startTag);                                                                    }                                                                }else                                                                    if (name.equals("math")) {                                                                        tb.reconstructFormattingElements();                                                                        tb.insert(startTag);                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                    }else                                                                        if (name.equals("svg")) {                                                                            tb.reconstructFormattingElements();                                                                            tb.insert(startTag);                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                        }else                                                                            if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                tb.error(this);                                                                                return false;                                                                            }else {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                            }::::INSERT::::STATEMENT::::tb.process(startTag)	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18070::::26999::::if (name.equals("a")) {    if ((tb.getActiveFormattingElement("a")) != null) {        tb.error(this);        tb.process(new org.jsoup.parser.Token.EndTag("a"));        org.jsoup.nodes.Element remainingA = tb.getFromStack("a");        if (remainingA != null) {            tb.removeFromActiveFormattingElements(remainingA);            tb.removeFromStack(remainingA);        }    }    tb.reconstructFormattingElements();    org.jsoup.nodes.Element a = tb.insert(startTag);    tb.pushActiveFormattingElements(a);}else    if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {        tb.reconstructFormattingElements();        org.jsoup.nodes.Element el = tb.insert(startTag);        tb.pushActiveFormattingElements(el);    }else        if (name.equals("nobr")) {            tb.reconstructFormattingElements();            if (tb.inScope("nobr")) {                tb.error(this);                tb.process(new org.jsoup.parser.Token.EndTag("nobr"));                tb.reconstructFormattingElements();            }            org.jsoup.nodes.Element el = tb.insert(startTag);            tb.pushActiveFormattingElements(el);        }else            if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {                tb.reconstructFormattingElements();                tb.insert(startTag);                tb.insertMarkerToFormattingElements();                tb.framesetOk(false);            }else                if (name.equals("table")) {                    if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                        tb.process(new org.jsoup.parser.Token.EndTag("p"));                    }                    tb.insert(startTag);                    tb.framesetOk(false);                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                }else                    if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                        tb.reconstructFormattingElements();                        tb.insertEmpty(startTag);                        tb.framesetOk(false);                    }else                        if (name.equals("input")) {                            tb.reconstructFormattingElements();                            org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                            if (!(el.attr("type").equalsIgnoreCase("hidden")))                                tb.framesetOk(false);                        }else                            if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                                tb.insertEmpty(startTag);                            }else                                if (name.equals("hr")) {                                    if (tb.inButtonScope("p")) {                                        tb.process(new org.jsoup.parser.Token.EndTag("p"));                                    }                                    tb.insertEmpty(startTag);                                    tb.framesetOk(false);                                }else                                    if (name.equals("image")) {                                        startTag.name("img");                                        return tb.process(startTag);                                    }else                                        if (name.equals("isindex")) {                                            tb.error(this);                                            if ((tb.getFormElement()) != null)                                                return false;                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                            tb.process(new org.jsoup.parser.Token.StartTag("form"));                                            if (startTag.attributes.hasKey("action")) {                                                org.jsoup.nodes.Element form = tb.getFormElement();                                                form.attr("action", startTag.attributes.get("action"));                                            }                                            tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                            tb.process(new org.jsoup.parser.Token.StartTag("label"));                                            java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                            tb.process(new org.jsoup.parser.Token.Character(prompt));                                            org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                            for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                                if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                    inputAttribs.put(attr);                                            }                                            inputAttribs.put("name", "isindex");                                            tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                            tb.process(new org.jsoup.parser.Token.EndTag("label"));                                            tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                            tb.process(new org.jsoup.parser.Token.EndTag("form"));                                        }else                                            if (name.equals("textarea")) {                                                tb.insert(startTag);                                                tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                                tb.markInsertionMode();                                                tb.framesetOk(false);                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                            }else                                                if (name.equals("xmp")) {                                                    if (tb.inButtonScope("p")) {                                                        tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                    }                                                    tb.reconstructFormattingElements();                                                    tb.framesetOk(false);                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                }else                                                    if (name.equals("iframe")) {                                                        tb.framesetOk(false);                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("noembed")) {                                                            org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                        }else                                                            if (name.equals("select")) {                                                                tb.reconstructFormattingElements();                                                                tb.insert(startTag);                                                                tb.framesetOk(false);                                                                org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                                if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                                else                                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                            }else                                                                if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                    if (tb.currentElement().nodeName().equals("option"))                                                                        tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                    tb.reconstructFormattingElements();                                                                    tb.insert(startTag);                                                                }else                                                                    if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                        if (tb.inScope("ruby")) {                                                                            tb.generateImpliedEndTags();                                                                            if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                                tb.error(this);                                                                                tb.popStackToBefore("ruby");                                                                            }                                                                            tb.insert(startTag);                                                                        }                                                                    }else                                                                        if (name.equals("math")) {                                                                            tb.reconstructFormattingElements();                                                                            tb.insert(startTag);                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                        }else                                                                            if (name.equals("svg")) {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                                tb.tokeniser.acknowledgeSelfClosingFlag();                                                                            }else                                                                                if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                    tb.error(this);                                                                                    return false;                                                                                }else {                                                                                    tb.reconstructFormattingElements();                                                                                    tb.insert(startTag);                                                                                }::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"thead"	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"tfoot"	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18855::::26999::::if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {    tb.reconstructFormattingElements();    org.jsoup.nodes.Element el = tb.insert(startTag);    tb.pushActiveFormattingElements(el);}else    if (name.equals("nobr")) {        tb.reconstructFormattingElements();        if (tb.inScope("nobr")) {            tb.error(this);            tb.process(new org.jsoup.parser.Token.EndTag("nobr"));            tb.reconstructFormattingElements();        }        org.jsoup.nodes.Element el = tb.insert(startTag);        tb.pushActiveFormattingElements(el);    }else        if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {            tb.reconstructFormattingElements();            tb.insert(startTag);            tb.insertMarkerToFormattingElements();            tb.framesetOk(false);        }else            if (name.equals("table")) {                if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                }                tb.insert(startTag);                tb.framesetOk(false);                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);            }else                if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                    tb.reconstructFormattingElements();                    tb.insertEmpty(startTag);                    tb.framesetOk(false);                }else                    if (name.equals("input")) {                        tb.reconstructFormattingElements();                        org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                        if (!(el.attr("type").equalsIgnoreCase("hidden")))                            tb.framesetOk(false);                    }else                        if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                            tb.insertEmpty(startTag);                        }else                            if (name.equals("hr")) {                                if (tb.inButtonScope("p")) {                                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                                }                                tb.insertEmpty(startTag);                                tb.framesetOk(false);                            }else                                if (name.equals("image")) {                                    startTag.name("img");                                    return tb.process(startTag);                                }else                                    if (name.equals("isindex")) {                                        tb.error(this);                                        if ((tb.getFormElement()) != null)                                            return false;                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                        tb.process(new org.jsoup.parser.Token.StartTag("form"));                                        if (startTag.attributes.hasKey("action")) {                                            org.jsoup.nodes.Element form = tb.getFormElement();                                            form.attr("action", startTag.attributes.get("action"));                                        }                                        tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                        tb.process(new org.jsoup.parser.Token.StartTag("label"));                                        java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                        tb.process(new org.jsoup.parser.Token.Character(prompt));                                        org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                        for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                            if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                inputAttribs.put(attr);                                        }                                        inputAttribs.put("name", "isindex");                                        tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                        tb.process(new org.jsoup.parser.Token.EndTag("label"));                                        tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                        tb.process(new org.jsoup.parser.Token.EndTag("form"));                                    }else                                        if (name.equals("textarea")) {                                            tb.insert(startTag);                                            tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                            tb.markInsertionMode();                                            tb.framesetOk(false);                                            tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                        }else                                            if (name.equals("xmp")) {                                                if (tb.inButtonScope("p")) {                                                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                }                                                tb.reconstructFormattingElements();                                                tb.framesetOk(false);                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                            }else                                                if (name.equals("iframe")) {                                                    tb.framesetOk(false);                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                }else                                                    if (name.equals("noembed")) {                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("select")) {                                                            tb.reconstructFormattingElements();                                                            tb.insert(startTag);                                                            tb.framesetOk(false);                                                            org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                            if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                            else                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                        }else                                                            if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                if (tb.currentElement().nodeName().equals("option"))                                                                    tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                tb.reconstructFormattingElements();                                                                tb.insert(startTag);                                                            }else                                                                if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                    if (tb.inScope("ruby")) {                                                                        tb.generateImpliedEndTags();                                                                        if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                            tb.error(this);                                                                            tb.popStackToBefore("ruby");                                                                        }                                                                        tb.insert(startTag);                                                                    }                                                                }else                                                                    if (name.equals("math")) {                                                                        tb.reconstructFormattingElements();                                                                        tb.insert(startTag);                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                    }else                                                                        if (name.equals("svg")) {                                                                            tb.reconstructFormattingElements();                                                                            tb.insert(startTag);                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                        }else                                                                            if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                tb.error(this);                                                                                return false;                                                                            }else {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                            }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs))	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32612::::32864::::if (!(tb.inScope(formatEl.nodeName()))) {    tb.error(this);    return false;}else    if ((tb.currentElement()) != formatEl)        tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("optgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17521::::26999::::if (name.equals("button")) {    if (tb.inButtonScope("button")) {        tb.error(this);        tb.process(new org.jsoup.parser.Token.EndTag("button"));        tb.process(startTag);    }else {        tb.reconstructFormattingElements();        tb.insert(startTag);        tb.framesetOk(false);    }}else    if (name.equals("a")) {        if ((tb.getActiveFormattingElement("a")) != null) {            tb.error(this);            tb.process(new org.jsoup.parser.Token.EndTag("a"));            org.jsoup.nodes.Element remainingA = tb.getFromStack("a");            if (remainingA != null) {                tb.removeFromActiveFormattingElements(remainingA);                tb.removeFromStack(remainingA);            }        }        tb.reconstructFormattingElements();        org.jsoup.nodes.Element a = tb.insert(startTag);        tb.pushActiveFormattingElements(a);    }else        if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {            tb.reconstructFormattingElements();            org.jsoup.nodes.Element el = tb.insert(startTag);            tb.pushActiveFormattingElements(el);        }else            if (name.equals("nobr")) {                tb.reconstructFormattingElements();                if (tb.inScope("nobr")) {                    tb.error(this);                    tb.process(new org.jsoup.parser.Token.EndTag("nobr"));                    tb.reconstructFormattingElements();                }                org.jsoup.nodes.Element el = tb.insert(startTag);                tb.pushActiveFormattingElements(el);            }else                if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {                    tb.reconstructFormattingElements();                    tb.insert(startTag);                    tb.insertMarkerToFormattingElements();                    tb.framesetOk(false);                }else                    if (name.equals("table")) {                        if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                            tb.process(new org.jsoup.parser.Token.EndTag("p"));                        }                        tb.insert(startTag);                        tb.framesetOk(false);                        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                    }else                        if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                            tb.reconstructFormattingElements();                            tb.insertEmpty(startTag);                            tb.framesetOk(false);                        }else                            if (name.equals("input")) {                                tb.reconstructFormattingElements();                                org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                                if (!(el.attr("type").equalsIgnoreCase("hidden")))                                    tb.framesetOk(false);                            }else                                if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                                    tb.insertEmpty(startTag);                                }else                                    if (name.equals("hr")) {                                        if (tb.inButtonScope("p")) {                                            tb.process(new org.jsoup.parser.Token.EndTag("p"));                                        }                                        tb.insertEmpty(startTag);                                        tb.framesetOk(false);                                    }else                                        if (name.equals("image")) {                                            startTag.name("img");                                            return tb.process(startTag);                                        }else                                            if (name.equals("isindex")) {                                                tb.error(this);                                                if ((tb.getFormElement()) != null)                                                    return false;                                                tb.tokeniser.acknowledgeSelfClosingFlag();                                                tb.process(new org.jsoup.parser.Token.StartTag("form"));                                                if (startTag.attributes.hasKey("action")) {                                                    org.jsoup.nodes.Element form = tb.getFormElement();                                                    form.attr("action", startTag.attributes.get("action"));                                                }                                                tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                                tb.process(new org.jsoup.parser.Token.StartTag("label"));                                                java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                                tb.process(new org.jsoup.parser.Token.Character(prompt));                                                org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                                for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                                    if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                        inputAttribs.put(attr);                                                }                                                inputAttribs.put("name", "isindex");                                                tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                                tb.process(new org.jsoup.parser.Token.EndTag("label"));                                                tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                                tb.process(new org.jsoup.parser.Token.EndTag("form"));                                            }else                                                if (name.equals("textarea")) {                                                    tb.insert(startTag);                                                    tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                                    tb.markInsertionMode();                                                    tb.framesetOk(false);                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                                }else                                                    if (name.equals("xmp")) {                                                        if (tb.inButtonScope("p")) {                                                            tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                        }                                                        tb.reconstructFormattingElements();                                                        tb.framesetOk(false);                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("iframe")) {                                                            tb.framesetOk(false);                                                            org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                        }else                                                            if (name.equals("noembed")) {                                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                            }else                                                                if (name.equals("select")) {                                                                    tb.reconstructFormattingElements();                                                                    tb.insert(startTag);                                                                    tb.framesetOk(false);                                                                    org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                                    if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                                    else                                                                        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                                }else                                                                    if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                        if (tb.currentElement().nodeName().equals("option"))                                                                            tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                        tb.reconstructFormattingElements();                                                                        tb.insert(startTag);                                                                    }else                                                                        if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                            if (tb.inScope("ruby")) {                                                                                tb.generateImpliedEndTags();                                                                                if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                                    tb.error(this);                                                                                    tb.popStackToBefore("ruby");                                                                                }                                                                                tb.insert(startTag);                                                                            }                                                                        }else                                                                            if (name.equals("math")) {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                                tb.tokeniser.acknowledgeSelfClosingFlag();                                                                            }else                                                                                if (name.equals("svg")) {                                                                                    tb.reconstructFormattingElements();                                                                                    tb.insert(startTag);                                                                                    tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                }else                                                                                    if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                        tb.error(this);                                                                                        return false;                                                                                    }else {                                                                                        tb.reconstructFormattingElements();                                                                                        tb.insert(startTag);                                                                                    }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("option"))	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18089::::name.equals("a")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("br"))	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32612::::32864::::if (!(tb.inScope(formatEl.nodeName()))) {    tb.error(this);    return false;}else    if ((tb.currentElement()) != formatEl)        tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("colgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::412::::18675::::18709::::tb.reconstructFormattingElements()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("br"))	false
org.jsoup.parser.HtmlTreeBuilderState::::649::::32115::::37512::::OUTER : for (int i = 0; i < 8; i++) {    org.jsoup.nodes.Element formatEl = tb.getActiveFormattingElement(name);    if (formatEl == null)        return anyOtherEndTag(t, tb);    else        if (!(tb.onStack(formatEl))) {            tb.error(this);            tb.removeFromActiveFormattingElements(formatEl);            return true;        }else            if (!(tb.inScope(formatEl.nodeName()))) {                tb.error(this);                return false;            }else                if ((tb.currentElement()) != formatEl)                    tb.error(this);    org.jsoup.nodes.Element furthestBlock = null;    org.jsoup.nodes.Element commonAncestor = null;    boolean seenFormattingElement = false;    java.util.LinkedList<org.jsoup.nodes.Element> stack = tb.getStack();    for (int si = 0; (si < (stack.size())) && (si < 64); si++) {        org.jsoup.nodes.Element el = stack.get(si);        if (el == formatEl) {            commonAncestor = stack.get((si - 1));            seenFormattingElement = true;        }else            if (seenFormattingElement && (tb.isSpecial(el))) {                furthestBlock = el;                break;            }    }    if (furthestBlock == null) {        tb.popStackToClose(formatEl.nodeName());        tb.removeFromActiveFormattingElements(formatEl);        return true;    }    org.jsoup.nodes.Element node = furthestBlock;    org.jsoup.nodes.Element lastNode = furthestBlock;    INNER : for (int j = 0; j < 3; j++) {        if (tb.onStack(node))            node = tb.aboveOnStack(node);        if (!(tb.isInActiveFormattingElements(node))) {            tb.removeFromStack(node);            continue INNER;        }else            if (node == formatEl)                break INNER;        org.jsoup.nodes.Element replacement = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(node.nodeName()), tb.getBaseUri());        tb.replaceActiveFormattingElement(node, replacement);        tb.replaceOnStack(node, replacement);        node = replacement;        if (lastNode == furthestBlock) {        }        if ((lastNode.parent()) != null)            lastNode.remove();        node.appendChild(lastNode);        lastNode = node;    }    if (org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")) {        if ((lastNode.parent()) != null)            lastNode.remove();        tb.insertInFosterParent(lastNode);    }else {        if ((lastNode.parent()) != null)            lastNode.remove();        commonAncestor.appendChild(lastNode);    }    org.jsoup.nodes.Element adopter = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(name), tb.getBaseUri());    org.jsoup.nodes.Node[] childNodes = furthestBlock.childNodes().toArray(new org.jsoup.nodes.Node[furthestBlock.childNodeSize()]);    for (org.jsoup.nodes.Node childNode : childNodes) {        adopter.appendChild(childNode);    }    furthestBlock.appendChild(adopter);    tb.removeFromActiveFormattingElements(formatEl);    tb.removeFromStack(formatEl);    tb.insertOnStackAfter(furthestBlock, adopter);}::::INSERT::::STATEMENT::::if (lastNode == furthestBlock) {}	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32628::::32635::::formatEl::::remainingA	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32374::::32864::::if (!(tb.onStack(formatEl))) {    tb.error(this);    tb.removeFromActiveFormattingElements(formatEl);    return true;}else    if (!(tb.inScope(formatEl.nodeName()))) {        tb.error(this);        return false;    }else        if ((tb.currentElement()) != formatEl)            tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("button"))	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33743::::33755::::furthestBlock::::form	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30134::::name.equals("li")::::INSERT::::STATEMENT::::if (node == formatEl)    break INNER;	false
org.jsoup.parser.HtmlTreeBuilderState::::721::::36499::::36516::::lastNode.remove()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("noscript"))	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"tbody"	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30134::::name.equals("li")::::INSERT::::STATEMENT::::org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"li"	false
org.jsoup.parser.HtmlTreeBuilderState::::651::::32261::::32268::::formatEl::::remainingA	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"li"	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32808::::32815::::formatEl::::remainingA	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17521::::26999::::if (name.equals("button")) {    if (tb.inButtonScope("button")) {        tb.error(this);        tb.process(new org.jsoup.parser.Token.EndTag("button"));        tb.process(startTag);    }else {        tb.reconstructFormattingElements();        tb.insert(startTag);        tb.framesetOk(false);    }}else    if (name.equals("a")) {        if ((tb.getActiveFormattingElement("a")) != null) {            tb.error(this);            tb.process(new org.jsoup.parser.Token.EndTag("a"));            org.jsoup.nodes.Element remainingA = tb.getFromStack("a");            if (remainingA != null) {                tb.removeFromActiveFormattingElements(remainingA);                tb.removeFromStack(remainingA);            }        }        tb.reconstructFormattingElements();        org.jsoup.nodes.Element a = tb.insert(startTag);        tb.pushActiveFormattingElements(a);    }else        if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {            tb.reconstructFormattingElements();            org.jsoup.nodes.Element el = tb.insert(startTag);            tb.pushActiveFormattingElements(el);        }else            if (name.equals("nobr")) {                tb.reconstructFormattingElements();                if (tb.inScope("nobr")) {                    tb.error(this);                    tb.process(new org.jsoup.parser.Token.EndTag("nobr"));                    tb.reconstructFormattingElements();                }                org.jsoup.nodes.Element el = tb.insert(startTag);                tb.pushActiveFormattingElements(el);            }else                if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {                    tb.reconstructFormattingElements();                    tb.insert(startTag);                    tb.insertMarkerToFormattingElements();                    tb.framesetOk(false);                }else                    if (name.equals("table")) {                        if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                            tb.process(new org.jsoup.parser.Token.EndTag("p"));                        }                        tb.insert(startTag);                        tb.framesetOk(false);                        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                    }else                        if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                            tb.reconstructFormattingElements();                            tb.insertEmpty(startTag);                            tb.framesetOk(false);                        }else                            if (name.equals("input")) {                                tb.reconstructFormattingElements();                                org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                                if (!(el.attr("type").equalsIgnoreCase("hidden")))                                    tb.framesetOk(false);                            }else                                if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                                    tb.insertEmpty(startTag);                                }else                                    if (name.equals("hr")) {                                        if (tb.inButtonScope("p")) {                                            tb.process(new org.jsoup.parser.Token.EndTag("p"));                                        }                                        tb.insertEmpty(startTag);                                        tb.framesetOk(false);                                    }else                                        if (name.equals("image")) {                                            startTag.name("img");                                            return tb.process(startTag);                                        }else                                            if (name.equals("isindex")) {                                                tb.error(this);                                                if ((tb.getFormElement()) != null)                                                    return false;                                                tb.tokeniser.acknowledgeSelfClosingFlag();                                                tb.process(new org.jsoup.parser.Token.StartTag("form"));                                                if (startTag.attributes.hasKey("action")) {                                                    org.jsoup.nodes.Element form = tb.getFormElement();                                                    form.attr("action", startTag.attributes.get("action"));                                                }                                                tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                                tb.process(new org.jsoup.parser.Token.StartTag("label"));                                                java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                                tb.process(new org.jsoup.parser.Token.Character(prompt));                                                org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                                for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                                    if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                        inputAttribs.put(attr);                                                }                                                inputAttribs.put("name", "isindex");                                                tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                                tb.process(new org.jsoup.parser.Token.EndTag("label"));                                                tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                                tb.process(new org.jsoup.parser.Token.EndTag("form"));                                            }else                                                if (name.equals("textarea")) {                                                    tb.insert(startTag);                                                    tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                                    tb.markInsertionMode();                                                    tb.framesetOk(false);                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                                }else                                                    if (name.equals("xmp")) {                                                        if (tb.inButtonScope("p")) {                                                            tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                        }                                                        tb.reconstructFormattingElements();                                                        tb.framesetOk(false);                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("iframe")) {                                                            tb.framesetOk(false);                                                            org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                        }else                                                            if (name.equals("noembed")) {                                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                            }else                                                                if (name.equals("select")) {                                                                    tb.reconstructFormattingElements();                                                                    tb.insert(startTag);                                                                    tb.framesetOk(false);                                                                    org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                                    if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                                    else                                                                        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                                }else                                                                    if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                        if (tb.currentElement().nodeName().equals("option"))                                                                            tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                        tb.reconstructFormattingElements();                                                                        tb.insert(startTag);                                                                    }else                                                                        if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                            if (tb.inScope("ruby")) {                                                                                tb.generateImpliedEndTags();                                                                                if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                                    tb.error(this);                                                                                    tb.popStackToBefore("ruby");                                                                                }                                                                                tb.insert(startTag);                                                                            }                                                                        }else                                                                            if (name.equals("math")) {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                                tb.tokeniser.acknowledgeSelfClosingFlag();                                                                            }else                                                                                if (name.equals("svg")) {                                                                                    tb.reconstructFormattingElements();                                                                                    tb.insert(startTag);                                                                                    tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                }else                                                                                    if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                        tb.error(this);                                                                                        return false;                                                                                    }else {                                                                                        tb.reconstructFormattingElements();                                                                                        tb.insert(startTag);                                                                                    }::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"noframes"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"button"	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"h6"	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"h5"	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"h4"	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"h3"	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"h2"	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"h1"	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"thead"	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"tfoot"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"button"	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18855::::26999::::if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {    tb.reconstructFormattingElements();    org.jsoup.nodes.Element el = tb.insert(startTag);    tb.pushActiveFormattingElements(el);}else    if (name.equals("nobr")) {        tb.reconstructFormattingElements();        if (tb.inScope("nobr")) {            tb.error(this);            tb.process(new org.jsoup.parser.Token.EndTag("nobr"));            tb.reconstructFormattingElements();        }        org.jsoup.nodes.Element el = tb.insert(startTag);        tb.pushActiveFormattingElements(el);    }else        if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {            tb.reconstructFormattingElements();            tb.insert(startTag);            tb.insertMarkerToFormattingElements();            tb.framesetOk(false);        }else            if (name.equals("table")) {                if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                }                tb.insert(startTag);                tb.framesetOk(false);                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);            }else                if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                    tb.reconstructFormattingElements();                    tb.insertEmpty(startTag);                    tb.framesetOk(false);                }else                    if (name.equals("input")) {                        tb.reconstructFormattingElements();                        org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                        if (!(el.attr("type").equalsIgnoreCase("hidden")))                            tb.framesetOk(false);                    }else                        if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                            tb.insertEmpty(startTag);                        }else                            if (name.equals("hr")) {                                if (tb.inButtonScope("p")) {                                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                                }                                tb.insertEmpty(startTag);                                tb.framesetOk(false);                            }else                                if (name.equals("image")) {                                    startTag.name("img");                                    return tb.process(startTag);                                }else                                    if (name.equals("isindex")) {                                        tb.error(this);                                        if ((tb.getFormElement()) != null)                                            return false;                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                        tb.process(new org.jsoup.parser.Token.StartTag("form"));                                        if (startTag.attributes.hasKey("action")) {                                            org.jsoup.nodes.Element form = tb.getFormElement();                                            form.attr("action", startTag.attributes.get("action"));                                        }                                        tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                        tb.process(new org.jsoup.parser.Token.StartTag("label"));                                        java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                        tb.process(new org.jsoup.parser.Token.Character(prompt));                                        org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                        for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                            if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                inputAttribs.put(attr);                                        }                                        inputAttribs.put("name", "isindex");                                        tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                        tb.process(new org.jsoup.parser.Token.EndTag("label"));                                        tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                        tb.process(new org.jsoup.parser.Token.EndTag("form"));                                    }else                                        if (name.equals("textarea")) {                                            tb.insert(startTag);                                            tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                            tb.markInsertionMode();                                            tb.framesetOk(false);                                            tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                        }else                                            if (name.equals("xmp")) {                                                if (tb.inButtonScope("p")) {                                                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                }                                                tb.reconstructFormattingElements();                                                tb.framesetOk(false);                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                            }else                                                if (name.equals("iframe")) {                                                    tb.framesetOk(false);                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                }else                                                    if (name.equals("noembed")) {                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("select")) {                                                            tb.reconstructFormattingElements();                                                            tb.insert(startTag);                                                            tb.framesetOk(false);                                                            org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                            if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                            else                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                        }else                                                            if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                if (tb.currentElement().nodeName().equals("option"))                                                                    tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                tb.reconstructFormattingElements();                                                                tb.insert(startTag);                                                            }else                                                                if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                    if (tb.inScope("ruby")) {                                                                        tb.generateImpliedEndTags();                                                                        if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                            tb.error(this);                                                                            tb.popStackToBefore("ruby");                                                                        }                                                                        tb.insert(startTag);                                                                    }                                                                }else                                                                    if (name.equals("math")) {                                                                        tb.reconstructFormattingElements();                                                                        tb.insert(startTag);                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                    }else                                                                        if (name.equals("svg")) {                                                                            tb.reconstructFormattingElements();                                                                            tb.insert(startTag);                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                        }else                                                                            if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                tb.error(this);                                                                                return false;                                                                            }else {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                            }::::INSERT::::STATEMENT::::if (node == formatEl)    break INNER;	false
org.jsoup.parser.HtmlTreeBuilderState::::649::::32115::::37512::::OUTER : for (int i = 0; i < 8; i++) {    org.jsoup.nodes.Element formatEl = tb.getActiveFormattingElement(name);    if (formatEl == null)        return anyOtherEndTag(t, tb);    else        if (!(tb.onStack(formatEl))) {            tb.error(this);            tb.removeFromActiveFormattingElements(formatEl);            return true;        }else            if (!(tb.inScope(formatEl.nodeName()))) {                tb.error(this);                return false;            }else                if ((tb.currentElement()) != formatEl)                    tb.error(this);    org.jsoup.nodes.Element furthestBlock = null;    org.jsoup.nodes.Element commonAncestor = null;    boolean seenFormattingElement = false;    java.util.LinkedList<org.jsoup.nodes.Element> stack = tb.getStack();    for (int si = 0; (si < (stack.size())) && (si < 64); si++) {        org.jsoup.nodes.Element el = stack.get(si);        if (el == formatEl) {            commonAncestor = stack.get((si - 1));            seenFormattingElement = true;        }else            if (seenFormattingElement && (tb.isSpecial(el))) {                furthestBlock = el;                break;            }    }    if (furthestBlock == null) {        tb.popStackToClose(formatEl.nodeName());        tb.removeFromActiveFormattingElements(formatEl);        return true;    }    org.jsoup.nodes.Element node = furthestBlock;    org.jsoup.nodes.Element lastNode = furthestBlock;    INNER : for (int j = 0; j < 3; j++) {        if (tb.onStack(node))            node = tb.aboveOnStack(node);        if (!(tb.isInActiveFormattingElements(node))) {            tb.removeFromStack(node);            continue INNER;        }else            if (node == formatEl)                break INNER;        org.jsoup.nodes.Element replacement = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(node.nodeName()), tb.getBaseUri());        tb.replaceActiveFormattingElement(node, replacement);        tb.replaceOnStack(node, replacement);        node = replacement;        if (lastNode == furthestBlock) {        }        if ((lastNode.parent()) != null)            lastNode.remove();        node.appendChild(lastNode);        lastNode = node;    }    if (org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")) {        if ((lastNode.parent()) != null)            lastNode.remove();        tb.insertInFosterParent(lastNode);    }else {        if ((lastNode.parent()) != null)            lastNode.remove();        commonAncestor.appendChild(lastNode);    }    org.jsoup.nodes.Element adopter = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(name), tb.getBaseUri());    org.jsoup.nodes.Node[] childNodes = furthestBlock.childNodes().toArray(new org.jsoup.nodes.Node[furthestBlock.childNodeSize()]);    for (org.jsoup.nodes.Node childNode : childNodes) {        adopter.appendChild(childNode);    }    furthestBlock.appendChild(adopter);    tb.removeFromActiveFormattingElements(formatEl);    tb.removeFromStack(formatEl);    tb.insertOnStackAfter(furthestBlock, adopter);}::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("p"))	false
org.jsoup.parser.HtmlTreeBuilder::::287::::9916::::9919::::next::::headElement	false
org.jsoup.parser.HtmlTreeBuilderState::::673::::33589::::33617::::seenFormattingElement = true::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("th"))	false
org.jsoup.parser.HtmlTreeBuilderState::::673::::33589::::33617::::seenFormattingElement = true::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("td"))	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"h6"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"h5"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"h4"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"h3"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"h2"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"h1"	false
org.jsoup.parser.HtmlTreeBuilderState::::726::::36762::::36774::::furthestBlock::::form	false
org.jsoup.parser.HtmlTreeBuilderState::::671::::33469::::33476::::formatEl::::remainingA	false
org.jsoup.parser.HtmlTreeBuilderState::::726::::36806::::36818::::furthestBlock::::form	false
org.jsoup.parser.HtmlTreeBuilderState::::784::::39568::::39579::::return true::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("body"))	false
org.jsoup.parser.HtmlTreeBuilderState::::645::::31858::::32001::::org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("li"))	false
org.jsoup.parser.HtmlTreeBuilderState::::687::::34474::::34486::::furthestBlock::::form	false
org.jsoup.parser.TokeniserState::::810::::27239::::27252::::value.length()::::DELETE::::INFIX	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"caption"	false
org.jsoup.parser.HtmlTreeBuilderState::::688::::34536::::34548::::furthestBlock::::form	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32374::::32864::::if (!(tb.onStack(formatEl))) {    tb.error(this);    tb.removeFromActiveFormattingElements(formatEl);    return true;}else    if (!(tb.inScope(formatEl.nodeName()))) {        tb.error(this);        return false;    }else        if ((tb.currentElement()) != formatEl)            tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tbody"))	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32374::::32864::::if (!(tb.onStack(formatEl))) {    tb.error(this);    tb.removeFromActiveFormattingElements(formatEl);    return true;}else    if (!(tb.inScope(formatEl.nodeName()))) {        tb.error(this);        return false;    }else        if ((tb.currentElement()) != formatEl)            tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32785::::32803::::tb.currentElement()::::DELETE::::INFIX	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"dt"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"dd"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"table"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18070::::26999::::if (name.equals("a")) {    if ((tb.getActiveFormattingElement("a")) != null) {        tb.error(this);        tb.process(new org.jsoup.parser.Token.EndTag("a"));        org.jsoup.nodes.Element remainingA = tb.getFromStack("a");        if (remainingA != null) {            tb.removeFromActiveFormattingElements(remainingA);            tb.removeFromStack(remainingA);        }    }    tb.reconstructFormattingElements();    org.jsoup.nodes.Element a = tb.insert(startTag);    tb.pushActiveFormattingElements(a);}else    if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {        tb.reconstructFormattingElements();        org.jsoup.nodes.Element el = tb.insert(startTag);        tb.pushActiveFormattingElements(el);    }else        if (name.equals("nobr")) {            tb.reconstructFormattingElements();            if (tb.inScope("nobr")) {                tb.error(this);                tb.process(new org.jsoup.parser.Token.EndTag("nobr"));                tb.reconstructFormattingElements();            }            org.jsoup.nodes.Element el = tb.insert(startTag);            tb.pushActiveFormattingElements(el);        }else            if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {                tb.reconstructFormattingElements();                tb.insert(startTag);                tb.insertMarkerToFormattingElements();                tb.framesetOk(false);            }else                if (name.equals("table")) {                    if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                        tb.process(new org.jsoup.parser.Token.EndTag("p"));                    }                    tb.insert(startTag);                    tb.framesetOk(false);                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                }else                    if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                        tb.reconstructFormattingElements();                        tb.insertEmpty(startTag);                        tb.framesetOk(false);                    }else                        if (name.equals("input")) {                            tb.reconstructFormattingElements();                            org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                            if (!(el.attr("type").equalsIgnoreCase("hidden")))                                tb.framesetOk(false);                        }else                            if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                                tb.insertEmpty(startTag);                            }else                                if (name.equals("hr")) {                                    if (tb.inButtonScope("p")) {                                        tb.process(new org.jsoup.parser.Token.EndTag("p"));                                    }                                    tb.insertEmpty(startTag);                                    tb.framesetOk(false);                                }else                                    if (name.equals("image")) {                                        startTag.name("img");                                        return tb.process(startTag);                                    }else                                        if (name.equals("isindex")) {                                            tb.error(this);                                            if ((tb.getFormElement()) != null)                                                return false;                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                            tb.process(new org.jsoup.parser.Token.StartTag("form"));                                            if (startTag.attributes.hasKey("action")) {                                                org.jsoup.nodes.Element form = tb.getFormElement();                                                form.attr("action", startTag.attributes.get("action"));                                            }                                            tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                            tb.process(new org.jsoup.parser.Token.StartTag("label"));                                            java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                            tb.process(new org.jsoup.parser.Token.Character(prompt));                                            org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                            for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                                if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                    inputAttribs.put(attr);                                            }                                            inputAttribs.put("name", "isindex");                                            tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                            tb.process(new org.jsoup.parser.Token.EndTag("label"));                                            tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                            tb.process(new org.jsoup.parser.Token.EndTag("form"));                                        }else                                            if (name.equals("textarea")) {                                                tb.insert(startTag);                                                tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                                tb.markInsertionMode();                                                tb.framesetOk(false);                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                            }else                                                if (name.equals("xmp")) {                                                    if (tb.inButtonScope("p")) {                                                        tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                    }                                                    tb.reconstructFormattingElements();                                                    tb.framesetOk(false);                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                }else                                                    if (name.equals("iframe")) {                                                        tb.framesetOk(false);                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("noembed")) {                                                            org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                        }else                                                            if (name.equals("select")) {                                                                tb.reconstructFormattingElements();                                                                tb.insert(startTag);                                                                tb.framesetOk(false);                                                                org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                                if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                                else                                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                            }else                                                                if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                    if (tb.currentElement().nodeName().equals("option"))                                                                        tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                    tb.reconstructFormattingElements();                                                                    tb.insert(startTag);                                                                }else                                                                    if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                        if (tb.inScope("ruby")) {                                                                            tb.generateImpliedEndTags();                                                                            if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                                tb.error(this);                                                                                tb.popStackToBefore("ruby");                                                                            }                                                                            tb.insert(startTag);                                                                        }                                                                    }else                                                                        if (name.equals("math")) {                                                                            tb.reconstructFormattingElements();                                                                            tb.insert(startTag);                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                        }else                                                                            if (name.equals("svg")) {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                                tb.tokeniser.acknowledgeSelfClosingFlag();                                                                            }else                                                                                if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                    tb.error(this);                                                                                    return false;                                                                                }else {                                                                                    tb.reconstructFormattingElements();                                                                                    tb.insert(startTag);                                                                                }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("hr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"style"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"tr"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"table"	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32781::::32864::::if ((tb.currentElement()) != formatEl)    tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18855::::26999::::if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {    tb.reconstructFormattingElements();    org.jsoup.nodes.Element el = tb.insert(startTag);    tb.pushActiveFormattingElements(el);}else    if (name.equals("nobr")) {        tb.reconstructFormattingElements();        if (tb.inScope("nobr")) {            tb.error(this);            tb.process(new org.jsoup.parser.Token.EndTag("nobr"));            tb.reconstructFormattingElements();        }        org.jsoup.nodes.Element el = tb.insert(startTag);        tb.pushActiveFormattingElements(el);    }else        if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {            tb.reconstructFormattingElements();            tb.insert(startTag);            tb.insertMarkerToFormattingElements();            tb.framesetOk(false);        }else            if (name.equals("table")) {                if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                }                tb.insert(startTag);                tb.framesetOk(false);                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);            }else                if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                    tb.reconstructFormattingElements();                    tb.insertEmpty(startTag);                    tb.framesetOk(false);                }else                    if (name.equals("input")) {                        tb.reconstructFormattingElements();                        org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                        if (!(el.attr("type").equalsIgnoreCase("hidden")))                            tb.framesetOk(false);                    }else                        if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                            tb.insertEmpty(startTag);                        }else                            if (name.equals("hr")) {                                if (tb.inButtonScope("p")) {                                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                                }                                tb.insertEmpty(startTag);                                tb.framesetOk(false);                            }else                                if (name.equals("image")) {                                    startTag.name("img");                                    return tb.process(startTag);                                }else                                    if (name.equals("isindex")) {                                        tb.error(this);                                        if ((tb.getFormElement()) != null)                                            return false;                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                        tb.process(new org.jsoup.parser.Token.StartTag("form"));                                        if (startTag.attributes.hasKey("action")) {                                            org.jsoup.nodes.Element form = tb.getFormElement();                                            form.attr("action", startTag.attributes.get("action"));                                        }                                        tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                        tb.process(new org.jsoup.parser.Token.StartTag("label"));                                        java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                        tb.process(new org.jsoup.parser.Token.Character(prompt));                                        org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                        for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                            if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                inputAttribs.put(attr);                                        }                                        inputAttribs.put("name", "isindex");                                        tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                        tb.process(new org.jsoup.parser.Token.EndTag("label"));                                        tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                        tb.process(new org.jsoup.parser.Token.EndTag("form"));                                    }else                                        if (name.equals("textarea")) {                                            tb.insert(startTag);                                            tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                            tb.markInsertionMode();                                            tb.framesetOk(false);                                            tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                        }else                                            if (name.equals("xmp")) {                                                if (tb.inButtonScope("p")) {                                                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                }                                                tb.reconstructFormattingElements();                                                tb.framesetOk(false);                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                            }else                                                if (name.equals("iframe")) {                                                    tb.framesetOk(false);                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                }else                                                    if (name.equals("noembed")) {                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("select")) {                                                            tb.reconstructFormattingElements();                                                            tb.insert(startTag);                                                            tb.framesetOk(false);                                                            org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                            if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                            else                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                        }else                                                            if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                if (tb.currentElement().nodeName().equals("option"))                                                                    tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                tb.reconstructFormattingElements();                                                                tb.insert(startTag);                                                            }else                                                                if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                    if (tb.inScope("ruby")) {                                                                        tb.generateImpliedEndTags();                                                                        if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                            tb.error(this);                                                                            tb.popStackToBefore("ruby");                                                                        }                                                                        tb.insert(startTag);                                                                    }                                                                }else                                                                    if (name.equals("math")) {                                                                        tb.reconstructFormattingElements();                                                                        tb.insert(startTag);                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                    }else                                                                        if (name.equals("svg")) {                                                                            tb.reconstructFormattingElements();                                                                            tb.insert(startTag);                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                        }else                                                                            if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                tb.error(this);                                                                                return false;                                                                            }else {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                            }::::INSERT::::STATEMENT::::org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::661::::32850::::32864::::tb.error(this)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::676::::33799::::33804::::break::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("a"))	false
org.jsoup.parser.HtmlTreeBuilderState::::645::::31858::::32001::::org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tbody"))	false
org.jsoup.parser.Tag::::82::::2641::::2653::::formatAsBlock::::empty) || (selfClosing	false
org.jsoup.parser.Tag::::82::::2641::::2653::::formatAsBlock::::!(isBlock)	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"tr"	false
org.jsoup.parser.TokeniserState::::813::::27330::::27350::::char c = r.consume()::::INSERT::::STATEMENT::::anythingElse(t, r)	false
org.jsoup.parser.Token::::117::::3560::::3582::::ensureAttributeValue()::::INSERT::::STATEMENT::::if ((pendingAttributeName) != null) {    newAttribute();}	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"link"	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"bgsound"	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"basefont"	false
org.jsoup.parser.HtmlTreeBuilderState::::661::::32850::::32864::::tb.error(this)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("noscript"))	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30134::::name.equals("li")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"tbody"	false
org.jsoup.parser.TokeniserState::::901::::30491::::30494::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.ScriptDataDoubleEscapedLessthanSign	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33662::::33702::::seenFormattingElement && (tb.isSpecial(el))::::tb.process(new org.jsoup.parser.Token.EndTag("th"))	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33662::::33702::::seenFormattingElement && (tb.isSpecial(el))::::tb.process(new org.jsoup.parser.Token.EndTag("td"))	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17521::::26999::::if (name.equals("button")) {    if (tb.inButtonScope("button")) {        tb.error(this);        tb.process(new org.jsoup.parser.Token.EndTag("button"));        tb.process(startTag);    }else {        tb.reconstructFormattingElements();        tb.insert(startTag);        tb.framesetOk(false);    }}else    if (name.equals("a")) {        if ((tb.getActiveFormattingElement("a")) != null) {            tb.error(this);            tb.process(new org.jsoup.parser.Token.EndTag("a"));            org.jsoup.nodes.Element remainingA = tb.getFromStack("a");            if (remainingA != null) {                tb.removeFromActiveFormattingElements(remainingA);                tb.removeFromStack(remainingA);            }        }        tb.reconstructFormattingElements();        org.jsoup.nodes.Element a = tb.insert(startTag);        tb.pushActiveFormattingElements(a);    }else        if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {            tb.reconstructFormattingElements();            org.jsoup.nodes.Element el = tb.insert(startTag);            tb.pushActiveFormattingElements(el);        }else            if (name.equals("nobr")) {                tb.reconstructFormattingElements();                if (tb.inScope("nobr")) {                    tb.error(this);                    tb.process(new org.jsoup.parser.Token.EndTag("nobr"));                    tb.reconstructFormattingElements();                }                org.jsoup.nodes.Element el = tb.insert(startTag);                tb.pushActiveFormattingElements(el);            }else                if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {                    tb.reconstructFormattingElements();                    tb.insert(startTag);                    tb.insertMarkerToFormattingElements();                    tb.framesetOk(false);                }else                    if (name.equals("table")) {                        if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                            tb.process(new org.jsoup.parser.Token.EndTag("p"));                        }                        tb.insert(startTag);                        tb.framesetOk(false);                        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                    }else                        if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                            tb.reconstructFormattingElements();                            tb.insertEmpty(startTag);                            tb.framesetOk(false);                        }else                            if (name.equals("input")) {                                tb.reconstructFormattingElements();                                org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                                if (!(el.attr("type").equalsIgnoreCase("hidden")))                                    tb.framesetOk(false);                            }else                                if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                                    tb.insertEmpty(startTag);                                }else                                    if (name.equals("hr")) {                                        if (tb.inButtonScope("p")) {                                            tb.process(new org.jsoup.parser.Token.EndTag("p"));                                        }                                        tb.insertEmpty(startTag);                                        tb.framesetOk(false);                                    }else                                        if (name.equals("image")) {                                            startTag.name("img");                                            return tb.process(startTag);                                        }else                                            if (name.equals("isindex")) {                                                tb.error(this);                                                if ((tb.getFormElement()) != null)                                                    return false;                                                tb.tokeniser.acknowledgeSelfClosingFlag();                                                tb.process(new org.jsoup.parser.Token.StartTag("form"));                                                if (startTag.attributes.hasKey("action")) {                                                    org.jsoup.nodes.Element form = tb.getFormElement();                                                    form.attr("action", startTag.attributes.get("action"));                                                }                                                tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                                tb.process(new org.jsoup.parser.Token.StartTag("label"));                                                java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                                tb.process(new org.jsoup.parser.Token.Character(prompt));                                                org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                                for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                                    if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                        inputAttribs.put(attr);                                                }                                                inputAttribs.put("name", "isindex");                                                tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                                tb.process(new org.jsoup.parser.Token.EndTag("label"));                                                tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                                tb.process(new org.jsoup.parser.Token.EndTag("form"));                                            }else                                                if (name.equals("textarea")) {                                                    tb.insert(startTag);                                                    tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                                    tb.markInsertionMode();                                                    tb.framesetOk(false);                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                                }else                                                    if (name.equals("xmp")) {                                                        if (tb.inButtonScope("p")) {                                                            tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                        }                                                        tb.reconstructFormattingElements();                                                        tb.framesetOk(false);                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("iframe")) {                                                            tb.framesetOk(false);                                                            org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                        }else                                                            if (name.equals("noembed")) {                                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                            }else                                                                if (name.equals("select")) {                                                                    tb.reconstructFormattingElements();                                                                    tb.insert(startTag);                                                                    tb.framesetOk(false);                                                                    org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                                    if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                                    else                                                                        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                                }else                                                                    if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                        if (tb.currentElement().nodeName().equals("option"))                                                                            tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                        tb.reconstructFormattingElements();                                                                        tb.insert(startTag);                                                                    }else                                                                        if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                            if (tb.inScope("ruby")) {                                                                                tb.generateImpliedEndTags();                                                                                if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                                    tb.error(this);                                                                                    tb.popStackToBefore("ruby");                                                                                }                                                                                tb.insert(startTag);                                                                            }                                                                        }else                                                                            if (name.equals("math")) {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                                tb.tokeniser.acknowledgeSelfClosingFlag();                                                                            }else                                                                                if (name.equals("svg")) {                                                                                    tb.reconstructFormattingElements();                                                                                    tb.insert(startTag);                                                                                    tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                }else                                                                                    if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                        tb.error(this);                                                                                        return false;                                                                                    }else {                                                                                        tb.reconstructFormattingElements();                                                                                        tb.insert(startTag);                                                                                    }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("hr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32374::::32864::::if (!(tb.onStack(formatEl))) {    tb.error(this);    tb.removeFromActiveFormattingElements(formatEl);    return true;}else    if (!(tb.inScope(formatEl.nodeName()))) {        tb.error(this);        return false;    }else        if ((tb.currentElement()) != formatEl)            tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("br"))	false
org.jsoup.parser.HtmlTreeBuilderState::::673::::33589::::33617::::seenFormattingElement = true::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("noscript"))	false
org.jsoup.parser.HtmlTreeBuilderState::::645::::31858::::32001::::org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("colgroup"))	false
org.jsoup.parser.TokeniserState::::901::::30491::::30494::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.ScriptDataEscapedLessthanSign	false
org.jsoup.parser.HtmlTreeBuilderState::::645::::31854::::38455::::if (org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")) {    OUTER : for (int i = 0; i < 8; i++) {        org.jsoup.nodes.Element formatEl = tb.getActiveFormattingElement(name);        if (formatEl == null)            return anyOtherEndTag(t, tb);        else            if (!(tb.onStack(formatEl))) {                tb.error(this);                tb.removeFromActiveFormattingElements(formatEl);                return true;            }else                if (!(tb.inScope(formatEl.nodeName()))) {                    tb.error(this);                    return false;                }else                    if ((tb.currentElement()) != formatEl)                        tb.error(this);        org.jsoup.nodes.Element furthestBlock = null;        org.jsoup.nodes.Element commonAncestor = null;        boolean seenFormattingElement = false;        java.util.LinkedList<org.jsoup.nodes.Element> stack = tb.getStack();        for (int si = 0; (si < (stack.size())) && (si < 64); si++) {            org.jsoup.nodes.Element el = stack.get(si);            if (el == formatEl) {                commonAncestor = stack.get((si - 1));                seenFormattingElement = true;            }else                if (seenFormattingElement && (tb.isSpecial(el))) {                    furthestBlock = el;                    break;                }        }        if (furthestBlock == null) {            tb.popStackToClose(formatEl.nodeName());            tb.removeFromActiveFormattingElements(formatEl);            return true;        }        org.jsoup.nodes.Element node = furthestBlock;        org.jsoup.nodes.Element lastNode = furthestBlock;        INNER : for (int j = 0; j < 3; j++) {            if (tb.onStack(node))                node = tb.aboveOnStack(node);            if (!(tb.isInActiveFormattingElements(node))) {                tb.removeFromStack(node);                continue INNER;            }else                if (node == formatEl)                    break INNER;            org.jsoup.nodes.Element replacement = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(node.nodeName()), tb.getBaseUri());            tb.replaceActiveFormattingElement(node, replacement);            tb.replaceOnStack(node, replacement);            node = replacement;            if (lastNode == furthestBlock) {            }            if ((lastNode.parent()) != null)                lastNode.remove();            node.appendChild(lastNode);            lastNode = node;        }        if (org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")) {            if ((lastNode.parent()) != null)                lastNode.remove();            tb.insertInFosterParent(lastNode);        }else {            if ((lastNode.parent()) != null)                lastNode.remove();            commonAncestor.appendChild(lastNode);        }        org.jsoup.nodes.Element adopter = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(name), tb.getBaseUri());        org.jsoup.nodes.Node[] childNodes = furthestBlock.childNodes().toArray(new org.jsoup.nodes.Node[furthestBlock.childNodeSize()]);        for (org.jsoup.nodes.Node childNode : childNodes) {            adopter.appendChild(childNode);        }        furthestBlock.appendChild(adopter);        tb.removeFromActiveFormattingElements(formatEl);        tb.removeFromStack(formatEl);        tb.insertOnStackAfter(furthestBlock, adopter);    }}else    if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {        if (!(tb.inScope("name"))) {            if (!(tb.inScope(name))) {                tb.error(this);                return false;            }            tb.generateImpliedEndTags();            if (!(tb.currentElement().nodeName().equals(name)))                tb.error(this);            tb.popStackToClose(name);            tb.clearFormattingElementsToLastMarker();        }    }else        if (name.equals("br")) {            tb.error(this);            tb.process(new org.jsoup.parser.Token.StartTag("br"));            return false;        }else {            return anyOtherEndTag(t, tb);        }::::INSERT::::STATEMENT::::if (lastNode == furthestBlock) {}	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"tbody"	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"nobr"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"thead"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"tfoot"	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32374::::32864::::if (!(tb.onStack(formatEl))) {    tb.error(this);    tb.removeFromActiveFormattingElements(formatEl);    return true;}else    if (!(tb.inScope(formatEl.nodeName()))) {        tb.error(this);        return false;    }else        if ((tb.currentElement()) != formatEl)            tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("colgroup"))	false
org.jsoup.parser.Token::::61::::1759::::1989::::if ((pendingAttributeValue) == null)    attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, "");else    attribute = new org.jsoup.nodes.Attribute(pendingAttributeName, pendingAttributeValue.toString());::::INSERT::::STATEMENT::::newAttribute()	false
org.jsoup.parser.HtmlTreeBuilderState::::645::::31854::::38455::::if (org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")) {    OUTER : for (int i = 0; i < 8; i++) {        org.jsoup.nodes.Element formatEl = tb.getActiveFormattingElement(name);        if (formatEl == null)            return anyOtherEndTag(t, tb);        else            if (!(tb.onStack(formatEl))) {                tb.error(this);                tb.removeFromActiveFormattingElements(formatEl);                return true;            }else                if (!(tb.inScope(formatEl.nodeName()))) {                    tb.error(this);                    return false;                }else                    if ((tb.currentElement()) != formatEl)                        tb.error(this);        org.jsoup.nodes.Element furthestBlock = null;        org.jsoup.nodes.Element commonAncestor = null;        boolean seenFormattingElement = false;        java.util.LinkedList<org.jsoup.nodes.Element> stack = tb.getStack();        for (int si = 0; (si < (stack.size())) && (si < 64); si++) {            org.jsoup.nodes.Element el = stack.get(si);            if (el == formatEl) {                commonAncestor = stack.get((si - 1));                seenFormattingElement = true;            }else                if (seenFormattingElement && (tb.isSpecial(el))) {                    furthestBlock = el;                    break;                }        }        if (furthestBlock == null) {            tb.popStackToClose(formatEl.nodeName());            tb.removeFromActiveFormattingElements(formatEl);            return true;        }        org.jsoup.nodes.Element node = furthestBlock;        org.jsoup.nodes.Element lastNode = furthestBlock;        INNER : for (int j = 0; j < 3; j++) {            if (tb.onStack(node))                node = tb.aboveOnStack(node);            if (!(tb.isInActiveFormattingElements(node))) {                tb.removeFromStack(node);                continue INNER;            }else                if (node == formatEl)                    break INNER;            org.jsoup.nodes.Element replacement = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(node.nodeName()), tb.getBaseUri());            tb.replaceActiveFormattingElement(node, replacement);            tb.replaceOnStack(node, replacement);            node = replacement;            if (lastNode == furthestBlock) {            }            if ((lastNode.parent()) != null)                lastNode.remove();            node.appendChild(lastNode);            lastNode = node;        }        if (org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")) {            if ((lastNode.parent()) != null)                lastNode.remove();            tb.insertInFosterParent(lastNode);        }else {            if ((lastNode.parent()) != null)                lastNode.remove();            commonAncestor.appendChild(lastNode);        }        org.jsoup.nodes.Element adopter = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(name), tb.getBaseUri());        org.jsoup.nodes.Node[] childNodes = furthestBlock.childNodes().toArray(new org.jsoup.nodes.Node[furthestBlock.childNodeSize()]);        for (org.jsoup.nodes.Node childNode : childNodes) {            adopter.appendChild(childNode);        }        furthestBlock.appendChild(adopter);        tb.removeFromActiveFormattingElements(formatEl);        tb.removeFromStack(formatEl);        tb.insertOnStackAfter(furthestBlock, adopter);    }}else    if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {        if (!(tb.inScope("name"))) {            if (!(tb.inScope(name))) {                tb.error(this);                return false;            }            tb.generateImpliedEndTags();            if (!(tb.currentElement().nodeName().equals(name)))                tb.error(this);            tb.popStackToClose(name);            tb.clearFormattingElementsToLastMarker();        }    }else        if (name.equals("br")) {            tb.error(this);            tb.process(new org.jsoup.parser.Token.StartTag("br"));            return false;        }else {            return anyOtherEndTag(t, tb);        }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("p"))	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"dt"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"dd"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18070::::26999::::if (name.equals("a")) {    if ((tb.getActiveFormattingElement("a")) != null) {        tb.error(this);        tb.process(new org.jsoup.parser.Token.EndTag("a"));        org.jsoup.nodes.Element remainingA = tb.getFromStack("a");        if (remainingA != null) {            tb.removeFromActiveFormattingElements(remainingA);            tb.removeFromStack(remainingA);        }    }    tb.reconstructFormattingElements();    org.jsoup.nodes.Element a = tb.insert(startTag);    tb.pushActiveFormattingElements(a);}else    if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {        tb.reconstructFormattingElements();        org.jsoup.nodes.Element el = tb.insert(startTag);        tb.pushActiveFormattingElements(el);    }else        if (name.equals("nobr")) {            tb.reconstructFormattingElements();            if (tb.inScope("nobr")) {                tb.error(this);                tb.process(new org.jsoup.parser.Token.EndTag("nobr"));                tb.reconstructFormattingElements();            }            org.jsoup.nodes.Element el = tb.insert(startTag);            tb.pushActiveFormattingElements(el);        }else            if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {                tb.reconstructFormattingElements();                tb.insert(startTag);                tb.insertMarkerToFormattingElements();                tb.framesetOk(false);            }else                if (name.equals("table")) {                    if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                        tb.process(new org.jsoup.parser.Token.EndTag("p"));                    }                    tb.insert(startTag);                    tb.framesetOk(false);                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                }else                    if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                        tb.reconstructFormattingElements();                        tb.insertEmpty(startTag);                        tb.framesetOk(false);                    }else                        if (name.equals("input")) {                            tb.reconstructFormattingElements();                            org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                            if (!(el.attr("type").equalsIgnoreCase("hidden")))                                tb.framesetOk(false);                        }else                            if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                                tb.insertEmpty(startTag);                            }else                                if (name.equals("hr")) {                                    if (tb.inButtonScope("p")) {                                        tb.process(new org.jsoup.parser.Token.EndTag("p"));                                    }                                    tb.insertEmpty(startTag);                                    tb.framesetOk(false);                                }else                                    if (name.equals("image")) {                                        startTag.name("img");                                        return tb.process(startTag);                                    }else                                        if (name.equals("isindex")) {                                            tb.error(this);                                            if ((tb.getFormElement()) != null)                                                return false;                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                            tb.process(new org.jsoup.parser.Token.StartTag("form"));                                            if (startTag.attributes.hasKey("action")) {                                                org.jsoup.nodes.Element form = tb.getFormElement();                                                form.attr("action", startTag.attributes.get("action"));                                            }                                            tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                            tb.process(new org.jsoup.parser.Token.StartTag("label"));                                            java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                            tb.process(new org.jsoup.parser.Token.Character(prompt));                                            org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                            for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                                if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                    inputAttribs.put(attr);                                            }                                            inputAttribs.put("name", "isindex");                                            tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                            tb.process(new org.jsoup.parser.Token.EndTag("label"));                                            tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                            tb.process(new org.jsoup.parser.Token.EndTag("form"));                                        }else                                            if (name.equals("textarea")) {                                                tb.insert(startTag);                                                tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                                tb.markInsertionMode();                                                tb.framesetOk(false);                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                            }else                                                if (name.equals("xmp")) {                                                    if (tb.inButtonScope("p")) {                                                        tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                    }                                                    tb.reconstructFormattingElements();                                                    tb.framesetOk(false);                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                }else                                                    if (name.equals("iframe")) {                                                        tb.framesetOk(false);                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("noembed")) {                                                            org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                        }else                                                            if (name.equals("select")) {                                                                tb.reconstructFormattingElements();                                                                tb.insert(startTag);                                                                tb.framesetOk(false);                                                                org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                                if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                                else                                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                            }else                                                                if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                    if (tb.currentElement().nodeName().equals("option"))                                                                        tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                    tb.reconstructFormattingElements();                                                                    tb.insert(startTag);                                                                }else                                                                    if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                        if (tb.inScope("ruby")) {                                                                            tb.generateImpliedEndTags();                                                                            if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                                tb.error(this);                                                                                tb.popStackToBefore("ruby");                                                                            }                                                                            tb.insert(startTag);                                                                        }                                                                    }else                                                                        if (name.equals("math")) {                                                                            tb.reconstructFormattingElements();                                                                            tb.insert(startTag);                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                        }else                                                                            if (name.equals("svg")) {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                                tb.tokeniser.acknowledgeSelfClosingFlag();                                                                            }else                                                                                if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                    tb.error(this);                                                                                    return false;                                                                                }else {                                                                                    tb.reconstructFormattingElements();                                                                                    tb.insert(startTag);                                                                                }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.Character(prompt))	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"dt"	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"dd"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18089::::name.equals("a")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("optgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17521::::26999::::if (name.equals("button")) {    if (tb.inButtonScope("button")) {        tb.error(this);        tb.process(new org.jsoup.parser.Token.EndTag("button"));        tb.process(startTag);    }else {        tb.reconstructFormattingElements();        tb.insert(startTag);        tb.framesetOk(false);    }}else    if (name.equals("a")) {        if ((tb.getActiveFormattingElement("a")) != null) {            tb.error(this);            tb.process(new org.jsoup.parser.Token.EndTag("a"));            org.jsoup.nodes.Element remainingA = tb.getFromStack("a");            if (remainingA != null) {                tb.removeFromActiveFormattingElements(remainingA);                tb.removeFromStack(remainingA);            }        }        tb.reconstructFormattingElements();        org.jsoup.nodes.Element a = tb.insert(startTag);        tb.pushActiveFormattingElements(a);    }else        if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {            tb.reconstructFormattingElements();            org.jsoup.nodes.Element el = tb.insert(startTag);            tb.pushActiveFormattingElements(el);        }else            if (name.equals("nobr")) {                tb.reconstructFormattingElements();                if (tb.inScope("nobr")) {                    tb.error(this);                    tb.process(new org.jsoup.parser.Token.EndTag("nobr"));                    tb.reconstructFormattingElements();                }                org.jsoup.nodes.Element el = tb.insert(startTag);                tb.pushActiveFormattingElements(el);            }else                if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {                    tb.reconstructFormattingElements();                    tb.insert(startTag);                    tb.insertMarkerToFormattingElements();                    tb.framesetOk(false);                }else                    if (name.equals("table")) {                        if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                            tb.process(new org.jsoup.parser.Token.EndTag("p"));                        }                        tb.insert(startTag);                        tb.framesetOk(false);                        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                    }else                        if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                            tb.reconstructFormattingElements();                            tb.insertEmpty(startTag);                            tb.framesetOk(false);                        }else                            if (name.equals("input")) {                                tb.reconstructFormattingElements();                                org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                                if (!(el.attr("type").equalsIgnoreCase("hidden")))                                    tb.framesetOk(false);                            }else                                if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                                    tb.insertEmpty(startTag);                                }else                                    if (name.equals("hr")) {                                        if (tb.inButtonScope("p")) {                                            tb.process(new org.jsoup.parser.Token.EndTag("p"));                                        }                                        tb.insertEmpty(startTag);                                        tb.framesetOk(false);                                    }else                                        if (name.equals("image")) {                                            startTag.name("img");                                            return tb.process(startTag);                                        }else                                            if (name.equals("isindex")) {                                                tb.error(this);                                                if ((tb.getFormElement()) != null)                                                    return false;                                                tb.tokeniser.acknowledgeSelfClosingFlag();                                                tb.process(new org.jsoup.parser.Token.StartTag("form"));                                                if (startTag.attributes.hasKey("action")) {                                                    org.jsoup.nodes.Element form = tb.getFormElement();                                                    form.attr("action", startTag.attributes.get("action"));                                                }                                                tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                                tb.process(new org.jsoup.parser.Token.StartTag("label"));                                                java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                                tb.process(new org.jsoup.parser.Token.Character(prompt));                                                org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                                for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                                    if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                        inputAttribs.put(attr);                                                }                                                inputAttribs.put("name", "isindex");                                                tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                                tb.process(new org.jsoup.parser.Token.EndTag("label"));                                                tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                                tb.process(new org.jsoup.parser.Token.EndTag("form"));                                            }else                                                if (name.equals("textarea")) {                                                    tb.insert(startTag);                                                    tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                                    tb.markInsertionMode();                                                    tb.framesetOk(false);                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                                }else                                                    if (name.equals("xmp")) {                                                        if (tb.inButtonScope("p")) {                                                            tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                        }                                                        tb.reconstructFormattingElements();                                                        tb.framesetOk(false);                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("iframe")) {                                                            tb.framesetOk(false);                                                            org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                        }else                                                            if (name.equals("noembed")) {                                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                            }else                                                                if (name.equals("select")) {                                                                    tb.reconstructFormattingElements();                                                                    tb.insert(startTag);                                                                    tb.framesetOk(false);                                                                    org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                                    if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                                    else                                                                        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                                }else                                                                    if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                        if (tb.currentElement().nodeName().equals("option"))                                                                            tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                        tb.reconstructFormattingElements();                                                                        tb.insert(startTag);                                                                    }else                                                                        if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                            if (tb.inScope("ruby")) {                                                                                tb.generateImpliedEndTags();                                                                                if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                                    tb.error(this);                                                                                    tb.popStackToBefore("ruby");                                                                                }                                                                                tb.insert(startTag);                                                                            }                                                                        }else                                                                            if (name.equals("math")) {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                                tb.tokeniser.acknowledgeSelfClosingFlag();                                                                            }else                                                                                if (name.equals("svg")) {                                                                                    tb.reconstructFormattingElements();                                                                                    tb.insert(startTag);                                                                                    tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                }else                                                                                    if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                        tb.error(this);                                                                                        return false;                                                                                    }else {                                                                                        tb.reconstructFormattingElements();                                                                                        tb.insert(startTag);                                                                                    }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("select"))	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"thead"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"tfoot"	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30134::::name.equals("li")::::INSERT::::STATEMENT::::tb.process(startTag)	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"meta"	false
org.jsoup.parser.HtmlTreeBuilderState::::632::::31114::::31168::::org.jsoup.helper.StringUtil.in(name, "h1", "h2", "h3", "h4", "h5", "h6")::::INSERT::::STATEMENT::::closeCell(tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::412::::18675::::18709::::tb.reconstructFormattingElements()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("optgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31709::::38455::::if (name.equals("sarcasm")) {    return anyOtherEndTag(t, tb);}else    if (org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")) {        OUTER : for (int i = 0; i < 8; i++) {            org.jsoup.nodes.Element formatEl = tb.getActiveFormattingElement(name);            if (formatEl == null)                return anyOtherEndTag(t, tb);            else                if (!(tb.onStack(formatEl))) {                    tb.error(this);                    tb.removeFromActiveFormattingElements(formatEl);                    return true;                }else                    if (!(tb.inScope(formatEl.nodeName()))) {                        tb.error(this);                        return false;                    }else                        if ((tb.currentElement()) != formatEl)                            tb.error(this);            org.jsoup.nodes.Element furthestBlock = null;            org.jsoup.nodes.Element commonAncestor = null;            boolean seenFormattingElement = false;            java.util.LinkedList<org.jsoup.nodes.Element> stack = tb.getStack();            for (int si = 0; (si < (stack.size())) && (si < 64); si++) {                org.jsoup.nodes.Element el = stack.get(si);                if (el == formatEl) {                    commonAncestor = stack.get((si - 1));                    seenFormattingElement = true;                }else                    if (seenFormattingElement && (tb.isSpecial(el))) {                        furthestBlock = el;                        break;                    }            }            if (furthestBlock == null) {                tb.popStackToClose(formatEl.nodeName());                tb.removeFromActiveFormattingElements(formatEl);                return true;            }            org.jsoup.nodes.Element node = furthestBlock;            org.jsoup.nodes.Element lastNode = furthestBlock;            INNER : for (int j = 0; j < 3; j++) {                if (tb.onStack(node))                    node = tb.aboveOnStack(node);                if (!(tb.isInActiveFormattingElements(node))) {                    tb.removeFromStack(node);                    continue INNER;                }else                    if (node == formatEl)                        break INNER;                org.jsoup.nodes.Element replacement = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(node.nodeName()), tb.getBaseUri());                tb.replaceActiveFormattingElement(node, replacement);                tb.replaceOnStack(node, replacement);                node = replacement;                if (lastNode == furthestBlock) {                }                if ((lastNode.parent()) != null)                    lastNode.remove();                node.appendChild(lastNode);                lastNode = node;            }            if (org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")) {                if ((lastNode.parent()) != null)                    lastNode.remove();                tb.insertInFosterParent(lastNode);            }else {                if ((lastNode.parent()) != null)                    lastNode.remove();                commonAncestor.appendChild(lastNode);            }            org.jsoup.nodes.Element adopter = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(name), tb.getBaseUri());            org.jsoup.nodes.Node[] childNodes = furthestBlock.childNodes().toArray(new org.jsoup.nodes.Node[furthestBlock.childNodeSize()]);            for (org.jsoup.nodes.Node childNode : childNodes) {                adopter.appendChild(childNode);            }            furthestBlock.appendChild(adopter);            tb.removeFromActiveFormattingElements(formatEl);            tb.removeFromStack(formatEl);            tb.insertOnStackAfter(furthestBlock, adopter);        }    }else        if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {            if (!(tb.inScope("name"))) {                if (!(tb.inScope(name))) {                    tb.error(this);                    return false;                }                tb.generateImpliedEndTags();                if (!(tb.currentElement().nodeName().equals(name)))                    tb.error(this);                tb.popStackToClose(name);                tb.clearFormattingElementsToLastMarker();            }        }else            if (name.equals("br")) {                tb.error(this);                tb.process(new org.jsoup.parser.Token.StartTag("br"));                return false;            }else {                return anyOtherEndTag(t, tb);            }::::INSERT::::STATEMENT::::if (lastNode == furthestBlock) {}	false
org.jsoup.parser.TokeniserState::::887::::30021::::30041::::char c = r.consume()::::INSERT::::STATEMENT::::anythingElse(t, r)	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31709::::38455::::if (name.equals("sarcasm")) {    return anyOtherEndTag(t, tb);}else    if (org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")) {        OUTER : for (int i = 0; i < 8; i++) {            org.jsoup.nodes.Element formatEl = tb.getActiveFormattingElement(name);            if (formatEl == null)                return anyOtherEndTag(t, tb);            else                if (!(tb.onStack(formatEl))) {                    tb.error(this);                    tb.removeFromActiveFormattingElements(formatEl);                    return true;                }else                    if (!(tb.inScope(formatEl.nodeName()))) {                        tb.error(this);                        return false;                    }else                        if ((tb.currentElement()) != formatEl)                            tb.error(this);            org.jsoup.nodes.Element furthestBlock = null;            org.jsoup.nodes.Element commonAncestor = null;            boolean seenFormattingElement = false;            java.util.LinkedList<org.jsoup.nodes.Element> stack = tb.getStack();            for (int si = 0; (si < (stack.size())) && (si < 64); si++) {                org.jsoup.nodes.Element el = stack.get(si);                if (el == formatEl) {                    commonAncestor = stack.get((si - 1));                    seenFormattingElement = true;                }else                    if (seenFormattingElement && (tb.isSpecial(el))) {                        furthestBlock = el;                        break;                    }            }            if (furthestBlock == null) {                tb.popStackToClose(formatEl.nodeName());                tb.removeFromActiveFormattingElements(formatEl);                return true;            }            org.jsoup.nodes.Element node = furthestBlock;            org.jsoup.nodes.Element lastNode = furthestBlock;            INNER : for (int j = 0; j < 3; j++) {                if (tb.onStack(node))                    node = tb.aboveOnStack(node);                if (!(tb.isInActiveFormattingElements(node))) {                    tb.removeFromStack(node);                    continue INNER;                }else                    if (node == formatEl)                        break INNER;                org.jsoup.nodes.Element replacement = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(node.nodeName()), tb.getBaseUri());                tb.replaceActiveFormattingElement(node, replacement);                tb.replaceOnStack(node, replacement);                node = replacement;                if (lastNode == furthestBlock) {                }                if ((lastNode.parent()) != null)                    lastNode.remove();                node.appendChild(lastNode);                lastNode = node;            }            if (org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")) {                if ((lastNode.parent()) != null)                    lastNode.remove();                tb.insertInFosterParent(lastNode);            }else {                if ((lastNode.parent()) != null)                    lastNode.remove();                commonAncestor.appendChild(lastNode);            }            org.jsoup.nodes.Element adopter = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(name), tb.getBaseUri());            org.jsoup.nodes.Node[] childNodes = furthestBlock.childNodes().toArray(new org.jsoup.nodes.Node[furthestBlock.childNodeSize()]);            for (org.jsoup.nodes.Node childNode : childNodes) {                adopter.appendChild(childNode);            }            furthestBlock.appendChild(adopter);            tb.removeFromActiveFormattingElements(formatEl);            tb.removeFromStack(formatEl);            tb.insertOnStackAfter(furthestBlock, adopter);        }    }else        if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {            if (!(tb.inScope("name"))) {                if (!(tb.inScope(name))) {                    tb.error(this);                    return false;                }                tb.generateImpliedEndTags();                if (!(tb.currentElement().nodeName().equals(name)))                    tb.error(this);                tb.popStackToClose(name);                tb.clearFormattingElementsToLastMarker();            }        }else            if (name.equals("br")) {                tb.error(this);                tb.process(new org.jsoup.parser.Token.StartTag("br"));                return false;            }else {                return anyOtherEndTag(t, tb);            }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("p"))	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32374::::32864::::if (!(tb.onStack(formatEl))) {    tb.error(this);    tb.removeFromActiveFormattingElements(formatEl);    return true;}else    if (!(tb.inScope(formatEl.nodeName()))) {        tb.error(this);        return false;    }else        if ((tb.currentElement()) != formatEl)            tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("optgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32612::::32864::::if (!(tb.inScope(formatEl.nodeName()))) {    tb.error(this);    return false;}else    if ((tb.currentElement()) != formatEl)        tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"base"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18070::::26999::::if (name.equals("a")) {    if ((tb.getActiveFormattingElement("a")) != null) {        tb.error(this);        tb.process(new org.jsoup.parser.Token.EndTag("a"));        org.jsoup.nodes.Element remainingA = tb.getFromStack("a");        if (remainingA != null) {            tb.removeFromActiveFormattingElements(remainingA);            tb.removeFromStack(remainingA);        }    }    tb.reconstructFormattingElements();    org.jsoup.nodes.Element a = tb.insert(startTag);    tb.pushActiveFormattingElements(a);}else    if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {        tb.reconstructFormattingElements();        org.jsoup.nodes.Element el = tb.insert(startTag);        tb.pushActiveFormattingElements(el);    }else        if (name.equals("nobr")) {            tb.reconstructFormattingElements();            if (tb.inScope("nobr")) {                tb.error(this);                tb.process(new org.jsoup.parser.Token.EndTag("nobr"));                tb.reconstructFormattingElements();            }            org.jsoup.nodes.Element el = tb.insert(startTag);            tb.pushActiveFormattingElements(el);        }else            if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {                tb.reconstructFormattingElements();                tb.insert(startTag);                tb.insertMarkerToFormattingElements();                tb.framesetOk(false);            }else                if (name.equals("table")) {                    if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                        tb.process(new org.jsoup.parser.Token.EndTag("p"));                    }                    tb.insert(startTag);                    tb.framesetOk(false);                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                }else                    if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                        tb.reconstructFormattingElements();                        tb.insertEmpty(startTag);                        tb.framesetOk(false);                    }else                        if (name.equals("input")) {                            tb.reconstructFormattingElements();                            org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                            if (!(el.attr("type").equalsIgnoreCase("hidden")))                                tb.framesetOk(false);                        }else                            if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                                tb.insertEmpty(startTag);                            }else                                if (name.equals("hr")) {                                    if (tb.inButtonScope("p")) {                                        tb.process(new org.jsoup.parser.Token.EndTag("p"));                                    }                                    tb.insertEmpty(startTag);                                    tb.framesetOk(false);                                }else                                    if (name.equals("image")) {                                        startTag.name("img");                                        return tb.process(startTag);                                    }else                                        if (name.equals("isindex")) {                                            tb.error(this);                                            if ((tb.getFormElement()) != null)                                                return false;                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                            tb.process(new org.jsoup.parser.Token.StartTag("form"));                                            if (startTag.attributes.hasKey("action")) {                                                org.jsoup.nodes.Element form = tb.getFormElement();                                                form.attr("action", startTag.attributes.get("action"));                                            }                                            tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                            tb.process(new org.jsoup.parser.Token.StartTag("label"));                                            java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                            tb.process(new org.jsoup.parser.Token.Character(prompt));                                            org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                            for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                                if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                    inputAttribs.put(attr);                                            }                                            inputAttribs.put("name", "isindex");                                            tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                            tb.process(new org.jsoup.parser.Token.EndTag("label"));                                            tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                            tb.process(new org.jsoup.parser.Token.EndTag("form"));                                        }else                                            if (name.equals("textarea")) {                                                tb.insert(startTag);                                                tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                                tb.markInsertionMode();                                                tb.framesetOk(false);                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                            }else                                                if (name.equals("xmp")) {                                                    if (tb.inButtonScope("p")) {                                                        tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                    }                                                    tb.reconstructFormattingElements();                                                    tb.framesetOk(false);                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                }else                                                    if (name.equals("iframe")) {                                                        tb.framesetOk(false);                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("noembed")) {                                                            org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                        }else                                                            if (name.equals("select")) {                                                                tb.reconstructFormattingElements();                                                                tb.insert(startTag);                                                                tb.framesetOk(false);                                                                org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                                if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                                else                                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                            }else                                                                if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                    if (tb.currentElement().nodeName().equals("option"))                                                                        tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                    tb.reconstructFormattingElements();                                                                    tb.insert(startTag);                                                                }else                                                                    if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                        if (tb.inScope("ruby")) {                                                                            tb.generateImpliedEndTags();                                                                            if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                                tb.error(this);                                                                                tb.popStackToBefore("ruby");                                                                            }                                                                            tb.insert(startTag);                                                                        }                                                                    }else                                                                        if (name.equals("math")) {                                                                            tb.reconstructFormattingElements();                                                                            tb.insert(startTag);                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                        }else                                                                            if (name.equals("svg")) {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                                tb.tokeniser.acknowledgeSelfClosingFlag();                                                                            }else                                                                                if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                    tb.error(this);                                                                                    return false;                                                                                }else {                                                                                    tb.reconstructFormattingElements();                                                                                    tb.insert(startTag);                                                                                }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("select"))	false
org.jsoup.parser.HtmlTreeBuilderState::::632::::31110::::38455::::if (org.jsoup.helper.StringUtil.in(name, "h1", "h2", "h3", "h4", "h5", "h6")) {    if (!(tb.inScope(new java.lang.String[]{ "h1", "h2", "h3", "h4", "h5", "h6" }))) {        tb.error(this);        return false;    }else {        tb.generateImpliedEndTags(name);        if (!(tb.currentElement().nodeName().equals(name)))            tb.error(this);        tb.popStackToClose("h1", "h2", "h3", "h4", "h5", "h6");    }}else    if (name.equals("sarcasm")) {        return anyOtherEndTag(t, tb);    }else        if (org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")) {            OUTER : for (int i = 0; i < 8; i++) {                org.jsoup.nodes.Element formatEl = tb.getActiveFormattingElement(name);                if (formatEl == null)                    return anyOtherEndTag(t, tb);                else                    if (!(tb.onStack(formatEl))) {                        tb.error(this);                        tb.removeFromActiveFormattingElements(formatEl);                        return true;                    }else                        if (!(tb.inScope(formatEl.nodeName()))) {                            tb.error(this);                            return false;                        }else                            if ((tb.currentElement()) != formatEl)                                tb.error(this);                org.jsoup.nodes.Element furthestBlock = null;                org.jsoup.nodes.Element commonAncestor = null;                boolean seenFormattingElement = false;                java.util.LinkedList<org.jsoup.nodes.Element> stack = tb.getStack();                for (int si = 0; (si < (stack.size())) && (si < 64); si++) {                    org.jsoup.nodes.Element el = stack.get(si);                    if (el == formatEl) {                        commonAncestor = stack.get((si - 1));                        seenFormattingElement = true;                    }else                        if (seenFormattingElement && (tb.isSpecial(el))) {                            furthestBlock = el;                            break;                        }                }                if (furthestBlock == null) {                    tb.popStackToClose(formatEl.nodeName());                    tb.removeFromActiveFormattingElements(formatEl);                    return true;                }                org.jsoup.nodes.Element node = furthestBlock;                org.jsoup.nodes.Element lastNode = furthestBlock;                INNER : for (int j = 0; j < 3; j++) {                    if (tb.onStack(node))                        node = tb.aboveOnStack(node);                    if (!(tb.isInActiveFormattingElements(node))) {                        tb.removeFromStack(node);                        continue INNER;                    }else                        if (node == formatEl)                            break INNER;                    org.jsoup.nodes.Element replacement = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(node.nodeName()), tb.getBaseUri());                    tb.replaceActiveFormattingElement(node, replacement);                    tb.replaceOnStack(node, replacement);                    node = replacement;                    if (lastNode == furthestBlock) {                    }                    if ((lastNode.parent()) != null)                        lastNode.remove();                    node.appendChild(lastNode);                    lastNode = node;                }                if (org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")) {                    if ((lastNode.parent()) != null)                        lastNode.remove();                    tb.insertInFosterParent(lastNode);                }else {                    if ((lastNode.parent()) != null)                        lastNode.remove();                    commonAncestor.appendChild(lastNode);                }                org.jsoup.nodes.Element adopter = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(name), tb.getBaseUri());                org.jsoup.nodes.Node[] childNodes = furthestBlock.childNodes().toArray(new org.jsoup.nodes.Node[furthestBlock.childNodeSize()]);                for (org.jsoup.nodes.Node childNode : childNodes) {                    adopter.appendChild(childNode);                }                furthestBlock.appendChild(adopter);                tb.removeFromActiveFormattingElements(formatEl);                tb.removeFromStack(formatEl);                tb.insertOnStackAfter(furthestBlock, adopter);            }        }else            if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {                if (!(tb.inScope("name"))) {                    if (!(tb.inScope(name))) {                        tb.error(this);                        return false;                    }                    tb.generateImpliedEndTags();                    if (!(tb.currentElement().nodeName().equals(name)))                        tb.error(this);                    tb.popStackToClose(name);                    tb.clearFormattingElementsToLastMarker();                }            }else                if (name.equals("br")) {                    tb.error(this);                    tb.process(new org.jsoup.parser.Token.StartTag("br"));                    return false;                }else {                    return anyOtherEndTag(t, tb);                }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("p"))	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17521::::26999::::if (name.equals("button")) {    if (tb.inButtonScope("button")) {        tb.error(this);        tb.process(new org.jsoup.parser.Token.EndTag("button"));        tb.process(startTag);    }else {        tb.reconstructFormattingElements();        tb.insert(startTag);        tb.framesetOk(false);    }}else    if (name.equals("a")) {        if ((tb.getActiveFormattingElement("a")) != null) {            tb.error(this);            tb.process(new org.jsoup.parser.Token.EndTag("a"));            org.jsoup.nodes.Element remainingA = tb.getFromStack("a");            if (remainingA != null) {                tb.removeFromActiveFormattingElements(remainingA);                tb.removeFromStack(remainingA);            }        }        tb.reconstructFormattingElements();        org.jsoup.nodes.Element a = tb.insert(startTag);        tb.pushActiveFormattingElements(a);    }else        if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {            tb.reconstructFormattingElements();            org.jsoup.nodes.Element el = tb.insert(startTag);            tb.pushActiveFormattingElements(el);        }else            if (name.equals("nobr")) {                tb.reconstructFormattingElements();                if (tb.inScope("nobr")) {                    tb.error(this);                    tb.process(new org.jsoup.parser.Token.EndTag("nobr"));                    tb.reconstructFormattingElements();                }                org.jsoup.nodes.Element el = tb.insert(startTag);                tb.pushActiveFormattingElements(el);            }else                if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {                    tb.reconstructFormattingElements();                    tb.insert(startTag);                    tb.insertMarkerToFormattingElements();                    tb.framesetOk(false);                }else                    if (name.equals("table")) {                        if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                            tb.process(new org.jsoup.parser.Token.EndTag("p"));                        }                        tb.insert(startTag);                        tb.framesetOk(false);                        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                    }else                        if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                            tb.reconstructFormattingElements();                            tb.insertEmpty(startTag);                            tb.framesetOk(false);                        }else                            if (name.equals("input")) {                                tb.reconstructFormattingElements();                                org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                                if (!(el.attr("type").equalsIgnoreCase("hidden")))                                    tb.framesetOk(false);                            }else                                if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                                    tb.insertEmpty(startTag);                                }else                                    if (name.equals("hr")) {                                        if (tb.inButtonScope("p")) {                                            tb.process(new org.jsoup.parser.Token.EndTag("p"));                                        }                                        tb.insertEmpty(startTag);                                        tb.framesetOk(false);                                    }else                                        if (name.equals("image")) {                                            startTag.name("img");                                            return tb.process(startTag);                                        }else                                            if (name.equals("isindex")) {                                                tb.error(this);                                                if ((tb.getFormElement()) != null)                                                    return false;                                                tb.tokeniser.acknowledgeSelfClosingFlag();                                                tb.process(new org.jsoup.parser.Token.StartTag("form"));                                                if (startTag.attributes.hasKey("action")) {                                                    org.jsoup.nodes.Element form = tb.getFormElement();                                                    form.attr("action", startTag.attributes.get("action"));                                                }                                                tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                                tb.process(new org.jsoup.parser.Token.StartTag("label"));                                                java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                                tb.process(new org.jsoup.parser.Token.Character(prompt));                                                org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                                for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                                    if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                        inputAttribs.put(attr);                                                }                                                inputAttribs.put("name", "isindex");                                                tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                                tb.process(new org.jsoup.parser.Token.EndTag("label"));                                                tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                                tb.process(new org.jsoup.parser.Token.EndTag("form"));                                            }else                                                if (name.equals("textarea")) {                                                    tb.insert(startTag);                                                    tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                                    tb.markInsertionMode();                                                    tb.framesetOk(false);                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                                }else                                                    if (name.equals("xmp")) {                                                        if (tb.inButtonScope("p")) {                                                            tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                        }                                                        tb.reconstructFormattingElements();                                                        tb.framesetOk(false);                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("iframe")) {                                                            tb.framesetOk(false);                                                            org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                        }else                                                            if (name.equals("noembed")) {                                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                            }else                                                                if (name.equals("select")) {                                                                    tb.reconstructFormattingElements();                                                                    tb.insert(startTag);                                                                    tb.framesetOk(false);                                                                    org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                                    if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                                    else                                                                        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                                }else                                                                    if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                        if (tb.currentElement().nodeName().equals("option"))                                                                            tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                        tb.reconstructFormattingElements();                                                                        tb.insert(startTag);                                                                    }else                                                                        if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                            if (tb.inScope("ruby")) {                                                                                tb.generateImpliedEndTags();                                                                                if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                                    tb.error(this);                                                                                    tb.popStackToBefore("ruby");                                                                                }                                                                                tb.insert(startTag);                                                                            }                                                                        }else                                                                            if (name.equals("math")) {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                                tb.tokeniser.acknowledgeSelfClosingFlag();                                                                            }else                                                                                if (name.equals("svg")) {                                                                                    tb.reconstructFormattingElements();                                                                                    tb.insert(startTag);                                                                                    tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                }else                                                                                    if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                        tb.error(this);                                                                                        return false;                                                                                    }else {                                                                                        tb.reconstructFormattingElements();                                                                                        tb.insert(startTag);                                                                                    }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.Character(prompt))	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"a"	false
org.jsoup.parser.HtmlTreeBuilder::::569::::19927::::20238::::while (iter.hasNext()) {    org.jsoup.nodes.Element el = iter.next();    if (el == null)        break;    if (isSameFormattingElement(in, el))        numSeen++;    if (numSeen == 3) {        iter.remove();        break;    }} ::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"a"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18070::::26999::::if (name.equals("a")) {    if ((tb.getActiveFormattingElement("a")) != null) {        tb.error(this);        tb.process(new org.jsoup.parser.Token.EndTag("a"));        org.jsoup.nodes.Element remainingA = tb.getFromStack("a");        if (remainingA != null) {            tb.removeFromActiveFormattingElements(remainingA);            tb.removeFromStack(remainingA);        }    }    tb.reconstructFormattingElements();    org.jsoup.nodes.Element a = tb.insert(startTag);    tb.pushActiveFormattingElements(a);}else    if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {        tb.reconstructFormattingElements();        org.jsoup.nodes.Element el = tb.insert(startTag);        tb.pushActiveFormattingElements(el);    }else        if (name.equals("nobr")) {            tb.reconstructFormattingElements();            if (tb.inScope("nobr")) {                tb.error(this);                tb.process(new org.jsoup.parser.Token.EndTag("nobr"));                tb.reconstructFormattingElements();            }            org.jsoup.nodes.Element el = tb.insert(startTag);            tb.pushActiveFormattingElements(el);        }else            if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {                tb.reconstructFormattingElements();                tb.insert(startTag);                tb.insertMarkerToFormattingElements();                tb.framesetOk(false);            }else                if (name.equals("table")) {                    if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                        tb.process(new org.jsoup.parser.Token.EndTag("p"));                    }                    tb.insert(startTag);                    tb.framesetOk(false);                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                }else                    if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                        tb.reconstructFormattingElements();                        tb.insertEmpty(startTag);                        tb.framesetOk(false);                    }else                        if (name.equals("input")) {                            tb.reconstructFormattingElements();                            org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                            if (!(el.attr("type").equalsIgnoreCase("hidden")))                                tb.framesetOk(false);                        }else                            if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                                tb.insertEmpty(startTag);                            }else                                if (name.equals("hr")) {                                    if (tb.inButtonScope("p")) {                                        tb.process(new org.jsoup.parser.Token.EndTag("p"));                                    }                                    tb.insertEmpty(startTag);                                    tb.framesetOk(false);                                }else                                    if (name.equals("image")) {                                        startTag.name("img");                                        return tb.process(startTag);                                    }else                                        if (name.equals("isindex")) {                                            tb.error(this);                                            if ((tb.getFormElement()) != null)                                                return false;                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                            tb.process(new org.jsoup.parser.Token.StartTag("form"));                                            if (startTag.attributes.hasKey("action")) {                                                org.jsoup.nodes.Element form = tb.getFormElement();                                                form.attr("action", startTag.attributes.get("action"));                                            }                                            tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                            tb.process(new org.jsoup.parser.Token.StartTag("label"));                                            java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                            tb.process(new org.jsoup.parser.Token.Character(prompt));                                            org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                            for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                                if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                    inputAttribs.put(attr);                                            }                                            inputAttribs.put("name", "isindex");                                            tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                            tb.process(new org.jsoup.parser.Token.EndTag("label"));                                            tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                            tb.process(new org.jsoup.parser.Token.EndTag("form"));                                        }else                                            if (name.equals("textarea")) {                                                tb.insert(startTag);                                                tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                                tb.markInsertionMode();                                                tb.framesetOk(false);                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                            }else                                                if (name.equals("xmp")) {                                                    if (tb.inButtonScope("p")) {                                                        tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                    }                                                    tb.reconstructFormattingElements();                                                    tb.framesetOk(false);                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                }else                                                    if (name.equals("iframe")) {                                                        tb.framesetOk(false);                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("noembed")) {                                                            org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                        }else                                                            if (name.equals("select")) {                                                                tb.reconstructFormattingElements();                                                                tb.insert(startTag);                                                                tb.framesetOk(false);                                                                org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                                if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                                else                                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                            }else                                                                if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                    if (tb.currentElement().nodeName().equals("option"))                                                                        tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                    tb.reconstructFormattingElements();                                                                    tb.insert(startTag);                                                                }else                                                                    if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                        if (tb.inScope("ruby")) {                                                                            tb.generateImpliedEndTags();                                                                            if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                                tb.error(this);                                                                                tb.popStackToBefore("ruby");                                                                            }                                                                            tb.insert(startTag);                                                                        }                                                                    }else                                                                        if (name.equals("math")) {                                                                            tb.reconstructFormattingElements();                                                                            tb.insert(startTag);                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                        }else                                                                            if (name.equals("svg")) {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                                tb.tokeniser.acknowledgeSelfClosingFlag();                                                                            }else                                                                                if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                    tb.error(this);                                                                                    return false;                                                                                }else {                                                                                    tb.reconstructFormattingElements();                                                                                    tb.insert(startTag);                                                                                }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("option"))	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18855::::26999::::if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {    tb.reconstructFormattingElements();    org.jsoup.nodes.Element el = tb.insert(startTag);    tb.pushActiveFormattingElements(el);}else    if (name.equals("nobr")) {        tb.reconstructFormattingElements();        if (tb.inScope("nobr")) {            tb.error(this);            tb.process(new org.jsoup.parser.Token.EndTag("nobr"));            tb.reconstructFormattingElements();        }        org.jsoup.nodes.Element el = tb.insert(startTag);        tb.pushActiveFormattingElements(el);    }else        if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {            tb.reconstructFormattingElements();            tb.insert(startTag);            tb.insertMarkerToFormattingElements();            tb.framesetOk(false);        }else            if (name.equals("table")) {                if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                }                tb.insert(startTag);                tb.framesetOk(false);                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);            }else                if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                    tb.reconstructFormattingElements();                    tb.insertEmpty(startTag);                    tb.framesetOk(false);                }else                    if (name.equals("input")) {                        tb.reconstructFormattingElements();                        org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                        if (!(el.attr("type").equalsIgnoreCase("hidden")))                            tb.framesetOk(false);                    }else                        if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                            tb.insertEmpty(startTag);                        }else                            if (name.equals("hr")) {                                if (tb.inButtonScope("p")) {                                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                                }                                tb.insertEmpty(startTag);                                tb.framesetOk(false);                            }else                                if (name.equals("image")) {                                    startTag.name("img");                                    return tb.process(startTag);                                }else                                    if (name.equals("isindex")) {                                        tb.error(this);                                        if ((tb.getFormElement()) != null)                                            return false;                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                        tb.process(new org.jsoup.parser.Token.StartTag("form"));                                        if (startTag.attributes.hasKey("action")) {                                            org.jsoup.nodes.Element form = tb.getFormElement();                                            form.attr("action", startTag.attributes.get("action"));                                        }                                        tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                        tb.process(new org.jsoup.parser.Token.StartTag("label"));                                        java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                        tb.process(new org.jsoup.parser.Token.Character(prompt));                                        org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                        for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                            if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                inputAttribs.put(attr);                                        }                                        inputAttribs.put("name", "isindex");                                        tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                        tb.process(new org.jsoup.parser.Token.EndTag("label"));                                        tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                        tb.process(new org.jsoup.parser.Token.EndTag("form"));                                    }else                                        if (name.equals("textarea")) {                                            tb.insert(startTag);                                            tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                            tb.markInsertionMode();                                            tb.framesetOk(false);                                            tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                        }else                                            if (name.equals("xmp")) {                                                if (tb.inButtonScope("p")) {                                                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                }                                                tb.reconstructFormattingElements();                                                tb.framesetOk(false);                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                            }else                                                if (name.equals("iframe")) {                                                    tb.framesetOk(false);                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                }else                                                    if (name.equals("noembed")) {                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("select")) {                                                            tb.reconstructFormattingElements();                                                            tb.insert(startTag);                                                            tb.framesetOk(false);                                                            org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                            if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                            else                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                        }else                                                            if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                if (tb.currentElement().nodeName().equals("option"))                                                                    tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                tb.reconstructFormattingElements();                                                                tb.insert(startTag);                                                            }else                                                                if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                    if (tb.inScope("ruby")) {                                                                        tb.generateImpliedEndTags();                                                                        if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                            tb.error(this);                                                                            tb.popStackToBefore("ruby");                                                                        }                                                                        tb.insert(startTag);                                                                    }                                                                }else                                                                    if (name.equals("math")) {                                                                        tb.reconstructFormattingElements();                                                                        tb.insert(startTag);                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                    }else                                                                        if (name.equals("svg")) {                                                                            tb.reconstructFormattingElements();                                                                            tb.insert(startTag);                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                        }else                                                                            if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                tb.error(this);                                                                                return false;                                                                            }else {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                            }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("head"))	false
org.jsoup.parser.HtmlTreeBuilderState::::622::::30609::::38455::::if (org.jsoup.helper.StringUtil.in(name, "dd", "dt")) {    if (!(tb.inScope(name))) {        tb.error(this);        return false;    }else {        tb.generateImpliedEndTags(name);        if (!(tb.currentElement().nodeName().equals(name)))            tb.error(this);        tb.popStackToClose(name);    }}else    if (org.jsoup.helper.StringUtil.in(name, "h1", "h2", "h3", "h4", "h5", "h6")) {        if (!(tb.inScope(new java.lang.String[]{ "h1", "h2", "h3", "h4", "h5", "h6" }))) {            tb.error(this);            return false;        }else {            tb.generateImpliedEndTags(name);            if (!(tb.currentElement().nodeName().equals(name)))                tb.error(this);            tb.popStackToClose("h1", "h2", "h3", "h4", "h5", "h6");        }    }else        if (name.equals("sarcasm")) {            return anyOtherEndTag(t, tb);        }else            if (org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")) {                OUTER : for (int i = 0; i < 8; i++) {                    org.jsoup.nodes.Element formatEl = tb.getActiveFormattingElement(name);                    if (formatEl == null)                        return anyOtherEndTag(t, tb);                    else                        if (!(tb.onStack(formatEl))) {                            tb.error(this);                            tb.removeFromActiveFormattingElements(formatEl);                            return true;                        }else                            if (!(tb.inScope(formatEl.nodeName()))) {                                tb.error(this);                                return false;                            }else                                if ((tb.currentElement()) != formatEl)                                    tb.error(this);                    org.jsoup.nodes.Element furthestBlock = null;                    org.jsoup.nodes.Element commonAncestor = null;                    boolean seenFormattingElement = false;                    java.util.LinkedList<org.jsoup.nodes.Element> stack = tb.getStack();                    for (int si = 0; (si < (stack.size())) && (si < 64); si++) {                        org.jsoup.nodes.Element el = stack.get(si);                        if (el == formatEl) {                            commonAncestor = stack.get((si - 1));                            seenFormattingElement = true;                        }else                            if (seenFormattingElement && (tb.isSpecial(el))) {                                furthestBlock = el;                                break;                            }                    }                    if (furthestBlock == null) {                        tb.popStackToClose(formatEl.nodeName());                        tb.removeFromActiveFormattingElements(formatEl);                        return true;                    }                    org.jsoup.nodes.Element node = furthestBlock;                    org.jsoup.nodes.Element lastNode = furthestBlock;                    INNER : for (int j = 0; j < 3; j++) {                        if (tb.onStack(node))                            node = tb.aboveOnStack(node);                        if (!(tb.isInActiveFormattingElements(node))) {                            tb.removeFromStack(node);                            continue INNER;                        }else                            if (node == formatEl)                                break INNER;                        org.jsoup.nodes.Element replacement = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(node.nodeName()), tb.getBaseUri());                        tb.replaceActiveFormattingElement(node, replacement);                        tb.replaceOnStack(node, replacement);                        node = replacement;                        if (lastNode == furthestBlock) {                        }                        if ((lastNode.parent()) != null)                            lastNode.remove();                        node.appendChild(lastNode);                        lastNode = node;                    }                    if (org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")) {                        if ((lastNode.parent()) != null)                            lastNode.remove();                        tb.insertInFosterParent(lastNode);                    }else {                        if ((lastNode.parent()) != null)                            lastNode.remove();                        commonAncestor.appendChild(lastNode);                    }                    org.jsoup.nodes.Element adopter = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(name), tb.getBaseUri());                    org.jsoup.nodes.Node[] childNodes = furthestBlock.childNodes().toArray(new org.jsoup.nodes.Node[furthestBlock.childNodeSize()]);                    for (org.jsoup.nodes.Node childNode : childNodes) {                        adopter.appendChild(childNode);                    }                    furthestBlock.appendChild(adopter);                    tb.removeFromActiveFormattingElements(formatEl);                    tb.removeFromStack(formatEl);                    tb.insertOnStackAfter(furthestBlock, adopter);                }            }else                if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {                    if (!(tb.inScope("name"))) {                        if (!(tb.inScope(name))) {                            tb.error(this);                            return false;                        }                        tb.generateImpliedEndTags();                        if (!(tb.currentElement().nodeName().equals(name)))                            tb.error(this);                        tb.popStackToClose(name);                        tb.clearFormattingElementsToLastMarker();                    }                }else                    if (name.equals("br")) {                        tb.error(this);                        tb.process(new org.jsoup.parser.Token.StartTag("br"));                        return false;                    }else {                        return anyOtherEndTag(t, tb);                    }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("p"))	false
org.jsoup.parser.HtmlTreeBuilderState::::632::::31110::::38455::::if (org.jsoup.helper.StringUtil.in(name, "h1", "h2", "h3", "h4", "h5", "h6")) {    if (!(tb.inScope(new java.lang.String[]{ "h1", "h2", "h3", "h4", "h5", "h6" }))) {        tb.error(this);        return false;    }else {        tb.generateImpliedEndTags(name);        if (!(tb.currentElement().nodeName().equals(name)))            tb.error(this);        tb.popStackToClose("h1", "h2", "h3", "h4", "h5", "h6");    }}else    if (name.equals("sarcasm")) {        return anyOtherEndTag(t, tb);    }else        if (org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")) {            OUTER : for (int i = 0; i < 8; i++) {                org.jsoup.nodes.Element formatEl = tb.getActiveFormattingElement(name);                if (formatEl == null)                    return anyOtherEndTag(t, tb);                else                    if (!(tb.onStack(formatEl))) {                        tb.error(this);                        tb.removeFromActiveFormattingElements(formatEl);                        return true;                    }else                        if (!(tb.inScope(formatEl.nodeName()))) {                            tb.error(this);                            return false;                        }else                            if ((tb.currentElement()) != formatEl)                                tb.error(this);                org.jsoup.nodes.Element furthestBlock = null;                org.jsoup.nodes.Element commonAncestor = null;                boolean seenFormattingElement = false;                java.util.LinkedList<org.jsoup.nodes.Element> stack = tb.getStack();                for (int si = 0; (si < (stack.size())) && (si < 64); si++) {                    org.jsoup.nodes.Element el = stack.get(si);                    if (el == formatEl) {                        commonAncestor = stack.get((si - 1));                        seenFormattingElement = true;                    }else                        if (seenFormattingElement && (tb.isSpecial(el))) {                            furthestBlock = el;                            break;                        }                }                if (furthestBlock == null) {                    tb.popStackToClose(formatEl.nodeName());                    tb.removeFromActiveFormattingElements(formatEl);                    return true;                }                org.jsoup.nodes.Element node = furthestBlock;                org.jsoup.nodes.Element lastNode = furthestBlock;                INNER : for (int j = 0; j < 3; j++) {                    if (tb.onStack(node))                        node = tb.aboveOnStack(node);                    if (!(tb.isInActiveFormattingElements(node))) {                        tb.removeFromStack(node);                        continue INNER;                    }else                        if (node == formatEl)                            break INNER;                    org.jsoup.nodes.Element replacement = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(node.nodeName()), tb.getBaseUri());                    tb.replaceActiveFormattingElement(node, replacement);                    tb.replaceOnStack(node, replacement);                    node = replacement;                    if (lastNode == furthestBlock) {                    }                    if ((lastNode.parent()) != null)                        lastNode.remove();                    node.appendChild(lastNode);                    lastNode = node;                }                if (org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")) {                    if ((lastNode.parent()) != null)                        lastNode.remove();                    tb.insertInFosterParent(lastNode);                }else {                    if ((lastNode.parent()) != null)                        lastNode.remove();                    commonAncestor.appendChild(lastNode);                }                org.jsoup.nodes.Element adopter = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(name), tb.getBaseUri());                org.jsoup.nodes.Node[] childNodes = furthestBlock.childNodes().toArray(new org.jsoup.nodes.Node[furthestBlock.childNodeSize()]);                for (org.jsoup.nodes.Node childNode : childNodes) {                    adopter.appendChild(childNode);                }                furthestBlock.appendChild(adopter);                tb.removeFromActiveFormattingElements(formatEl);                tb.removeFromStack(formatEl);                tb.insertOnStackAfter(furthestBlock, adopter);            }        }else            if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {                if (!(tb.inScope("name"))) {                    if (!(tb.inScope(name))) {                        tb.error(this);                        return false;                    }                    tb.generateImpliedEndTags();                    if (!(tb.currentElement().nodeName().equals(name)))                        tb.error(this);                    tb.popStackToClose(name);                    tb.clearFormattingElementsToLastMarker();                }            }else                if (name.equals("br")) {                    tb.error(this);                    tb.process(new org.jsoup.parser.Token.StartTag("br"));                    return false;                }else {                    return anyOtherEndTag(t, tb);                }::::INSERT::::STATEMENT::::if (lastNode == furthestBlock) {}	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"td"	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"script"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"a"	false
org.jsoup.parser.TokeniserState::::901::::30491::::30494::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.DoctypeName	false
org.jsoup.parser.HtmlTreeBuilder::::284::::9780::::9829::::java.util.Iterator<org.jsoup.nodes.Element> it = stack.descendingIterator()::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"u"	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"tt"	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"strong"	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"strike"	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"small"	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"s"	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"i"	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"font"	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"em"	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"code"	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"big"	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"b"	false
org.jsoup.parser.HtmlTreeBuilderState::::671::::33463::::33464::::el::::a	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33700::::33701::::el::::a	false
org.jsoup.parser.HtmlTreeBuilderState::::784::::39568::::39579::::return true::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18855::::26999::::if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {    tb.reconstructFormattingElements();    org.jsoup.nodes.Element el = tb.insert(startTag);    tb.pushActiveFormattingElements(el);}else    if (name.equals("nobr")) {        tb.reconstructFormattingElements();        if (tb.inScope("nobr")) {            tb.error(this);            tb.process(new org.jsoup.parser.Token.EndTag("nobr"));            tb.reconstructFormattingElements();        }        org.jsoup.nodes.Element el = tb.insert(startTag);        tb.pushActiveFormattingElements(el);    }else        if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {            tb.reconstructFormattingElements();            tb.insert(startTag);            tb.insertMarkerToFormattingElements();            tb.framesetOk(false);        }else            if (name.equals("table")) {                if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                }                tb.insert(startTag);                tb.framesetOk(false);                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);            }else                if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                    tb.reconstructFormattingElements();                    tb.insertEmpty(startTag);                    tb.framesetOk(false);                }else                    if (name.equals("input")) {                        tb.reconstructFormattingElements();                        org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                        if (!(el.attr("type").equalsIgnoreCase("hidden")))                            tb.framesetOk(false);                    }else                        if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                            tb.insertEmpty(startTag);                        }else                            if (name.equals("hr")) {                                if (tb.inButtonScope("p")) {                                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                                }                                tb.insertEmpty(startTag);                                tb.framesetOk(false);                            }else                                if (name.equals("image")) {                                    startTag.name("img");                                    return tb.process(startTag);                                }else                                    if (name.equals("isindex")) {                                        tb.error(this);                                        if ((tb.getFormElement()) != null)                                            return false;                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                        tb.process(new org.jsoup.parser.Token.StartTag("form"));                                        if (startTag.attributes.hasKey("action")) {                                            org.jsoup.nodes.Element form = tb.getFormElement();                                            form.attr("action", startTag.attributes.get("action"));                                        }                                        tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                        tb.process(new org.jsoup.parser.Token.StartTag("label"));                                        java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                        tb.process(new org.jsoup.parser.Token.Character(prompt));                                        org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                        for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                            if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                inputAttribs.put(attr);                                        }                                        inputAttribs.put("name", "isindex");                                        tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                        tb.process(new org.jsoup.parser.Token.EndTag("label"));                                        tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                        tb.process(new org.jsoup.parser.Token.EndTag("form"));                                    }else                                        if (name.equals("textarea")) {                                            tb.insert(startTag);                                            tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                            tb.markInsertionMode();                                            tb.framesetOk(false);                                            tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                        }else                                            if (name.equals("xmp")) {                                                if (tb.inButtonScope("p")) {                                                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                }                                                tb.reconstructFormattingElements();                                                tb.framesetOk(false);                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                            }else                                                if (name.equals("iframe")) {                                                    tb.framesetOk(false);                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                }else                                                    if (name.equals("noembed")) {                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("select")) {                                                            tb.reconstructFormattingElements();                                                            tb.insert(startTag);                                                            tb.framesetOk(false);                                                            org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                            if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                            else                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                        }else                                                            if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                if (tb.currentElement().nodeName().equals("option"))                                                                    tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                tb.reconstructFormattingElements();                                                                tb.insert(startTag);                                                            }else                                                                if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                    if (tb.inScope("ruby")) {                                                                        tb.generateImpliedEndTags();                                                                        if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                            tb.error(this);                                                                            tb.popStackToBefore("ruby");                                                                        }                                                                        tb.insert(startTag);                                                                    }                                                                }else                                                                    if (name.equals("math")) {                                                                        tb.reconstructFormattingElements();                                                                        tb.insert(startTag);                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                    }else                                                                        if (name.equals("svg")) {                                                                            tb.reconstructFormattingElements();                                                                            tb.insert(startTag);                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                        }else                                                                            if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                tb.error(this);                                                                                return false;                                                                            }else {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                            }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::622::::30613::::30643::::org.jsoup.helper.StringUtil.in(name, "dd", "dt")::::INSERT::::STATEMENT::::closeCell(tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"caption"	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33658::::33838::::if (seenFormattingElement && (tb.isSpecial(el))) {    furthestBlock = el;    break;}::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::622::::30609::::38455::::if (org.jsoup.helper.StringUtil.in(name, "dd", "dt")) {    if (!(tb.inScope(name))) {        tb.error(this);        return false;    }else {        tb.generateImpliedEndTags(name);        if (!(tb.currentElement().nodeName().equals(name)))            tb.error(this);        tb.popStackToClose(name);    }}else    if (org.jsoup.helper.StringUtil.in(name, "h1", "h2", "h3", "h4", "h5", "h6")) {        if (!(tb.inScope(new java.lang.String[]{ "h1", "h2", "h3", "h4", "h5", "h6" }))) {            tb.error(this);            return false;        }else {            tb.generateImpliedEndTags(name);            if (!(tb.currentElement().nodeName().equals(name)))                tb.error(this);            tb.popStackToClose("h1", "h2", "h3", "h4", "h5", "h6");        }    }else        if (name.equals("sarcasm")) {            return anyOtherEndTag(t, tb);        }else            if (org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")) {                OUTER : for (int i = 0; i < 8; i++) {                    org.jsoup.nodes.Element formatEl = tb.getActiveFormattingElement(name);                    if (formatEl == null)                        return anyOtherEndTag(t, tb);                    else                        if (!(tb.onStack(formatEl))) {                            tb.error(this);                            tb.removeFromActiveFormattingElements(formatEl);                            return true;                        }else                            if (!(tb.inScope(formatEl.nodeName()))) {                                tb.error(this);                                return false;                            }else                                if ((tb.currentElement()) != formatEl)                                    tb.error(this);                    org.jsoup.nodes.Element furthestBlock = null;                    org.jsoup.nodes.Element commonAncestor = null;                    boolean seenFormattingElement = false;                    java.util.LinkedList<org.jsoup.nodes.Element> stack = tb.getStack();                    for (int si = 0; (si < (stack.size())) && (si < 64); si++) {                        org.jsoup.nodes.Element el = stack.get(si);                        if (el == formatEl) {                            commonAncestor = stack.get((si - 1));                            seenFormattingElement = true;                        }else                            if (seenFormattingElement && (tb.isSpecial(el))) {                                furthestBlock = el;                                break;                            }                    }                    if (furthestBlock == null) {                        tb.popStackToClose(formatEl.nodeName());                        tb.removeFromActiveFormattingElements(formatEl);                        return true;                    }                    org.jsoup.nodes.Element node = furthestBlock;                    org.jsoup.nodes.Element lastNode = furthestBlock;                    INNER : for (int j = 0; j < 3; j++) {                        if (tb.onStack(node))                            node = tb.aboveOnStack(node);                        if (!(tb.isInActiveFormattingElements(node))) {                            tb.removeFromStack(node);                            continue INNER;                        }else                            if (node == formatEl)                                break INNER;                        org.jsoup.nodes.Element replacement = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(node.nodeName()), tb.getBaseUri());                        tb.replaceActiveFormattingElement(node, replacement);                        tb.replaceOnStack(node, replacement);                        node = replacement;                        if (lastNode == furthestBlock) {                        }                        if ((lastNode.parent()) != null)                            lastNode.remove();                        node.appendChild(lastNode);                        lastNode = node;                    }                    if (org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")) {                        if ((lastNode.parent()) != null)                            lastNode.remove();                        tb.insertInFosterParent(lastNode);                    }else {                        if ((lastNode.parent()) != null)                            lastNode.remove();                        commonAncestor.appendChild(lastNode);                    }                    org.jsoup.nodes.Element adopter = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(name), tb.getBaseUri());                    org.jsoup.nodes.Node[] childNodes = furthestBlock.childNodes().toArray(new org.jsoup.nodes.Node[furthestBlock.childNodeSize()]);                    for (org.jsoup.nodes.Node childNode : childNodes) {                        adopter.appendChild(childNode);                    }                    furthestBlock.appendChild(adopter);                    tb.removeFromActiveFormattingElements(formatEl);                    tb.removeFromStack(formatEl);                    tb.insertOnStackAfter(furthestBlock, adopter);                }            }else                if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {                    if (!(tb.inScope("name"))) {                        if (!(tb.inScope(name))) {                            tb.error(this);                            return false;                        }                        tb.generateImpliedEndTags();                        if (!(tb.currentElement().nodeName().equals(name)))                            tb.error(this);                        tb.popStackToClose(name);                        tb.clearFormattingElementsToLastMarker();                    }                }else                    if (name.equals("br")) {                        tb.error(this);                        tb.process(new org.jsoup.parser.Token.StartTag("br"));                        return false;                    }else {                        return anyOtherEndTag(t, tb);                    }::::INSERT::::STATEMENT::::if (lastNode == furthestBlock) {}	false
org.jsoup.parser.HtmlTreeBuilderState::::784::::39568::::39579::::return true::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("noscript"))	false
org.jsoup.parser.HtmlTreeBuilderState::::772::::39137::::39168::::tb.generateImpliedEndTags(name)::::DELETE::::STATEMENT	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"th"	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31734::::name.equals("sarcasm")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("optgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33662::::33702::::seenFormattingElement && (tb.isSpecial(el))::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InTable)	false
org.jsoup.parser.HtmlTreeBuilderState::::645::::31858::::32001::::org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("br"))	false
org.jsoup.parser.HtmlTreeBuilderState::::661::::32850::::32864::::tb.error(this)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tbody"))	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32374::::32864::::if (!(tb.onStack(formatEl))) {    tb.error(this);    tb.removeFromActiveFormattingElements(formatEl);    return true;}else    if (!(tb.inScope(formatEl.nodeName()))) {        tb.error(this);        return false;    }else        if ((tb.currentElement()) != formatEl)            tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::661::::32850::::32864::::tb.error(this)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("colgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"noframes"	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"frameset"	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"caption"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"a"	false
org.jsoup.parser.HtmlTreeBuilderState::::661::::32850::::32864::::tb.error(this)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("button"))	false
org.jsoup.parser.HtmlTreeBuilderState::::632::::31114::::31168::::org.jsoup.helper.StringUtil.in(name, "h1", "h2", "h3", "h4", "h5", "h6")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("head"))	false
org.jsoup.parser.HtmlTreeBuilderState::::649::::32115::::37512::::OUTER : for (int i = 0; i < 8; i++) {    org.jsoup.nodes.Element formatEl = tb.getActiveFormattingElement(name);    if (formatEl == null)        return anyOtherEndTag(t, tb);    else        if (!(tb.onStack(formatEl))) {            tb.error(this);            tb.removeFromActiveFormattingElements(formatEl);            return true;        }else            if (!(tb.inScope(formatEl.nodeName()))) {                tb.error(this);                return false;            }else                if ((tb.currentElement()) != formatEl)                    tb.error(this);    org.jsoup.nodes.Element furthestBlock = null;    org.jsoup.nodes.Element commonAncestor = null;    boolean seenFormattingElement = false;    java.util.LinkedList<org.jsoup.nodes.Element> stack = tb.getStack();    for (int si = 0; (si < (stack.size())) && (si < 64); si++) {        org.jsoup.nodes.Element el = stack.get(si);        if (el == formatEl) {            commonAncestor = stack.get((si - 1));            seenFormattingElement = true;        }else            if (seenFormattingElement && (tb.isSpecial(el))) {                furthestBlock = el;                break;            }    }    if (furthestBlock == null) {        tb.popStackToClose(formatEl.nodeName());        tb.removeFromActiveFormattingElements(formatEl);        return true;    }    org.jsoup.nodes.Element node = furthestBlock;    org.jsoup.nodes.Element lastNode = furthestBlock;    INNER : for (int j = 0; j < 3; j++) {        if (tb.onStack(node))            node = tb.aboveOnStack(node);        if (!(tb.isInActiveFormattingElements(node))) {            tb.removeFromStack(node);            continue INNER;        }else            if (node == formatEl)                break INNER;        org.jsoup.nodes.Element replacement = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(node.nodeName()), tb.getBaseUri());        tb.replaceActiveFormattingElement(node, replacement);        tb.replaceOnStack(node, replacement);        node = replacement;        if (lastNode == furthestBlock) {        }        if ((lastNode.parent()) != null)            lastNode.remove();        node.appendChild(lastNode);        lastNode = node;    }    if (org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")) {        if ((lastNode.parent()) != null)            lastNode.remove();        tb.insertInFosterParent(lastNode);    }else {        if ((lastNode.parent()) != null)            lastNode.remove();        commonAncestor.appendChild(lastNode);    }    org.jsoup.nodes.Element adopter = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(name), tb.getBaseUri());    org.jsoup.nodes.Node[] childNodes = furthestBlock.childNodes().toArray(new org.jsoup.nodes.Node[furthestBlock.childNodeSize()]);    for (org.jsoup.nodes.Node childNode : childNodes) {        adopter.appendChild(childNode);    }    furthestBlock.appendChild(adopter);    tb.removeFromActiveFormattingElements(formatEl);    tb.removeFromStack(formatEl);    tb.insertOnStackAfter(furthestBlock, adopter);}::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"noframes"	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"title"	false
org.jsoup.parser.HtmlTreeBuilderState::::776::::39346::::39351::::break::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("option"))	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30134::::name.equals("li")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::730::::37090::::37102::::furthestBlock::::a	false
org.jsoup.parser.TokeniserState::::731::::24401::::24421::::char c = r.consume()::::INSERT::::STATEMENT::::anythingElse(t, r)	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32374::::32864::::if (!(tb.onStack(formatEl))) {    tb.error(this);    tb.removeFromActiveFormattingElements(formatEl);    return true;}else    if (!(tb.inScope(formatEl.nodeName()))) {        tb.error(this);        return false;    }else        if ((tb.currentElement()) != formatEl)            tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("body"))	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"style"	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"command"	false
org.jsoup.parser.HtmlTreeBuilderState::::622::::30613::::30643::::org.jsoup.helper.StringUtil.in(name, "dd", "dt")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("head"))	false
org.jsoup.parser.HtmlTreeBuilderState::::661::::32850::::32864::::tb.error(this)::::INSERT::::STATEMENT::::if (notIgnored)    return tb.process(endTag);	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32612::::32864::::if (!(tb.inScope(formatEl.nodeName()))) {    tb.error(this);    return false;}else    if ((tb.currentElement()) != formatEl)        tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("body"))	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"td"	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18855::::26999::::if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {    tb.reconstructFormattingElements();    org.jsoup.nodes.Element el = tb.insert(startTag);    tb.pushActiveFormattingElements(el);}else    if (name.equals("nobr")) {        tb.reconstructFormattingElements();        if (tb.inScope("nobr")) {            tb.error(this);            tb.process(new org.jsoup.parser.Token.EndTag("nobr"));            tb.reconstructFormattingElements();        }        org.jsoup.nodes.Element el = tb.insert(startTag);        tb.pushActiveFormattingElements(el);    }else        if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {            tb.reconstructFormattingElements();            tb.insert(startTag);            tb.insertMarkerToFormattingElements();            tb.framesetOk(false);        }else            if (name.equals("table")) {                if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                }                tb.insert(startTag);                tb.framesetOk(false);                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);            }else                if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                    tb.reconstructFormattingElements();                    tb.insertEmpty(startTag);                    tb.framesetOk(false);                }else                    if (name.equals("input")) {                        tb.reconstructFormattingElements();                        org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                        if (!(el.attr("type").equalsIgnoreCase("hidden")))                            tb.framesetOk(false);                    }else                        if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                            tb.insertEmpty(startTag);                        }else                            if (name.equals("hr")) {                                if (tb.inButtonScope("p")) {                                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                                }                                tb.insertEmpty(startTag);                                tb.framesetOk(false);                            }else                                if (name.equals("image")) {                                    startTag.name("img");                                    return tb.process(startTag);                                }else                                    if (name.equals("isindex")) {                                        tb.error(this);                                        if ((tb.getFormElement()) != null)                                            return false;                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                        tb.process(new org.jsoup.parser.Token.StartTag("form"));                                        if (startTag.attributes.hasKey("action")) {                                            org.jsoup.nodes.Element form = tb.getFormElement();                                            form.attr("action", startTag.attributes.get("action"));                                        }                                        tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                        tb.process(new org.jsoup.parser.Token.StartTag("label"));                                        java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                        tb.process(new org.jsoup.parser.Token.Character(prompt));                                        org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                        for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                            if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                inputAttribs.put(attr);                                        }                                        inputAttribs.put("name", "isindex");                                        tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                        tb.process(new org.jsoup.parser.Token.EndTag("label"));                                        tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                        tb.process(new org.jsoup.parser.Token.EndTag("form"));                                    }else                                        if (name.equals("textarea")) {                                            tb.insert(startTag);                                            tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                            tb.markInsertionMode();                                            tb.framesetOk(false);                                            tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                        }else                                            if (name.equals("xmp")) {                                                if (tb.inButtonScope("p")) {                                                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                }                                                tb.reconstructFormattingElements();                                                tb.framesetOk(false);                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                            }else                                                if (name.equals("iframe")) {                                                    tb.framesetOk(false);                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                }else                                                    if (name.equals("noembed")) {                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("select")) {                                                            tb.reconstructFormattingElements();                                                            tb.insert(startTag);                                                            tb.framesetOk(false);                                                            org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                            if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                            else                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                        }else                                                            if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                if (tb.currentElement().nodeName().equals("option"))                                                                    tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                tb.reconstructFormattingElements();                                                                tb.insert(startTag);                                                            }else                                                                if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                    if (tb.inScope("ruby")) {                                                                        tb.generateImpliedEndTags();                                                                        if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                            tb.error(this);                                                                            tb.popStackToBefore("ruby");                                                                        }                                                                        tb.insert(startTag);                                                                    }                                                                }else                                                                    if (name.equals("math")) {                                                                        tb.reconstructFormattingElements();                                                                        tb.insert(startTag);                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                    }else                                                                        if (name.equals("svg")) {                                                                            tb.reconstructFormattingElements();                                                                            tb.insert(startTag);                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                        }else                                                                            if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                tb.error(this);                                                                                return false;                                                                            }else {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                            }::::INSERT::::STATEMENT::::closeCell(tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33662::::33702::::seenFormattingElement && (tb.isSpecial(el))::::tb.process(new org.jsoup.parser.Token.StartTag("body"))	false
org.jsoup.parser.Token::::64::::1956::::1976::::pendingAttributeValue::::this.attributes	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"link"	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"bgsound"	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"basefont"	false
org.jsoup.parser.TokeniserState::::901::::30491::::30494::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.BeforeAttributeValue	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17521::::26999::::if (name.equals("button")) {    if (tb.inButtonScope("button")) {        tb.error(this);        tb.process(new org.jsoup.parser.Token.EndTag("button"));        tb.process(startTag);    }else {        tb.reconstructFormattingElements();        tb.insert(startTag);        tb.framesetOk(false);    }}else    if (name.equals("a")) {        if ((tb.getActiveFormattingElement("a")) != null) {            tb.error(this);            tb.process(new org.jsoup.parser.Token.EndTag("a"));            org.jsoup.nodes.Element remainingA = tb.getFromStack("a");            if (remainingA != null) {                tb.removeFromActiveFormattingElements(remainingA);                tb.removeFromStack(remainingA);            }        }        tb.reconstructFormattingElements();        org.jsoup.nodes.Element a = tb.insert(startTag);        tb.pushActiveFormattingElements(a);    }else        if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {            tb.reconstructFormattingElements();            org.jsoup.nodes.Element el = tb.insert(startTag);            tb.pushActiveFormattingElements(el);        }else            if (name.equals("nobr")) {                tb.reconstructFormattingElements();                if (tb.inScope("nobr")) {                    tb.error(this);                    tb.process(new org.jsoup.parser.Token.EndTag("nobr"));                    tb.reconstructFormattingElements();                }                org.jsoup.nodes.Element el = tb.insert(startTag);                tb.pushActiveFormattingElements(el);            }else                if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {                    tb.reconstructFormattingElements();                    tb.insert(startTag);                    tb.insertMarkerToFormattingElements();                    tb.framesetOk(false);                }else                    if (name.equals("table")) {                        if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                            tb.process(new org.jsoup.parser.Token.EndTag("p"));                        }                        tb.insert(startTag);                        tb.framesetOk(false);                        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                    }else                        if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                            tb.reconstructFormattingElements();                            tb.insertEmpty(startTag);                            tb.framesetOk(false);                        }else                            if (name.equals("input")) {                                tb.reconstructFormattingElements();                                org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                                if (!(el.attr("type").equalsIgnoreCase("hidden")))                                    tb.framesetOk(false);                            }else                                if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                                    tb.insertEmpty(startTag);                                }else                                    if (name.equals("hr")) {                                        if (tb.inButtonScope("p")) {                                            tb.process(new org.jsoup.parser.Token.EndTag("p"));                                        }                                        tb.insertEmpty(startTag);                                        tb.framesetOk(false);                                    }else                                        if (name.equals("image")) {                                            startTag.name("img");                                            return tb.process(startTag);                                        }else                                            if (name.equals("isindex")) {                                                tb.error(this);                                                if ((tb.getFormElement()) != null)                                                    return false;                                                tb.tokeniser.acknowledgeSelfClosingFlag();                                                tb.process(new org.jsoup.parser.Token.StartTag("form"));                                                if (startTag.attributes.hasKey("action")) {                                                    org.jsoup.nodes.Element form = tb.getFormElement();                                                    form.attr("action", startTag.attributes.get("action"));                                                }                                                tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                                tb.process(new org.jsoup.parser.Token.StartTag("label"));                                                java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                                tb.process(new org.jsoup.parser.Token.Character(prompt));                                                org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                                for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                                    if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                        inputAttribs.put(attr);                                                }                                                inputAttribs.put("name", "isindex");                                                tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                                tb.process(new org.jsoup.parser.Token.EndTag("label"));                                                tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                                tb.process(new org.jsoup.parser.Token.EndTag("form"));                                            }else                                                if (name.equals("textarea")) {                                                    tb.insert(startTag);                                                    tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                                    tb.markInsertionMode();                                                    tb.framesetOk(false);                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                                }else                                                    if (name.equals("xmp")) {                                                        if (tb.inButtonScope("p")) {                                                            tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                        }                                                        tb.reconstructFormattingElements();                                                        tb.framesetOk(false);                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("iframe")) {                                                            tb.framesetOk(false);                                                            org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                        }else                                                            if (name.equals("noembed")) {                                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                            }else                                                                if (name.equals("select")) {                                                                    tb.reconstructFormattingElements();                                                                    tb.insert(startTag);                                                                    tb.framesetOk(false);                                                                    org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                                    if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                                    else                                                                        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                                }else                                                                    if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                        if (tb.currentElement().nodeName().equals("option"))                                                                            tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                        tb.reconstructFormattingElements();                                                                        tb.insert(startTag);                                                                    }else                                                                        if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                            if (tb.inScope("ruby")) {                                                                                tb.generateImpliedEndTags();                                                                                if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                                    tb.error(this);                                                                                    tb.popStackToBefore("ruby");                                                                                }                                                                                tb.insert(startTag);                                                                            }                                                                        }else                                                                            if (name.equals("math")) {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                                tb.tokeniser.acknowledgeSelfClosingFlag();                                                                            }else                                                                                if (name.equals("svg")) {                                                                                    tb.reconstructFormattingElements();                                                                                    tb.insert(startTag);                                                                                    tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                }else                                                                                    if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                        tb.error(this);                                                                                        return false;                                                                                    }else {                                                                                        tb.reconstructFormattingElements();                                                                                        tb.insert(startTag);                                                                                    }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("a"))	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"nobr"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"noframes"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"noframes"	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"nobr"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17521::::26999::::if (name.equals("button")) {    if (tb.inButtonScope("button")) {        tb.error(this);        tb.process(new org.jsoup.parser.Token.EndTag("button"));        tb.process(startTag);    }else {        tb.reconstructFormattingElements();        tb.insert(startTag);        tb.framesetOk(false);    }}else    if (name.equals("a")) {        if ((tb.getActiveFormattingElement("a")) != null) {            tb.error(this);            tb.process(new org.jsoup.parser.Token.EndTag("a"));            org.jsoup.nodes.Element remainingA = tb.getFromStack("a");            if (remainingA != null) {                tb.removeFromActiveFormattingElements(remainingA);                tb.removeFromStack(remainingA);            }        }        tb.reconstructFormattingElements();        org.jsoup.nodes.Element a = tb.insert(startTag);        tb.pushActiveFormattingElements(a);    }else        if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {            tb.reconstructFormattingElements();            org.jsoup.nodes.Element el = tb.insert(startTag);            tb.pushActiveFormattingElements(el);        }else            if (name.equals("nobr")) {                tb.reconstructFormattingElements();                if (tb.inScope("nobr")) {                    tb.error(this);                    tb.process(new org.jsoup.parser.Token.EndTag("nobr"));                    tb.reconstructFormattingElements();                }                org.jsoup.nodes.Element el = tb.insert(startTag);                tb.pushActiveFormattingElements(el);            }else                if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {                    tb.reconstructFormattingElements();                    tb.insert(startTag);                    tb.insertMarkerToFormattingElements();                    tb.framesetOk(false);                }else                    if (name.equals("table")) {                        if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                            tb.process(new org.jsoup.parser.Token.EndTag("p"));                        }                        tb.insert(startTag);                        tb.framesetOk(false);                        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                    }else                        if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                            tb.reconstructFormattingElements();                            tb.insertEmpty(startTag);                            tb.framesetOk(false);                        }else                            if (name.equals("input")) {                                tb.reconstructFormattingElements();                                org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                                if (!(el.attr("type").equalsIgnoreCase("hidden")))                                    tb.framesetOk(false);                            }else                                if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                                    tb.insertEmpty(startTag);                                }else                                    if (name.equals("hr")) {                                        if (tb.inButtonScope("p")) {                                            tb.process(new org.jsoup.parser.Token.EndTag("p"));                                        }                                        tb.insertEmpty(startTag);                                        tb.framesetOk(false);                                    }else                                        if (name.equals("image")) {                                            startTag.name("img");                                            return tb.process(startTag);                                        }else                                            if (name.equals("isindex")) {                                                tb.error(this);                                                if ((tb.getFormElement()) != null)                                                    return false;                                                tb.tokeniser.acknowledgeSelfClosingFlag();                                                tb.process(new org.jsoup.parser.Token.StartTag("form"));                                                if (startTag.attributes.hasKey("action")) {                                                    org.jsoup.nodes.Element form = tb.getFormElement();                                                    form.attr("action", startTag.attributes.get("action"));                                                }                                                tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                                tb.process(new org.jsoup.parser.Token.StartTag("label"));                                                java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                                tb.process(new org.jsoup.parser.Token.Character(prompt));                                                org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                                for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                                    if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                        inputAttribs.put(attr);                                                }                                                inputAttribs.put("name", "isindex");                                                tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                                tb.process(new org.jsoup.parser.Token.EndTag("label"));                                                tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                                tb.process(new org.jsoup.parser.Token.EndTag("form"));                                            }else                                                if (name.equals("textarea")) {                                                    tb.insert(startTag);                                                    tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                                    tb.markInsertionMode();                                                    tb.framesetOk(false);                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                                }else                                                    if (name.equals("xmp")) {                                                        if (tb.inButtonScope("p")) {                                                            tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                        }                                                        tb.reconstructFormattingElements();                                                        tb.framesetOk(false);                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("iframe")) {                                                            tb.framesetOk(false);                                                            org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                        }else                                                            if (name.equals("noembed")) {                                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                            }else                                                                if (name.equals("select")) {                                                                    tb.reconstructFormattingElements();                                                                    tb.insert(startTag);                                                                    tb.framesetOk(false);                                                                    org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                                    if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                                    else                                                                        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                                }else                                                                    if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                        if (tb.currentElement().nodeName().equals("option"))                                                                            tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                        tb.reconstructFormattingElements();                                                                        tb.insert(startTag);                                                                    }else                                                                        if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                            if (tb.inScope("ruby")) {                                                                                tb.generateImpliedEndTags();                                                                                if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                                    tb.error(this);                                                                                    tb.popStackToBefore("ruby");                                                                                }                                                                                tb.insert(startTag);                                                                            }                                                                        }else                                                                            if (name.equals("math")) {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                                tb.tokeniser.acknowledgeSelfClosingFlag();                                                                            }else                                                                                if (name.equals("svg")) {                                                                                    tb.reconstructFormattingElements();                                                                                    tb.insert(startTag);                                                                                    tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                }else                                                                                    if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                        tb.error(this);                                                                                        return false;                                                                                    }else {                                                                                        tb.reconstructFormattingElements();                                                                                        tb.insert(startTag);                                                                                    }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30134::::name.equals("li")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("a"))	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"style"	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"th"	false
org.jsoup.parser.HtmlTreeBuilderState::::784::::39568::::39579::::return true::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tbody"))	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18070::::26999::::if (name.equals("a")) {    if ((tb.getActiveFormattingElement("a")) != null) {        tb.error(this);        tb.process(new org.jsoup.parser.Token.EndTag("a"));        org.jsoup.nodes.Element remainingA = tb.getFromStack("a");        if (remainingA != null) {            tb.removeFromActiveFormattingElements(remainingA);            tb.removeFromStack(remainingA);        }    }    tb.reconstructFormattingElements();    org.jsoup.nodes.Element a = tb.insert(startTag);    tb.pushActiveFormattingElements(a);}else    if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {        tb.reconstructFormattingElements();        org.jsoup.nodes.Element el = tb.insert(startTag);        tb.pushActiveFormattingElements(el);    }else        if (name.equals("nobr")) {            tb.reconstructFormattingElements();            if (tb.inScope("nobr")) {                tb.error(this);                tb.process(new org.jsoup.parser.Token.EndTag("nobr"));                tb.reconstructFormattingElements();            }            org.jsoup.nodes.Element el = tb.insert(startTag);            tb.pushActiveFormattingElements(el);        }else            if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {                tb.reconstructFormattingElements();                tb.insert(startTag);                tb.insertMarkerToFormattingElements();                tb.framesetOk(false);            }else                if (name.equals("table")) {                    if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                        tb.process(new org.jsoup.parser.Token.EndTag("p"));                    }                    tb.insert(startTag);                    tb.framesetOk(false);                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                }else                    if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                        tb.reconstructFormattingElements();                        tb.insertEmpty(startTag);                        tb.framesetOk(false);                    }else                        if (name.equals("input")) {                            tb.reconstructFormattingElements();                            org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                            if (!(el.attr("type").equalsIgnoreCase("hidden")))                                tb.framesetOk(false);                        }else                            if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                                tb.insertEmpty(startTag);                            }else                                if (name.equals("hr")) {                                    if (tb.inButtonScope("p")) {                                        tb.process(new org.jsoup.parser.Token.EndTag("p"));                                    }                                    tb.insertEmpty(startTag);                                    tb.framesetOk(false);                                }else                                    if (name.equals("image")) {                                        startTag.name("img");                                        return tb.process(startTag);                                    }else                                        if (name.equals("isindex")) {                                            tb.error(this);                                            if ((tb.getFormElement()) != null)                                                return false;                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                            tb.process(new org.jsoup.parser.Token.StartTag("form"));                                            if (startTag.attributes.hasKey("action")) {                                                org.jsoup.nodes.Element form = tb.getFormElement();                                                form.attr("action", startTag.attributes.get("action"));                                            }                                            tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                            tb.process(new org.jsoup.parser.Token.StartTag("label"));                                            java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                            tb.process(new org.jsoup.parser.Token.Character(prompt));                                            org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                            for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                                if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                    inputAttribs.put(attr);                                            }                                            inputAttribs.put("name", "isindex");                                            tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                            tb.process(new org.jsoup.parser.Token.EndTag("label"));                                            tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                            tb.process(new org.jsoup.parser.Token.EndTag("form"));                                        }else                                            if (name.equals("textarea")) {                                                tb.insert(startTag);                                                tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                                tb.markInsertionMode();                                                tb.framesetOk(false);                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                            }else                                                if (name.equals("xmp")) {                                                    if (tb.inButtonScope("p")) {                                                        tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                    }                                                    tb.reconstructFormattingElements();                                                    tb.framesetOk(false);                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                }else                                                    if (name.equals("iframe")) {                                                        tb.framesetOk(false);                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("noembed")) {                                                            org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                        }else                                                            if (name.equals("select")) {                                                                tb.reconstructFormattingElements();                                                                tb.insert(startTag);                                                                tb.framesetOk(false);                                                                org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                                if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                                else                                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                            }else                                                                if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                    if (tb.currentElement().nodeName().equals("option"))                                                                        tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                    tb.reconstructFormattingElements();                                                                    tb.insert(startTag);                                                                }else                                                                    if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                        if (tb.inScope("ruby")) {                                                                            tb.generateImpliedEndTags();                                                                            if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                                tb.error(this);                                                                                tb.popStackToBefore("ruby");                                                                            }                                                                            tb.insert(startTag);                                                                        }                                                                    }else                                                                        if (name.equals("math")) {                                                                            tb.reconstructFormattingElements();                                                                            tb.insert(startTag);                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                        }else                                                                            if (name.equals("svg")) {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                                tb.tokeniser.acknowledgeSelfClosingFlag();                                                                            }else                                                                                if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                    tb.error(this);                                                                                    return false;                                                                                }else {                                                                                    tb.reconstructFormattingElements();                                                                                    tb.insert(startTag);                                                                                }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33517::::33551::::commonAncestor = stack.get((si - 1))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("th"))	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33517::::33551::::commonAncestor = stack.get((si - 1))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("td"))	false
org.jsoup.parser.HtmlTreeBuilderState::::784::::39568::::39579::::return true::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("li"))	false
org.jsoup.parser.HtmlTreeBuilderState::::784::::39568::::39579::::return true::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("colgroup"))	false
org.jsoup.parser.Token::::133::::4054::::4074::::pendingAttributeValue::::systemIdentifier	false
org.jsoup.parser.Token::::133::::4054::::4074::::pendingAttributeValue::::publicIdentifier	false
org.jsoup.parser.Token::::133::::4054::::4074::::pendingAttributeValue::::name	false
org.jsoup.parser.Token::::133::::4054::::4074::::pendingAttributeValue::::data	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"colgroup"	false
org.jsoup.parser.HtmlTreeBuilderState::::412::::18675::::18709::::tb.reconstructFormattingElements()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("th"))	false
org.jsoup.parser.HtmlTreeBuilderState::::412::::18675::::18709::::tb.reconstructFormattingElements()::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("td"))	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"caption"	false
org.jsoup.parser.HtmlTreeBuilderState::::661::::32850::::32864::::tb.error(this)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("li"))	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"meta"	false
org.jsoup.parser.HtmlTreeBuilder::::284::::9780::::9829::::java.util.Iterator<org.jsoup.nodes.Element> it = stack.descendingIterator()::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.HtmlTreeBuilder::::645::::22766::::22777::::it.remove()::::INSERT::::STATEMENT::::pop()	false
org.jsoup.parser.HtmlTreeBuilderState::::734::::37463::::37475::::furthestBlock::::a	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32390::::32397::::formatEl::::body	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"caption"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17521::::26999::::if (name.equals("button")) {    if (tb.inButtonScope("button")) {        tb.error(this);        tb.process(new org.jsoup.parser.Token.EndTag("button"));        tb.process(startTag);    }else {        tb.reconstructFormattingElements();        tb.insert(startTag);        tb.framesetOk(false);    }}else    if (name.equals("a")) {        if ((tb.getActiveFormattingElement("a")) != null) {            tb.error(this);            tb.process(new org.jsoup.parser.Token.EndTag("a"));            org.jsoup.nodes.Element remainingA = tb.getFromStack("a");            if (remainingA != null) {                tb.removeFromActiveFormattingElements(remainingA);                tb.removeFromStack(remainingA);            }        }        tb.reconstructFormattingElements();        org.jsoup.nodes.Element a = tb.insert(startTag);        tb.pushActiveFormattingElements(a);    }else        if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {            tb.reconstructFormattingElements();            org.jsoup.nodes.Element el = tb.insert(startTag);            tb.pushActiveFormattingElements(el);        }else            if (name.equals("nobr")) {                tb.reconstructFormattingElements();                if (tb.inScope("nobr")) {                    tb.error(this);                    tb.process(new org.jsoup.parser.Token.EndTag("nobr"));                    tb.reconstructFormattingElements();                }                org.jsoup.nodes.Element el = tb.insert(startTag);                tb.pushActiveFormattingElements(el);            }else                if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {                    tb.reconstructFormattingElements();                    tb.insert(startTag);                    tb.insertMarkerToFormattingElements();                    tb.framesetOk(false);                }else                    if (name.equals("table")) {                        if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                            tb.process(new org.jsoup.parser.Token.EndTag("p"));                        }                        tb.insert(startTag);                        tb.framesetOk(false);                        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                    }else                        if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                            tb.reconstructFormattingElements();                            tb.insertEmpty(startTag);                            tb.framesetOk(false);                        }else                            if (name.equals("input")) {                                tb.reconstructFormattingElements();                                org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                                if (!(el.attr("type").equalsIgnoreCase("hidden")))                                    tb.framesetOk(false);                            }else                                if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                                    tb.insertEmpty(startTag);                                }else                                    if (name.equals("hr")) {                                        if (tb.inButtonScope("p")) {                                            tb.process(new org.jsoup.parser.Token.EndTag("p"));                                        }                                        tb.insertEmpty(startTag);                                        tb.framesetOk(false);                                    }else                                        if (name.equals("image")) {                                            startTag.name("img");                                            return tb.process(startTag);                                        }else                                            if (name.equals("isindex")) {                                                tb.error(this);                                                if ((tb.getFormElement()) != null)                                                    return false;                                                tb.tokeniser.acknowledgeSelfClosingFlag();                                                tb.process(new org.jsoup.parser.Token.StartTag("form"));                                                if (startTag.attributes.hasKey("action")) {                                                    org.jsoup.nodes.Element form = tb.getFormElement();                                                    form.attr("action", startTag.attributes.get("action"));                                                }                                                tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                                tb.process(new org.jsoup.parser.Token.StartTag("label"));                                                java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                                tb.process(new org.jsoup.parser.Token.Character(prompt));                                                org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                                for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                                    if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                        inputAttribs.put(attr);                                                }                                                inputAttribs.put("name", "isindex");                                                tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                                tb.process(new org.jsoup.parser.Token.EndTag("label"));                                                tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                                tb.process(new org.jsoup.parser.Token.EndTag("form"));                                            }else                                                if (name.equals("textarea")) {                                                    tb.insert(startTag);                                                    tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                                    tb.markInsertionMode();                                                    tb.framesetOk(false);                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                                }else                                                    if (name.equals("xmp")) {                                                        if (tb.inButtonScope("p")) {                                                            tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                        }                                                        tb.reconstructFormattingElements();                                                        tb.framesetOk(false);                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("iframe")) {                                                            tb.framesetOk(false);                                                            org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                        }else                                                            if (name.equals("noembed")) {                                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                            }else                                                                if (name.equals("select")) {                                                                    tb.reconstructFormattingElements();                                                                    tb.insert(startTag);                                                                    tb.framesetOk(false);                                                                    org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                                    if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                                    else                                                                        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                                }else                                                                    if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                        if (tb.currentElement().nodeName().equals("option"))                                                                            tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                        tb.reconstructFormattingElements();                                                                        tb.insert(startTag);                                                                    }else                                                                        if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                            if (tb.inScope("ruby")) {                                                                                tb.generateImpliedEndTags();                                                                                if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                                    tb.error(this);                                                                                    tb.popStackToBefore("ruby");                                                                                }                                                                                tb.insert(startTag);                                                                            }                                                                        }else                                                                            if (name.equals("math")) {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                                tb.tokeniser.acknowledgeSelfClosingFlag();                                                                            }else                                                                                if (name.equals("svg")) {                                                                                    tb.reconstructFormattingElements();                                                                                    tb.insert(startTag);                                                                                    tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                }else                                                                                    if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                        tb.error(this);                                                                                        return false;                                                                                    }else {                                                                                        tb.reconstructFormattingElements();                                                                                        tb.insert(startTag);                                                                                    }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"base"	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"link"	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"bgsound"	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"basefont"	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"td"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"style"	false
org.jsoup.parser.HtmlTreeBuilderState::::645::::31854::::38455::::if (org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")) {    OUTER : for (int i = 0; i < 8; i++) {        org.jsoup.nodes.Element formatEl = tb.getActiveFormattingElement(name);        if (formatEl == null)            return anyOtherEndTag(t, tb);        else            if (!(tb.onStack(formatEl))) {                tb.error(this);                tb.removeFromActiveFormattingElements(formatEl);                return true;            }else                if (!(tb.inScope(formatEl.nodeName()))) {                    tb.error(this);                    return false;                }else                    if ((tb.currentElement()) != formatEl)                        tb.error(this);        org.jsoup.nodes.Element furthestBlock = null;        org.jsoup.nodes.Element commonAncestor = null;        boolean seenFormattingElement = false;        java.util.LinkedList<org.jsoup.nodes.Element> stack = tb.getStack();        for (int si = 0; (si < (stack.size())) && (si < 64); si++) {            org.jsoup.nodes.Element el = stack.get(si);            if (el == formatEl) {                commonAncestor = stack.get((si - 1));                seenFormattingElement = true;            }else                if (seenFormattingElement && (tb.isSpecial(el))) {                    furthestBlock = el;                    break;                }        }        if (furthestBlock == null) {            tb.popStackToClose(formatEl.nodeName());            tb.removeFromActiveFormattingElements(formatEl);            return true;        }        org.jsoup.nodes.Element node = furthestBlock;        org.jsoup.nodes.Element lastNode = furthestBlock;        INNER : for (int j = 0; j < 3; j++) {            if (tb.onStack(node))                node = tb.aboveOnStack(node);            if (!(tb.isInActiveFormattingElements(node))) {                tb.removeFromStack(node);                continue INNER;            }else                if (node == formatEl)                    break INNER;            org.jsoup.nodes.Element replacement = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(node.nodeName()), tb.getBaseUri());            tb.replaceActiveFormattingElement(node, replacement);            tb.replaceOnStack(node, replacement);            node = replacement;            if (lastNode == furthestBlock) {            }            if ((lastNode.parent()) != null)                lastNode.remove();            node.appendChild(lastNode);            lastNode = node;        }        if (org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")) {            if ((lastNode.parent()) != null)                lastNode.remove();            tb.insertInFosterParent(lastNode);        }else {            if ((lastNode.parent()) != null)                lastNode.remove();            commonAncestor.appendChild(lastNode);        }        org.jsoup.nodes.Element adopter = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(name), tb.getBaseUri());        org.jsoup.nodes.Node[] childNodes = furthestBlock.childNodes().toArray(new org.jsoup.nodes.Node[furthestBlock.childNodeSize()]);        for (org.jsoup.nodes.Node childNode : childNodes) {            adopter.appendChild(childNode);        }        furthestBlock.appendChild(adopter);        tb.removeFromActiveFormattingElements(formatEl);        tb.removeFromStack(formatEl);        tb.insertOnStackAfter(furthestBlock, adopter);    }}else    if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {        if (!(tb.inScope("name"))) {            if (!(tb.inScope(name))) {                tb.error(this);                return false;            }            tb.generateImpliedEndTags();            if (!(tb.currentElement().nodeName().equals(name)))                tb.error(this);            tb.popStackToClose(name);            tb.clearFormattingElementsToLastMarker();        }    }else        if (name.equals("br")) {            tb.error(this);            tb.process(new org.jsoup.parser.Token.StartTag("br"));            return false;        }else {            return anyOtherEndTag(t, tb);        }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"style"	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32628::::32635::::formatEl::::body	false
org.jsoup.parser.HtmlTreeBuilderState::::676::::33799::::33804::::break::::INSERT::::STATEMENT::::if (node == formatEl)    break INNER;	false
org.jsoup.parser.Token::::132::::4007::::4027::::pendingAttributeValue::::systemIdentifier	false
org.jsoup.parser.Token::::132::::4007::::4027::::pendingAttributeValue::::publicIdentifier	false
org.jsoup.parser.Token::::132::::4007::::4027::::pendingAttributeValue::::name	false
org.jsoup.parser.Token::::132::::4007::::4027::::pendingAttributeValue::::data	false
org.jsoup.parser.HtmlTreeBuilderState::::651::::32261::::32268::::formatEl::::body	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31709::::38455::::if (name.equals("sarcasm")) {    return anyOtherEndTag(t, tb);}else    if (org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")) {        OUTER : for (int i = 0; i < 8; i++) {            org.jsoup.nodes.Element formatEl = tb.getActiveFormattingElement(name);            if (formatEl == null)                return anyOtherEndTag(t, tb);            else                if (!(tb.onStack(formatEl))) {                    tb.error(this);                    tb.removeFromActiveFormattingElements(formatEl);                    return true;                }else                    if (!(tb.inScope(formatEl.nodeName()))) {                        tb.error(this);                        return false;                    }else                        if ((tb.currentElement()) != formatEl)                            tb.error(this);            org.jsoup.nodes.Element furthestBlock = null;            org.jsoup.nodes.Element commonAncestor = null;            boolean seenFormattingElement = false;            java.util.LinkedList<org.jsoup.nodes.Element> stack = tb.getStack();            for (int si = 0; (si < (stack.size())) && (si < 64); si++) {                org.jsoup.nodes.Element el = stack.get(si);                if (el == formatEl) {                    commonAncestor = stack.get((si - 1));                    seenFormattingElement = true;                }else                    if (seenFormattingElement && (tb.isSpecial(el))) {                        furthestBlock = el;                        break;                    }            }            if (furthestBlock == null) {                tb.popStackToClose(formatEl.nodeName());                tb.removeFromActiveFormattingElements(formatEl);                return true;            }            org.jsoup.nodes.Element node = furthestBlock;            org.jsoup.nodes.Element lastNode = furthestBlock;            INNER : for (int j = 0; j < 3; j++) {                if (tb.onStack(node))                    node = tb.aboveOnStack(node);                if (!(tb.isInActiveFormattingElements(node))) {                    tb.removeFromStack(node);                    continue INNER;                }else                    if (node == formatEl)                        break INNER;                org.jsoup.nodes.Element replacement = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(node.nodeName()), tb.getBaseUri());                tb.replaceActiveFormattingElement(node, replacement);                tb.replaceOnStack(node, replacement);                node = replacement;                if (lastNode == furthestBlock) {                }                if ((lastNode.parent()) != null)                    lastNode.remove();                node.appendChild(lastNode);                lastNode = node;            }            if (org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")) {                if ((lastNode.parent()) != null)                    lastNode.remove();                tb.insertInFosterParent(lastNode);            }else {                if ((lastNode.parent()) != null)                    lastNode.remove();                commonAncestor.appendChild(lastNode);            }            org.jsoup.nodes.Element adopter = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(name), tb.getBaseUri());            org.jsoup.nodes.Node[] childNodes = furthestBlock.childNodes().toArray(new org.jsoup.nodes.Node[furthestBlock.childNodeSize()]);            for (org.jsoup.nodes.Node childNode : childNodes) {                adopter.appendChild(childNode);            }            furthestBlock.appendChild(adopter);            tb.removeFromActiveFormattingElements(formatEl);            tb.removeFromStack(formatEl);            tb.insertOnStackAfter(furthestBlock, adopter);        }    }else        if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {            if (!(tb.inScope("name"))) {                if (!(tb.inScope(name))) {                    tb.error(this);                    return false;                }                tb.generateImpliedEndTags();                if (!(tb.currentElement().nodeName().equals(name)))                    tb.error(this);                tb.popStackToClose(name);                tb.clearFormattingElementsToLastMarker();            }        }else            if (name.equals("br")) {                tb.error(this);                tb.process(new org.jsoup.parser.Token.StartTag("br"));                return false;            }else {                return anyOtherEndTag(t, tb);            }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32808::::32815::::formatEl::::body	false
org.jsoup.parser.HtmlTreeBuilderState::::661::::32850::::32864::::tb.error(this)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("br"))	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"script"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"link"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"bgsound"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"basefont"	false
org.jsoup.parser.HtmlTreeBuilderState::::671::::33469::::33476::::formatEl::::body	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"link"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"bgsound"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"basefont"	false
org.jsoup.parser.TokeniserState::::810::::27235::::27315::::if ((value.length()) > 0)    t.tagPending.appendAttributeValue(value);::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataEndTag(t, r, org.jsoup.parser.TokeniserState.ScriptDataEscaped)	false
org.jsoup.parser.TokeniserState::::810::::27235::::27315::::if ((value.length()) > 0)    t.tagPending.appendAttributeValue(value);::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataEndTag(t, r, org.jsoup.parser.TokeniserState.ScriptData)	false
org.jsoup.parser.TokeniserState::::810::::27235::::27315::::if ((value.length()) > 0)    t.tagPending.appendAttributeValue(value);::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataEndTag(t, r, org.jsoup.parser.TokeniserState.Rawtext)	false
org.jsoup.parser.TokeniserState::::810::::27235::::27315::::if ((value.length()) > 0)    t.tagPending.appendAttributeValue(value);::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataDoubleEscapeTag(t, r, org.jsoup.parser.TokeniserState.ScriptDataEscaped, org.jsoup.parser.TokeniserState.ScriptDataDoubleEscaped)	false
org.jsoup.parser.TokeniserState::::810::::27235::::27315::::if ((value.length()) > 0)    t.tagPending.appendAttributeValue(value);::::INSERT::::STATEMENT::::org.jsoup.parser.TokeniserState.handleDataDoubleEscapeTag(t, r, org.jsoup.parser.TokeniserState.ScriptDataDoubleEscaped, org.jsoup.parser.TokeniserState.ScriptDataEscaped)	false
org.jsoup.parser.Token::::118::::3596::::3616::::pendingAttributeValue::::systemIdentifier	false
org.jsoup.parser.Token::::118::::3596::::3616::::pendingAttributeValue::::publicIdentifier	false
org.jsoup.parser.Token::::118::::3596::::3616::::pendingAttributeValue::::name	false
org.jsoup.parser.Token::::118::::3596::::3616::::pendingAttributeValue::::data	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"u"	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"tt"	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"strong"	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"strike"	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"small"	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"s"	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"i"	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"font"	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"em"	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"code"	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"big"	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"b"	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"th"	false
org.jsoup.parser.TokeniserState::::901::::30491::::30494::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.DoctypePublicIdentifier_singleQuoted	false
org.jsoup.parser.TokeniserState::::901::::30491::::30494::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.DoctypePublicIdentifier_doubleQuoted	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"meta"	false
org.jsoup.parser.HtmlTreeBuilder::::646::::22795::::22800::::break::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.HtmlTreeBuilderState::::675::::33743::::33755::::furthestBlock::::a	false
org.jsoup.parser.Token::::64::::1956::::1976::::pendingAttributeValue::::systemIdentifier	false
org.jsoup.parser.Token::::64::::1956::::1976::::pendingAttributeValue::::publicIdentifier	false
org.jsoup.parser.Token::::64::::1956::::1976::::pendingAttributeValue::::name	false
org.jsoup.parser.Token::::64::::1956::::1976::::pendingAttributeValue::::data	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18855::::26999::::if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {    tb.reconstructFormattingElements();    org.jsoup.nodes.Element el = tb.insert(startTag);    tb.pushActiveFormattingElements(el);}else    if (name.equals("nobr")) {        tb.reconstructFormattingElements();        if (tb.inScope("nobr")) {            tb.error(this);            tb.process(new org.jsoup.parser.Token.EndTag("nobr"));            tb.reconstructFormattingElements();        }        org.jsoup.nodes.Element el = tb.insert(startTag);        tb.pushActiveFormattingElements(el);    }else        if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {            tb.reconstructFormattingElements();            tb.insert(startTag);            tb.insertMarkerToFormattingElements();            tb.framesetOk(false);        }else            if (name.equals("table")) {                if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                }                tb.insert(startTag);                tb.framesetOk(false);                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);            }else                if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                    tb.reconstructFormattingElements();                    tb.insertEmpty(startTag);                    tb.framesetOk(false);                }else                    if (name.equals("input")) {                        tb.reconstructFormattingElements();                        org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                        if (!(el.attr("type").equalsIgnoreCase("hidden")))                            tb.framesetOk(false);                    }else                        if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                            tb.insertEmpty(startTag);                        }else                            if (name.equals("hr")) {                                if (tb.inButtonScope("p")) {                                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                                }                                tb.insertEmpty(startTag);                                tb.framesetOk(false);                            }else                                if (name.equals("image")) {                                    startTag.name("img");                                    return tb.process(startTag);                                }else                                    if (name.equals("isindex")) {                                        tb.error(this);                                        if ((tb.getFormElement()) != null)                                            return false;                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                        tb.process(new org.jsoup.parser.Token.StartTag("form"));                                        if (startTag.attributes.hasKey("action")) {                                            org.jsoup.nodes.Element form = tb.getFormElement();                                            form.attr("action", startTag.attributes.get("action"));                                        }                                        tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                        tb.process(new org.jsoup.parser.Token.StartTag("label"));                                        java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                        tb.process(new org.jsoup.parser.Token.Character(prompt));                                        org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                        for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                            if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                inputAttribs.put(attr);                                        }                                        inputAttribs.put("name", "isindex");                                        tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                        tb.process(new org.jsoup.parser.Token.EndTag("label"));                                        tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                        tb.process(new org.jsoup.parser.Token.EndTag("form"));                                    }else                                        if (name.equals("textarea")) {                                            tb.insert(startTag);                                            tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                            tb.markInsertionMode();                                            tb.framesetOk(false);                                            tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                        }else                                            if (name.equals("xmp")) {                                                if (tb.inButtonScope("p")) {                                                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                }                                                tb.reconstructFormattingElements();                                                tb.framesetOk(false);                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                            }else                                                if (name.equals("iframe")) {                                                    tb.framesetOk(false);                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                }else                                                    if (name.equals("noembed")) {                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("select")) {                                                            tb.reconstructFormattingElements();                                                            tb.insert(startTag);                                                            tb.framesetOk(false);                                                            org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                            if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                            else                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                        }else                                                            if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                if (tb.currentElement().nodeName().equals("option"))                                                                    tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                tb.reconstructFormattingElements();                                                                tb.insert(startTag);                                                            }else                                                                if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                    if (tb.inScope("ruby")) {                                                                        tb.generateImpliedEndTags();                                                                        if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                            tb.error(this);                                                                            tb.popStackToBefore("ruby");                                                                        }                                                                        tb.insert(startTag);                                                                    }                                                                }else                                                                    if (name.equals("math")) {                                                                        tb.reconstructFormattingElements();                                                                        tb.insert(startTag);                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                    }else                                                                        if (name.equals("svg")) {                                                                            tb.reconstructFormattingElements();                                                                            tb.insert(startTag);                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                        }else                                                                            if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                tb.error(this);                                                                                return false;                                                                            }else {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                            }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("nobr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::632::::31110::::38455::::if (org.jsoup.helper.StringUtil.in(name, "h1", "h2", "h3", "h4", "h5", "h6")) {    if (!(tb.inScope(new java.lang.String[]{ "h1", "h2", "h3", "h4", "h5", "h6" }))) {        tb.error(this);        return false;    }else {        tb.generateImpliedEndTags(name);        if (!(tb.currentElement().nodeName().equals(name)))            tb.error(this);        tb.popStackToClose("h1", "h2", "h3", "h4", "h5", "h6");    }}else    if (name.equals("sarcasm")) {        return anyOtherEndTag(t, tb);    }else        if (org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")) {            OUTER : for (int i = 0; i < 8; i++) {                org.jsoup.nodes.Element formatEl = tb.getActiveFormattingElement(name);                if (formatEl == null)                    return anyOtherEndTag(t, tb);                else                    if (!(tb.onStack(formatEl))) {                        tb.error(this);                        tb.removeFromActiveFormattingElements(formatEl);                        return true;                    }else                        if (!(tb.inScope(formatEl.nodeName()))) {                            tb.error(this);                            return false;                        }else                            if ((tb.currentElement()) != formatEl)                                tb.error(this);                org.jsoup.nodes.Element furthestBlock = null;                org.jsoup.nodes.Element commonAncestor = null;                boolean seenFormattingElement = false;                java.util.LinkedList<org.jsoup.nodes.Element> stack = tb.getStack();                for (int si = 0; (si < (stack.size())) && (si < 64); si++) {                    org.jsoup.nodes.Element el = stack.get(si);                    if (el == formatEl) {                        commonAncestor = stack.get((si - 1));                        seenFormattingElement = true;                    }else                        if (seenFormattingElement && (tb.isSpecial(el))) {                            furthestBlock = el;                            break;                        }                }                if (furthestBlock == null) {                    tb.popStackToClose(formatEl.nodeName());                    tb.removeFromActiveFormattingElements(formatEl);                    return true;                }                org.jsoup.nodes.Element node = furthestBlock;                org.jsoup.nodes.Element lastNode = furthestBlock;                INNER : for (int j = 0; j < 3; j++) {                    if (tb.onStack(node))                        node = tb.aboveOnStack(node);                    if (!(tb.isInActiveFormattingElements(node))) {                        tb.removeFromStack(node);                        continue INNER;                    }else                        if (node == formatEl)                            break INNER;                    org.jsoup.nodes.Element replacement = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(node.nodeName()), tb.getBaseUri());                    tb.replaceActiveFormattingElement(node, replacement);                    tb.replaceOnStack(node, replacement);                    node = replacement;                    if (lastNode == furthestBlock) {                    }                    if ((lastNode.parent()) != null)                        lastNode.remove();                    node.appendChild(lastNode);                    lastNode = node;                }                if (org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")) {                    if ((lastNode.parent()) != null)                        lastNode.remove();                    tb.insertInFosterParent(lastNode);                }else {                    if ((lastNode.parent()) != null)                        lastNode.remove();                    commonAncestor.appendChild(lastNode);                }                org.jsoup.nodes.Element adopter = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(name), tb.getBaseUri());                org.jsoup.nodes.Node[] childNodes = furthestBlock.childNodes().toArray(new org.jsoup.nodes.Node[furthestBlock.childNodeSize()]);                for (org.jsoup.nodes.Node childNode : childNodes) {                    adopter.appendChild(childNode);                }                furthestBlock.appendChild(adopter);                tb.removeFromActiveFormattingElements(formatEl);                tb.removeFromStack(formatEl);                tb.insertOnStackAfter(furthestBlock, adopter);            }        }else            if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {                if (!(tb.inScope("name"))) {                    if (!(tb.inScope(name))) {                        tb.error(this);                        return false;                    }                    tb.generateImpliedEndTags();                    if (!(tb.currentElement().nodeName().equals(name)))                        tb.error(this);                    tb.popStackToClose(name);                    tb.clearFormattingElementsToLastMarker();                }            }else                if (name.equals("br")) {                    tb.error(this);                    tb.process(new org.jsoup.parser.Token.StartTag("br"));                    return false;                }else {                    return anyOtherEndTag(t, tb);                }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30134::::name.equals("li")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::726::::36762::::36774::::furthestBlock::::a	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"nobr"	false
org.jsoup.parser.HtmlTreeBuilderState::::726::::36806::::36818::::furthestBlock::::a	false
org.jsoup.parser.HtmlTreeBuilderState::::687::::34474::::34486::::furthestBlock::::a	false
org.jsoup.parser.HtmlTreeBuilderState::::688::::34536::::34548::::furthestBlock::::a	false
org.jsoup.parser.Token::::61::::1763::::1783::::pendingAttributeValue::::systemIdentifier	false
org.jsoup.parser.Token::::61::::1763::::1783::::pendingAttributeValue::::publicIdentifier	false
org.jsoup.parser.Token::::61::::1763::::1783::::pendingAttributeValue::::name	false
org.jsoup.parser.Token::::61::::1763::::1783::::pendingAttributeValue::::data	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32374::::32864::::if (!(tb.onStack(formatEl))) {    tb.error(this);    tb.removeFromActiveFormattingElements(formatEl);    return true;}else    if (!(tb.inScope(formatEl.nodeName()))) {        tb.error(this);        return false;    }else        if ((tb.currentElement()) != formatEl)            tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("noscript"))	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18089::::name.equals("a")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("th"))	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18089::::name.equals("a")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("td"))	false
org.jsoup.parser.Token::::69::::2152::::2172::::pendingAttributeValue::::systemIdentifier	false
org.jsoup.parser.Token::::69::::2152::::2172::::pendingAttributeValue::::publicIdentifier	false
org.jsoup.parser.Token::::69::::2152::::2172::::pendingAttributeValue::::name	false
org.jsoup.parser.Token::::69::::2152::::2172::::pendingAttributeValue::::data	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"nobr"	false
org.jsoup.parser.HtmlTreeBuilderState::::679::::33902::::33914::::furthestBlock::::currentForm	false
org.jsoup.parser.Token::::69::::2184::::2204::::pendingAttributeValue::::systemIdentifier	false
org.jsoup.parser.Token::::69::::2184::::2204::::pendingAttributeValue::::publicIdentifier	false
org.jsoup.parser.Token::::69::::2184::::2204::::pendingAttributeValue::::name	false
org.jsoup.parser.Token::::69::::2184::::2204::::pendingAttributeValue::::data	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"base"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18070::::26999::::if (name.equals("a")) {    if ((tb.getActiveFormattingElement("a")) != null) {        tb.error(this);        tb.process(new org.jsoup.parser.Token.EndTag("a"));        org.jsoup.nodes.Element remainingA = tb.getFromStack("a");        if (remainingA != null) {            tb.removeFromActiveFormattingElements(remainingA);            tb.removeFromStack(remainingA);        }    }    tb.reconstructFormattingElements();    org.jsoup.nodes.Element a = tb.insert(startTag);    tb.pushActiveFormattingElements(a);}else    if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {        tb.reconstructFormattingElements();        org.jsoup.nodes.Element el = tb.insert(startTag);        tb.pushActiveFormattingElements(el);    }else        if (name.equals("nobr")) {            tb.reconstructFormattingElements();            if (tb.inScope("nobr")) {                tb.error(this);                tb.process(new org.jsoup.parser.Token.EndTag("nobr"));                tb.reconstructFormattingElements();            }            org.jsoup.nodes.Element el = tb.insert(startTag);            tb.pushActiveFormattingElements(el);        }else            if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {                tb.reconstructFormattingElements();                tb.insert(startTag);                tb.insertMarkerToFormattingElements();                tb.framesetOk(false);            }else                if (name.equals("table")) {                    if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                        tb.process(new org.jsoup.parser.Token.EndTag("p"));                    }                    tb.insert(startTag);                    tb.framesetOk(false);                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                }else                    if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                        tb.reconstructFormattingElements();                        tb.insertEmpty(startTag);                        tb.framesetOk(false);                    }else                        if (name.equals("input")) {                            tb.reconstructFormattingElements();                            org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                            if (!(el.attr("type").equalsIgnoreCase("hidden")))                                tb.framesetOk(false);                        }else                            if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                                tb.insertEmpty(startTag);                            }else                                if (name.equals("hr")) {                                    if (tb.inButtonScope("p")) {                                        tb.process(new org.jsoup.parser.Token.EndTag("p"));                                    }                                    tb.insertEmpty(startTag);                                    tb.framesetOk(false);                                }else                                    if (name.equals("image")) {                                        startTag.name("img");                                        return tb.process(startTag);                                    }else                                        if (name.equals("isindex")) {                                            tb.error(this);                                            if ((tb.getFormElement()) != null)                                                return false;                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                            tb.process(new org.jsoup.parser.Token.StartTag("form"));                                            if (startTag.attributes.hasKey("action")) {                                                org.jsoup.nodes.Element form = tb.getFormElement();                                                form.attr("action", startTag.attributes.get("action"));                                            }                                            tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                            tb.process(new org.jsoup.parser.Token.StartTag("label"));                                            java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                            tb.process(new org.jsoup.parser.Token.Character(prompt));                                            org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                            for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                                if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                    inputAttribs.put(attr);                                            }                                            inputAttribs.put("name", "isindex");                                            tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                            tb.process(new org.jsoup.parser.Token.EndTag("label"));                                            tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                            tb.process(new org.jsoup.parser.Token.EndTag("form"));                                        }else                                            if (name.equals("textarea")) {                                                tb.insert(startTag);                                                tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                                tb.markInsertionMode();                                                tb.framesetOk(false);                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                            }else                                                if (name.equals("xmp")) {                                                    if (tb.inButtonScope("p")) {                                                        tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                    }                                                    tb.reconstructFormattingElements();                                                    tb.framesetOk(false);                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                }else                                                    if (name.equals("iframe")) {                                                        tb.framesetOk(false);                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("noembed")) {                                                            org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                        }else                                                            if (name.equals("select")) {                                                                tb.reconstructFormattingElements();                                                                tb.insert(startTag);                                                                tb.framesetOk(false);                                                                org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                                if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                                else                                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                            }else                                                                if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                    if (tb.currentElement().nodeName().equals("option"))                                                                        tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                    tb.reconstructFormattingElements();                                                                    tb.insert(startTag);                                                                }else                                                                    if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                        if (tb.inScope("ruby")) {                                                                            tb.generateImpliedEndTags();                                                                            if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                                tb.error(this);                                                                                tb.popStackToBefore("ruby");                                                                            }                                                                            tb.insert(startTag);                                                                        }                                                                    }else                                                                        if (name.equals("math")) {                                                                            tb.reconstructFormattingElements();                                                                            tb.insert(startTag);                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                        }else                                                                            if (name.equals("svg")) {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                                tb.tokeniser.acknowledgeSelfClosingFlag();                                                                            }else                                                                                if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                    tb.error(this);                                                                                    return false;                                                                                }else {                                                                                    tb.reconstructFormattingElements();                                                                                    tb.insert(startTag);                                                                                }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs))	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30114::::38455::::if (name.equals("li")) {    if (!(tb.inListItemScope(name))) {        tb.error(this);        return false;    }else {        tb.generateImpliedEndTags(name);        if (!(tb.currentElement().nodeName().equals(name)))            tb.error(this);        tb.popStackToClose(name);    }}else    if (org.jsoup.helper.StringUtil.in(name, "dd", "dt")) {        if (!(tb.inScope(name))) {            tb.error(this);            return false;        }else {            tb.generateImpliedEndTags(name);            if (!(tb.currentElement().nodeName().equals(name)))                tb.error(this);            tb.popStackToClose(name);        }    }else        if (org.jsoup.helper.StringUtil.in(name, "h1", "h2", "h3", "h4", "h5", "h6")) {            if (!(tb.inScope(new java.lang.String[]{ "h1", "h2", "h3", "h4", "h5", "h6" }))) {                tb.error(this);                return false;            }else {                tb.generateImpliedEndTags(name);                if (!(tb.currentElement().nodeName().equals(name)))                    tb.error(this);                tb.popStackToClose("h1", "h2", "h3", "h4", "h5", "h6");            }        }else            if (name.equals("sarcasm")) {                return anyOtherEndTag(t, tb);            }else                if (org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")) {                    OUTER : for (int i = 0; i < 8; i++) {                        org.jsoup.nodes.Element formatEl = tb.getActiveFormattingElement(name);                        if (formatEl == null)                            return anyOtherEndTag(t, tb);                        else                            if (!(tb.onStack(formatEl))) {                                tb.error(this);                                tb.removeFromActiveFormattingElements(formatEl);                                return true;                            }else                                if (!(tb.inScope(formatEl.nodeName()))) {                                    tb.error(this);                                    return false;                                }else                                    if ((tb.currentElement()) != formatEl)                                        tb.error(this);                        org.jsoup.nodes.Element furthestBlock = null;                        org.jsoup.nodes.Element commonAncestor = null;                        boolean seenFormattingElement = false;                        java.util.LinkedList<org.jsoup.nodes.Element> stack = tb.getStack();                        for (int si = 0; (si < (stack.size())) && (si < 64); si++) {                            org.jsoup.nodes.Element el = stack.get(si);                            if (el == formatEl) {                                commonAncestor = stack.get((si - 1));                                seenFormattingElement = true;                            }else                                if (seenFormattingElement && (tb.isSpecial(el))) {                                    furthestBlock = el;                                    break;                                }                        }                        if (furthestBlock == null) {                            tb.popStackToClose(formatEl.nodeName());                            tb.removeFromActiveFormattingElements(formatEl);                            return true;                        }                        org.jsoup.nodes.Element node = furthestBlock;                        org.jsoup.nodes.Element lastNode = furthestBlock;                        INNER : for (int j = 0; j < 3; j++) {                            if (tb.onStack(node))                                node = tb.aboveOnStack(node);                            if (!(tb.isInActiveFormattingElements(node))) {                                tb.removeFromStack(node);                                continue INNER;                            }else                                if (node == formatEl)                                    break INNER;                            org.jsoup.nodes.Element replacement = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(node.nodeName()), tb.getBaseUri());                            tb.replaceActiveFormattingElement(node, replacement);                            tb.replaceOnStack(node, replacement);                            node = replacement;                            if (lastNode == furthestBlock) {                            }                            if ((lastNode.parent()) != null)                                lastNode.remove();                            node.appendChild(lastNode);                            lastNode = node;                        }                        if (org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")) {                            if ((lastNode.parent()) != null)                                lastNode.remove();                            tb.insertInFosterParent(lastNode);                        }else {                            if ((lastNode.parent()) != null)                                lastNode.remove();                            commonAncestor.appendChild(lastNode);                        }                        org.jsoup.nodes.Element adopter = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(name), tb.getBaseUri());                        org.jsoup.nodes.Node[] childNodes = furthestBlock.childNodes().toArray(new org.jsoup.nodes.Node[furthestBlock.childNodeSize()]);                        for (org.jsoup.nodes.Node childNode : childNodes) {                            adopter.appendChild(childNode);                        }                        furthestBlock.appendChild(adopter);                        tb.removeFromActiveFormattingElements(formatEl);                        tb.removeFromStack(formatEl);                        tb.insertOnStackAfter(furthestBlock, adopter);                    }                }else                    if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {                        if (!(tb.inScope("name"))) {                            if (!(tb.inScope(name))) {                                tb.error(this);                                return false;                            }                            tb.generateImpliedEndTags();                            if (!(tb.currentElement().nodeName().equals(name)))                                tb.error(this);                            tb.popStackToClose(name);                            tb.clearFormattingElementsToLastMarker();                        }                    }else                        if (name.equals("br")) {                            tb.error(this);                            tb.process(new org.jsoup.parser.Token.StartTag("br"));                            return false;                        }else {                            return anyOtherEndTag(t, tb);                        }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("p"))	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"script"	false
org.jsoup.parser.HtmlTreeBuilderState::::622::::30609::::38455::::if (org.jsoup.helper.StringUtil.in(name, "dd", "dt")) {    if (!(tb.inScope(name))) {        tb.error(this);        return false;    }else {        tb.generateImpliedEndTags(name);        if (!(tb.currentElement().nodeName().equals(name)))            tb.error(this);        tb.popStackToClose(name);    }}else    if (org.jsoup.helper.StringUtil.in(name, "h1", "h2", "h3", "h4", "h5", "h6")) {        if (!(tb.inScope(new java.lang.String[]{ "h1", "h2", "h3", "h4", "h5", "h6" }))) {            tb.error(this);            return false;        }else {            tb.generateImpliedEndTags(name);            if (!(tb.currentElement().nodeName().equals(name)))                tb.error(this);            tb.popStackToClose("h1", "h2", "h3", "h4", "h5", "h6");        }    }else        if (name.equals("sarcasm")) {            return anyOtherEndTag(t, tb);        }else            if (org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")) {                OUTER : for (int i = 0; i < 8; i++) {                    org.jsoup.nodes.Element formatEl = tb.getActiveFormattingElement(name);                    if (formatEl == null)                        return anyOtherEndTag(t, tb);                    else                        if (!(tb.onStack(formatEl))) {                            tb.error(this);                            tb.removeFromActiveFormattingElements(formatEl);                            return true;                        }else                            if (!(tb.inScope(formatEl.nodeName()))) {                                tb.error(this);                                return false;                            }else                                if ((tb.currentElement()) != formatEl)                                    tb.error(this);                    org.jsoup.nodes.Element furthestBlock = null;                    org.jsoup.nodes.Element commonAncestor = null;                    boolean seenFormattingElement = false;                    java.util.LinkedList<org.jsoup.nodes.Element> stack = tb.getStack();                    for (int si = 0; (si < (stack.size())) && (si < 64); si++) {                        org.jsoup.nodes.Element el = stack.get(si);                        if (el == formatEl) {                            commonAncestor = stack.get((si - 1));                            seenFormattingElement = true;                        }else                            if (seenFormattingElement && (tb.isSpecial(el))) {                                furthestBlock = el;                                break;                            }                    }                    if (furthestBlock == null) {                        tb.popStackToClose(formatEl.nodeName());                        tb.removeFromActiveFormattingElements(formatEl);                        return true;                    }                    org.jsoup.nodes.Element node = furthestBlock;                    org.jsoup.nodes.Element lastNode = furthestBlock;                    INNER : for (int j = 0; j < 3; j++) {                        if (tb.onStack(node))                            node = tb.aboveOnStack(node);                        if (!(tb.isInActiveFormattingElements(node))) {                            tb.removeFromStack(node);                            continue INNER;                        }else                            if (node == formatEl)                                break INNER;                        org.jsoup.nodes.Element replacement = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(node.nodeName()), tb.getBaseUri());                        tb.replaceActiveFormattingElement(node, replacement);                        tb.replaceOnStack(node, replacement);                        node = replacement;                        if (lastNode == furthestBlock) {                        }                        if ((lastNode.parent()) != null)                            lastNode.remove();                        node.appendChild(lastNode);                        lastNode = node;                    }                    if (org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")) {                        if ((lastNode.parent()) != null)                            lastNode.remove();                        tb.insertInFosterParent(lastNode);                    }else {                        if ((lastNode.parent()) != null)                            lastNode.remove();                        commonAncestor.appendChild(lastNode);                    }                    org.jsoup.nodes.Element adopter = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(name), tb.getBaseUri());                    org.jsoup.nodes.Node[] childNodes = furthestBlock.childNodes().toArray(new org.jsoup.nodes.Node[furthestBlock.childNodeSize()]);                    for (org.jsoup.nodes.Node childNode : childNodes) {                        adopter.appendChild(childNode);                    }                    furthestBlock.appendChild(adopter);                    tb.removeFromActiveFormattingElements(formatEl);                    tb.removeFromStack(formatEl);                    tb.insertOnStackAfter(furthestBlock, adopter);                }            }else                if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {                    if (!(tb.inScope("name"))) {                        if (!(tb.inScope(name))) {                            tb.error(this);                            return false;                        }                        tb.generateImpliedEndTags();                        if (!(tb.currentElement().nodeName().equals(name)))                            tb.error(this);                        tb.popStackToClose(name);                        tb.clearFormattingElementsToLastMarker();                    }                }else                    if (name.equals("br")) {                        tb.error(this);                        tb.process(new org.jsoup.parser.Token.StartTag("br"));                        return false;                    }else {                        return anyOtherEndTag(t, tb);                    }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"meta"	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32390::::32397::::formatEl::::second	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32612::::32864::::if (!(tb.inScope(formatEl.nodeName()))) {    tb.error(this);    return false;}else    if ((tb.currentElement()) != formatEl)        tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("noscript"))	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"meta"	false
org.jsoup.parser.HtmlTreeBuilderState::::674::::33662::::33702::::seenFormattingElement && (tb.isSpecial(el))::::tb.process(new org.jsoup.parser.Token.EndTag("noscript"))	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32628::::32635::::formatEl::::second	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"u"	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"tt"	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"strong"	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"strike"	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"small"	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"s"	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"i"	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"font"	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"em"	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"code"	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"big"	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"b"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18070::::26999::::if (name.equals("a")) {    if ((tb.getActiveFormattingElement("a")) != null) {        tb.error(this);        tb.process(new org.jsoup.parser.Token.EndTag("a"));        org.jsoup.nodes.Element remainingA = tb.getFromStack("a");        if (remainingA != null) {            tb.removeFromActiveFormattingElements(remainingA);            tb.removeFromStack(remainingA);        }    }    tb.reconstructFormattingElements();    org.jsoup.nodes.Element a = tb.insert(startTag);    tb.pushActiveFormattingElements(a);}else    if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {        tb.reconstructFormattingElements();        org.jsoup.nodes.Element el = tb.insert(startTag);        tb.pushActiveFormattingElements(el);    }else        if (name.equals("nobr")) {            tb.reconstructFormattingElements();            if (tb.inScope("nobr")) {                tb.error(this);                tb.process(new org.jsoup.parser.Token.EndTag("nobr"));                tb.reconstructFormattingElements();            }            org.jsoup.nodes.Element el = tb.insert(startTag);            tb.pushActiveFormattingElements(el);        }else            if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {                tb.reconstructFormattingElements();                tb.insert(startTag);                tb.insertMarkerToFormattingElements();                tb.framesetOk(false);            }else                if (name.equals("table")) {                    if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                        tb.process(new org.jsoup.parser.Token.EndTag("p"));                    }                    tb.insert(startTag);                    tb.framesetOk(false);                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                }else                    if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                        tb.reconstructFormattingElements();                        tb.insertEmpty(startTag);                        tb.framesetOk(false);                    }else                        if (name.equals("input")) {                            tb.reconstructFormattingElements();                            org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                            if (!(el.attr("type").equalsIgnoreCase("hidden")))                                tb.framesetOk(false);                        }else                            if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                                tb.insertEmpty(startTag);                            }else                                if (name.equals("hr")) {                                    if (tb.inButtonScope("p")) {                                        tb.process(new org.jsoup.parser.Token.EndTag("p"));                                    }                                    tb.insertEmpty(startTag);                                    tb.framesetOk(false);                                }else                                    if (name.equals("image")) {                                        startTag.name("img");                                        return tb.process(startTag);                                    }else                                        if (name.equals("isindex")) {                                            tb.error(this);                                            if ((tb.getFormElement()) != null)                                                return false;                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                            tb.process(new org.jsoup.parser.Token.StartTag("form"));                                            if (startTag.attributes.hasKey("action")) {                                                org.jsoup.nodes.Element form = tb.getFormElement();                                                form.attr("action", startTag.attributes.get("action"));                                            }                                            tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                            tb.process(new org.jsoup.parser.Token.StartTag("label"));                                            java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                            tb.process(new org.jsoup.parser.Token.Character(prompt));                                            org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                            for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                                if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                    inputAttribs.put(attr);                                            }                                            inputAttribs.put("name", "isindex");                                            tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                            tb.process(new org.jsoup.parser.Token.EndTag("label"));                                            tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                            tb.process(new org.jsoup.parser.Token.EndTag("form"));                                        }else                                            if (name.equals("textarea")) {                                                tb.insert(startTag);                                                tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                                tb.markInsertionMode();                                                tb.framesetOk(false);                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                            }else                                                if (name.equals("xmp")) {                                                    if (tb.inButtonScope("p")) {                                                        tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                    }                                                    tb.reconstructFormattingElements();                                                    tb.framesetOk(false);                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                }else                                                    if (name.equals("iframe")) {                                                        tb.framesetOk(false);                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("noembed")) {                                                            org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                        }else                                                            if (name.equals("select")) {                                                                tb.reconstructFormattingElements();                                                                tb.insert(startTag);                                                                tb.framesetOk(false);                                                                org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                                if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                                else                                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                            }else                                                                if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                    if (tb.currentElement().nodeName().equals("option"))                                                                        tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                    tb.reconstructFormattingElements();                                                                    tb.insert(startTag);                                                                }else                                                                    if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                        if (tb.inScope("ruby")) {                                                                            tb.generateImpliedEndTags();                                                                            if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                                tb.error(this);                                                                                tb.popStackToBefore("ruby");                                                                            }                                                                            tb.insert(startTag);                                                                        }                                                                    }else                                                                        if (name.equals("math")) {                                                                            tb.reconstructFormattingElements();                                                                            tb.insert(startTag);                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                        }else                                                                            if (name.equals("svg")) {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                                tb.tokeniser.acknowledgeSelfClosingFlag();                                                                            }else                                                                                if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                    tb.error(this);                                                                                    return false;                                                                                }else {                                                                                    tb.reconstructFormattingElements();                                                                                    tb.insert(startTag);                                                                                }::::INSERT::::STATEMENT::::tb.process(startTag)	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"frameset"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"base"	false
org.jsoup.parser.HtmlTreeBuilderState::::645::::31858::::32001::::org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("optgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::651::::32261::::32268::::formatEl::::second	false
org.jsoup.parser.HtmlTreeBuilderState::::671::::33469::::33476::::formatEl::::second	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32808::::32815::::formatEl::::second	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"base"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17521::::26999::::if (name.equals("button")) {    if (tb.inButtonScope("button")) {        tb.error(this);        tb.process(new org.jsoup.parser.Token.EndTag("button"));        tb.process(startTag);    }else {        tb.reconstructFormattingElements();        tb.insert(startTag);        tb.framesetOk(false);    }}else    if (name.equals("a")) {        if ((tb.getActiveFormattingElement("a")) != null) {            tb.error(this);            tb.process(new org.jsoup.parser.Token.EndTag("a"));            org.jsoup.nodes.Element remainingA = tb.getFromStack("a");            if (remainingA != null) {                tb.removeFromActiveFormattingElements(remainingA);                tb.removeFromStack(remainingA);            }        }        tb.reconstructFormattingElements();        org.jsoup.nodes.Element a = tb.insert(startTag);        tb.pushActiveFormattingElements(a);    }else        if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {            tb.reconstructFormattingElements();            org.jsoup.nodes.Element el = tb.insert(startTag);            tb.pushActiveFormattingElements(el);        }else            if (name.equals("nobr")) {                tb.reconstructFormattingElements();                if (tb.inScope("nobr")) {                    tb.error(this);                    tb.process(new org.jsoup.parser.Token.EndTag("nobr"));                    tb.reconstructFormattingElements();                }                org.jsoup.nodes.Element el = tb.insert(startTag);                tb.pushActiveFormattingElements(el);            }else                if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {                    tb.reconstructFormattingElements();                    tb.insert(startTag);                    tb.insertMarkerToFormattingElements();                    tb.framesetOk(false);                }else                    if (name.equals("table")) {                        if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                            tb.process(new org.jsoup.parser.Token.EndTag("p"));                        }                        tb.insert(startTag);                        tb.framesetOk(false);                        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                    }else                        if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                            tb.reconstructFormattingElements();                            tb.insertEmpty(startTag);                            tb.framesetOk(false);                        }else                            if (name.equals("input")) {                                tb.reconstructFormattingElements();                                org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                                if (!(el.attr("type").equalsIgnoreCase("hidden")))                                    tb.framesetOk(false);                            }else                                if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                                    tb.insertEmpty(startTag);                                }else                                    if (name.equals("hr")) {                                        if (tb.inButtonScope("p")) {                                            tb.process(new org.jsoup.parser.Token.EndTag("p"));                                        }                                        tb.insertEmpty(startTag);                                        tb.framesetOk(false);                                    }else                                        if (name.equals("image")) {                                            startTag.name("img");                                            return tb.process(startTag);                                        }else                                            if (name.equals("isindex")) {                                                tb.error(this);                                                if ((tb.getFormElement()) != null)                                                    return false;                                                tb.tokeniser.acknowledgeSelfClosingFlag();                                                tb.process(new org.jsoup.parser.Token.StartTag("form"));                                                if (startTag.attributes.hasKey("action")) {                                                    org.jsoup.nodes.Element form = tb.getFormElement();                                                    form.attr("action", startTag.attributes.get("action"));                                                }                                                tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                                tb.process(new org.jsoup.parser.Token.StartTag("label"));                                                java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                                tb.process(new org.jsoup.parser.Token.Character(prompt));                                                org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                                for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                                    if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                        inputAttribs.put(attr);                                                }                                                inputAttribs.put("name", "isindex");                                                tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                                tb.process(new org.jsoup.parser.Token.EndTag("label"));                                                tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                                tb.process(new org.jsoup.parser.Token.EndTag("form"));                                            }else                                                if (name.equals("textarea")) {                                                    tb.insert(startTag);                                                    tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                                    tb.markInsertionMode();                                                    tb.framesetOk(false);                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                                }else                                                    if (name.equals("xmp")) {                                                        if (tb.inButtonScope("p")) {                                                            tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                        }                                                        tb.reconstructFormattingElements();                                                        tb.framesetOk(false);                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("iframe")) {                                                            tb.framesetOk(false);                                                            org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                        }else                                                            if (name.equals("noembed")) {                                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                            }else                                                                if (name.equals("select")) {                                                                    tb.reconstructFormattingElements();                                                                    tb.insert(startTag);                                                                    tb.framesetOk(false);                                                                    org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                                    if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                                    else                                                                        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                                }else                                                                    if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                        if (tb.currentElement().nodeName().equals("option"))                                                                            tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                        tb.reconstructFormattingElements();                                                                        tb.insert(startTag);                                                                    }else                                                                        if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                            if (tb.inScope("ruby")) {                                                                                tb.generateImpliedEndTags();                                                                                if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                                    tb.error(this);                                                                                    tb.popStackToBefore("ruby");                                                                                }                                                                                tb.insert(startTag);                                                                            }                                                                        }else                                                                            if (name.equals("math")) {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                                tb.tokeniser.acknowledgeSelfClosingFlag();                                                                            }else                                                                                if (name.equals("svg")) {                                                                                    tb.reconstructFormattingElements();                                                                                    tb.insert(startTag);                                                                                    tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                }else                                                                                    if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                        tb.error(this);                                                                                        return false;                                                                                    }else {                                                                                        tb.reconstructFormattingElements();                                                                                        tb.insert(startTag);                                                                                    }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs))	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"colgroup"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17521::::26999::::if (name.equals("button")) {    if (tb.inButtonScope("button")) {        tb.error(this);        tb.process(new org.jsoup.parser.Token.EndTag("button"));        tb.process(startTag);    }else {        tb.reconstructFormattingElements();        tb.insert(startTag);        tb.framesetOk(false);    }}else    if (name.equals("a")) {        if ((tb.getActiveFormattingElement("a")) != null) {            tb.error(this);            tb.process(new org.jsoup.parser.Token.EndTag("a"));            org.jsoup.nodes.Element remainingA = tb.getFromStack("a");            if (remainingA != null) {                tb.removeFromActiveFormattingElements(remainingA);                tb.removeFromStack(remainingA);            }        }        tb.reconstructFormattingElements();        org.jsoup.nodes.Element a = tb.insert(startTag);        tb.pushActiveFormattingElements(a);    }else        if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {            tb.reconstructFormattingElements();            org.jsoup.nodes.Element el = tb.insert(startTag);            tb.pushActiveFormattingElements(el);        }else            if (name.equals("nobr")) {                tb.reconstructFormattingElements();                if (tb.inScope("nobr")) {                    tb.error(this);                    tb.process(new org.jsoup.parser.Token.EndTag("nobr"));                    tb.reconstructFormattingElements();                }                org.jsoup.nodes.Element el = tb.insert(startTag);                tb.pushActiveFormattingElements(el);            }else                if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {                    tb.reconstructFormattingElements();                    tb.insert(startTag);                    tb.insertMarkerToFormattingElements();                    tb.framesetOk(false);                }else                    if (name.equals("table")) {                        if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                            tb.process(new org.jsoup.parser.Token.EndTag("p"));                        }                        tb.insert(startTag);                        tb.framesetOk(false);                        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                    }else                        if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                            tb.reconstructFormattingElements();                            tb.insertEmpty(startTag);                            tb.framesetOk(false);                        }else                            if (name.equals("input")) {                                tb.reconstructFormattingElements();                                org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                                if (!(el.attr("type").equalsIgnoreCase("hidden")))                                    tb.framesetOk(false);                            }else                                if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                                    tb.insertEmpty(startTag);                                }else                                    if (name.equals("hr")) {                                        if (tb.inButtonScope("p")) {                                            tb.process(new org.jsoup.parser.Token.EndTag("p"));                                        }                                        tb.insertEmpty(startTag);                                        tb.framesetOk(false);                                    }else                                        if (name.equals("image")) {                                            startTag.name("img");                                            return tb.process(startTag);                                        }else                                            if (name.equals("isindex")) {                                                tb.error(this);                                                if ((tb.getFormElement()) != null)                                                    return false;                                                tb.tokeniser.acknowledgeSelfClosingFlag();                                                tb.process(new org.jsoup.parser.Token.StartTag("form"));                                                if (startTag.attributes.hasKey("action")) {                                                    org.jsoup.nodes.Element form = tb.getFormElement();                                                    form.attr("action", startTag.attributes.get("action"));                                                }                                                tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                                tb.process(new org.jsoup.parser.Token.StartTag("label"));                                                java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                                tb.process(new org.jsoup.parser.Token.Character(prompt));                                                org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                                for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                                    if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                        inputAttribs.put(attr);                                                }                                                inputAttribs.put("name", "isindex");                                                tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                                tb.process(new org.jsoup.parser.Token.EndTag("label"));                                                tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                                tb.process(new org.jsoup.parser.Token.EndTag("form"));                                            }else                                                if (name.equals("textarea")) {                                                    tb.insert(startTag);                                                    tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                                    tb.markInsertionMode();                                                    tb.framesetOk(false);                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                                }else                                                    if (name.equals("xmp")) {                                                        if (tb.inButtonScope("p")) {                                                            tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                        }                                                        tb.reconstructFormattingElements();                                                        tb.framesetOk(false);                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("iframe")) {                                                            tb.framesetOk(false);                                                            org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                        }else                                                            if (name.equals("noembed")) {                                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                            }else                                                                if (name.equals("select")) {                                                                    tb.reconstructFormattingElements();                                                                    tb.insert(startTag);                                                                    tb.framesetOk(false);                                                                    org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                                    if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                                    else                                                                        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                                }else                                                                    if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                        if (tb.currentElement().nodeName().equals("option"))                                                                            tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                        tb.reconstructFormattingElements();                                                                        tb.insert(startTag);                                                                    }else                                                                        if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                            if (tb.inScope("ruby")) {                                                                                tb.generateImpliedEndTags();                                                                                if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                                    tb.error(this);                                                                                    tb.popStackToBefore("ruby");                                                                                }                                                                                tb.insert(startTag);                                                                            }                                                                        }else                                                                            if (name.equals("math")) {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                                tb.tokeniser.acknowledgeSelfClosingFlag();                                                                            }else                                                                                if (name.equals("svg")) {                                                                                    tb.reconstructFormattingElements();                                                                                    tb.insert(startTag);                                                                                    tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                }else                                                                                    if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                        tb.error(this);                                                                                        return false;                                                                                    }else {                                                                                        tb.reconstructFormattingElements();                                                                                        tb.insert(startTag);                                                                                    }::::INSERT::::STATEMENT::::tb.process(startTag)	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18070::::26999::::if (name.equals("a")) {    if ((tb.getActiveFormattingElement("a")) != null) {        tb.error(this);        tb.process(new org.jsoup.parser.Token.EndTag("a"));        org.jsoup.nodes.Element remainingA = tb.getFromStack("a");        if (remainingA != null) {            tb.removeFromActiveFormattingElements(remainingA);            tb.removeFromStack(remainingA);        }    }    tb.reconstructFormattingElements();    org.jsoup.nodes.Element a = tb.insert(startTag);    tb.pushActiveFormattingElements(a);}else    if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {        tb.reconstructFormattingElements();        org.jsoup.nodes.Element el = tb.insert(startTag);        tb.pushActiveFormattingElements(el);    }else        if (name.equals("nobr")) {            tb.reconstructFormattingElements();            if (tb.inScope("nobr")) {                tb.error(this);                tb.process(new org.jsoup.parser.Token.EndTag("nobr"));                tb.reconstructFormattingElements();            }            org.jsoup.nodes.Element el = tb.insert(startTag);            tb.pushActiveFormattingElements(el);        }else            if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {                tb.reconstructFormattingElements();                tb.insert(startTag);                tb.insertMarkerToFormattingElements();                tb.framesetOk(false);            }else                if (name.equals("table")) {                    if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                        tb.process(new org.jsoup.parser.Token.EndTag("p"));                    }                    tb.insert(startTag);                    tb.framesetOk(false);                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                }else                    if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                        tb.reconstructFormattingElements();                        tb.insertEmpty(startTag);                        tb.framesetOk(false);                    }else                        if (name.equals("input")) {                            tb.reconstructFormattingElements();                            org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                            if (!(el.attr("type").equalsIgnoreCase("hidden")))                                tb.framesetOk(false);                        }else                            if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                                tb.insertEmpty(startTag);                            }else                                if (name.equals("hr")) {                                    if (tb.inButtonScope("p")) {                                        tb.process(new org.jsoup.parser.Token.EndTag("p"));                                    }                                    tb.insertEmpty(startTag);                                    tb.framesetOk(false);                                }else                                    if (name.equals("image")) {                                        startTag.name("img");                                        return tb.process(startTag);                                    }else                                        if (name.equals("isindex")) {                                            tb.error(this);                                            if ((tb.getFormElement()) != null)                                                return false;                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                            tb.process(new org.jsoup.parser.Token.StartTag("form"));                                            if (startTag.attributes.hasKey("action")) {                                                org.jsoup.nodes.Element form = tb.getFormElement();                                                form.attr("action", startTag.attributes.get("action"));                                            }                                            tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                            tb.process(new org.jsoup.parser.Token.StartTag("label"));                                            java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                            tb.process(new org.jsoup.parser.Token.Character(prompt));                                            org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                            for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                                if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                    inputAttribs.put(attr);                                            }                                            inputAttribs.put("name", "isindex");                                            tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                            tb.process(new org.jsoup.parser.Token.EndTag("label"));                                            tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                            tb.process(new org.jsoup.parser.Token.EndTag("form"));                                        }else                                            if (name.equals("textarea")) {                                                tb.insert(startTag);                                                tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                                tb.markInsertionMode();                                                tb.framesetOk(false);                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                            }else                                                if (name.equals("xmp")) {                                                    if (tb.inButtonScope("p")) {                                                        tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                    }                                                    tb.reconstructFormattingElements();                                                    tb.framesetOk(false);                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                }else                                                    if (name.equals("iframe")) {                                                        tb.framesetOk(false);                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("noembed")) {                                                            org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                        }else                                                            if (name.equals("select")) {                                                                tb.reconstructFormattingElements();                                                                tb.insert(startTag);                                                                tb.framesetOk(false);                                                                org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                                if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                                else                                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                            }else                                                                if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                    if (tb.currentElement().nodeName().equals("option"))                                                                        tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                    tb.reconstructFormattingElements();                                                                    tb.insert(startTag);                                                                }else                                                                    if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                        if (tb.inScope("ruby")) {                                                                            tb.generateImpliedEndTags();                                                                            if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                                tb.error(this);                                                                                tb.popStackToBefore("ruby");                                                                            }                                                                            tb.insert(startTag);                                                                        }                                                                    }else                                                                        if (name.equals("math")) {                                                                            tb.reconstructFormattingElements();                                                                            tb.insert(startTag);                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                        }else                                                                            if (name.equals("svg")) {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                                tb.tokeniser.acknowledgeSelfClosingFlag();                                                                            }else                                                                                if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                    tb.error(this);                                                                                    return false;                                                                                }else {                                                                                    tb.reconstructFormattingElements();                                                                                    tb.insert(startTag);                                                                                }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"td"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"script"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"script"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17521::::26999::::if (name.equals("button")) {    if (tb.inButtonScope("button")) {        tb.error(this);        tb.process(new org.jsoup.parser.Token.EndTag("button"));        tb.process(startTag);    }else {        tb.reconstructFormattingElements();        tb.insert(startTag);        tb.framesetOk(false);    }}else    if (name.equals("a")) {        if ((tb.getActiveFormattingElement("a")) != null) {            tb.error(this);            tb.process(new org.jsoup.parser.Token.EndTag("a"));            org.jsoup.nodes.Element remainingA = tb.getFromStack("a");            if (remainingA != null) {                tb.removeFromActiveFormattingElements(remainingA);                tb.removeFromStack(remainingA);            }        }        tb.reconstructFormattingElements();        org.jsoup.nodes.Element a = tb.insert(startTag);        tb.pushActiveFormattingElements(a);    }else        if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {            tb.reconstructFormattingElements();            org.jsoup.nodes.Element el = tb.insert(startTag);            tb.pushActiveFormattingElements(el);        }else            if (name.equals("nobr")) {                tb.reconstructFormattingElements();                if (tb.inScope("nobr")) {                    tb.error(this);                    tb.process(new org.jsoup.parser.Token.EndTag("nobr"));                    tb.reconstructFormattingElements();                }                org.jsoup.nodes.Element el = tb.insert(startTag);                tb.pushActiveFormattingElements(el);            }else                if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {                    tb.reconstructFormattingElements();                    tb.insert(startTag);                    tb.insertMarkerToFormattingElements();                    tb.framesetOk(false);                }else                    if (name.equals("table")) {                        if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                            tb.process(new org.jsoup.parser.Token.EndTag("p"));                        }                        tb.insert(startTag);                        tb.framesetOk(false);                        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                    }else                        if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                            tb.reconstructFormattingElements();                            tb.insertEmpty(startTag);                            tb.framesetOk(false);                        }else                            if (name.equals("input")) {                                tb.reconstructFormattingElements();                                org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                                if (!(el.attr("type").equalsIgnoreCase("hidden")))                                    tb.framesetOk(false);                            }else                                if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                                    tb.insertEmpty(startTag);                                }else                                    if (name.equals("hr")) {                                        if (tb.inButtonScope("p")) {                                            tb.process(new org.jsoup.parser.Token.EndTag("p"));                                        }                                        tb.insertEmpty(startTag);                                        tb.framesetOk(false);                                    }else                                        if (name.equals("image")) {                                            startTag.name("img");                                            return tb.process(startTag);                                        }else                                            if (name.equals("isindex")) {                                                tb.error(this);                                                if ((tb.getFormElement()) != null)                                                    return false;                                                tb.tokeniser.acknowledgeSelfClosingFlag();                                                tb.process(new org.jsoup.parser.Token.StartTag("form"));                                                if (startTag.attributes.hasKey("action")) {                                                    org.jsoup.nodes.Element form = tb.getFormElement();                                                    form.attr("action", startTag.attributes.get("action"));                                                }                                                tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                                tb.process(new org.jsoup.parser.Token.StartTag("label"));                                                java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                                tb.process(new org.jsoup.parser.Token.Character(prompt));                                                org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                                for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                                    if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                        inputAttribs.put(attr);                                                }                                                inputAttribs.put("name", "isindex");                                                tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                                tb.process(new org.jsoup.parser.Token.EndTag("label"));                                                tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                                tb.process(new org.jsoup.parser.Token.EndTag("form"));                                            }else                                                if (name.equals("textarea")) {                                                    tb.insert(startTag);                                                    tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                                    tb.markInsertionMode();                                                    tb.framesetOk(false);                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                                }else                                                    if (name.equals("xmp")) {                                                        if (tb.inButtonScope("p")) {                                                            tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                        }                                                        tb.reconstructFormattingElements();                                                        tb.framesetOk(false);                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("iframe")) {                                                            tb.framesetOk(false);                                                            org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                        }else                                                            if (name.equals("noembed")) {                                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                            }else                                                                if (name.equals("select")) {                                                                    tb.reconstructFormattingElements();                                                                    tb.insert(startTag);                                                                    tb.framesetOk(false);                                                                    org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                                    if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                                    else                                                                        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                                }else                                                                    if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                        if (tb.currentElement().nodeName().equals("option"))                                                                            tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                        tb.reconstructFormattingElements();                                                                        tb.insert(startTag);                                                                    }else                                                                        if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                            if (tb.inScope("ruby")) {                                                                                tb.generateImpliedEndTags();                                                                                if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                                    tb.error(this);                                                                                    tb.popStackToBefore("ruby");                                                                                }                                                                                tb.insert(startTag);                                                                            }                                                                        }else                                                                            if (name.equals("math")) {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                                tb.tokeniser.acknowledgeSelfClosingFlag();                                                                            }else                                                                                if (name.equals("svg")) {                                                                                    tb.reconstructFormattingElements();                                                                                    tb.insert(startTag);                                                                                    tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                }else                                                                                    if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                        tb.error(this);                                                                                        return false;                                                                                    }else {                                                                                        tb.reconstructFormattingElements();                                                                                        tb.insert(startTag);                                                                                    }::::INSERT::::STATEMENT::::if (node == formatEl)    break INNER;	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30114::::38455::::if (name.equals("li")) {    if (!(tb.inListItemScope(name))) {        tb.error(this);        return false;    }else {        tb.generateImpliedEndTags(name);        if (!(tb.currentElement().nodeName().equals(name)))            tb.error(this);        tb.popStackToClose(name);    }}else    if (org.jsoup.helper.StringUtil.in(name, "dd", "dt")) {        if (!(tb.inScope(name))) {            tb.error(this);            return false;        }else {            tb.generateImpliedEndTags(name);            if (!(tb.currentElement().nodeName().equals(name)))                tb.error(this);            tb.popStackToClose(name);        }    }else        if (org.jsoup.helper.StringUtil.in(name, "h1", "h2", "h3", "h4", "h5", "h6")) {            if (!(tb.inScope(new java.lang.String[]{ "h1", "h2", "h3", "h4", "h5", "h6" }))) {                tb.error(this);                return false;            }else {                tb.generateImpliedEndTags(name);                if (!(tb.currentElement().nodeName().equals(name)))                    tb.error(this);                tb.popStackToClose("h1", "h2", "h3", "h4", "h5", "h6");            }        }else            if (name.equals("sarcasm")) {                return anyOtherEndTag(t, tb);            }else                if (org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")) {                    OUTER : for (int i = 0; i < 8; i++) {                        org.jsoup.nodes.Element formatEl = tb.getActiveFormattingElement(name);                        if (formatEl == null)                            return anyOtherEndTag(t, tb);                        else                            if (!(tb.onStack(formatEl))) {                                tb.error(this);                                tb.removeFromActiveFormattingElements(formatEl);                                return true;                            }else                                if (!(tb.inScope(formatEl.nodeName()))) {                                    tb.error(this);                                    return false;                                }else                                    if ((tb.currentElement()) != formatEl)                                        tb.error(this);                        org.jsoup.nodes.Element furthestBlock = null;                        org.jsoup.nodes.Element commonAncestor = null;                        boolean seenFormattingElement = false;                        java.util.LinkedList<org.jsoup.nodes.Element> stack = tb.getStack();                        for (int si = 0; (si < (stack.size())) && (si < 64); si++) {                            org.jsoup.nodes.Element el = stack.get(si);                            if (el == formatEl) {                                commonAncestor = stack.get((si - 1));                                seenFormattingElement = true;                            }else                                if (seenFormattingElement && (tb.isSpecial(el))) {                                    furthestBlock = el;                                    break;                                }                        }                        if (furthestBlock == null) {                            tb.popStackToClose(formatEl.nodeName());                            tb.removeFromActiveFormattingElements(formatEl);                            return true;                        }                        org.jsoup.nodes.Element node = furthestBlock;                        org.jsoup.nodes.Element lastNode = furthestBlock;                        INNER : for (int j = 0; j < 3; j++) {                            if (tb.onStack(node))                                node = tb.aboveOnStack(node);                            if (!(tb.isInActiveFormattingElements(node))) {                                tb.removeFromStack(node);                                continue INNER;                            }else                                if (node == formatEl)                                    break INNER;                            org.jsoup.nodes.Element replacement = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(node.nodeName()), tb.getBaseUri());                            tb.replaceActiveFormattingElement(node, replacement);                            tb.replaceOnStack(node, replacement);                            node = replacement;                            if (lastNode == furthestBlock) {                            }                            if ((lastNode.parent()) != null)                                lastNode.remove();                            node.appendChild(lastNode);                            lastNode = node;                        }                        if (org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")) {                            if ((lastNode.parent()) != null)                                lastNode.remove();                            tb.insertInFosterParent(lastNode);                        }else {                            if ((lastNode.parent()) != null)                                lastNode.remove();                            commonAncestor.appendChild(lastNode);                        }                        org.jsoup.nodes.Element adopter = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(name), tb.getBaseUri());                        org.jsoup.nodes.Node[] childNodes = furthestBlock.childNodes().toArray(new org.jsoup.nodes.Node[furthestBlock.childNodeSize()]);                        for (org.jsoup.nodes.Node childNode : childNodes) {                            adopter.appendChild(childNode);                        }                        furthestBlock.appendChild(adopter);                        tb.removeFromActiveFormattingElements(formatEl);                        tb.removeFromStack(formatEl);                        tb.insertOnStackAfter(furthestBlock, adopter);                    }                }else                    if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {                        if (!(tb.inScope("name"))) {                            if (!(tb.inScope(name))) {                                tb.error(this);                                return false;                            }                            tb.generateImpliedEndTags();                            if (!(tb.currentElement().nodeName().equals(name)))                                tb.error(this);                            tb.popStackToClose(name);                            tb.clearFormattingElementsToLastMarker();                        }                    }else                        if (name.equals("br")) {                            tb.error(this);                            tb.process(new org.jsoup.parser.Token.StartTag("br"));                            return false;                        }else {                            return anyOtherEndTag(t, tb);                        }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"u"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"tt"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"strong"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"strike"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"small"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"s"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"i"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"font"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"em"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"code"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"big"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"b"	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"td"	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32612::::32864::::if (!(tb.inScope(formatEl.nodeName()))) {    tb.error(this);    return false;}else    if ((tb.currentElement()) != formatEl)        tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("th"))	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32612::::32864::::if (!(tb.inScope(formatEl.nodeName()))) {    tb.error(this);    return false;}else    if ((tb.currentElement()) != formatEl)        tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("td"))	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"u"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"tt"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"strong"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"strike"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"small"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"s"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"i"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"font"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"em"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"code"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"big"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"b"	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"title"	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"frameset"	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31734::::name.equals("sarcasm")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("th"))	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31734::::name.equals("sarcasm")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("td"))	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"th"	false
org.jsoup.parser.HtmlTreeBuilderState::::649::::32115::::37512::::OUTER : for (int i = 0; i < 8; i++) {    org.jsoup.nodes.Element formatEl = tb.getActiveFormattingElement(name);    if (formatEl == null)        return anyOtherEndTag(t, tb);    else        if (!(tb.onStack(formatEl))) {            tb.error(this);            tb.removeFromActiveFormattingElements(formatEl);            return true;        }else            if (!(tb.inScope(formatEl.nodeName()))) {                tb.error(this);                return false;            }else                if ((tb.currentElement()) != formatEl)                    tb.error(this);    org.jsoup.nodes.Element furthestBlock = null;    org.jsoup.nodes.Element commonAncestor = null;    boolean seenFormattingElement = false;    java.util.LinkedList<org.jsoup.nodes.Element> stack = tb.getStack();    for (int si = 0; (si < (stack.size())) && (si < 64); si++) {        org.jsoup.nodes.Element el = stack.get(si);        if (el == formatEl) {            commonAncestor = stack.get((si - 1));            seenFormattingElement = true;        }else            if (seenFormattingElement && (tb.isSpecial(el))) {                furthestBlock = el;                break;            }    }    if (furthestBlock == null) {        tb.popStackToClose(formatEl.nodeName());        tb.removeFromActiveFormattingElements(formatEl);        return true;    }    org.jsoup.nodes.Element node = furthestBlock;    org.jsoup.nodes.Element lastNode = furthestBlock;    INNER : for (int j = 0; j < 3; j++) {        if (tb.onStack(node))            node = tb.aboveOnStack(node);        if (!(tb.isInActiveFormattingElements(node))) {            tb.removeFromStack(node);            continue INNER;        }else            if (node == formatEl)                break INNER;        org.jsoup.nodes.Element replacement = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(node.nodeName()), tb.getBaseUri());        tb.replaceActiveFormattingElement(node, replacement);        tb.replaceOnStack(node, replacement);        node = replacement;        if (lastNode == furthestBlock) {        }        if ((lastNode.parent()) != null)            lastNode.remove();        node.appendChild(lastNode);        lastNode = node;    }    if (org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")) {        if ((lastNode.parent()) != null)            lastNode.remove();        tb.insertInFosterParent(lastNode);    }else {        if ((lastNode.parent()) != null)            lastNode.remove();        commonAncestor.appendChild(lastNode);    }    org.jsoup.nodes.Element adopter = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(name), tb.getBaseUri());    org.jsoup.nodes.Node[] childNodes = furthestBlock.childNodes().toArray(new org.jsoup.nodes.Node[furthestBlock.childNodeSize()]);    for (org.jsoup.nodes.Node childNode : childNodes) {        adopter.appendChild(childNode);    }    furthestBlock.appendChild(adopter);    tb.removeFromActiveFormattingElements(formatEl);    tb.removeFromStack(formatEl);    tb.insertOnStackAfter(furthestBlock, adopter);}::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("option"))	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32390::::32397::::formatEl::::html	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30114::::38455::::if (name.equals("li")) {    if (!(tb.inListItemScope(name))) {        tb.error(this);        return false;    }else {        tb.generateImpliedEndTags(name);        if (!(tb.currentElement().nodeName().equals(name)))            tb.error(this);        tb.popStackToClose(name);    }}else    if (org.jsoup.helper.StringUtil.in(name, "dd", "dt")) {        if (!(tb.inScope(name))) {            tb.error(this);            return false;        }else {            tb.generateImpliedEndTags(name);            if (!(tb.currentElement().nodeName().equals(name)))                tb.error(this);            tb.popStackToClose(name);        }    }else        if (org.jsoup.helper.StringUtil.in(name, "h1", "h2", "h3", "h4", "h5", "h6")) {            if (!(tb.inScope(new java.lang.String[]{ "h1", "h2", "h3", "h4", "h5", "h6" }))) {                tb.error(this);                return false;            }else {                tb.generateImpliedEndTags(name);                if (!(tb.currentElement().nodeName().equals(name)))                    tb.error(this);                tb.popStackToClose("h1", "h2", "h3", "h4", "h5", "h6");            }        }else            if (name.equals("sarcasm")) {                return anyOtherEndTag(t, tb);            }else                if (org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")) {                    OUTER : for (int i = 0; i < 8; i++) {                        org.jsoup.nodes.Element formatEl = tb.getActiveFormattingElement(name);                        if (formatEl == null)                            return anyOtherEndTag(t, tb);                        else                            if (!(tb.onStack(formatEl))) {                                tb.error(this);                                tb.removeFromActiveFormattingElements(formatEl);                                return true;                            }else                                if (!(tb.inScope(formatEl.nodeName()))) {                                    tb.error(this);                                    return false;                                }else                                    if ((tb.currentElement()) != formatEl)                                        tb.error(this);                        org.jsoup.nodes.Element furthestBlock = null;                        org.jsoup.nodes.Element commonAncestor = null;                        boolean seenFormattingElement = false;                        java.util.LinkedList<org.jsoup.nodes.Element> stack = tb.getStack();                        for (int si = 0; (si < (stack.size())) && (si < 64); si++) {                            org.jsoup.nodes.Element el = stack.get(si);                            if (el == formatEl) {                                commonAncestor = stack.get((si - 1));                                seenFormattingElement = true;                            }else                                if (seenFormattingElement && (tb.isSpecial(el))) {                                    furthestBlock = el;                                    break;                                }                        }                        if (furthestBlock == null) {                            tb.popStackToClose(formatEl.nodeName());                            tb.removeFromActiveFormattingElements(formatEl);                            return true;                        }                        org.jsoup.nodes.Element node = furthestBlock;                        org.jsoup.nodes.Element lastNode = furthestBlock;                        INNER : for (int j = 0; j < 3; j++) {                            if (tb.onStack(node))                                node = tb.aboveOnStack(node);                            if (!(tb.isInActiveFormattingElements(node))) {                                tb.removeFromStack(node);                                continue INNER;                            }else                                if (node == formatEl)                                    break INNER;                            org.jsoup.nodes.Element replacement = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(node.nodeName()), tb.getBaseUri());                            tb.replaceActiveFormattingElement(node, replacement);                            tb.replaceOnStack(node, replacement);                            node = replacement;                            if (lastNode == furthestBlock) {                            }                            if ((lastNode.parent()) != null)                                lastNode.remove();                            node.appendChild(lastNode);                            lastNode = node;                        }                        if (org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")) {                            if ((lastNode.parent()) != null)                                lastNode.remove();                            tb.insertInFosterParent(lastNode);                        }else {                            if ((lastNode.parent()) != null)                                lastNode.remove();                            commonAncestor.appendChild(lastNode);                        }                        org.jsoup.nodes.Element adopter = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(name), tb.getBaseUri());                        org.jsoup.nodes.Node[] childNodes = furthestBlock.childNodes().toArray(new org.jsoup.nodes.Node[furthestBlock.childNodeSize()]);                        for (org.jsoup.nodes.Node childNode : childNodes) {                            adopter.appendChild(childNode);                        }                        furthestBlock.appendChild(adopter);                        tb.removeFromActiveFormattingElements(formatEl);                        tb.removeFromStack(formatEl);                        tb.insertOnStackAfter(furthestBlock, adopter);                    }                }else                    if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {                        if (!(tb.inScope("name"))) {                            if (!(tb.inScope(name))) {                                tb.error(this);                                return false;                            }                            tb.generateImpliedEndTags();                            if (!(tb.currentElement().nodeName().equals(name)))                                tb.error(this);                            tb.popStackToClose(name);                            tb.clearFormattingElementsToLastMarker();                        }                    }else                        if (name.equals("br")) {                            tb.error(this);                            tb.process(new org.jsoup.parser.Token.StartTag("br"));                            return false;                        }else {                            return anyOtherEndTag(t, tb);                        }::::INSERT::::STATEMENT::::if (lastNode == furthestBlock) {}	false
org.jsoup.parser.HtmlTreeBuilder::::287::::9924::::9925::::el::::headElement	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"command"	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32628::::32635::::formatEl::::html	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18855::::26999::::if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {    tb.reconstructFormattingElements();    org.jsoup.nodes.Element el = tb.insert(startTag);    tb.pushActiveFormattingElements(el);}else    if (name.equals("nobr")) {        tb.reconstructFormattingElements();        if (tb.inScope("nobr")) {            tb.error(this);            tb.process(new org.jsoup.parser.Token.EndTag("nobr"));            tb.reconstructFormattingElements();        }        org.jsoup.nodes.Element el = tb.insert(startTag);        tb.pushActiveFormattingElements(el);    }else        if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {            tb.reconstructFormattingElements();            tb.insert(startTag);            tb.insertMarkerToFormattingElements();            tb.framesetOk(false);        }else            if (name.equals("table")) {                if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                }                tb.insert(startTag);                tb.framesetOk(false);                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);            }else                if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                    tb.reconstructFormattingElements();                    tb.insertEmpty(startTag);                    tb.framesetOk(false);                }else                    if (name.equals("input")) {                        tb.reconstructFormattingElements();                        org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                        if (!(el.attr("type").equalsIgnoreCase("hidden")))                            tb.framesetOk(false);                    }else                        if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                            tb.insertEmpty(startTag);                        }else                            if (name.equals("hr")) {                                if (tb.inButtonScope("p")) {                                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                                }                                tb.insertEmpty(startTag);                                tb.framesetOk(false);                            }else                                if (name.equals("image")) {                                    startTag.name("img");                                    return tb.process(startTag);                                }else                                    if (name.equals("isindex")) {                                        tb.error(this);                                        if ((tb.getFormElement()) != null)                                            return false;                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                        tb.process(new org.jsoup.parser.Token.StartTag("form"));                                        if (startTag.attributes.hasKey("action")) {                                            org.jsoup.nodes.Element form = tb.getFormElement();                                            form.attr("action", startTag.attributes.get("action"));                                        }                                        tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                        tb.process(new org.jsoup.parser.Token.StartTag("label"));                                        java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                        tb.process(new org.jsoup.parser.Token.Character(prompt));                                        org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                        for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                            if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                inputAttribs.put(attr);                                        }                                        inputAttribs.put("name", "isindex");                                        tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                        tb.process(new org.jsoup.parser.Token.EndTag("label"));                                        tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                        tb.process(new org.jsoup.parser.Token.EndTag("form"));                                    }else                                        if (name.equals("textarea")) {                                            tb.insert(startTag);                                            tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                            tb.markInsertionMode();                                            tb.framesetOk(false);                                            tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                        }else                                            if (name.equals("xmp")) {                                                if (tb.inButtonScope("p")) {                                                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                }                                                tb.reconstructFormattingElements();                                                tb.framesetOk(false);                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                            }else                                                if (name.equals("iframe")) {                                                    tb.framesetOk(false);                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                }else                                                    if (name.equals("noembed")) {                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("select")) {                                                            tb.reconstructFormattingElements();                                                            tb.insert(startTag);                                                            tb.framesetOk(false);                                                            org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                            if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                            else                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                        }else                                                            if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                if (tb.currentElement().nodeName().equals("option"))                                                                    tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                tb.reconstructFormattingElements();                                                                tb.insert(startTag);                                                            }else                                                                if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                    if (tb.inScope("ruby")) {                                                                        tb.generateImpliedEndTags();                                                                        if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                            tb.error(this);                                                                            tb.popStackToBefore("ruby");                                                                        }                                                                        tb.insert(startTag);                                                                    }                                                                }else                                                                    if (name.equals("math")) {                                                                        tb.reconstructFormattingElements();                                                                        tb.insert(startTag);                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                    }else                                                                        if (name.equals("svg")) {                                                                            tb.reconstructFormattingElements();                                                                            tb.insert(startTag);                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                        }else                                                                            if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                tb.error(this);                                                                                return false;                                                                            }else {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                            }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag(name))	false
org.jsoup.parser.HtmlTreeBuilderState::::671::::33469::::33476::::formatEl::::html	false
org.jsoup.parser.HtmlTreeBuilderState::::651::::32261::::32268::::formatEl::::html	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"th"	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32808::::32815::::formatEl::::html	false
org.jsoup.parser.TokeniserState::::901::::30491::::30494::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.AfterAttributeValue_quoted	false
org.jsoup.parser.HtmlTreeBuilderState::::649::::32115::::37512::::OUTER : for (int i = 0; i < 8; i++) {    org.jsoup.nodes.Element formatEl = tb.getActiveFormattingElement(name);    if (formatEl == null)        return anyOtherEndTag(t, tb);    else        if (!(tb.onStack(formatEl))) {            tb.error(this);            tb.removeFromActiveFormattingElements(formatEl);            return true;        }else            if (!(tb.inScope(formatEl.nodeName()))) {                tb.error(this);                return false;            }else                if ((tb.currentElement()) != formatEl)                    tb.error(this);    org.jsoup.nodes.Element furthestBlock = null;    org.jsoup.nodes.Element commonAncestor = null;    boolean seenFormattingElement = false;    java.util.LinkedList<org.jsoup.nodes.Element> stack = tb.getStack();    for (int si = 0; (si < (stack.size())) && (si < 64); si++) {        org.jsoup.nodes.Element el = stack.get(si);        if (el == formatEl) {            commonAncestor = stack.get((si - 1));            seenFormattingElement = true;        }else            if (seenFormattingElement && (tb.isSpecial(el))) {                furthestBlock = el;                break;            }    }    if (furthestBlock == null) {        tb.popStackToClose(formatEl.nodeName());        tb.removeFromActiveFormattingElements(formatEl);        return true;    }    org.jsoup.nodes.Element node = furthestBlock;    org.jsoup.nodes.Element lastNode = furthestBlock;    INNER : for (int j = 0; j < 3; j++) {        if (tb.onStack(node))            node = tb.aboveOnStack(node);        if (!(tb.isInActiveFormattingElements(node))) {            tb.removeFromStack(node);            continue INNER;        }else            if (node == formatEl)                break INNER;        org.jsoup.nodes.Element replacement = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(node.nodeName()), tb.getBaseUri());        tb.replaceActiveFormattingElement(node, replacement);        tb.replaceOnStack(node, replacement);        node = replacement;        if (lastNode == furthestBlock) {        }        if ((lastNode.parent()) != null)            lastNode.remove();        node.appendChild(lastNode);        lastNode = node;    }    if (org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")) {        if ((lastNode.parent()) != null)            lastNode.remove();        tb.insertInFosterParent(lastNode);    }else {        if ((lastNode.parent()) != null)            lastNode.remove();        commonAncestor.appendChild(lastNode);    }    org.jsoup.nodes.Element adopter = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(name), tb.getBaseUri());    org.jsoup.nodes.Node[] childNodes = furthestBlock.childNodes().toArray(new org.jsoup.nodes.Node[furthestBlock.childNodeSize()]);    for (org.jsoup.nodes.Node childNode : childNodes) {        adopter.appendChild(childNode);    }    furthestBlock.appendChild(adopter);    tb.removeFromActiveFormattingElements(formatEl);    tb.removeFromStack(formatEl);    tb.insertOnStackAfter(furthestBlock, adopter);}::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("hr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::784::::39568::::39579::::return true::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("nobr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32781::::32864::::if ((tb.currentElement()) != formatEl)    tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("th"))	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32781::::32864::::if ((tb.currentElement()) != formatEl)    tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("td"))	false
org.jsoup.parser.HtmlTreeBuilderState::::632::::31114::::31168::::org.jsoup.helper.StringUtil.in(name, "h1", "h2", "h3", "h4", "h5", "h6")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag(name))	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"frameset"	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32374::::32864::::if (!(tb.onStack(formatEl))) {    tb.error(this);    tb.removeFromActiveFormattingElements(formatEl);    return true;}else    if (!(tb.inScope(formatEl.nodeName()))) {        tb.error(this);        return false;    }else        if ((tb.currentElement()) != formatEl)            tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("th"))	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32374::::32864::::if (!(tb.onStack(formatEl))) {    tb.error(this);    tb.removeFromActiveFormattingElements(formatEl);    return true;}else    if (!(tb.inScope(formatEl.nodeName()))) {        tb.error(this);        return false;    }else        if ((tb.currentElement()) != formatEl)            tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("td"))	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31713::::31716::::name::::"colgroup"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"frameset"	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33517::::33551::::commonAncestor = stack.get((si - 1))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("body"))	false
org.jsoup.parser.HtmlTreeBuilderState::::784::::39568::::39579::::return true::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("button"))	false
org.jsoup.parser.HtmlTreeBuilderState::::679::::33902::::33914::::furthestBlock::::remainingA	false
org.jsoup.parser.HtmlTreeBuilderState::::632::::31114::::31168::::org.jsoup.helper.StringUtil.in(name, "h1", "h2", "h3", "h4", "h5", "h6")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("nobr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::784::::39568::::39579::::return true::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("br"))	false
org.jsoup.parser.HtmlTreeBuilderState::::653::::32390::::32397::::formatEl::::form	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18070::::26999::::if (name.equals("a")) {    if ((tb.getActiveFormattingElement("a")) != null) {        tb.error(this);        tb.process(new org.jsoup.parser.Token.EndTag("a"));        org.jsoup.nodes.Element remainingA = tb.getFromStack("a");        if (remainingA != null) {            tb.removeFromActiveFormattingElements(remainingA);            tb.removeFromStack(remainingA);        }    }    tb.reconstructFormattingElements();    org.jsoup.nodes.Element a = tb.insert(startTag);    tb.pushActiveFormattingElements(a);}else    if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {        tb.reconstructFormattingElements();        org.jsoup.nodes.Element el = tb.insert(startTag);        tb.pushActiveFormattingElements(el);    }else        if (name.equals("nobr")) {            tb.reconstructFormattingElements();            if (tb.inScope("nobr")) {                tb.error(this);                tb.process(new org.jsoup.parser.Token.EndTag("nobr"));                tb.reconstructFormattingElements();            }            org.jsoup.nodes.Element el = tb.insert(startTag);            tb.pushActiveFormattingElements(el);        }else            if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {                tb.reconstructFormattingElements();                tb.insert(startTag);                tb.insertMarkerToFormattingElements();                tb.framesetOk(false);            }else                if (name.equals("table")) {                    if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                        tb.process(new org.jsoup.parser.Token.EndTag("p"));                    }                    tb.insert(startTag);                    tb.framesetOk(false);                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                }else                    if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                        tb.reconstructFormattingElements();                        tb.insertEmpty(startTag);                        tb.framesetOk(false);                    }else                        if (name.equals("input")) {                            tb.reconstructFormattingElements();                            org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                            if (!(el.attr("type").equalsIgnoreCase("hidden")))                                tb.framesetOk(false);                        }else                            if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                                tb.insertEmpty(startTag);                            }else                                if (name.equals("hr")) {                                    if (tb.inButtonScope("p")) {                                        tb.process(new org.jsoup.parser.Token.EndTag("p"));                                    }                                    tb.insertEmpty(startTag);                                    tb.framesetOk(false);                                }else                                    if (name.equals("image")) {                                        startTag.name("img");                                        return tb.process(startTag);                                    }else                                        if (name.equals("isindex")) {                                            tb.error(this);                                            if ((tb.getFormElement()) != null)                                                return false;                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                            tb.process(new org.jsoup.parser.Token.StartTag("form"));                                            if (startTag.attributes.hasKey("action")) {                                                org.jsoup.nodes.Element form = tb.getFormElement();                                                form.attr("action", startTag.attributes.get("action"));                                            }                                            tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                            tb.process(new org.jsoup.parser.Token.StartTag("label"));                                            java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                            tb.process(new org.jsoup.parser.Token.Character(prompt));                                            org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                            for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                                if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                    inputAttribs.put(attr);                                            }                                            inputAttribs.put("name", "isindex");                                            tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                            tb.process(new org.jsoup.parser.Token.EndTag("label"));                                            tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                            tb.process(new org.jsoup.parser.Token.EndTag("form"));                                        }else                                            if (name.equals("textarea")) {                                                tb.insert(startTag);                                                tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                                tb.markInsertionMode();                                                tb.framesetOk(false);                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                            }else                                                if (name.equals("xmp")) {                                                    if (tb.inButtonScope("p")) {                                                        tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                    }                                                    tb.reconstructFormattingElements();                                                    tb.framesetOk(false);                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                }else                                                    if (name.equals("iframe")) {                                                        tb.framesetOk(false);                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("noembed")) {                                                            org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                        }else                                                            if (name.equals("select")) {                                                                tb.reconstructFormattingElements();                                                                tb.insert(startTag);                                                                tb.framesetOk(false);                                                                org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                                if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                                else                                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                            }else                                                                if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                    if (tb.currentElement().nodeName().equals("option"))                                                                        tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                    tb.reconstructFormattingElements();                                                                    tb.insert(startTag);                                                                }else                                                                    if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                        if (tb.inScope("ruby")) {                                                                            tb.generateImpliedEndTags();                                                                            if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                                tb.error(this);                                                                                tb.popStackToBefore("ruby");                                                                            }                                                                            tb.insert(startTag);                                                                        }                                                                    }else                                                                        if (name.equals("math")) {                                                                            tb.reconstructFormattingElements();                                                                            tb.insert(startTag);                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                        }else                                                                            if (name.equals("svg")) {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                                tb.tokeniser.acknowledgeSelfClosingFlag();                                                                            }else                                                                                if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                    tb.error(this);                                                                                    return false;                                                                                }else {                                                                                    tb.reconstructFormattingElements();                                                                                    tb.insert(startTag);                                                                                }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("a"))	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17521::::26999::::if (name.equals("button")) {    if (tb.inButtonScope("button")) {        tb.error(this);        tb.process(new org.jsoup.parser.Token.EndTag("button"));        tb.process(startTag);    }else {        tb.reconstructFormattingElements();        tb.insert(startTag);        tb.framesetOk(false);    }}else    if (name.equals("a")) {        if ((tb.getActiveFormattingElement("a")) != null) {            tb.error(this);            tb.process(new org.jsoup.parser.Token.EndTag("a"));            org.jsoup.nodes.Element remainingA = tb.getFromStack("a");            if (remainingA != null) {                tb.removeFromActiveFormattingElements(remainingA);                tb.removeFromStack(remainingA);            }        }        tb.reconstructFormattingElements();        org.jsoup.nodes.Element a = tb.insert(startTag);        tb.pushActiveFormattingElements(a);    }else        if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {            tb.reconstructFormattingElements();            org.jsoup.nodes.Element el = tb.insert(startTag);            tb.pushActiveFormattingElements(el);        }else            if (name.equals("nobr")) {                tb.reconstructFormattingElements();                if (tb.inScope("nobr")) {                    tb.error(this);                    tb.process(new org.jsoup.parser.Token.EndTag("nobr"));                    tb.reconstructFormattingElements();                }                org.jsoup.nodes.Element el = tb.insert(startTag);                tb.pushActiveFormattingElements(el);            }else                if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {                    tb.reconstructFormattingElements();                    tb.insert(startTag);                    tb.insertMarkerToFormattingElements();                    tb.framesetOk(false);                }else                    if (name.equals("table")) {                        if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                            tb.process(new org.jsoup.parser.Token.EndTag("p"));                        }                        tb.insert(startTag);                        tb.framesetOk(false);                        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                    }else                        if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                            tb.reconstructFormattingElements();                            tb.insertEmpty(startTag);                            tb.framesetOk(false);                        }else                            if (name.equals("input")) {                                tb.reconstructFormattingElements();                                org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                                if (!(el.attr("type").equalsIgnoreCase("hidden")))                                    tb.framesetOk(false);                            }else                                if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                                    tb.insertEmpty(startTag);                                }else                                    if (name.equals("hr")) {                                        if (tb.inButtonScope("p")) {                                            tb.process(new org.jsoup.parser.Token.EndTag("p"));                                        }                                        tb.insertEmpty(startTag);                                        tb.framesetOk(false);                                    }else                                        if (name.equals("image")) {                                            startTag.name("img");                                            return tb.process(startTag);                                        }else                                            if (name.equals("isindex")) {                                                tb.error(this);                                                if ((tb.getFormElement()) != null)                                                    return false;                                                tb.tokeniser.acknowledgeSelfClosingFlag();                                                tb.process(new org.jsoup.parser.Token.StartTag("form"));                                                if (startTag.attributes.hasKey("action")) {                                                    org.jsoup.nodes.Element form = tb.getFormElement();                                                    form.attr("action", startTag.attributes.get("action"));                                                }                                                tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                                tb.process(new org.jsoup.parser.Token.StartTag("label"));                                                java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                                tb.process(new org.jsoup.parser.Token.Character(prompt));                                                org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                                for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                                    if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                        inputAttribs.put(attr);                                                }                                                inputAttribs.put("name", "isindex");                                                tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                                tb.process(new org.jsoup.parser.Token.EndTag("label"));                                                tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                                tb.process(new org.jsoup.parser.Token.EndTag("form"));                                            }else                                                if (name.equals("textarea")) {                                                    tb.insert(startTag);                                                    tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                                    tb.markInsertionMode();                                                    tb.framesetOk(false);                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                                }else                                                    if (name.equals("xmp")) {                                                        if (tb.inButtonScope("p")) {                                                            tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                        }                                                        tb.reconstructFormattingElements();                                                        tb.framesetOk(false);                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("iframe")) {                                                            tb.framesetOk(false);                                                            org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                        }else                                                            if (name.equals("noembed")) {                                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                            }else                                                                if (name.equals("select")) {                                                                    tb.reconstructFormattingElements();                                                                    tb.insert(startTag);                                                                    tb.framesetOk(false);                                                                    org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                                    if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                                    else                                                                        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                                }else                                                                    if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                        if (tb.currentElement().nodeName().equals("option"))                                                                            tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                        tb.reconstructFormattingElements();                                                                        tb.insert(startTag);                                                                    }else                                                                        if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                            if (tb.inScope("ruby")) {                                                                                tb.generateImpliedEndTags();                                                                                if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                                    tb.error(this);                                                                                    tb.popStackToBefore("ruby");                                                                                }                                                                                tb.insert(startTag);                                                                            }                                                                        }else                                                                            if (name.equals("math")) {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                                tb.tokeniser.acknowledgeSelfClosingFlag();                                                                            }else                                                                                if (name.equals("svg")) {                                                                                    tb.reconstructFormattingElements();                                                                                    tb.insert(startTag);                                                                                    tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                }else                                                                                    if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                        tb.error(this);                                                                                        return false;                                                                                    }else {                                                                                        tb.reconstructFormattingElements();                                                                                        tb.insert(startTag);                                                                                    }::::INSERT::::STATEMENT::::org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"title"	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18855::::26999::::if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {    tb.reconstructFormattingElements();    org.jsoup.nodes.Element el = tb.insert(startTag);    tb.pushActiveFormattingElements(el);}else    if (name.equals("nobr")) {        tb.reconstructFormattingElements();        if (tb.inScope("nobr")) {            tb.error(this);            tb.process(new org.jsoup.parser.Token.EndTag("nobr"));            tb.reconstructFormattingElements();        }        org.jsoup.nodes.Element el = tb.insert(startTag);        tb.pushActiveFormattingElements(el);    }else        if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {            tb.reconstructFormattingElements();            tb.insert(startTag);            tb.insertMarkerToFormattingElements();            tb.framesetOk(false);        }else            if (name.equals("table")) {                if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                }                tb.insert(startTag);                tb.framesetOk(false);                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);            }else                if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                    tb.reconstructFormattingElements();                    tb.insertEmpty(startTag);                    tb.framesetOk(false);                }else                    if (name.equals("input")) {                        tb.reconstructFormattingElements();                        org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                        if (!(el.attr("type").equalsIgnoreCase("hidden")))                            tb.framesetOk(false);                    }else                        if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                            tb.insertEmpty(startTag);                        }else                            if (name.equals("hr")) {                                if (tb.inButtonScope("p")) {                                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                                }                                tb.insertEmpty(startTag);                                tb.framesetOk(false);                            }else                                if (name.equals("image")) {                                    startTag.name("img");                                    return tb.process(startTag);                                }else                                    if (name.equals("isindex")) {                                        tb.error(this);                                        if ((tb.getFormElement()) != null)                                            return false;                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                        tb.process(new org.jsoup.parser.Token.StartTag("form"));                                        if (startTag.attributes.hasKey("action")) {                                            org.jsoup.nodes.Element form = tb.getFormElement();                                            form.attr("action", startTag.attributes.get("action"));                                        }                                        tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                        tb.process(new org.jsoup.parser.Token.StartTag("label"));                                        java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                        tb.process(new org.jsoup.parser.Token.Character(prompt));                                        org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                        for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                            if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                inputAttribs.put(attr);                                        }                                        inputAttribs.put("name", "isindex");                                        tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                        tb.process(new org.jsoup.parser.Token.EndTag("label"));                                        tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                        tb.process(new org.jsoup.parser.Token.EndTag("form"));                                    }else                                        if (name.equals("textarea")) {                                            tb.insert(startTag);                                            tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                            tb.markInsertionMode();                                            tb.framesetOk(false);                                            tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                        }else                                            if (name.equals("xmp")) {                                                if (tb.inButtonScope("p")) {                                                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                }                                                tb.reconstructFormattingElements();                                                tb.framesetOk(false);                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                            }else                                                if (name.equals("iframe")) {                                                    tb.framesetOk(false);                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                }else                                                    if (name.equals("noembed")) {                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("select")) {                                                            tb.reconstructFormattingElements();                                                            tb.insert(startTag);                                                            tb.framesetOk(false);                                                            org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                            if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                            else                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                        }else                                                            if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                if (tb.currentElement().nodeName().equals("option"))                                                                    tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                tb.reconstructFormattingElements();                                                                tb.insert(startTag);                                                            }else                                                                if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                    if (tb.inScope("ruby")) {                                                                        tb.generateImpliedEndTags();                                                                        if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                            tb.error(this);                                                                            tb.popStackToBefore("ruby");                                                                        }                                                                        tb.insert(startTag);                                                                    }                                                                }else                                                                    if (name.equals("math")) {                                                                        tb.reconstructFormattingElements();                                                                        tb.insert(startTag);                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                    }else                                                                        if (name.equals("svg")) {                                                                            tb.reconstructFormattingElements();                                                                            tb.insert(startTag);                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                        }else                                                                            if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                tb.error(this);                                                                                return false;                                                                            }else {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                            }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("body"))	false
org.jsoup.parser.HtmlTreeBuilderState::::649::::32115::::37512::::OUTER : for (int i = 0; i < 8; i++) {    org.jsoup.nodes.Element formatEl = tb.getActiveFormattingElement(name);    if (formatEl == null)        return anyOtherEndTag(t, tb);    else        if (!(tb.onStack(formatEl))) {            tb.error(this);            tb.removeFromActiveFormattingElements(formatEl);            return true;        }else            if (!(tb.inScope(formatEl.nodeName()))) {                tb.error(this);                return false;            }else                if ((tb.currentElement()) != formatEl)                    tb.error(this);    org.jsoup.nodes.Element furthestBlock = null;    org.jsoup.nodes.Element commonAncestor = null;    boolean seenFormattingElement = false;    java.util.LinkedList<org.jsoup.nodes.Element> stack = tb.getStack();    for (int si = 0; (si < (stack.size())) && (si < 64); si++) {        org.jsoup.nodes.Element el = stack.get(si);        if (el == formatEl) {            commonAncestor = stack.get((si - 1));            seenFormattingElement = true;        }else            if (seenFormattingElement && (tb.isSpecial(el))) {                furthestBlock = el;                break;            }    }    if (furthestBlock == null) {        tb.popStackToClose(formatEl.nodeName());        tb.removeFromActiveFormattingElements(formatEl);        return true;    }    org.jsoup.nodes.Element node = furthestBlock;    org.jsoup.nodes.Element lastNode = furthestBlock;    INNER : for (int j = 0; j < 3; j++) {        if (tb.onStack(node))            node = tb.aboveOnStack(node);        if (!(tb.isInActiveFormattingElements(node))) {            tb.removeFromStack(node);            continue INNER;        }else            if (node == formatEl)                break INNER;        org.jsoup.nodes.Element replacement = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(node.nodeName()), tb.getBaseUri());        tb.replaceActiveFormattingElement(node, replacement);        tb.replaceOnStack(node, replacement);        node = replacement;        if (lastNode == furthestBlock) {        }        if ((lastNode.parent()) != null)            lastNode.remove();        node.appendChild(lastNode);        lastNode = node;    }    if (org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")) {        if ((lastNode.parent()) != null)            lastNode.remove();        tb.insertInFosterParent(lastNode);    }else {        if ((lastNode.parent()) != null)            lastNode.remove();        commonAncestor.appendChild(lastNode);    }    org.jsoup.nodes.Element adopter = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(name), tb.getBaseUri());    org.jsoup.nodes.Node[] childNodes = furthestBlock.childNodes().toArray(new org.jsoup.nodes.Node[furthestBlock.childNodeSize()]);    for (org.jsoup.nodes.Node childNode : childNodes) {        adopter.appendChild(childNode);    }    furthestBlock.appendChild(adopter);    tb.removeFromActiveFormattingElements(formatEl);    tb.removeFromStack(formatEl);    tb.insertOnStackAfter(furthestBlock, adopter);}::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18070::::26999::::if (name.equals("a")) {    if ((tb.getActiveFormattingElement("a")) != null) {        tb.error(this);        tb.process(new org.jsoup.parser.Token.EndTag("a"));        org.jsoup.nodes.Element remainingA = tb.getFromStack("a");        if (remainingA != null) {            tb.removeFromActiveFormattingElements(remainingA);            tb.removeFromStack(remainingA);        }    }    tb.reconstructFormattingElements();    org.jsoup.nodes.Element a = tb.insert(startTag);    tb.pushActiveFormattingElements(a);}else    if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {        tb.reconstructFormattingElements();        org.jsoup.nodes.Element el = tb.insert(startTag);        tb.pushActiveFormattingElements(el);    }else        if (name.equals("nobr")) {            tb.reconstructFormattingElements();            if (tb.inScope("nobr")) {                tb.error(this);                tb.process(new org.jsoup.parser.Token.EndTag("nobr"));                tb.reconstructFormattingElements();            }            org.jsoup.nodes.Element el = tb.insert(startTag);            tb.pushActiveFormattingElements(el);        }else            if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {                tb.reconstructFormattingElements();                tb.insert(startTag);                tb.insertMarkerToFormattingElements();                tb.framesetOk(false);            }else                if (name.equals("table")) {                    if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                        tb.process(new org.jsoup.parser.Token.EndTag("p"));                    }                    tb.insert(startTag);                    tb.framesetOk(false);                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                }else                    if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                        tb.reconstructFormattingElements();                        tb.insertEmpty(startTag);                        tb.framesetOk(false);                    }else                        if (name.equals("input")) {                            tb.reconstructFormattingElements();                            org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                            if (!(el.attr("type").equalsIgnoreCase("hidden")))                                tb.framesetOk(false);                        }else                            if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                                tb.insertEmpty(startTag);                            }else                                if (name.equals("hr")) {                                    if (tb.inButtonScope("p")) {                                        tb.process(new org.jsoup.parser.Token.EndTag("p"));                                    }                                    tb.insertEmpty(startTag);                                    tb.framesetOk(false);                                }else                                    if (name.equals("image")) {                                        startTag.name("img");                                        return tb.process(startTag);                                    }else                                        if (name.equals("isindex")) {                                            tb.error(this);                                            if ((tb.getFormElement()) != null)                                                return false;                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                            tb.process(new org.jsoup.parser.Token.StartTag("form"));                                            if (startTag.attributes.hasKey("action")) {                                                org.jsoup.nodes.Element form = tb.getFormElement();                                                form.attr("action", startTag.attributes.get("action"));                                            }                                            tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                            tb.process(new org.jsoup.parser.Token.StartTag("label"));                                            java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                            tb.process(new org.jsoup.parser.Token.Character(prompt));                                            org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                            for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                                if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                    inputAttribs.put(attr);                                            }                                            inputAttribs.put("name", "isindex");                                            tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                            tb.process(new org.jsoup.parser.Token.EndTag("label"));                                            tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                            tb.process(new org.jsoup.parser.Token.EndTag("form"));                                        }else                                            if (name.equals("textarea")) {                                                tb.insert(startTag);                                                tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                                tb.markInsertionMode();                                                tb.framesetOk(false);                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                            }else                                                if (name.equals("xmp")) {                                                    if (tb.inButtonScope("p")) {                                                        tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                    }                                                    tb.reconstructFormattingElements();                                                    tb.framesetOk(false);                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                }else                                                    if (name.equals("iframe")) {                                                        tb.framesetOk(false);                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("noembed")) {                                                            org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                        }else                                                            if (name.equals("select")) {                                                                tb.reconstructFormattingElements();                                                                tb.insert(startTag);                                                                tb.framesetOk(false);                                                                org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                                if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                                else                                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                            }else                                                                if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                    if (tb.currentElement().nodeName().equals("option"))                                                                        tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                    tb.reconstructFormattingElements();                                                                    tb.insert(startTag);                                                                }else                                                                    if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                        if (tb.inScope("ruby")) {                                                                            tb.generateImpliedEndTags();                                                                            if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                                tb.error(this);                                                                                tb.popStackToBefore("ruby");                                                                            }                                                                            tb.insert(startTag);                                                                        }                                                                    }else                                                                        if (name.equals("math")) {                                                                            tb.reconstructFormattingElements();                                                                            tb.insert(startTag);                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                        }else                                                                            if (name.equals("svg")) {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                                tb.tokeniser.acknowledgeSelfClosingFlag();                                                                            }else                                                                                if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                    tb.error(this);                                                                                    return false;                                                                                }else {                                                                                    tb.reconstructFormattingElements();                                                                                    tb.insert(startTag);                                                                                }::::INSERT::::STATEMENT::::org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32781::::32864::::if ((tb.currentElement()) != formatEl)    tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("body"))	false
org.jsoup.parser.TokeniserState::::901::::30491::::30494::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.CommentStartDash	false
org.jsoup.parser.TokeniserState::::901::::30491::::30494::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.AfterDoctypeSystemIdentifier	false
org.jsoup.parser.TokeniserState::::901::::30491::::30494::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.AfterDoctypePublicIdentifier	false
org.jsoup.parser.HtmlTreeBuilderState::::657::::32628::::32635::::formatEl::::form	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"title"	false
org.jsoup.parser.HtmlTreeBuilderState::::622::::30613::::30643::::org.jsoup.helper.StringUtil.in(name, "dd", "dt")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("nobr"))	false
org.jsoup.parser.HtmlTreeBuilder::::555::::18886::::19725::::return org.jsoup.helper.StringUtil.in(name, "address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "command", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "marquee", "menu", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "style", "summary", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "title", "tr", "ul", "wbr", "xmp")::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.parser.HtmlTreeBuilder::::644::::22736::::22739::::next::::headElement	false
org.jsoup.parser.HtmlTreeBuilderState::::725::::36689::::36692::::name::::org.jsoup.parser.HtmlTreeBuilderState.nullString	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"title"	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"command"	false
org.jsoup.parser.HtmlTreeBuilderState::::676::::33799::::33804::::break::::INSERT::::STATEMENT::::if (notIgnored)    return tb.process(endTag);	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"command"	false
org.jsoup.parser.HtmlTreeBuilderState::::622::::30613::::30643::::org.jsoup.helper.StringUtil.in(name, "dd", "dt")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag(name))	false
org.jsoup.parser.HtmlTreeBuilderState::::651::::32261::::32268::::formatEl::::form	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18855::::26999::::if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {    tb.reconstructFormattingElements();    org.jsoup.nodes.Element el = tb.insert(startTag);    tb.pushActiveFormattingElements(el);}else    if (name.equals("nobr")) {        tb.reconstructFormattingElements();        if (tb.inScope("nobr")) {            tb.error(this);            tb.process(new org.jsoup.parser.Token.EndTag("nobr"));            tb.reconstructFormattingElements();        }        org.jsoup.nodes.Element el = tb.insert(startTag);        tb.pushActiveFormattingElements(el);    }else        if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {            tb.reconstructFormattingElements();            tb.insert(startTag);            tb.insertMarkerToFormattingElements();            tb.framesetOk(false);        }else            if (name.equals("table")) {                if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                }                tb.insert(startTag);                tb.framesetOk(false);                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);            }else                if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                    tb.reconstructFormattingElements();                    tb.insertEmpty(startTag);                    tb.framesetOk(false);                }else                    if (name.equals("input")) {                        tb.reconstructFormattingElements();                        org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                        if (!(el.attr("type").equalsIgnoreCase("hidden")))                            tb.framesetOk(false);                    }else                        if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                            tb.insertEmpty(startTag);                        }else                            if (name.equals("hr")) {                                if (tb.inButtonScope("p")) {                                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                                }                                tb.insertEmpty(startTag);                                tb.framesetOk(false);                            }else                                if (name.equals("image")) {                                    startTag.name("img");                                    return tb.process(startTag);                                }else                                    if (name.equals("isindex")) {                                        tb.error(this);                                        if ((tb.getFormElement()) != null)                                            return false;                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                        tb.process(new org.jsoup.parser.Token.StartTag("form"));                                        if (startTag.attributes.hasKey("action")) {                                            org.jsoup.nodes.Element form = tb.getFormElement();                                            form.attr("action", startTag.attributes.get("action"));                                        }                                        tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                        tb.process(new org.jsoup.parser.Token.StartTag("label"));                                        java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                        tb.process(new org.jsoup.parser.Token.Character(prompt));                                        org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                        for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                            if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                inputAttribs.put(attr);                                        }                                        inputAttribs.put("name", "isindex");                                        tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                        tb.process(new org.jsoup.parser.Token.EndTag("label"));                                        tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                        tb.process(new org.jsoup.parser.Token.EndTag("form"));                                    }else                                        if (name.equals("textarea")) {                                            tb.insert(startTag);                                            tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                            tb.markInsertionMode();                                            tb.framesetOk(false);                                            tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                        }else                                            if (name.equals("xmp")) {                                                if (tb.inButtonScope("p")) {                                                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                }                                                tb.reconstructFormattingElements();                                                tb.framesetOk(false);                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                            }else                                                if (name.equals("iframe")) {                                                    tb.framesetOk(false);                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                }else                                                    if (name.equals("noembed")) {                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("select")) {                                                            tb.reconstructFormattingElements();                                                            tb.insert(startTag);                                                            tb.framesetOk(false);                                                            org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                            if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                            else                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                        }else                                                            if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                if (tb.currentElement().nodeName().equals("option"))                                                                    tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                tb.reconstructFormattingElements();                                                                tb.insert(startTag);                                                            }else                                                                if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                    if (tb.inScope("ruby")) {                                                                        tb.generateImpliedEndTags();                                                                        if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                            tb.error(this);                                                                            tb.popStackToBefore("ruby");                                                                        }                                                                        tb.insert(startTag);                                                                    }                                                                }else                                                                    if (name.equals("math")) {                                                                        tb.reconstructFormattingElements();                                                                        tb.insert(startTag);                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                    }else                                                                        if (name.equals("svg")) {                                                                            tb.reconstructFormattingElements();                                                                            tb.insert(startTag);                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                        }else                                                                            if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                tb.error(this);                                                                                return false;                                                                            }else {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                            }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("form"))	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"command"	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32808::::32815::::formatEl::::form	false
org.jsoup.parser.HtmlTreeBuilderState::::645::::31854::::38455::::if (org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")) {    OUTER : for (int i = 0; i < 8; i++) {        org.jsoup.nodes.Element formatEl = tb.getActiveFormattingElement(name);        if (formatEl == null)            return anyOtherEndTag(t, tb);        else            if (!(tb.onStack(formatEl))) {                tb.error(this);                tb.removeFromActiveFormattingElements(formatEl);                return true;            }else                if (!(tb.inScope(formatEl.nodeName()))) {                    tb.error(this);                    return false;                }else                    if ((tb.currentElement()) != formatEl)                        tb.error(this);        org.jsoup.nodes.Element furthestBlock = null;        org.jsoup.nodes.Element commonAncestor = null;        boolean seenFormattingElement = false;        java.util.LinkedList<org.jsoup.nodes.Element> stack = tb.getStack();        for (int si = 0; (si < (stack.size())) && (si < 64); si++) {            org.jsoup.nodes.Element el = stack.get(si);            if (el == formatEl) {                commonAncestor = stack.get((si - 1));                seenFormattingElement = true;            }else                if (seenFormattingElement && (tb.isSpecial(el))) {                    furthestBlock = el;                    break;                }        }        if (furthestBlock == null) {            tb.popStackToClose(formatEl.nodeName());            tb.removeFromActiveFormattingElements(formatEl);            return true;        }        org.jsoup.nodes.Element node = furthestBlock;        org.jsoup.nodes.Element lastNode = furthestBlock;        INNER : for (int j = 0; j < 3; j++) {            if (tb.onStack(node))                node = tb.aboveOnStack(node);            if (!(tb.isInActiveFormattingElements(node))) {                tb.removeFromStack(node);                continue INNER;            }else                if (node == formatEl)                    break INNER;            org.jsoup.nodes.Element replacement = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(node.nodeName()), tb.getBaseUri());            tb.replaceActiveFormattingElement(node, replacement);            tb.replaceOnStack(node, replacement);            node = replacement;            if (lastNode == furthestBlock) {            }            if ((lastNode.parent()) != null)                lastNode.remove();            node.appendChild(lastNode);            lastNode = node;        }        if (org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")) {            if ((lastNode.parent()) != null)                lastNode.remove();            tb.insertInFosterParent(lastNode);        }else {            if ((lastNode.parent()) != null)                lastNode.remove();            commonAncestor.appendChild(lastNode);        }        org.jsoup.nodes.Element adopter = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(name), tb.getBaseUri());        org.jsoup.nodes.Node[] childNodes = furthestBlock.childNodes().toArray(new org.jsoup.nodes.Node[furthestBlock.childNodeSize()]);        for (org.jsoup.nodes.Node childNode : childNodes) {            adopter.appendChild(childNode);        }        furthestBlock.appendChild(adopter);        tb.removeFromActiveFormattingElements(formatEl);        tb.removeFromStack(formatEl);        tb.insertOnStackAfter(furthestBlock, adopter);    }}else    if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {        if (!(tb.inScope("name"))) {            if (!(tb.inScope(name))) {                tb.error(this);                return false;            }            tb.generateImpliedEndTags();            if (!(tb.currentElement().nodeName().equals(name)))                tb.error(this);            tb.popStackToClose(name);            tb.clearFormattingElementsToLastMarker();        }    }else        if (name.equals("br")) {            tb.error(this);            tb.process(new org.jsoup.parser.Token.StartTag("br"));            return false;        }else {            return anyOtherEndTag(t, tb);        }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("option"))	false
org.jsoup.parser.HtmlTreeBuilderState::::776::::39346::::39351::::break::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("p"))	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"col"	false
org.jsoup.parser.TokeniserState::::901::::30491::::30494::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.CommentEndDash	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::startTag.attributes	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31709::::38455::::if (name.equals("sarcasm")) {    return anyOtherEndTag(t, tb);}else    if (org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")) {        OUTER : for (int i = 0; i < 8; i++) {            org.jsoup.nodes.Element formatEl = tb.getActiveFormattingElement(name);            if (formatEl == null)                return anyOtherEndTag(t, tb);            else                if (!(tb.onStack(formatEl))) {                    tb.error(this);                    tb.removeFromActiveFormattingElements(formatEl);                    return true;                }else                    if (!(tb.inScope(formatEl.nodeName()))) {                        tb.error(this);                        return false;                    }else                        if ((tb.currentElement()) != formatEl)                            tb.error(this);            org.jsoup.nodes.Element furthestBlock = null;            org.jsoup.nodes.Element commonAncestor = null;            boolean seenFormattingElement = false;            java.util.LinkedList<org.jsoup.nodes.Element> stack = tb.getStack();            for (int si = 0; (si < (stack.size())) && (si < 64); si++) {                org.jsoup.nodes.Element el = stack.get(si);                if (el == formatEl) {                    commonAncestor = stack.get((si - 1));                    seenFormattingElement = true;                }else                    if (seenFormattingElement && (tb.isSpecial(el))) {                        furthestBlock = el;                        break;                    }            }            if (furthestBlock == null) {                tb.popStackToClose(formatEl.nodeName());                tb.removeFromActiveFormattingElements(formatEl);                return true;            }            org.jsoup.nodes.Element node = furthestBlock;            org.jsoup.nodes.Element lastNode = furthestBlock;            INNER : for (int j = 0; j < 3; j++) {                if (tb.onStack(node))                    node = tb.aboveOnStack(node);                if (!(tb.isInActiveFormattingElements(node))) {                    tb.removeFromStack(node);                    continue INNER;                }else                    if (node == formatEl)                        break INNER;                org.jsoup.nodes.Element replacement = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(node.nodeName()), tb.getBaseUri());                tb.replaceActiveFormattingElement(node, replacement);                tb.replaceOnStack(node, replacement);                node = replacement;                if (lastNode == furthestBlock) {                }                if ((lastNode.parent()) != null)                    lastNode.remove();                node.appendChild(lastNode);                lastNode = node;            }            if (org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")) {                if ((lastNode.parent()) != null)                    lastNode.remove();                tb.insertInFosterParent(lastNode);            }else {                if ((lastNode.parent()) != null)                    lastNode.remove();                commonAncestor.appendChild(lastNode);            }            org.jsoup.nodes.Element adopter = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(name), tb.getBaseUri());            org.jsoup.nodes.Node[] childNodes = furthestBlock.childNodes().toArray(new org.jsoup.nodes.Node[furthestBlock.childNodeSize()]);            for (org.jsoup.nodes.Node childNode : childNodes) {                adopter.appendChild(childNode);            }            furthestBlock.appendChild(adopter);            tb.removeFromActiveFormattingElements(formatEl);            tb.removeFromStack(formatEl);            tb.insertOnStackAfter(furthestBlock, adopter);        }    }else        if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {            if (!(tb.inScope("name"))) {                if (!(tb.inScope(name))) {                    tb.error(this);                    return false;                }                tb.generateImpliedEndTags();                if (!(tb.currentElement().nodeName().equals(name)))                    tb.error(this);                tb.popStackToClose(name);                tb.clearFormattingElementsToLastMarker();            }        }else            if (name.equals("br")) {                tb.error(this);                tb.process(new org.jsoup.parser.Token.StartTag("br"));                return false;            }else {                return anyOtherEndTag(t, tb);            }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("option"))	false
org.jsoup.parser.HtmlTreeBuilderState::::671::::33469::::33476::::formatEl::::form	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18070::::26999::::if (name.equals("a")) {    if ((tb.getActiveFormattingElement("a")) != null) {        tb.error(this);        tb.process(new org.jsoup.parser.Token.EndTag("a"));        org.jsoup.nodes.Element remainingA = tb.getFromStack("a");        if (remainingA != null) {            tb.removeFromActiveFormattingElements(remainingA);            tb.removeFromStack(remainingA);        }    }    tb.reconstructFormattingElements();    org.jsoup.nodes.Element a = tb.insert(startTag);    tb.pushActiveFormattingElements(a);}else    if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {        tb.reconstructFormattingElements();        org.jsoup.nodes.Element el = tb.insert(startTag);        tb.pushActiveFormattingElements(el);    }else        if (name.equals("nobr")) {            tb.reconstructFormattingElements();            if (tb.inScope("nobr")) {                tb.error(this);                tb.process(new org.jsoup.parser.Token.EndTag("nobr"));                tb.reconstructFormattingElements();            }            org.jsoup.nodes.Element el = tb.insert(startTag);            tb.pushActiveFormattingElements(el);        }else            if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {                tb.reconstructFormattingElements();                tb.insert(startTag);                tb.insertMarkerToFormattingElements();                tb.framesetOk(false);            }else                if (name.equals("table")) {                    if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                        tb.process(new org.jsoup.parser.Token.EndTag("p"));                    }                    tb.insert(startTag);                    tb.framesetOk(false);                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                }else                    if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                        tb.reconstructFormattingElements();                        tb.insertEmpty(startTag);                        tb.framesetOk(false);                    }else                        if (name.equals("input")) {                            tb.reconstructFormattingElements();                            org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                            if (!(el.attr("type").equalsIgnoreCase("hidden")))                                tb.framesetOk(false);                        }else                            if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                                tb.insertEmpty(startTag);                            }else                                if (name.equals("hr")) {                                    if (tb.inButtonScope("p")) {                                        tb.process(new org.jsoup.parser.Token.EndTag("p"));                                    }                                    tb.insertEmpty(startTag);                                    tb.framesetOk(false);                                }else                                    if (name.equals("image")) {                                        startTag.name("img");                                        return tb.process(startTag);                                    }else                                        if (name.equals("isindex")) {                                            tb.error(this);                                            if ((tb.getFormElement()) != null)                                                return false;                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                            tb.process(new org.jsoup.parser.Token.StartTag("form"));                                            if (startTag.attributes.hasKey("action")) {                                                org.jsoup.nodes.Element form = tb.getFormElement();                                                form.attr("action", startTag.attributes.get("action"));                                            }                                            tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                            tb.process(new org.jsoup.parser.Token.StartTag("label"));                                            java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                            tb.process(new org.jsoup.parser.Token.Character(prompt));                                            org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                            for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                                if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                    inputAttribs.put(attr);                                            }                                            inputAttribs.put("name", "isindex");                                            tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                            tb.process(new org.jsoup.parser.Token.EndTag("label"));                                            tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                            tb.process(new org.jsoup.parser.Token.EndTag("form"));                                        }else                                            if (name.equals("textarea")) {                                                tb.insert(startTag);                                                tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                                tb.markInsertionMode();                                                tb.framesetOk(false);                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                            }else                                                if (name.equals("xmp")) {                                                    if (tb.inButtonScope("p")) {                                                        tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                    }                                                    tb.reconstructFormattingElements();                                                    tb.framesetOk(false);                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                }else                                                    if (name.equals("iframe")) {                                                        tb.framesetOk(false);                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("noembed")) {                                                            org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                        }else                                                            if (name.equals("select")) {                                                                tb.reconstructFormattingElements();                                                                tb.insert(startTag);                                                                tb.framesetOk(false);                                                                org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                                if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                                else                                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                            }else                                                                if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                    if (tb.currentElement().nodeName().equals("option"))                                                                        tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                    tb.reconstructFormattingElements();                                                                    tb.insert(startTag);                                                                }else                                                                    if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                        if (tb.inScope("ruby")) {                                                                            tb.generateImpliedEndTags();                                                                            if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                                tb.error(this);                                                                                tb.popStackToBefore("ruby");                                                                            }                                                                            tb.insert(startTag);                                                                        }                                                                    }else                                                                        if (name.equals("math")) {                                                                            tb.reconstructFormattingElements();                                                                            tb.insert(startTag);                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                        }else                                                                            if (name.equals("svg")) {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                                tb.tokeniser.acknowledgeSelfClosingFlag();                                                                            }else                                                                                if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                    tb.error(this);                                                                                    return false;                                                                                }else {                                                                                    tb.reconstructFormattingElements();                                                                                    tb.insert(startTag);                                                                                }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17521::::26999::::if (name.equals("button")) {    if (tb.inButtonScope("button")) {        tb.error(this);        tb.process(new org.jsoup.parser.Token.EndTag("button"));        tb.process(startTag);    }else {        tb.reconstructFormattingElements();        tb.insert(startTag);        tb.framesetOk(false);    }}else    if (name.equals("a")) {        if ((tb.getActiveFormattingElement("a")) != null) {            tb.error(this);            tb.process(new org.jsoup.parser.Token.EndTag("a"));            org.jsoup.nodes.Element remainingA = tb.getFromStack("a");            if (remainingA != null) {                tb.removeFromActiveFormattingElements(remainingA);                tb.removeFromStack(remainingA);            }        }        tb.reconstructFormattingElements();        org.jsoup.nodes.Element a = tb.insert(startTag);        tb.pushActiveFormattingElements(a);    }else        if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {            tb.reconstructFormattingElements();            org.jsoup.nodes.Element el = tb.insert(startTag);            tb.pushActiveFormattingElements(el);        }else            if (name.equals("nobr")) {                tb.reconstructFormattingElements();                if (tb.inScope("nobr")) {                    tb.error(this);                    tb.process(new org.jsoup.parser.Token.EndTag("nobr"));                    tb.reconstructFormattingElements();                }                org.jsoup.nodes.Element el = tb.insert(startTag);                tb.pushActiveFormattingElements(el);            }else                if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {                    tb.reconstructFormattingElements();                    tb.insert(startTag);                    tb.insertMarkerToFormattingElements();                    tb.framesetOk(false);                }else                    if (name.equals("table")) {                        if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                            tb.process(new org.jsoup.parser.Token.EndTag("p"));                        }                        tb.insert(startTag);                        tb.framesetOk(false);                        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                    }else                        if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                            tb.reconstructFormattingElements();                            tb.insertEmpty(startTag);                            tb.framesetOk(false);                        }else                            if (name.equals("input")) {                                tb.reconstructFormattingElements();                                org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                                if (!(el.attr("type").equalsIgnoreCase("hidden")))                                    tb.framesetOk(false);                            }else                                if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                                    tb.insertEmpty(startTag);                                }else                                    if (name.equals("hr")) {                                        if (tb.inButtonScope("p")) {                                            tb.process(new org.jsoup.parser.Token.EndTag("p"));                                        }                                        tb.insertEmpty(startTag);                                        tb.framesetOk(false);                                    }else                                        if (name.equals("image")) {                                            startTag.name("img");                                            return tb.process(startTag);                                        }else                                            if (name.equals("isindex")) {                                                tb.error(this);                                                if ((tb.getFormElement()) != null)                                                    return false;                                                tb.tokeniser.acknowledgeSelfClosingFlag();                                                tb.process(new org.jsoup.parser.Token.StartTag("form"));                                                if (startTag.attributes.hasKey("action")) {                                                    org.jsoup.nodes.Element form = tb.getFormElement();                                                    form.attr("action", startTag.attributes.get("action"));                                                }                                                tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                                tb.process(new org.jsoup.parser.Token.StartTag("label"));                                                java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                                tb.process(new org.jsoup.parser.Token.Character(prompt));                                                org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                                for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                                    if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                        inputAttribs.put(attr);                                                }                                                inputAttribs.put("name", "isindex");                                                tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                                tb.process(new org.jsoup.parser.Token.EndTag("label"));                                                tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                                tb.process(new org.jsoup.parser.Token.EndTag("form"));                                            }else                                                if (name.equals("textarea")) {                                                    tb.insert(startTag);                                                    tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                                    tb.markInsertionMode();                                                    tb.framesetOk(false);                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                                }else                                                    if (name.equals("xmp")) {                                                        if (tb.inButtonScope("p")) {                                                            tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                        }                                                        tb.reconstructFormattingElements();                                                        tb.framesetOk(false);                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("iframe")) {                                                            tb.framesetOk(false);                                                            org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                        }else                                                            if (name.equals("noembed")) {                                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                            }else                                                                if (name.equals("select")) {                                                                    tb.reconstructFormattingElements();                                                                    tb.insert(startTag);                                                                    tb.framesetOk(false);                                                                    org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                                    if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                                    else                                                                        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                                }else                                                                    if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                        if (tb.currentElement().nodeName().equals("option"))                                                                            tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                        tb.reconstructFormattingElements();                                                                        tb.insert(startTag);                                                                    }else                                                                        if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                            if (tb.inScope("ruby")) {                                                                                tb.generateImpliedEndTags();                                                                                if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                                    tb.error(this);                                                                                    tb.popStackToBefore("ruby");                                                                                }                                                                                tb.insert(startTag);                                                                            }                                                                        }else                                                                            if (name.equals("math")) {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                                tb.tokeniser.acknowledgeSelfClosingFlag();                                                                            }else                                                                                if (name.equals("svg")) {                                                                                    tb.reconstructFormattingElements();                                                                                    tb.insert(startTag);                                                                                    tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                }else                                                                                    if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                        tb.error(this);                                                                                        return false;                                                                                    }else {                                                                                        tb.reconstructFormattingElements();                                                                                        tb.insert(startTag);                                                                                    }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("head"))	false
org.jsoup.parser.HtmlTreeBuilderState::::649::::32115::::37512::::OUTER : for (int i = 0; i < 8; i++) {    org.jsoup.nodes.Element formatEl = tb.getActiveFormattingElement(name);    if (formatEl == null)        return anyOtherEndTag(t, tb);    else        if (!(tb.onStack(formatEl))) {            tb.error(this);            tb.removeFromActiveFormattingElements(formatEl);            return true;        }else            if (!(tb.inScope(formatEl.nodeName()))) {                tb.error(this);                return false;            }else                if ((tb.currentElement()) != formatEl)                    tb.error(this);    org.jsoup.nodes.Element furthestBlock = null;    org.jsoup.nodes.Element commonAncestor = null;    boolean seenFormattingElement = false;    java.util.LinkedList<org.jsoup.nodes.Element> stack = tb.getStack();    for (int si = 0; (si < (stack.size())) && (si < 64); si++) {        org.jsoup.nodes.Element el = stack.get(si);        if (el == formatEl) {            commonAncestor = stack.get((si - 1));            seenFormattingElement = true;        }else            if (seenFormattingElement && (tb.isSpecial(el))) {                furthestBlock = el;                break;            }    }    if (furthestBlock == null) {        tb.popStackToClose(formatEl.nodeName());        tb.removeFromActiveFormattingElements(formatEl);        return true;    }    org.jsoup.nodes.Element node = furthestBlock;    org.jsoup.nodes.Element lastNode = furthestBlock;    INNER : for (int j = 0; j < 3; j++) {        if (tb.onStack(node))            node = tb.aboveOnStack(node);        if (!(tb.isInActiveFormattingElements(node))) {            tb.removeFromStack(node);            continue INNER;        }else            if (node == formatEl)                break INNER;        org.jsoup.nodes.Element replacement = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(node.nodeName()), tb.getBaseUri());        tb.replaceActiveFormattingElement(node, replacement);        tb.replaceOnStack(node, replacement);        node = replacement;        if (lastNode == furthestBlock) {        }        if ((lastNode.parent()) != null)            lastNode.remove();        node.appendChild(lastNode);        lastNode = node;    }    if (org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")) {        if ((lastNode.parent()) != null)            lastNode.remove();        tb.insertInFosterParent(lastNode);    }else {        if ((lastNode.parent()) != null)            lastNode.remove();        commonAncestor.appendChild(lastNode);    }    org.jsoup.nodes.Element adopter = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(name), tb.getBaseUri());    org.jsoup.nodes.Node[] childNodes = furthestBlock.childNodes().toArray(new org.jsoup.nodes.Node[furthestBlock.childNodeSize()]);    for (org.jsoup.nodes.Node childNode : childNodes) {        adopter.appendChild(childNode);    }    furthestBlock.appendChild(adopter);    tb.removeFromActiveFormattingElements(formatEl);    tb.removeFromStack(formatEl);    tb.insertOnStackAfter(furthestBlock, adopter);}::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("select"))	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18074::::18077::::name::::"colgroup"	false
org.jsoup.parser.HtmlTreeBuilderState::::645::::31854::::38455::::if (org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")) {    OUTER : for (int i = 0; i < 8; i++) {        org.jsoup.nodes.Element formatEl = tb.getActiveFormattingElement(name);        if (formatEl == null)            return anyOtherEndTag(t, tb);        else            if (!(tb.onStack(formatEl))) {                tb.error(this);                tb.removeFromActiveFormattingElements(formatEl);                return true;            }else                if (!(tb.inScope(formatEl.nodeName()))) {                    tb.error(this);                    return false;                }else                    if ((tb.currentElement()) != formatEl)                        tb.error(this);        org.jsoup.nodes.Element furthestBlock = null;        org.jsoup.nodes.Element commonAncestor = null;        boolean seenFormattingElement = false;        java.util.LinkedList<org.jsoup.nodes.Element> stack = tb.getStack();        for (int si = 0; (si < (stack.size())) && (si < 64); si++) {            org.jsoup.nodes.Element el = stack.get(si);            if (el == formatEl) {                commonAncestor = stack.get((si - 1));                seenFormattingElement = true;            }else                if (seenFormattingElement && (tb.isSpecial(el))) {                    furthestBlock = el;                    break;                }        }        if (furthestBlock == null) {            tb.popStackToClose(formatEl.nodeName());            tb.removeFromActiveFormattingElements(formatEl);            return true;        }        org.jsoup.nodes.Element node = furthestBlock;        org.jsoup.nodes.Element lastNode = furthestBlock;        INNER : for (int j = 0; j < 3; j++) {            if (tb.onStack(node))                node = tb.aboveOnStack(node);            if (!(tb.isInActiveFormattingElements(node))) {                tb.removeFromStack(node);                continue INNER;            }else                if (node == formatEl)                    break INNER;            org.jsoup.nodes.Element replacement = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(node.nodeName()), tb.getBaseUri());            tb.replaceActiveFormattingElement(node, replacement);            tb.replaceOnStack(node, replacement);            node = replacement;            if (lastNode == furthestBlock) {            }            if ((lastNode.parent()) != null)                lastNode.remove();            node.appendChild(lastNode);            lastNode = node;        }        if (org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")) {            if ((lastNode.parent()) != null)                lastNode.remove();            tb.insertInFosterParent(lastNode);        }else {            if ((lastNode.parent()) != null)                lastNode.remove();            commonAncestor.appendChild(lastNode);        }        org.jsoup.nodes.Element adopter = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(name), tb.getBaseUri());        org.jsoup.nodes.Node[] childNodes = furthestBlock.childNodes().toArray(new org.jsoup.nodes.Node[furthestBlock.childNodeSize()]);        for (org.jsoup.nodes.Node childNode : childNodes) {            adopter.appendChild(childNode);        }        furthestBlock.appendChild(adopter);        tb.removeFromActiveFormattingElements(formatEl);        tb.removeFromStack(formatEl);        tb.insertOnStackAfter(furthestBlock, adopter);    }}else    if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {        if (!(tb.inScope("name"))) {            if (!(tb.inScope(name))) {                tb.error(this);                return false;            }            tb.generateImpliedEndTags();            if (!(tb.currentElement().nodeName().equals(name)))                tb.error(this);            tb.popStackToClose(name);            tb.clearFormattingElementsToLastMarker();        }    }else        if (name.equals("br")) {            tb.error(this);            tb.process(new org.jsoup.parser.Token.StartTag("br"));            return false;        }else {            return anyOtherEndTag(t, tb);        }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("hr"))	false
org.jsoup.parser.HtmlTreeBuilder::::646::::22795::::22800::::break::::INSERT::::STATEMENT::::insertNode(el)	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31709::::38455::::if (name.equals("sarcasm")) {    return anyOtherEndTag(t, tb);}else    if (org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")) {        OUTER : for (int i = 0; i < 8; i++) {            org.jsoup.nodes.Element formatEl = tb.getActiveFormattingElement(name);            if (formatEl == null)                return anyOtherEndTag(t, tb);            else                if (!(tb.onStack(formatEl))) {                    tb.error(this);                    tb.removeFromActiveFormattingElements(formatEl);                    return true;                }else                    if (!(tb.inScope(formatEl.nodeName()))) {                        tb.error(this);                        return false;                    }else                        if ((tb.currentElement()) != formatEl)                            tb.error(this);            org.jsoup.nodes.Element furthestBlock = null;            org.jsoup.nodes.Element commonAncestor = null;            boolean seenFormattingElement = false;            java.util.LinkedList<org.jsoup.nodes.Element> stack = tb.getStack();            for (int si = 0; (si < (stack.size())) && (si < 64); si++) {                org.jsoup.nodes.Element el = stack.get(si);                if (el == formatEl) {                    commonAncestor = stack.get((si - 1));                    seenFormattingElement = true;                }else                    if (seenFormattingElement && (tb.isSpecial(el))) {                        furthestBlock = el;                        break;                    }            }            if (furthestBlock == null) {                tb.popStackToClose(formatEl.nodeName());                tb.removeFromActiveFormattingElements(formatEl);                return true;            }            org.jsoup.nodes.Element node = furthestBlock;            org.jsoup.nodes.Element lastNode = furthestBlock;            INNER : for (int j = 0; j < 3; j++) {                if (tb.onStack(node))                    node = tb.aboveOnStack(node);                if (!(tb.isInActiveFormattingElements(node))) {                    tb.removeFromStack(node);                    continue INNER;                }else                    if (node == formatEl)                        break INNER;                org.jsoup.nodes.Element replacement = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(node.nodeName()), tb.getBaseUri());                tb.replaceActiveFormattingElement(node, replacement);                tb.replaceOnStack(node, replacement);                node = replacement;                if (lastNode == furthestBlock) {                }                if ((lastNode.parent()) != null)                    lastNode.remove();                node.appendChild(lastNode);                lastNode = node;            }            if (org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")) {                if ((lastNode.parent()) != null)                    lastNode.remove();                tb.insertInFosterParent(lastNode);            }else {                if ((lastNode.parent()) != null)                    lastNode.remove();                commonAncestor.appendChild(lastNode);            }            org.jsoup.nodes.Element adopter = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(name), tb.getBaseUri());            org.jsoup.nodes.Node[] childNodes = furthestBlock.childNodes().toArray(new org.jsoup.nodes.Node[furthestBlock.childNodeSize()]);            for (org.jsoup.nodes.Node childNode : childNodes) {                adopter.appendChild(childNode);            }            furthestBlock.appendChild(adopter);            tb.removeFromActiveFormattingElements(formatEl);            tb.removeFromStack(formatEl);            tb.insertOnStackAfter(furthestBlock, adopter);        }    }else        if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {            if (!(tb.inScope("name"))) {                if (!(tb.inScope(name))) {                    tb.error(this);                    return false;                }                tb.generateImpliedEndTags();                if (!(tb.currentElement().nodeName().equals(name)))                    tb.error(this);                tb.popStackToClose(name);                tb.clearFormattingElementsToLastMarker();            }        }else            if (name.equals("br")) {                tb.error(this);                tb.process(new org.jsoup.parser.Token.StartTag("br"));                return false;            }else {                return anyOtherEndTag(t, tb);            }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("hr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::776::::39346::::39351::::break::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("tr"))	false
org.jsoup.parser.TokeniserState::::901::::30491::::30494::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.BogusComment	false
org.jsoup.parser.HtmlTreeBuilderState::::649::::32115::::37512::::OUTER : for (int i = 0; i < 8; i++) {    org.jsoup.nodes.Element formatEl = tb.getActiveFormattingElement(name);    if (formatEl == null)        return anyOtherEndTag(t, tb);    else        if (!(tb.onStack(formatEl))) {            tb.error(this);            tb.removeFromActiveFormattingElements(formatEl);            return true;        }else            if (!(tb.inScope(formatEl.nodeName()))) {                tb.error(this);                return false;            }else                if ((tb.currentElement()) != formatEl)                    tb.error(this);    org.jsoup.nodes.Element furthestBlock = null;    org.jsoup.nodes.Element commonAncestor = null;    boolean seenFormattingElement = false;    java.util.LinkedList<org.jsoup.nodes.Element> stack = tb.getStack();    for (int si = 0; (si < (stack.size())) && (si < 64); si++) {        org.jsoup.nodes.Element el = stack.get(si);        if (el == formatEl) {            commonAncestor = stack.get((si - 1));            seenFormattingElement = true;        }else            if (seenFormattingElement && (tb.isSpecial(el))) {                furthestBlock = el;                break;            }    }    if (furthestBlock == null) {        tb.popStackToClose(formatEl.nodeName());        tb.removeFromActiveFormattingElements(formatEl);        return true;    }    org.jsoup.nodes.Element node = furthestBlock;    org.jsoup.nodes.Element lastNode = furthestBlock;    INNER : for (int j = 0; j < 3; j++) {        if (tb.onStack(node))            node = tb.aboveOnStack(node);        if (!(tb.isInActiveFormattingElements(node))) {            tb.removeFromStack(node);            continue INNER;        }else            if (node == formatEl)                break INNER;        org.jsoup.nodes.Element replacement = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(node.nodeName()), tb.getBaseUri());        tb.replaceActiveFormattingElement(node, replacement);        tb.replaceOnStack(node, replacement);        node = replacement;        if (lastNode == furthestBlock) {        }        if ((lastNode.parent()) != null)            lastNode.remove();        node.appendChild(lastNode);        lastNode = node;    }    if (org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")) {        if ((lastNode.parent()) != null)            lastNode.remove();        tb.insertInFosterParent(lastNode);    }else {        if ((lastNode.parent()) != null)            lastNode.remove();        commonAncestor.appendChild(lastNode);    }    org.jsoup.nodes.Element adopter = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(name), tb.getBaseUri());    org.jsoup.nodes.Node[] childNodes = furthestBlock.childNodes().toArray(new org.jsoup.nodes.Node[furthestBlock.childNodeSize()]);    for (org.jsoup.nodes.Node childNode : childNodes) {        adopter.appendChild(childNode);    }    furthestBlock.appendChild(adopter);    tb.removeFromActiveFormattingElements(formatEl);    tb.removeFromStack(formatEl);    tb.insertOnStackAfter(furthestBlock, adopter);}::::INSERT::::STATEMENT::::if (node == formatEl)    break INNER;	false
org.jsoup.parser.HtmlTreeBuilderState::::645::::31854::::38455::::if (org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")) {    OUTER : for (int i = 0; i < 8; i++) {        org.jsoup.nodes.Element formatEl = tb.getActiveFormattingElement(name);        if (formatEl == null)            return anyOtherEndTag(t, tb);        else            if (!(tb.onStack(formatEl))) {                tb.error(this);                tb.removeFromActiveFormattingElements(formatEl);                return true;            }else                if (!(tb.inScope(formatEl.nodeName()))) {                    tb.error(this);                    return false;                }else                    if ((tb.currentElement()) != formatEl)                        tb.error(this);        org.jsoup.nodes.Element furthestBlock = null;        org.jsoup.nodes.Element commonAncestor = null;        boolean seenFormattingElement = false;        java.util.LinkedList<org.jsoup.nodes.Element> stack = tb.getStack();        for (int si = 0; (si < (stack.size())) && (si < 64); si++) {            org.jsoup.nodes.Element el = stack.get(si);            if (el == formatEl) {                commonAncestor = stack.get((si - 1));                seenFormattingElement = true;            }else                if (seenFormattingElement && (tb.isSpecial(el))) {                    furthestBlock = el;                    break;                }        }        if (furthestBlock == null) {            tb.popStackToClose(formatEl.nodeName());            tb.removeFromActiveFormattingElements(formatEl);            return true;        }        org.jsoup.nodes.Element node = furthestBlock;        org.jsoup.nodes.Element lastNode = furthestBlock;        INNER : for (int j = 0; j < 3; j++) {            if (tb.onStack(node))                node = tb.aboveOnStack(node);            if (!(tb.isInActiveFormattingElements(node))) {                tb.removeFromStack(node);                continue INNER;            }else                if (node == formatEl)                    break INNER;            org.jsoup.nodes.Element replacement = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(node.nodeName()), tb.getBaseUri());            tb.replaceActiveFormattingElement(node, replacement);            tb.replaceOnStack(node, replacement);            node = replacement;            if (lastNode == furthestBlock) {            }            if ((lastNode.parent()) != null)                lastNode.remove();            node.appendChild(lastNode);            lastNode = node;        }        if (org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")) {            if ((lastNode.parent()) != null)                lastNode.remove();            tb.insertInFosterParent(lastNode);        }else {            if ((lastNode.parent()) != null)                lastNode.remove();            commonAncestor.appendChild(lastNode);        }        org.jsoup.nodes.Element adopter = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(name), tb.getBaseUri());        org.jsoup.nodes.Node[] childNodes = furthestBlock.childNodes().toArray(new org.jsoup.nodes.Node[furthestBlock.childNodeSize()]);        for (org.jsoup.nodes.Node childNode : childNodes) {            adopter.appendChild(childNode);        }        furthestBlock.appendChild(adopter);        tb.removeFromActiveFormattingElements(formatEl);        tb.removeFromStack(formatEl);        tb.insertOnStackAfter(furthestBlock, adopter);    }}else    if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {        if (!(tb.inScope("name"))) {            if (!(tb.inScope(name))) {                tb.error(this);                return false;            }            tb.generateImpliedEndTags();            if (!(tb.currentElement().nodeName().equals(name)))                tb.error(this);            tb.popStackToClose(name);            tb.clearFormattingElementsToLastMarker();        }    }else        if (name.equals("br")) {            tb.error(this);            tb.process(new org.jsoup.parser.Token.StartTag("br"));            return false;        }else {            return anyOtherEndTag(t, tb);        }::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17525::::17528::::name::::"colgroup"	false
org.jsoup.parser.HtmlTreeBuilderState::::649::::32115::::37512::::OUTER : for (int i = 0; i < 8; i++) {    org.jsoup.nodes.Element formatEl = tb.getActiveFormattingElement(name);    if (formatEl == null)        return anyOtherEndTag(t, tb);    else        if (!(tb.onStack(formatEl))) {            tb.error(this);            tb.removeFromActiveFormattingElements(formatEl);            return true;        }else            if (!(tb.inScope(formatEl.nodeName()))) {                tb.error(this);                return false;            }else                if ((tb.currentElement()) != formatEl)                    tb.error(this);    org.jsoup.nodes.Element furthestBlock = null;    org.jsoup.nodes.Element commonAncestor = null;    boolean seenFormattingElement = false;    java.util.LinkedList<org.jsoup.nodes.Element> stack = tb.getStack();    for (int si = 0; (si < (stack.size())) && (si < 64); si++) {        org.jsoup.nodes.Element el = stack.get(si);        if (el == formatEl) {            commonAncestor = stack.get((si - 1));            seenFormattingElement = true;        }else            if (seenFormattingElement && (tb.isSpecial(el))) {                furthestBlock = el;                break;            }    }    if (furthestBlock == null) {        tb.popStackToClose(formatEl.nodeName());        tb.removeFromActiveFormattingElements(formatEl);        return true;    }    org.jsoup.nodes.Element node = furthestBlock;    org.jsoup.nodes.Element lastNode = furthestBlock;    INNER : for (int j = 0; j < 3; j++) {        if (tb.onStack(node))            node = tb.aboveOnStack(node);        if (!(tb.isInActiveFormattingElements(node))) {            tb.removeFromStack(node);            continue INNER;        }else            if (node == formatEl)                break INNER;        org.jsoup.nodes.Element replacement = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(node.nodeName()), tb.getBaseUri());        tb.replaceActiveFormattingElement(node, replacement);        tb.replaceOnStack(node, replacement);        node = replacement;        if (lastNode == furthestBlock) {        }        if ((lastNode.parent()) != null)            lastNode.remove();        node.appendChild(lastNode);        lastNode = node;    }    if (org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")) {        if ((lastNode.parent()) != null)            lastNode.remove();        tb.insertInFosterParent(lastNode);    }else {        if ((lastNode.parent()) != null)            lastNode.remove();        commonAncestor.appendChild(lastNode);    }    org.jsoup.nodes.Element adopter = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(name), tb.getBaseUri());    org.jsoup.nodes.Node[] childNodes = furthestBlock.childNodes().toArray(new org.jsoup.nodes.Node[furthestBlock.childNodeSize()]);    for (org.jsoup.nodes.Node childNode : childNodes) {        adopter.appendChild(childNode);    }    furthestBlock.appendChild(adopter);    tb.removeFromActiveFormattingElements(formatEl);    tb.removeFromStack(formatEl);    tb.insertOnStackAfter(furthestBlock, adopter);}::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.Character(prompt))	false
org.jsoup.parser.HtmlTreeBuilderState::::389::::17521::::26999::::if (name.equals("button")) {    if (tb.inButtonScope("button")) {        tb.error(this);        tb.process(new org.jsoup.parser.Token.EndTag("button"));        tb.process(startTag);    }else {        tb.reconstructFormattingElements();        tb.insert(startTag);        tb.framesetOk(false);    }}else    if (name.equals("a")) {        if ((tb.getActiveFormattingElement("a")) != null) {            tb.error(this);            tb.process(new org.jsoup.parser.Token.EndTag("a"));            org.jsoup.nodes.Element remainingA = tb.getFromStack("a");            if (remainingA != null) {                tb.removeFromActiveFormattingElements(remainingA);                tb.removeFromStack(remainingA);            }        }        tb.reconstructFormattingElements();        org.jsoup.nodes.Element a = tb.insert(startTag);        tb.pushActiveFormattingElements(a);    }else        if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {            tb.reconstructFormattingElements();            org.jsoup.nodes.Element el = tb.insert(startTag);            tb.pushActiveFormattingElements(el);        }else            if (name.equals("nobr")) {                tb.reconstructFormattingElements();                if (tb.inScope("nobr")) {                    tb.error(this);                    tb.process(new org.jsoup.parser.Token.EndTag("nobr"));                    tb.reconstructFormattingElements();                }                org.jsoup.nodes.Element el = tb.insert(startTag);                tb.pushActiveFormattingElements(el);            }else                if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {                    tb.reconstructFormattingElements();                    tb.insert(startTag);                    tb.insertMarkerToFormattingElements();                    tb.framesetOk(false);                }else                    if (name.equals("table")) {                        if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                            tb.process(new org.jsoup.parser.Token.EndTag("p"));                        }                        tb.insert(startTag);                        tb.framesetOk(false);                        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                    }else                        if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                            tb.reconstructFormattingElements();                            tb.insertEmpty(startTag);                            tb.framesetOk(false);                        }else                            if (name.equals("input")) {                                tb.reconstructFormattingElements();                                org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                                if (!(el.attr("type").equalsIgnoreCase("hidden")))                                    tb.framesetOk(false);                            }else                                if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                                    tb.insertEmpty(startTag);                                }else                                    if (name.equals("hr")) {                                        if (tb.inButtonScope("p")) {                                            tb.process(new org.jsoup.parser.Token.EndTag("p"));                                        }                                        tb.insertEmpty(startTag);                                        tb.framesetOk(false);                                    }else                                        if (name.equals("image")) {                                            startTag.name("img");                                            return tb.process(startTag);                                        }else                                            if (name.equals("isindex")) {                                                tb.error(this);                                                if ((tb.getFormElement()) != null)                                                    return false;                                                tb.tokeniser.acknowledgeSelfClosingFlag();                                                tb.process(new org.jsoup.parser.Token.StartTag("form"));                                                if (startTag.attributes.hasKey("action")) {                                                    org.jsoup.nodes.Element form = tb.getFormElement();                                                    form.attr("action", startTag.attributes.get("action"));                                                }                                                tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                                tb.process(new org.jsoup.parser.Token.StartTag("label"));                                                java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                                tb.process(new org.jsoup.parser.Token.Character(prompt));                                                org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                                for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                                    if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                        inputAttribs.put(attr);                                                }                                                inputAttribs.put("name", "isindex");                                                tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                                tb.process(new org.jsoup.parser.Token.EndTag("label"));                                                tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                                tb.process(new org.jsoup.parser.Token.EndTag("form"));                                            }else                                                if (name.equals("textarea")) {                                                    tb.insert(startTag);                                                    tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                                    tb.markInsertionMode();                                                    tb.framesetOk(false);                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                                }else                                                    if (name.equals("xmp")) {                                                        if (tb.inButtonScope("p")) {                                                            tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                        }                                                        tb.reconstructFormattingElements();                                                        tb.framesetOk(false);                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("iframe")) {                                                            tb.framesetOk(false);                                                            org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                        }else                                                            if (name.equals("noembed")) {                                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                            }else                                                                if (name.equals("select")) {                                                                    tb.reconstructFormattingElements();                                                                    tb.insert(startTag);                                                                    tb.framesetOk(false);                                                                    org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                                    if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                                    else                                                                        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                                }else                                                                    if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                        if (tb.currentElement().nodeName().equals("option"))                                                                            tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                        tb.reconstructFormattingElements();                                                                        tb.insert(startTag);                                                                    }else                                                                        if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                            if (tb.inScope("ruby")) {                                                                                tb.generateImpliedEndTags();                                                                                if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                                    tb.error(this);                                                                                    tb.popStackToBefore("ruby");                                                                                }                                                                                tb.insert(startTag);                                                                            }                                                                        }else                                                                            if (name.equals("math")) {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                                tb.tokeniser.acknowledgeSelfClosingFlag();                                                                            }else                                                                                if (name.equals("svg")) {                                                                                    tb.reconstructFormattingElements();                                                                                    tb.insert(startTag);                                                                                    tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                }else                                                                                    if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                        tb.error(this);                                                                                        return false;                                                                                    }else {                                                                                        tb.reconstructFormattingElements();                                                                                        tb.insert(startTag);                                                                                    }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("label"))	false
org.jsoup.parser.HtmlTreeBuilderState::::661::::32850::::32864::::tb.error(this)::::DELETE::::STATEMENT	false
org.jsoup.parser.TokeniserState::::901::::30491::::30494::::org.jsoup.parser.TokeniserState.Data::::org.jsoup.parser.TokeniserState.BeforeDoctypeName	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31709::::38455::::if (name.equals("sarcasm")) {    return anyOtherEndTag(t, tb);}else    if (org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")) {        OUTER : for (int i = 0; i < 8; i++) {            org.jsoup.nodes.Element formatEl = tb.getActiveFormattingElement(name);            if (formatEl == null)                return anyOtherEndTag(t, tb);            else                if (!(tb.onStack(formatEl))) {                    tb.error(this);                    tb.removeFromActiveFormattingElements(formatEl);                    return true;                }else                    if (!(tb.inScope(formatEl.nodeName()))) {                        tb.error(this);                        return false;                    }else                        if ((tb.currentElement()) != formatEl)                            tb.error(this);            org.jsoup.nodes.Element furthestBlock = null;            org.jsoup.nodes.Element commonAncestor = null;            boolean seenFormattingElement = false;            java.util.LinkedList<org.jsoup.nodes.Element> stack = tb.getStack();            for (int si = 0; (si < (stack.size())) && (si < 64); si++) {                org.jsoup.nodes.Element el = stack.get(si);                if (el == formatEl) {                    commonAncestor = stack.get((si - 1));                    seenFormattingElement = true;                }else                    if (seenFormattingElement && (tb.isSpecial(el))) {                        furthestBlock = el;                        break;                    }            }            if (furthestBlock == null) {                tb.popStackToClose(formatEl.nodeName());                tb.removeFromActiveFormattingElements(formatEl);                return true;            }            org.jsoup.nodes.Element node = furthestBlock;            org.jsoup.nodes.Element lastNode = furthestBlock;            INNER : for (int j = 0; j < 3; j++) {                if (tb.onStack(node))                    node = tb.aboveOnStack(node);                if (!(tb.isInActiveFormattingElements(node))) {                    tb.removeFromStack(node);                    continue INNER;                }else                    if (node == formatEl)                        break INNER;                org.jsoup.nodes.Element replacement = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(node.nodeName()), tb.getBaseUri());                tb.replaceActiveFormattingElement(node, replacement);                tb.replaceOnStack(node, replacement);                node = replacement;                if (lastNode == furthestBlock) {                }                if ((lastNode.parent()) != null)                    lastNode.remove();                node.appendChild(lastNode);                lastNode = node;            }            if (org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")) {                if ((lastNode.parent()) != null)                    lastNode.remove();                tb.insertInFosterParent(lastNode);            }else {                if ((lastNode.parent()) != null)                    lastNode.remove();                commonAncestor.appendChild(lastNode);            }            org.jsoup.nodes.Element adopter = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(name), tb.getBaseUri());            org.jsoup.nodes.Node[] childNodes = furthestBlock.childNodes().toArray(new org.jsoup.nodes.Node[furthestBlock.childNodeSize()]);            for (org.jsoup.nodes.Node childNode : childNodes) {                adopter.appendChild(childNode);            }            furthestBlock.appendChild(adopter);            tb.removeFromActiveFormattingElements(formatEl);            tb.removeFromStack(formatEl);            tb.insertOnStackAfter(furthestBlock, adopter);        }    }else        if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {            if (!(tb.inScope("name"))) {                if (!(tb.inScope(name))) {                    tb.error(this);                    return false;                }                tb.generateImpliedEndTags();                if (!(tb.currentElement().nodeName().equals(name)))                    tb.error(this);                tb.popStackToClose(name);                tb.clearFormattingElementsToLastMarker();            }        }else            if (name.equals("br")) {                tb.error(this);                tb.process(new org.jsoup.parser.Token.StartTag("br"));                return false;            }else {                return anyOtherEndTag(t, tb);            }::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.HtmlTreeBuilderState::::632::::31110::::38455::::if (org.jsoup.helper.StringUtil.in(name, "h1", "h2", "h3", "h4", "h5", "h6")) {    if (!(tb.inScope(new java.lang.String[]{ "h1", "h2", "h3", "h4", "h5", "h6" }))) {        tb.error(this);        return false;    }else {        tb.generateImpliedEndTags(name);        if (!(tb.currentElement().nodeName().equals(name)))            tb.error(this);        tb.popStackToClose("h1", "h2", "h3", "h4", "h5", "h6");    }}else    if (name.equals("sarcasm")) {        return anyOtherEndTag(t, tb);    }else        if (org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")) {            OUTER : for (int i = 0; i < 8; i++) {                org.jsoup.nodes.Element formatEl = tb.getActiveFormattingElement(name);                if (formatEl == null)                    return anyOtherEndTag(t, tb);                else                    if (!(tb.onStack(formatEl))) {                        tb.error(this);                        tb.removeFromActiveFormattingElements(formatEl);                        return true;                    }else                        if (!(tb.inScope(formatEl.nodeName()))) {                            tb.error(this);                            return false;                        }else                            if ((tb.currentElement()) != formatEl)                                tb.error(this);                org.jsoup.nodes.Element furthestBlock = null;                org.jsoup.nodes.Element commonAncestor = null;                boolean seenFormattingElement = false;                java.util.LinkedList<org.jsoup.nodes.Element> stack = tb.getStack();                for (int si = 0; (si < (stack.size())) && (si < 64); si++) {                    org.jsoup.nodes.Element el = stack.get(si);                    if (el == formatEl) {                        commonAncestor = stack.get((si - 1));                        seenFormattingElement = true;                    }else                        if (seenFormattingElement && (tb.isSpecial(el))) {                            furthestBlock = el;                            break;                        }                }                if (furthestBlock == null) {                    tb.popStackToClose(formatEl.nodeName());                    tb.removeFromActiveFormattingElements(formatEl);                    return true;                }                org.jsoup.nodes.Element node = furthestBlock;                org.jsoup.nodes.Element lastNode = furthestBlock;                INNER : for (int j = 0; j < 3; j++) {                    if (tb.onStack(node))                        node = tb.aboveOnStack(node);                    if (!(tb.isInActiveFormattingElements(node))) {                        tb.removeFromStack(node);                        continue INNER;                    }else                        if (node == formatEl)                            break INNER;                    org.jsoup.nodes.Element replacement = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(node.nodeName()), tb.getBaseUri());                    tb.replaceActiveFormattingElement(node, replacement);                    tb.replaceOnStack(node, replacement);                    node = replacement;                    if (lastNode == furthestBlock) {                    }                    if ((lastNode.parent()) != null)                        lastNode.remove();                    node.appendChild(lastNode);                    lastNode = node;                }                if (org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")) {                    if ((lastNode.parent()) != null)                        lastNode.remove();                    tb.insertInFosterParent(lastNode);                }else {                    if ((lastNode.parent()) != null)                        lastNode.remove();                    commonAncestor.appendChild(lastNode);                }                org.jsoup.nodes.Element adopter = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(name), tb.getBaseUri());                org.jsoup.nodes.Node[] childNodes = furthestBlock.childNodes().toArray(new org.jsoup.nodes.Node[furthestBlock.childNodeSize()]);                for (org.jsoup.nodes.Node childNode : childNodes) {                    adopter.appendChild(childNode);                }                furthestBlock.appendChild(adopter);                tb.removeFromActiveFormattingElements(formatEl);                tb.removeFromStack(formatEl);                tb.insertOnStackAfter(furthestBlock, adopter);            }        }else            if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {                if (!(tb.inScope("name"))) {                    if (!(tb.inScope(name))) {                        tb.error(this);                        return false;                    }                    tb.generateImpliedEndTags();                    if (!(tb.currentElement().nodeName().equals(name)))                        tb.error(this);                    tb.popStackToClose(name);                    tb.clearFormattingElementsToLastMarker();                }            }else                if (name.equals("br")) {                    tb.error(this);                    tb.process(new org.jsoup.parser.Token.StartTag("br"));                    return false;                }else {                    return anyOtherEndTag(t, tb);                }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("hr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18855::::26999::::if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {    tb.reconstructFormattingElements();    org.jsoup.nodes.Element el = tb.insert(startTag);    tb.pushActiveFormattingElements(el);}else    if (name.equals("nobr")) {        tb.reconstructFormattingElements();        if (tb.inScope("nobr")) {            tb.error(this);            tb.process(new org.jsoup.parser.Token.EndTag("nobr"));            tb.reconstructFormattingElements();        }        org.jsoup.nodes.Element el = tb.insert(startTag);        tb.pushActiveFormattingElements(el);    }else        if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {            tb.reconstructFormattingElements();            tb.insert(startTag);            tb.insertMarkerToFormattingElements();            tb.framesetOk(false);        }else            if (name.equals("table")) {                if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                }                tb.insert(startTag);                tb.framesetOk(false);                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);            }else                if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                    tb.reconstructFormattingElements();                    tb.insertEmpty(startTag);                    tb.framesetOk(false);                }else                    if (name.equals("input")) {                        tb.reconstructFormattingElements();                        org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                        if (!(el.attr("type").equalsIgnoreCase("hidden")))                            tb.framesetOk(false);                    }else                        if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                            tb.insertEmpty(startTag);                        }else                            if (name.equals("hr")) {                                if (tb.inButtonScope("p")) {                                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                                }                                tb.insertEmpty(startTag);                                tb.framesetOk(false);                            }else                                if (name.equals("image")) {                                    startTag.name("img");                                    return tb.process(startTag);                                }else                                    if (name.equals("isindex")) {                                        tb.error(this);                                        if ((tb.getFormElement()) != null)                                            return false;                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                        tb.process(new org.jsoup.parser.Token.StartTag("form"));                                        if (startTag.attributes.hasKey("action")) {                                            org.jsoup.nodes.Element form = tb.getFormElement();                                            form.attr("action", startTag.attributes.get("action"));                                        }                                        tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                        tb.process(new org.jsoup.parser.Token.StartTag("label"));                                        java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                        tb.process(new org.jsoup.parser.Token.Character(prompt));                                        org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                        for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                            if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                inputAttribs.put(attr);                                        }                                        inputAttribs.put("name", "isindex");                                        tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                        tb.process(new org.jsoup.parser.Token.EndTag("label"));                                        tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                        tb.process(new org.jsoup.parser.Token.EndTag("form"));                                    }else                                        if (name.equals("textarea")) {                                            tb.insert(startTag);                                            tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                            tb.markInsertionMode();                                            tb.framesetOk(false);                                            tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                        }else                                            if (name.equals("xmp")) {                                                if (tb.inButtonScope("p")) {                                                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                }                                                tb.reconstructFormattingElements();                                                tb.framesetOk(false);                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                            }else                                                if (name.equals("iframe")) {                                                    tb.framesetOk(false);                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                }else                                                    if (name.equals("noembed")) {                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("select")) {                                                            tb.reconstructFormattingElements();                                                            tb.insert(startTag);                                                            tb.framesetOk(false);                                                            org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                            if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                            else                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                        }else                                                            if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                if (tb.currentElement().nodeName().equals("option"))                                                                    tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                tb.reconstructFormattingElements();                                                                tb.insert(startTag);                                                            }else                                                                if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                    if (tb.inScope("ruby")) {                                                                        tb.generateImpliedEndTags();                                                                        if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                            tb.error(this);                                                                            tb.popStackToBefore("ruby");                                                                        }                                                                        tb.insert(startTag);                                                                    }                                                                }else                                                                    if (name.equals("math")) {                                                                        tb.reconstructFormattingElements();                                                                        tb.insert(startTag);                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                    }else                                                                        if (name.equals("svg")) {                                                                            tb.reconstructFormattingElements();                                                                            tb.insert(startTag);                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                        }else                                                                            if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                tb.error(this);                                                                                return false;                                                                            }else {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                            }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::672::::33517::::33551::::commonAncestor = stack.get((si - 1))::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("noscript"))	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30121::::name::::"col"	false
org.jsoup.parser.HtmlTreeBuilderState::::400::::18070::::26999::::if (name.equals("a")) {    if ((tb.getActiveFormattingElement("a")) != null) {        tb.error(this);        tb.process(new org.jsoup.parser.Token.EndTag("a"));        org.jsoup.nodes.Element remainingA = tb.getFromStack("a");        if (remainingA != null) {            tb.removeFromActiveFormattingElements(remainingA);            tb.removeFromStack(remainingA);        }    }    tb.reconstructFormattingElements();    org.jsoup.nodes.Element a = tb.insert(startTag);    tb.pushActiveFormattingElements(a);}else    if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {        tb.reconstructFormattingElements();        org.jsoup.nodes.Element el = tb.insert(startTag);        tb.pushActiveFormattingElements(el);    }else        if (name.equals("nobr")) {            tb.reconstructFormattingElements();            if (tb.inScope("nobr")) {                tb.error(this);                tb.process(new org.jsoup.parser.Token.EndTag("nobr"));                tb.reconstructFormattingElements();            }            org.jsoup.nodes.Element el = tb.insert(startTag);            tb.pushActiveFormattingElements(el);        }else            if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {                tb.reconstructFormattingElements();                tb.insert(startTag);                tb.insertMarkerToFormattingElements();                tb.framesetOk(false);            }else                if (name.equals("table")) {                    if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                        tb.process(new org.jsoup.parser.Token.EndTag("p"));                    }                    tb.insert(startTag);                    tb.framesetOk(false);                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                }else                    if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                        tb.reconstructFormattingElements();                        tb.insertEmpty(startTag);                        tb.framesetOk(false);                    }else                        if (name.equals("input")) {                            tb.reconstructFormattingElements();                            org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                            if (!(el.attr("type").equalsIgnoreCase("hidden")))                                tb.framesetOk(false);                        }else                            if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                                tb.insertEmpty(startTag);                            }else                                if (name.equals("hr")) {                                    if (tb.inButtonScope("p")) {                                        tb.process(new org.jsoup.parser.Token.EndTag("p"));                                    }                                    tb.insertEmpty(startTag);                                    tb.framesetOk(false);                                }else                                    if (name.equals("image")) {                                        startTag.name("img");                                        return tb.process(startTag);                                    }else                                        if (name.equals("isindex")) {                                            tb.error(this);                                            if ((tb.getFormElement()) != null)                                                return false;                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                            tb.process(new org.jsoup.parser.Token.StartTag("form"));                                            if (startTag.attributes.hasKey("action")) {                                                org.jsoup.nodes.Element form = tb.getFormElement();                                                form.attr("action", startTag.attributes.get("action"));                                            }                                            tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                            tb.process(new org.jsoup.parser.Token.StartTag("label"));                                            java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                            tb.process(new org.jsoup.parser.Token.Character(prompt));                                            org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                            for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                                if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                    inputAttribs.put(attr);                                            }                                            inputAttribs.put("name", "isindex");                                            tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                            tb.process(new org.jsoup.parser.Token.EndTag("label"));                                            tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                            tb.process(new org.jsoup.parser.Token.EndTag("form"));                                        }else                                            if (name.equals("textarea")) {                                                tb.insert(startTag);                                                tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                                tb.markInsertionMode();                                                tb.framesetOk(false);                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                            }else                                                if (name.equals("xmp")) {                                                    if (tb.inButtonScope("p")) {                                                        tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                    }                                                    tb.reconstructFormattingElements();                                                    tb.framesetOk(false);                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                }else                                                    if (name.equals("iframe")) {                                                        tb.framesetOk(false);                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("noembed")) {                                                            org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                        }else                                                            if (name.equals("select")) {                                                                tb.reconstructFormattingElements();                                                                tb.insert(startTag);                                                                tb.framesetOk(false);                                                                org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                                if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                                else                                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                            }else                                                                if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                    if (tb.currentElement().nodeName().equals("option"))                                                                        tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                    tb.reconstructFormattingElements();                                                                    tb.insert(startTag);                                                                }else                                                                    if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                        if (tb.inScope("ruby")) {                                                                            tb.generateImpliedEndTags();                                                                            if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                                tb.error(this);                                                                                tb.popStackToBefore("ruby");                                                                            }                                                                            tb.insert(startTag);                                                                        }                                                                    }else                                                                        if (name.equals("math")) {                                                                            tb.reconstructFormattingElements();                                                                            tb.insert(startTag);                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                        }else                                                                            if (name.equals("svg")) {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                                tb.tokeniser.acknowledgeSelfClosingFlag();                                                                            }else                                                                                if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                    tb.error(this);                                                                                    return false;                                                                                }else {                                                                                    tb.reconstructFormattingElements();                                                                                    tb.insert(startTag);                                                                                }::::INSERT::::STATEMENT::::if (node == formatEl)    break INNER;	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30134::::name.equals("li")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("head"))	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18855::::26999::::if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {    tb.reconstructFormattingElements();    org.jsoup.nodes.Element el = tb.insert(startTag);    tb.pushActiveFormattingElements(el);}else    if (name.equals("nobr")) {        tb.reconstructFormattingElements();        if (tb.inScope("nobr")) {            tb.error(this);            tb.process(new org.jsoup.parser.Token.EndTag("nobr"));            tb.reconstructFormattingElements();        }        org.jsoup.nodes.Element el = tb.insert(startTag);        tb.pushActiveFormattingElements(el);    }else        if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {            tb.reconstructFormattingElements();            tb.insert(startTag);            tb.insertMarkerToFormattingElements();            tb.framesetOk(false);        }else            if (name.equals("table")) {                if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                }                tb.insert(startTag);                tb.framesetOk(false);                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);            }else                if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                    tb.reconstructFormattingElements();                    tb.insertEmpty(startTag);                    tb.framesetOk(false);                }else                    if (name.equals("input")) {                        tb.reconstructFormattingElements();                        org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                        if (!(el.attr("type").equalsIgnoreCase("hidden")))                            tb.framesetOk(false);                    }else                        if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                            tb.insertEmpty(startTag);                        }else                            if (name.equals("hr")) {                                if (tb.inButtonScope("p")) {                                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                                }                                tb.insertEmpty(startTag);                                tb.framesetOk(false);                            }else                                if (name.equals("image")) {                                    startTag.name("img");                                    return tb.process(startTag);                                }else                                    if (name.equals("isindex")) {                                        tb.error(this);                                        if ((tb.getFormElement()) != null)                                            return false;                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                        tb.process(new org.jsoup.parser.Token.StartTag("form"));                                        if (startTag.attributes.hasKey("action")) {                                            org.jsoup.nodes.Element form = tb.getFormElement();                                            form.attr("action", startTag.attributes.get("action"));                                        }                                        tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                        tb.process(new org.jsoup.parser.Token.StartTag("label"));                                        java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                        tb.process(new org.jsoup.parser.Token.Character(prompt));                                        org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                        for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                            if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                inputAttribs.put(attr);                                        }                                        inputAttribs.put("name", "isindex");                                        tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                        tb.process(new org.jsoup.parser.Token.EndTag("label"));                                        tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                        tb.process(new org.jsoup.parser.Token.EndTag("form"));                                    }else                                        if (name.equals("textarea")) {                                            tb.insert(startTag);                                            tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                            tb.markInsertionMode();                                            tb.framesetOk(false);                                            tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                        }else                                            if (name.equals("xmp")) {                                                if (tb.inButtonScope("p")) {                                                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                }                                                tb.reconstructFormattingElements();                                                tb.framesetOk(false);                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                            }else                                                if (name.equals("iframe")) {                                                    tb.framesetOk(false);                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                }else                                                    if (name.equals("noembed")) {                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("select")) {                                                            tb.reconstructFormattingElements();                                                            tb.insert(startTag);                                                            tb.framesetOk(false);                                                            org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                            if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                            else                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                        }else                                                            if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                if (tb.currentElement().nodeName().equals("option"))                                                                    tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                tb.reconstructFormattingElements();                                                                tb.insert(startTag);                                                            }else                                                                if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                    if (tb.inScope("ruby")) {                                                                        tb.generateImpliedEndTags();                                                                        if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                            tb.error(this);                                                                            tb.popStackToBefore("ruby");                                                                        }                                                                        tb.insert(startTag);                                                                    }                                                                }else                                                                    if (name.equals("math")) {                                                                        tb.reconstructFormattingElements();                                                                        tb.insert(startTag);                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                    }else                                                                        if (name.equals("svg")) {                                                                            tb.reconstructFormattingElements();                                                                            tb.insert(startTag);                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                        }else                                                                            if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                tb.error(this);                                                                                return false;                                                                            }else {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                            }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("button"))	false
org.jsoup.parser.HtmlTreeBuilderState::::622::::30609::::38455::::if (org.jsoup.helper.StringUtil.in(name, "dd", "dt")) {    if (!(tb.inScope(name))) {        tb.error(this);        return false;    }else {        tb.generateImpliedEndTags(name);        if (!(tb.currentElement().nodeName().equals(name)))            tb.error(this);        tb.popStackToClose(name);    }}else    if (org.jsoup.helper.StringUtil.in(name, "h1", "h2", "h3", "h4", "h5", "h6")) {        if (!(tb.inScope(new java.lang.String[]{ "h1", "h2", "h3", "h4", "h5", "h6" }))) {            tb.error(this);            return false;        }else {            tb.generateImpliedEndTags(name);            if (!(tb.currentElement().nodeName().equals(name)))                tb.error(this);            tb.popStackToClose("h1", "h2", "h3", "h4", "h5", "h6");        }    }else        if (name.equals("sarcasm")) {            return anyOtherEndTag(t, tb);        }else            if (org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")) {                OUTER : for (int i = 0; i < 8; i++) {                    org.jsoup.nodes.Element formatEl = tb.getActiveFormattingElement(name);                    if (formatEl == null)                        return anyOtherEndTag(t, tb);                    else                        if (!(tb.onStack(formatEl))) {                            tb.error(this);                            tb.removeFromActiveFormattingElements(formatEl);                            return true;                        }else                            if (!(tb.inScope(formatEl.nodeName()))) {                                tb.error(this);                                return false;                            }else                                if ((tb.currentElement()) != formatEl)                                    tb.error(this);                    org.jsoup.nodes.Element furthestBlock = null;                    org.jsoup.nodes.Element commonAncestor = null;                    boolean seenFormattingElement = false;                    java.util.LinkedList<org.jsoup.nodes.Element> stack = tb.getStack();                    for (int si = 0; (si < (stack.size())) && (si < 64); si++) {                        org.jsoup.nodes.Element el = stack.get(si);                        if (el == formatEl) {                            commonAncestor = stack.get((si - 1));                            seenFormattingElement = true;                        }else                            if (seenFormattingElement && (tb.isSpecial(el))) {                                furthestBlock = el;                                break;                            }                    }                    if (furthestBlock == null) {                        tb.popStackToClose(formatEl.nodeName());                        tb.removeFromActiveFormattingElements(formatEl);                        return true;                    }                    org.jsoup.nodes.Element node = furthestBlock;                    org.jsoup.nodes.Element lastNode = furthestBlock;                    INNER : for (int j = 0; j < 3; j++) {                        if (tb.onStack(node))                            node = tb.aboveOnStack(node);                        if (!(tb.isInActiveFormattingElements(node))) {                            tb.removeFromStack(node);                            continue INNER;                        }else                            if (node == formatEl)                                break INNER;                        org.jsoup.nodes.Element replacement = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(node.nodeName()), tb.getBaseUri());                        tb.replaceActiveFormattingElement(node, replacement);                        tb.replaceOnStack(node, replacement);                        node = replacement;                        if (lastNode == furthestBlock) {                        }                        if ((lastNode.parent()) != null)                            lastNode.remove();                        node.appendChild(lastNode);                        lastNode = node;                    }                    if (org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")) {                        if ((lastNode.parent()) != null)                            lastNode.remove();                        tb.insertInFosterParent(lastNode);                    }else {                        if ((lastNode.parent()) != null)                            lastNode.remove();                        commonAncestor.appendChild(lastNode);                    }                    org.jsoup.nodes.Element adopter = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(name), tb.getBaseUri());                    org.jsoup.nodes.Node[] childNodes = furthestBlock.childNodes().toArray(new org.jsoup.nodes.Node[furthestBlock.childNodeSize()]);                    for (org.jsoup.nodes.Node childNode : childNodes) {                        adopter.appendChild(childNode);                    }                    furthestBlock.appendChild(adopter);                    tb.removeFromActiveFormattingElements(formatEl);                    tb.removeFromStack(formatEl);                    tb.insertOnStackAfter(furthestBlock, adopter);                }            }else                if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {                    if (!(tb.inScope("name"))) {                        if (!(tb.inScope(name))) {                            tb.error(this);                            return false;                        }                        tb.generateImpliedEndTags();                        if (!(tb.currentElement().nodeName().equals(name)))                            tb.error(this);                        tb.popStackToClose(name);                        tb.clearFormattingElementsToLastMarker();                    }                }else                    if (name.equals("br")) {                        tb.error(this);                        tb.process(new org.jsoup.parser.Token.StartTag("br"));                        return false;                    }else {                        return anyOtherEndTag(t, tb);                    }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("hr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::645::::31858::::32001::::org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("th"))	false
org.jsoup.parser.HtmlTreeBuilderState::::645::::31858::::32001::::org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("td"))	false
org.jsoup.parser.HtmlTreeBuilderState::::415::::18855::::26999::::if (org.jsoup.helper.StringUtil.in(name, "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {    tb.reconstructFormattingElements();    org.jsoup.nodes.Element el = tb.insert(startTag);    tb.pushActiveFormattingElements(el);}else    if (name.equals("nobr")) {        tb.reconstructFormattingElements();        if (tb.inScope("nobr")) {            tb.error(this);            tb.process(new org.jsoup.parser.Token.EndTag("nobr"));            tb.reconstructFormattingElements();        }        org.jsoup.nodes.Element el = tb.insert(startTag);        tb.pushActiveFormattingElements(el);    }else        if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {            tb.reconstructFormattingElements();            tb.insert(startTag);            tb.insertMarkerToFormattingElements();            tb.framesetOk(false);        }else            if (name.equals("table")) {                if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                }                tb.insert(startTag);                tb.framesetOk(false);                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);            }else                if (org.jsoup.helper.StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {                    tb.reconstructFormattingElements();                    tb.insertEmpty(startTag);                    tb.framesetOk(false);                }else                    if (name.equals("input")) {                        tb.reconstructFormattingElements();                        org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                        if (!(el.attr("type").equalsIgnoreCase("hidden")))                            tb.framesetOk(false);                    }else                        if (org.jsoup.helper.StringUtil.in(name, "param", "source", "track")) {                            tb.insertEmpty(startTag);                        }else                            if (name.equals("hr")) {                                if (tb.inButtonScope("p")) {                                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                                }                                tb.insertEmpty(startTag);                                tb.framesetOk(false);                            }else                                if (name.equals("image")) {                                    startTag.name("img");                                    return tb.process(startTag);                                }else                                    if (name.equals("isindex")) {                                        tb.error(this);                                        if ((tb.getFormElement()) != null)                                            return false;                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                        tb.process(new org.jsoup.parser.Token.StartTag("form"));                                        if (startTag.attributes.hasKey("action")) {                                            org.jsoup.nodes.Element form = tb.getFormElement();                                            form.attr("action", startTag.attributes.get("action"));                                        }                                        tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                        tb.process(new org.jsoup.parser.Token.StartTag("label"));                                        java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                        tb.process(new org.jsoup.parser.Token.Character(prompt));                                        org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                        for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                            if (!(org.jsoup.helper.StringUtil.in(attr.getKey(), "name", "action", "prompt")))                                                inputAttribs.put(attr);                                        }                                        inputAttribs.put("name", "isindex");                                        tb.process(new org.jsoup.parser.Token.StartTag("input", inputAttribs));                                        tb.process(new org.jsoup.parser.Token.EndTag("label"));                                        tb.process(new org.jsoup.parser.Token.StartTag("hr"));                                        tb.process(new org.jsoup.parser.Token.EndTag("form"));                                    }else                                        if (name.equals("textarea")) {                                            tb.insert(startTag);                                            tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                            tb.markInsertionMode();                                            tb.framesetOk(false);                                            tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                        }else                                            if (name.equals("xmp")) {                                                if (tb.inButtonScope("p")) {                                                    tb.process(new org.jsoup.parser.Token.EndTag("p"));                                                }                                                tb.reconstructFormattingElements();                                                tb.framesetOk(false);                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                            }else                                                if (name.equals("iframe")) {                                                    tb.framesetOk(false);                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                }else                                                    if (name.equals("noembed")) {                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                    }else                                                        if (name.equals("select")) {                                                            tb.reconstructFormattingElements();                                                            tb.insert(startTag);                                                            tb.framesetOk(false);                                                            org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                            if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                            else                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                        }else                                                            if (org.jsoup.helper.StringUtil.in("optgroup", "option")) {                                                                if (tb.currentElement().nodeName().equals("option"))                                                                    tb.process(new org.jsoup.parser.Token.EndTag("option"));                                                                tb.reconstructFormattingElements();                                                                tb.insert(startTag);                                                            }else                                                                if (org.jsoup.helper.StringUtil.in("rp", "rt")) {                                                                    if (tb.inScope("ruby")) {                                                                        tb.generateImpliedEndTags();                                                                        if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                            tb.error(this);                                                                            tb.popStackToBefore("ruby");                                                                        }                                                                        tb.insert(startTag);                                                                    }                                                                }else                                                                    if (name.equals("math")) {                                                                        tb.reconstructFormattingElements();                                                                        tb.insert(startTag);                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                    }else                                                                        if (name.equals("svg")) {                                                                            tb.reconstructFormattingElements();                                                                            tb.insert(startTag);                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                        }else                                                                            if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {                                                                                tb.error(this);                                                                                return false;                                                                            }else {                                                                                tb.reconstructFormattingElements();                                                                                tb.insert(startTag);                                                                            }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("noscript"))	false
org.jsoup.parser.HtmlTreeBuilderState::::632::::31110::::38455::::if (org.jsoup.helper.StringUtil.in(name, "h1", "h2", "h3", "h4", "h5", "h6")) {    if (!(tb.inScope(new java.lang.String[]{ "h1", "h2", "h3", "h4", "h5", "h6" }))) {        tb.error(this);        return false;    }else {        tb.generateImpliedEndTags(name);        if (!(tb.currentElement().nodeName().equals(name)))            tb.error(this);        tb.popStackToClose("h1", "h2", "h3", "h4", "h5", "h6");    }}else    if (name.equals("sarcasm")) {        return anyOtherEndTag(t, tb);    }else        if (org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")) {            OUTER : for (int i = 0; i < 8; i++) {                org.jsoup.nodes.Element formatEl = tb.getActiveFormattingElement(name);                if (formatEl == null)                    return anyOtherEndTag(t, tb);                else                    if (!(tb.onStack(formatEl))) {                        tb.error(this);                        tb.removeFromActiveFormattingElements(formatEl);                        return true;                    }else                        if (!(tb.inScope(formatEl.nodeName()))) {                            tb.error(this);                            return false;                        }else                            if ((tb.currentElement()) != formatEl)                                tb.error(this);                org.jsoup.nodes.Element furthestBlock = null;                org.jsoup.nodes.Element commonAncestor = null;                boolean seenFormattingElement = false;                java.util.LinkedList<org.jsoup.nodes.Element> stack = tb.getStack();                for (int si = 0; (si < (stack.size())) && (si < 64); si++) {                    org.jsoup.nodes.Element el = stack.get(si);                    if (el == formatEl) {                        commonAncestor = stack.get((si - 1));                        seenFormattingElement = true;                    }else                        if (seenFormattingElement && (tb.isSpecial(el))) {                            furthestBlock = el;                            break;                        }                }                if (furthestBlock == null) {                    tb.popStackToClose(formatEl.nodeName());                    tb.removeFromActiveFormattingElements(formatEl);                    return true;                }                org.jsoup.nodes.Element node = furthestBlock;                org.jsoup.nodes.Element lastNode = furthestBlock;                INNER : for (int j = 0; j < 3; j++) {                    if (tb.onStack(node))                        node = tb.aboveOnStack(node);                    if (!(tb.isInActiveFormattingElements(node))) {                        tb.removeFromStack(node);                        continue INNER;                    }else                        if (node == formatEl)                            break INNER;                    org.jsoup.nodes.Element replacement = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(node.nodeName()), tb.getBaseUri());                    tb.replaceActiveFormattingElement(node, replacement);                    tb.replaceOnStack(node, replacement);                    node = replacement;                    if (lastNode == furthestBlock) {                    }                    if ((lastNode.parent()) != null)                        lastNode.remove();                    node.appendChild(lastNode);                    lastNode = node;                }                if (org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")) {                    if ((lastNode.parent()) != null)                        lastNode.remove();                    tb.insertInFosterParent(lastNode);                }else {                    if ((lastNode.parent()) != null)                        lastNode.remove();                    commonAncestor.appendChild(lastNode);                }                org.jsoup.nodes.Element adopter = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(name), tb.getBaseUri());                org.jsoup.nodes.Node[] childNodes = furthestBlock.childNodes().toArray(new org.jsoup.nodes.Node[furthestBlock.childNodeSize()]);                for (org.jsoup.nodes.Node childNode : childNodes) {                    adopter.appendChild(childNode);                }                furthestBlock.appendChild(adopter);                tb.removeFromActiveFormattingElements(formatEl);                tb.removeFromStack(formatEl);                tb.insertOnStackAfter(furthestBlock, adopter);            }        }else            if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {                if (!(tb.inScope("name"))) {                    if (!(tb.inScope(name))) {                        tb.error(this);                        return false;                    }                    tb.generateImpliedEndTags();                    if (!(tb.currentElement().nodeName().equals(name)))                        tb.error(this);                    tb.popStackToClose(name);                    tb.clearFormattingElementsToLastMarker();                }            }else                if (name.equals("br")) {                    tb.error(this);                    tb.process(new org.jsoup.parser.Token.StartTag("br"));                    return false;                }else {                    return anyOtherEndTag(t, tb);                }::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"br"	false
org.jsoup.parser.HtmlTreeBuilderState::::632::::31114::::31168::::org.jsoup.helper.StringUtil.in(name, "h1", "h2", "h3", "h4", "h5", "h6")::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("body"))	false
org.jsoup.parser.HtmlTreeBuilder::::554::::18863::::18864::::el::::headElement	false
org.jsoup.parser.HtmlTreeBuilderState::::660::::32781::::32864::::if ((tb.currentElement()) != formatEl)    tb.error(this);::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("noscript"))	false
org.jsoup.parser.HtmlTreeBuilderState::::632::::31110::::38455::::if (org.jsoup.helper.StringUtil.in(name, "h1", "h2", "h3", "h4", "h5", "h6")) {    if (!(tb.inScope(new java.lang.String[]{ "h1", "h2", "h3", "h4", "h5", "h6" }))) {        tb.error(this);        return false;    }else {        tb.generateImpliedEndTags(name);        if (!(tb.currentElement().nodeName().equals(name)))            tb.error(this);        tb.popStackToClose("h1", "h2", "h3", "h4", "h5", "h6");    }}else    if (name.equals("sarcasm")) {        return anyOtherEndTag(t, tb);    }else        if (org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")) {            OUTER : for (int i = 0; i < 8; i++) {                org.jsoup.nodes.Element formatEl = tb.getActiveFormattingElement(name);                if (formatEl == null)                    return anyOtherEndTag(t, tb);                else                    if (!(tb.onStack(formatEl))) {                        tb.error(this);                        tb.removeFromActiveFormattingElements(formatEl);                        return true;                    }else                        if (!(tb.inScope(formatEl.nodeName()))) {                            tb.error(this);                            return false;                        }else                            if ((tb.currentElement()) != formatEl)                                tb.error(this);                org.jsoup.nodes.Element furthestBlock = null;                org.jsoup.nodes.Element commonAncestor = null;                boolean seenFormattingElement = false;                java.util.LinkedList<org.jsoup.nodes.Element> stack = tb.getStack();                for (int si = 0; (si < (stack.size())) && (si < 64); si++) {                    org.jsoup.nodes.Element el = stack.get(si);                    if (el == formatEl) {                        commonAncestor = stack.get((si - 1));                        seenFormattingElement = true;                    }else                        if (seenFormattingElement && (tb.isSpecial(el))) {                            furthestBlock = el;                            break;                        }                }                if (furthestBlock == null) {                    tb.popStackToClose(formatEl.nodeName());                    tb.removeFromActiveFormattingElements(formatEl);                    return true;                }                org.jsoup.nodes.Element node = furthestBlock;                org.jsoup.nodes.Element lastNode = furthestBlock;                INNER : for (int j = 0; j < 3; j++) {                    if (tb.onStack(node))                        node = tb.aboveOnStack(node);                    if (!(tb.isInActiveFormattingElements(node))) {                        tb.removeFromStack(node);                        continue INNER;                    }else                        if (node == formatEl)                            break INNER;                    org.jsoup.nodes.Element replacement = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(node.nodeName()), tb.getBaseUri());                    tb.replaceActiveFormattingElement(node, replacement);                    tb.replaceOnStack(node, replacement);                    node = replacement;                    if (lastNode == furthestBlock) {                    }                    if ((lastNode.parent()) != null)                        lastNode.remove();                    node.appendChild(lastNode);                    lastNode = node;                }                if (org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")) {                    if ((lastNode.parent()) != null)                        lastNode.remove();                    tb.insertInFosterParent(lastNode);                }else {                    if ((lastNode.parent()) != null)                        lastNode.remove();                    commonAncestor.appendChild(lastNode);                }                org.jsoup.nodes.Element adopter = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(name), tb.getBaseUri());                org.jsoup.nodes.Node[] childNodes = furthestBlock.childNodes().toArray(new org.jsoup.nodes.Node[furthestBlock.childNodeSize()]);                for (org.jsoup.nodes.Node childNode : childNodes) {                    adopter.appendChild(childNode);                }                furthestBlock.appendChild(adopter);                tb.removeFromActiveFormattingElements(formatEl);                tb.removeFromStack(formatEl);                tb.insertOnStackAfter(furthestBlock, adopter);            }        }else            if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {                if (!(tb.inScope("name"))) {                    if (!(tb.inScope(name))) {                        tb.error(this);                        return false;                    }                    tb.generateImpliedEndTags();                    if (!(tb.currentElement().nodeName().equals(name)))                        tb.error(this);                    tb.popStackToClose(name);                    tb.clearFormattingElementsToLastMarker();                }            }else                if (name.equals("br")) {                    tb.error(this);                    tb.process(new org.jsoup.parser.Token.StartTag("br"));                    return false;                }else {                    return anyOtherEndTag(t, tb);                }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("option"))	false
org.jsoup.parser.HtmlTreeBuilderState::::645::::31854::::38455::::if (org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")) {    OUTER : for (int i = 0; i < 8; i++) {        org.jsoup.nodes.Element formatEl = tb.getActiveFormattingElement(name);        if (formatEl == null)            return anyOtherEndTag(t, tb);        else            if (!(tb.onStack(formatEl))) {                tb.error(this);                tb.removeFromActiveFormattingElements(formatEl);                return true;            }else                if (!(tb.inScope(formatEl.nodeName()))) {                    tb.error(this);                    return false;                }else                    if ((tb.currentElement()) != formatEl)                        tb.error(this);        org.jsoup.nodes.Element furthestBlock = null;        org.jsoup.nodes.Element commonAncestor = null;        boolean seenFormattingElement = false;        java.util.LinkedList<org.jsoup.nodes.Element> stack = tb.getStack();        for (int si = 0; (si < (stack.size())) && (si < 64); si++) {            org.jsoup.nodes.Element el = stack.get(si);            if (el == formatEl) {                commonAncestor = stack.get((si - 1));                seenFormattingElement = true;            }else                if (seenFormattingElement && (tb.isSpecial(el))) {                    furthestBlock = el;                    break;                }        }        if (furthestBlock == null) {            tb.popStackToClose(formatEl.nodeName());            tb.removeFromActiveFormattingElements(formatEl);            return true;        }        org.jsoup.nodes.Element node = furthestBlock;        org.jsoup.nodes.Element lastNode = furthestBlock;        INNER : for (int j = 0; j < 3; j++) {            if (tb.onStack(node))                node = tb.aboveOnStack(node);            if (!(tb.isInActiveFormattingElements(node))) {                tb.removeFromStack(node);                continue INNER;            }else                if (node == formatEl)                    break INNER;            org.jsoup.nodes.Element replacement = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(node.nodeName()), tb.getBaseUri());            tb.replaceActiveFormattingElement(node, replacement);            tb.replaceOnStack(node, replacement);            node = replacement;            if (lastNode == furthestBlock) {            }            if ((lastNode.parent()) != null)                lastNode.remove();            node.appendChild(lastNode);            lastNode = node;        }        if (org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")) {            if ((lastNode.parent()) != null)                lastNode.remove();            tb.insertInFosterParent(lastNode);        }else {            if ((lastNode.parent()) != null)                lastNode.remove();            commonAncestor.appendChild(lastNode);        }        org.jsoup.nodes.Element adopter = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(name), tb.getBaseUri());        org.jsoup.nodes.Node[] childNodes = furthestBlock.childNodes().toArray(new org.jsoup.nodes.Node[furthestBlock.childNodeSize()]);        for (org.jsoup.nodes.Node childNode : childNodes) {            adopter.appendChild(childNode);        }        furthestBlock.appendChild(adopter);        tb.removeFromActiveFormattingElements(formatEl);        tb.removeFromStack(formatEl);        tb.insertOnStackAfter(furthestBlock, adopter);    }}else    if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {        if (!(tb.inScope("name"))) {            if (!(tb.inScope(name))) {                tb.error(this);                return false;            }            tb.generateImpliedEndTags();            if (!(tb.currentElement().nodeName().equals(name)))                tb.error(this);            tb.popStackToClose(name);            tb.clearFormattingElementsToLastMarker();        }    }else        if (name.equals("br")) {            tb.error(this);            tb.process(new org.jsoup.parser.Token.StartTag("br"));            return false;        }else {            return anyOtherEndTag(t, tb);        }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("select"))	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30118::::30134::::name.equals("li")::::INSERT::::STATEMENT::::closeCell(tb)	false
org.jsoup.parser.HtmlTreeBuilder::::659::::23167::::23170::::next::::headElement	false
org.jsoup.parser.HtmlTreeBuilderState::::622::::30609::::38455::::if (org.jsoup.helper.StringUtil.in(name, "dd", "dt")) {    if (!(tb.inScope(name))) {        tb.error(this);        return false;    }else {        tb.generateImpliedEndTags(name);        if (!(tb.currentElement().nodeName().equals(name)))            tb.error(this);        tb.popStackToClose(name);    }}else    if (org.jsoup.helper.StringUtil.in(name, "h1", "h2", "h3", "h4", "h5", "h6")) {        if (!(tb.inScope(new java.lang.String[]{ "h1", "h2", "h3", "h4", "h5", "h6" }))) {            tb.error(this);            return false;        }else {            tb.generateImpliedEndTags(name);            if (!(tb.currentElement().nodeName().equals(name)))                tb.error(this);            tb.popStackToClose("h1", "h2", "h3", "h4", "h5", "h6");        }    }else        if (name.equals("sarcasm")) {            return anyOtherEndTag(t, tb);        }else            if (org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")) {                OUTER : for (int i = 0; i < 8; i++) {                    org.jsoup.nodes.Element formatEl = tb.getActiveFormattingElement(name);                    if (formatEl == null)                        return anyOtherEndTag(t, tb);                    else                        if (!(tb.onStack(formatEl))) {                            tb.error(this);                            tb.removeFromActiveFormattingElements(formatEl);                            return true;                        }else                            if (!(tb.inScope(formatEl.nodeName()))) {                                tb.error(this);                                return false;                            }else                                if ((tb.currentElement()) != formatEl)                                    tb.error(this);                    org.jsoup.nodes.Element furthestBlock = null;                    org.jsoup.nodes.Element commonAncestor = null;                    boolean seenFormattingElement = false;                    java.util.LinkedList<org.jsoup.nodes.Element> stack = tb.getStack();                    for (int si = 0; (si < (stack.size())) && (si < 64); si++) {                        org.jsoup.nodes.Element el = stack.get(si);                        if (el == formatEl) {                            commonAncestor = stack.get((si - 1));                            seenFormattingElement = true;                        }else                            if (seenFormattingElement && (tb.isSpecial(el))) {                                furthestBlock = el;                                break;                            }                    }                    if (furthestBlock == null) {                        tb.popStackToClose(formatEl.nodeName());                        tb.removeFromActiveFormattingElements(formatEl);                        return true;                    }                    org.jsoup.nodes.Element node = furthestBlock;                    org.jsoup.nodes.Element lastNode = furthestBlock;                    INNER : for (int j = 0; j < 3; j++) {                        if (tb.onStack(node))                            node = tb.aboveOnStack(node);                        if (!(tb.isInActiveFormattingElements(node))) {                            tb.removeFromStack(node);                            continue INNER;                        }else                            if (node == formatEl)                                break INNER;                        org.jsoup.nodes.Element replacement = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(node.nodeName()), tb.getBaseUri());                        tb.replaceActiveFormattingElement(node, replacement);                        tb.replaceOnStack(node, replacement);                        node = replacement;                        if (lastNode == furthestBlock) {                        }                        if ((lastNode.parent()) != null)                            lastNode.remove();                        node.appendChild(lastNode);                        lastNode = node;                    }                    if (org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")) {                        if ((lastNode.parent()) != null)                            lastNode.remove();                        tb.insertInFosterParent(lastNode);                    }else {                        if ((lastNode.parent()) != null)                            lastNode.remove();                        commonAncestor.appendChild(lastNode);                    }                    org.jsoup.nodes.Element adopter = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(name), tb.getBaseUri());                    org.jsoup.nodes.Node[] childNodes = furthestBlock.childNodes().toArray(new org.jsoup.nodes.Node[furthestBlock.childNodeSize()]);                    for (org.jsoup.nodes.Node childNode : childNodes) {                        adopter.appendChild(childNode);                    }                    furthestBlock.appendChild(adopter);                    tb.removeFromActiveFormattingElements(formatEl);                    tb.removeFromStack(formatEl);                    tb.insertOnStackAfter(furthestBlock, adopter);                }            }else                if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {                    if (!(tb.inScope("name"))) {                        if (!(tb.inScope(name))) {                            tb.error(this);                            return false;                        }                        tb.generateImpliedEndTags();                        if (!(tb.currentElement().nodeName().equals(name)))                            tb.error(this);                        tb.popStackToClose(name);                        tb.clearFormattingElementsToLastMarker();                    }                }else                    if (name.equals("br")) {                        tb.error(this);                        tb.process(new org.jsoup.parser.Token.StartTag("br"));                        return false;                    }else {                        return anyOtherEndTag(t, tb);                    }::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.HtmlTreeBuilderState::::612::::30114::::38455::::if (name.equals("li")) {    if (!(tb.inListItemScope(name))) {        tb.error(this);        return false;    }else {        tb.generateImpliedEndTags(name);        if (!(tb.currentElement().nodeName().equals(name)))            tb.error(this);        tb.popStackToClose(name);    }}else    if (org.jsoup.helper.StringUtil.in(name, "dd", "dt")) {        if (!(tb.inScope(name))) {            tb.error(this);            return false;        }else {            tb.generateImpliedEndTags(name);            if (!(tb.currentElement().nodeName().equals(name)))                tb.error(this);            tb.popStackToClose(name);        }    }else        if (org.jsoup.helper.StringUtil.in(name, "h1", "h2", "h3", "h4", "h5", "h6")) {            if (!(tb.inScope(new java.lang.String[]{ "h1", "h2", "h3", "h4", "h5", "h6" }))) {                tb.error(this);                return false;            }else {                tb.generateImpliedEndTags(name);                if (!(tb.currentElement().nodeName().equals(name)))                    tb.error(this);                tb.popStackToClose("h1", "h2", "h3", "h4", "h5", "h6");            }        }else            if (name.equals("sarcasm")) {                return anyOtherEndTag(t, tb);            }else                if (org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")) {                    OUTER : for (int i = 0; i < 8; i++) {                        org.jsoup.nodes.Element formatEl = tb.getActiveFormattingElement(name);                        if (formatEl == null)                            return anyOtherEndTag(t, tb);                        else                            if (!(tb.onStack(formatEl))) {                                tb.error(this);                                tb.removeFromActiveFormattingElements(formatEl);                                return true;                            }else                                if (!(tb.inScope(formatEl.nodeName()))) {                                    tb.error(this);                                    return false;                                }else                                    if ((tb.currentElement()) != formatEl)                                        tb.error(this);                        org.jsoup.nodes.Element furthestBlock = null;                        org.jsoup.nodes.Element commonAncestor = null;                        boolean seenFormattingElement = false;                        java.util.LinkedList<org.jsoup.nodes.Element> stack = tb.getStack();                        for (int si = 0; (si < (stack.size())) && (si < 64); si++) {                            org.jsoup.nodes.Element el = stack.get(si);                            if (el == formatEl) {                                commonAncestor = stack.get((si - 1));                                seenFormattingElement = true;                            }else                                if (seenFormattingElement && (tb.isSpecial(el))) {                                    furthestBlock = el;                                    break;                                }                        }                        if (furthestBlock == null) {                            tb.popStackToClose(formatEl.nodeName());                            tb.removeFromActiveFormattingElements(formatEl);                            return true;                        }                        org.jsoup.nodes.Element node = furthestBlock;                        org.jsoup.nodes.Element lastNode = furthestBlock;                        INNER : for (int j = 0; j < 3; j++) {                            if (tb.onStack(node))                                node = tb.aboveOnStack(node);                            if (!(tb.isInActiveFormattingElements(node))) {                                tb.removeFromStack(node);                                continue INNER;                            }else                                if (node == formatEl)                                    break INNER;                            org.jsoup.nodes.Element replacement = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(node.nodeName()), tb.getBaseUri());                            tb.replaceActiveFormattingElement(node, replacement);                            tb.replaceOnStack(node, replacement);                            node = replacement;                            if (lastNode == furthestBlock) {                            }                            if ((lastNode.parent()) != null)                                lastNode.remove();                            node.appendChild(lastNode);                            lastNode = node;                        }                        if (org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")) {                            if ((lastNode.parent()) != null)                                lastNode.remove();                            tb.insertInFosterParent(lastNode);                        }else {                            if ((lastNode.parent()) != null)                                lastNode.remove();                            commonAncestor.appendChild(lastNode);                        }                        org.jsoup.nodes.Element adopter = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(name), tb.getBaseUri());                        org.jsoup.nodes.Node[] childNodes = furthestBlock.childNodes().toArray(new org.jsoup.nodes.Node[furthestBlock.childNodeSize()]);                        for (org.jsoup.nodes.Node childNode : childNodes) {                            adopter.appendChild(childNode);                        }                        furthestBlock.appendChild(adopter);                        tb.removeFromActiveFormattingElements(formatEl);                        tb.removeFromStack(formatEl);                        tb.insertOnStackAfter(furthestBlock, adopter);                    }                }else                    if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {                        if (!(tb.inScope("name"))) {                            if (!(tb.inScope(name))) {                                tb.error(this);                                return false;                            }                            tb.generateImpliedEndTags();                            if (!(tb.currentElement().nodeName().equals(name)))                                tb.error(this);                            tb.popStackToClose(name);                            tb.clearFormattingElementsToLastMarker();                        }                    }else                        if (name.equals("br")) {                            tb.error(this);                            tb.process(new org.jsoup.parser.Token.StartTag("br"));                            return false;                        }else {                            return anyOtherEndTag(t, tb);                        }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.StartTag("hr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::642::::31709::::38455::::if (name.equals("sarcasm")) {    return anyOtherEndTag(t, tb);}else    if (org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")) {        OUTER : for (int i = 0; i < 8; i++) {            org.jsoup.nodes.Element formatEl = tb.getActiveFormattingElement(name);            if (formatEl == null)                return anyOtherEndTag(t, tb);            else                if (!(tb.onStack(formatEl))) {                    tb.error(this);                    tb.removeFromActiveFormattingElements(formatEl);                    return true;                }else                    if (!(tb.inScope(formatEl.nodeName()))) {                        tb.error(this);                        return false;                    }else                        if ((tb.currentElement()) != formatEl)                            tb.error(this);            org.jsoup.nodes.Element furthestBlock = null;            org.jsoup.nodes.Element commonAncestor = null;            boolean seenFormattingElement = false;            java.util.LinkedList<org.jsoup.nodes.Element> stack = tb.getStack();            for (int si = 0; (si < (stack.size())) && (si < 64); si++) {                org.jsoup.nodes.Element el = stack.get(si);                if (el == formatEl) {                    commonAncestor = stack.get((si - 1));                    seenFormattingElement = true;                }else                    if (seenFormattingElement && (tb.isSpecial(el))) {                        furthestBlock = el;                        break;                    }            }            if (furthestBlock == null) {                tb.popStackToClose(formatEl.nodeName());                tb.removeFromActiveFormattingElements(formatEl);                return true;            }            org.jsoup.nodes.Element node = furthestBlock;            org.jsoup.nodes.Element lastNode = furthestBlock;            INNER : for (int j = 0; j < 3; j++) {                if (tb.onStack(node))                    node = tb.aboveOnStack(node);                if (!(tb.isInActiveFormattingElements(node))) {                    tb.removeFromStack(node);                    continue INNER;                }else                    if (node == formatEl)                        break INNER;                org.jsoup.nodes.Element replacement = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(node.nodeName()), tb.getBaseUri());                tb.replaceActiveFormattingElement(node, replacement);                tb.replaceOnStack(node, replacement);                node = replacement;                if (lastNode == furthestBlock) {                }                if ((lastNode.parent()) != null)                    lastNode.remove();                node.appendChild(lastNode);                lastNode = node;            }            if (org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")) {                if ((lastNode.parent()) != null)                    lastNode.remove();                tb.insertInFosterParent(lastNode);            }else {                if ((lastNode.parent()) != null)                    lastNode.remove();                commonAncestor.appendChild(lastNode);            }            org.jsoup.nodes.Element adopter = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(name), tb.getBaseUri());            org.jsoup.nodes.Node[] childNodes = furthestBlock.childNodes().toArray(new org.jsoup.nodes.Node[furthestBlock.childNodeSize()]);            for (org.jsoup.nodes.Node childNode : childNodes) {                adopter.appendChild(childNode);            }            furthestBlock.appendChild(adopter);            tb.removeFromActiveFormattingElements(formatEl);            tb.removeFromStack(formatEl);            tb.insertOnStackAfter(furthestBlock, adopter);        }    }else        if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {            if (!(tb.inScope("name"))) {                if (!(tb.inScope(name))) {                    tb.error(this);                    return false;                }                tb.generateImpliedEndTags();                if (!(tb.currentElement().nodeName().equals(name)))                    tb.error(this);                tb.popStackToClose(name);                tb.clearFormattingElementsToLastMarker();            }        }else            if (name.equals("br")) {                tb.error(this);                tb.process(new org.jsoup.parser.Token.StartTag("br"));                return false;            }else {                return anyOtherEndTag(t, tb);            }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("select"))	false
org.jsoup.parser.HtmlTreeBuilder::::554::::18863::::18864::::el::::pop()	false
org.jsoup.parser.HtmlTreeBuilderState::::784::::39568::::39579::::return true::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("optgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::773::::39195::::39198::::name::::"head"	false
org.jsoup.parser.HtmlTreeBuilderState::::676::::33799::::33804::::break::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("optgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::676::::33799::::33804::::break::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("li"))	false
org.jsoup.parser.HtmlTreeBuilderState::::661::::32850::::32864::::tb.error(this)::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("optgroup"))	false
org.jsoup.parser.HtmlTreeBuilderState::::649::::32115::::37512::::OUTER : for (int i = 0; i < 8; i++) {    org.jsoup.nodes.Element formatEl = tb.getActiveFormattingElement(name);    if (formatEl == null)        return anyOtherEndTag(t, tb);    else        if (!(tb.onStack(formatEl))) {            tb.error(this);            tb.removeFromActiveFormattingElements(formatEl);            return true;        }else            if (!(tb.inScope(formatEl.nodeName()))) {                tb.error(this);                return false;            }else                if ((tb.currentElement()) != formatEl)                    tb.error(this);    org.jsoup.nodes.Element furthestBlock = null;    org.jsoup.nodes.Element commonAncestor = null;    boolean seenFormattingElement = false;    java.util.LinkedList<org.jsoup.nodes.Element> stack = tb.getStack();    for (int si = 0; (si < (stack.size())) && (si < 64); si++) {        org.jsoup.nodes.Element el = stack.get(si);        if (el == formatEl) {            commonAncestor = stack.get((si - 1));            seenFormattingElement = true;        }else            if (seenFormattingElement && (tb.isSpecial(el))) {                furthestBlock = el;                break;            }    }    if (furthestBlock == null) {        tb.popStackToClose(formatEl.nodeName());        tb.removeFromActiveFormattingElements(formatEl);        return true;    }    org.jsoup.nodes.Element node = furthestBlock;    org.jsoup.nodes.Element lastNode = furthestBlock;    INNER : for (int j = 0; j < 3; j++) {        if (tb.onStack(node))            node = tb.aboveOnStack(node);        if (!(tb.isInActiveFormattingElements(node))) {            tb.removeFromStack(node);            continue INNER;        }else            if (node == formatEl)                break INNER;        org.jsoup.nodes.Element replacement = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(node.nodeName()), tb.getBaseUri());        tb.replaceActiveFormattingElement(node, replacement);        tb.replaceOnStack(node, replacement);        node = replacement;        if (lastNode == furthestBlock) {        }        if ((lastNode.parent()) != null)            lastNode.remove();        node.appendChild(lastNode);        lastNode = node;    }    if (org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")) {        if ((lastNode.parent()) != null)            lastNode.remove();        tb.insertInFosterParent(lastNode);    }else {        if ((lastNode.parent()) != null)            lastNode.remove();        commonAncestor.appendChild(lastNode);    }    org.jsoup.nodes.Element adopter = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(name), tb.getBaseUri());    org.jsoup.nodes.Node[] childNodes = furthestBlock.childNodes().toArray(new org.jsoup.nodes.Node[furthestBlock.childNodeSize()]);    for (org.jsoup.nodes.Node childNode : childNodes) {        adopter.appendChild(childNode);    }    furthestBlock.appendChild(adopter);    tb.removeFromActiveFormattingElements(formatEl);    tb.removeFromStack(formatEl);    tb.insertOnStackAfter(furthestBlock, adopter);}::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("tr"))	false
org.jsoup.parser.HtmlTreeBuilderState::::632::::31110::::38455::::if (org.jsoup.helper.StringUtil.in(name, "h1", "h2", "h3", "h4", "h5", "h6")) {    if (!(tb.inScope(new java.lang.String[]{ "h1", "h2", "h3", "h4", "h5", "h6" }))) {        tb.error(this);        return false;    }else {        tb.generateImpliedEndTags(name);        if (!(tb.currentElement().nodeName().equals(name)))            tb.error(this);        tb.popStackToClose("h1", "h2", "h3", "h4", "h5", "h6");    }}else    if (name.equals("sarcasm")) {        return anyOtherEndTag(t, tb);    }else        if (org.jsoup.helper.StringUtil.in(name, "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")) {            OUTER : for (int i = 0; i < 8; i++) {                org.jsoup.nodes.Element formatEl = tb.getActiveFormattingElement(name);                if (formatEl == null)                    return anyOtherEndTag(t, tb);                else                    if (!(tb.onStack(formatEl))) {                        tb.error(this);                        tb.removeFromActiveFormattingElements(formatEl);                        return true;                    }else                        if (!(tb.inScope(formatEl.nodeName()))) {                            tb.error(this);                            return false;                        }else                            if ((tb.currentElement()) != formatEl)                                tb.error(this);                org.jsoup.nodes.Element furthestBlock = null;                org.jsoup.nodes.Element commonAncestor = null;                boolean seenFormattingElement = false;                java.util.LinkedList<org.jsoup.nodes.Element> stack = tb.getStack();                for (int si = 0; (si < (stack.size())) && (si < 64); si++) {                    org.jsoup.nodes.Element el = stack.get(si);                    if (el == formatEl) {                        commonAncestor = stack.get((si - 1));                        seenFormattingElement = true;                    }else                        if (seenFormattingElement && (tb.isSpecial(el))) {                            furthestBlock = el;                            break;                        }                }                if (furthestBlock == null) {                    tb.popStackToClose(formatEl.nodeName());                    tb.removeFromActiveFormattingElements(formatEl);                    return true;                }                org.jsoup.nodes.Element node = furthestBlock;                org.jsoup.nodes.Element lastNode = furthestBlock;                INNER : for (int j = 0; j < 3; j++) {                    if (tb.onStack(node))                        node = tb.aboveOnStack(node);                    if (!(tb.isInActiveFormattingElements(node))) {                        tb.removeFromStack(node);                        continue INNER;                    }else                        if (node == formatEl)                            break INNER;                    org.jsoup.nodes.Element replacement = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(node.nodeName()), tb.getBaseUri());                    tb.replaceActiveFormattingElement(node, replacement);                    tb.replaceOnStack(node, replacement);                    node = replacement;                    if (lastNode == furthestBlock) {                    }                    if ((lastNode.parent()) != null)                        lastNode.remove();                    node.appendChild(lastNode);                    lastNode = node;                }                if (org.jsoup.helper.StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")) {                    if ((lastNode.parent()) != null)                        lastNode.remove();                    tb.insertInFosterParent(lastNode);                }else {                    if ((lastNode.parent()) != null)                        lastNode.remove();                    commonAncestor.appendChild(lastNode);                }                org.jsoup.nodes.Element adopter = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(name), tb.getBaseUri());                org.jsoup.nodes.Node[] childNodes = furthestBlock.childNodes().toArray(new org.jsoup.nodes.Node[furthestBlock.childNodeSize()]);                for (org.jsoup.nodes.Node childNode : childNodes) {                    adopter.appendChild(childNode);                }                furthestBlock.appendChild(adopter);                tb.removeFromActiveFormattingElements(formatEl);                tb.removeFromStack(formatEl);                tb.insertOnStackAfter(furthestBlock, adopter);            }        }else            if (org.jsoup.helper.StringUtil.in(name, "applet", "marquee", "object")) {                if (!(tb.inScope("name"))) {                    if (!(tb.inScope(name))) {                        tb.error(this);                        return false;                    }                    tb.generateImpliedEndTags();                    if (!(tb.currentElement().nodeName().equals(name)))                        tb.error(this);                    tb.popStackToClose(name);                    tb.clearFormattingElementsToLastMarker();                }            }else                if (name.equals("br")) {                    tb.error(this);                    tb.process(new org.jsoup.parser.Token.StartTag("br"));                    return false;                }else {                    return anyOtherEndTag(t, tb);                }::::INSERT::::STATEMENT::::tb.process(new org.jsoup.parser.Token.EndTag("select"))	false

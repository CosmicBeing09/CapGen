org.mockito.internal.runners.RunnerFactory	Expression	class spoon.support.reflect.code.CtThisAccessImpl	522:525	18:18	this	[]	[]	[spoon.support.reflect.code.CtFieldWriteImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.declaration.CtConstructorImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.internal.runners.util.RunnerProvider	Expression	class spoon.support.reflect.code.CtFieldWriteImpl	522:540	18:18	this.runnerProvider	[]	[org.mockito.internal.runners.util.RunnerProvider:runnerProvider]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.declaration.CtConstructorImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.internal.runners.util.RunnerProvider	Expression	class spoon.support.reflect.code.CtVariableReadImpl	544:557	18:18	runnerProvider	[]	[org.mockito.internal.runners.util.RunnerProvider:runnerProvider]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.declaration.CtConstructorImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl]
CtAssignmentImpl	Statement	class spoon.support.reflect.code.CtAssignmentImpl	522:558	18:18	this.runnerProvider = runnerProvider	[]	[org.mockito.internal.runners.util.RunnerProvider:runnerProvider]	[spoon.support.reflect.declaration.CtConstructorImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.internal.runners.util.RunnerProvider	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	609:628	22:22	new org.mockito.internal.runners.util.RunnerProvider()	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.declaration.CtConstructorImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[spoon.support.reflect.code.CtInvocationImpl]
org.mockito.internal.runners.RunnerFactory	Expression	class spoon.support.reflect.code.CtInvocationImpl	604:630	22:22	this(new org.mockito.internal.runners.util.RunnerProvider())	[org.mockito.internal.runners.RunnerFactory:this]	[]	[spoon.support.reflect.declaration.CtConstructorImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[spoon.support.reflect.code.CtInvocationImpl]
org.mockito.internal.runners.util.RunnerProvider	Expression	class spoon.support.reflect.code.CtFieldReadImpl	749:762	27:27	runnerProvider	[]	[org.mockito.internal.runners.util.RunnerProvider:runnerProvider]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtInvocationImpl	749:791	27:27	runnerProvider.isJUnit45OrHigherAvailable()	[boolean:isJUnit45OrHigherAvailable]	[org.mockito.internal.runners.util.RunnerProvider:runnerProvider]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.internal.runners.util.RunnerProvider	Expression	class spoon.support.reflect.code.CtFieldReadImpl	819:832	28:28	runnerProvider	[]	[org.mockito.internal.runners.util.RunnerProvider:runnerProvider]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	846:902	28:28	"org.mockito.internal.runners.JUnit45AndHigherRunnerImpl"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<?>	Expression	class spoon.support.reflect.code.CtVariableReadImpl	905:909	28:28	klass	[]	[java.lang.Class<?>:klass]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.internal.runners.RunnerImpl	Expression	class spoon.support.reflect.code.CtInvocationImpl	819:910	28:28	runnerProvider.newInstance("org.mockito.internal.runners.JUnit45AndHigherRunnerImpl", klass)	[org.mockito.internal.runners.RunnerImpl:newInstance]	[org.mockito.internal.runners.util.RunnerProvider:runnerProvider, java.lang.Class<?>:klass]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
CtReturnImpl	Statement	class spoon.support.reflect.code.CtReturnImpl	812:911	28:28	return runnerProvider.newInstance("org.mockito.internal.runners.JUnit45AndHigherRunnerImpl", klass)	[org.mockito.internal.runners.RunnerImpl:newInstance]	[org.mockito.internal.runners.util.RunnerProvider:runnerProvider, java.lang.Class<?>:klass]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.internal.runners.util.RunnerProvider	Expression	class spoon.support.reflect.code.CtFieldReadImpl	957:970	30:30	runnerProvider	[]	[org.mockito.internal.runners.util.RunnerProvider:runnerProvider]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	984:1031	30:30	"org.mockito.internal.runners.JUnit44RunnerImpl"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<?>	Expression	class spoon.support.reflect.code.CtVariableReadImpl	1034:1038	30:30	klass	[]	[java.lang.Class<?>:klass]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.internal.runners.RunnerImpl	Expression	class spoon.support.reflect.code.CtInvocationImpl	957:1039	30:30	runnerProvider.newInstance("org.mockito.internal.runners.JUnit44RunnerImpl", klass)	[org.mockito.internal.runners.RunnerImpl:newInstance]	[org.mockito.internal.runners.util.RunnerProvider:runnerProvider, java.lang.Class<?>:klass]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
CtReturnImpl	Statement	class spoon.support.reflect.code.CtReturnImpl	950:1040	30:30	return runnerProvider.newInstance("org.mockito.internal.runners.JUnit44RunnerImpl", klass)	[org.mockito.internal.runners.RunnerImpl:newInstance]	[org.mockito.internal.runners.util.RunnerProvider:runnerProvider, java.lang.Class<?>:klass]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
CtIfImpl	Statement	class spoon.support.reflect.code.CtIfImpl	745:1054	27:31	if (runnerProvider.isJUnit45OrHigherAvailable()) {    return runnerProvider.newInstance("org.mockito.internal.runners.JUnit45AndHigherRunnerImpl", klass);}else {    return runnerProvider.newInstance("org.mockito.internal.runners.JUnit44RunnerImpl", klass);}	[org.mockito.internal.runners.RunnerImpl:newInstance, boolean:isJUnit45OrHigherAvailable]	[org.mockito.internal.runners.util.RunnerProvider:runnerProvider, java.lang.Class<?>:klass]	[spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.internal.runners.util.TestMethodsFinder	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	1121:1143	33:33	new org.mockito.internal.runners.util.TestMethodsFinder()	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtUnaryOperatorImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<?>	Expression	class spoon.support.reflect.code.CtVariableReadImpl	1160:1164	33:33	klass	[]	[java.lang.Class<?>:klass]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtUnaryOperatorImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	1121:1165	33:33	new org.mockito.internal.runners.util.TestMethodsFinder().hasTestMethods(klass)	[:TestMethodsFinder]	[java.lang.Class<?>:klass]	[spoon.support.reflect.code.CtUnaryOperatorImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtUnaryOperatorImpl	1120:1165	33:33	!(new org.mockito.internal.runners.util.TestMethodsFinder().hasTestMethods(klass))	[:TestMethodsFinder]	[java.lang.Class<?>:klass]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	1234:1237	35:35	"\n"	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	1261:1264	36:36	"\n"	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	1288:1307	37:37	"No tests found in "	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	1261:1307	36:37	"\n" + "No tests found in "	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	1234:1307	35:37	"\n" + ("\n" + "No tests found in ")	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<?>	Expression	class spoon.support.reflect.code.CtVariableReadImpl	1311:1315	37:37	klass	[]	[java.lang.Class<?>:klass]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtInvocationImpl	1311:1331	37:37	klass.getSimpleName()	[java.lang.String:getSimpleName]	[java.lang.Class<?>:klass]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	1234:1331	35:37	("\n" + ("\n" + "No tests found in ")) + (klass.getSimpleName())	[java.lang.String:getSimpleName]	[java.lang.Class<?>:klass]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	1335:1338	37:37	"\n"	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	1234:1338	35:37	(("\n" + ("\n" + "No tests found in ")) + (klass.getSimpleName())) + "\n"	[java.lang.String:getSimpleName]	[java.lang.Class<?>:klass]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	1362:1401	38:38	"Haven\'t you forgot @Test annotation?\n"	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	1234:1401	35:38	((("\n" + ("\n" + "No tests found in ")) + (klass.getSimpleName())) + "\n") + "Haven\'t you forgot @Test annotation?\n"	[java.lang.String:getSimpleName]	[java.lang.Class<?>:klass]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.reflect.InvocationTargetException	Expression	class spoon.support.reflect.code.CtVariableReadImpl	1425:1425	39:39	e	[]	[java.lang.reflect.InvocationTargetException:e]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.base.MockitoException	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	1192:1426	34:39	new org.mockito.exceptions.base.MockitoException((((("\n" + ("\n" + "No tests found in ")) + (klass.getSimpleName())) + "\n") + "Haven\'t you forgot @Test annotation?\n"), e)	[java.lang.String:getSimpleName]	[java.lang.reflect.InvocationTargetException:e, java.lang.Class<?>:klass]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	1186:1427	34:39	throw new org.mockito.exceptions.base.MockitoException((((("\n" + ("\n" + "No tests found in ")) + (klass.getSimpleName())) + "\n") + "Haven\'t you forgot @Test annotation?\n"), e)	[java.lang.String:getSimpleName]	[java.lang.reflect.InvocationTargetException:e, java.lang.Class<?>:klass]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
CtIfImpl	Statement	class spoon.support.reflect.code.CtIfImpl	1116:1441	33:40	if (!(new org.mockito.internal.runners.util.TestMethodsFinder().hasTestMethods(klass))) {    throw new org.mockito.exceptions.base.MockitoException((((("\n" + ("\n" + "No tests found in ")) + (klass.getSimpleName())) + "\n") + "Haven\'t you forgot @Test annotation?\n"), e);}	[:TestMethodsFinder, java.lang.String:getSimpleName]	[java.lang.reflect.InvocationTargetException:e, java.lang.Class<?>:klass]	[spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.reflect.InvocationTargetException	Expression	class spoon.support.reflect.code.CtVariableReadImpl	1461:1461	41:41	e	[]	[java.lang.reflect.InvocationTargetException:e]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	1455:1462	41:41	throw e	[]	[java.lang.reflect.InvocationTargetException:e]	[spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	1556:1559	44:44	"\n"	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	1583:1586	45:45	"\n"	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	1610:1669	46:46	"MockitoRunner can only be used with JUnit 4.4 or higher.\n"	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl]
null	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	1583:1669	45:46	"\n" + "MockitoRunner can only be used with JUnit 4.4 or higher.\n"	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	1693:1824	47:47	"You can upgrade your JUnit version or write your own Runner (please consider contributing your runner to the Mockito community).\n"	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl]
null	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	1583:1824	45:47	("\n" + "MockitoRunner can only be used with JUnit 4.4 or higher.\n") + "You can upgrade your JUnit version or write your own Runner (please consider contributing your runner to the Mockito community).\n"	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	1848:1972	48:48	"Bear in mind that you can still enjoy all features of the framework without using runners (they are completely optional).\n"	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl]
null	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	1583:1972	45:48	(("\n" + "MockitoRunner can only be used with JUnit 4.4 or higher.\n") + "You can upgrade your JUnit version or write your own Runner (please consider contributing your runner to the Mockito community).\n") + "Bear in mind that you can still enjoy all features of the framework without using runners (they are completely optional).\n"	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	1996:2113	49:49	"If you get this error despite using JUnit 4.4 or higher then please report this error to the mockito mailing list.\n"	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl]
null	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	1583:2113	45:49	((("\n" + "MockitoRunner can only be used with JUnit 4.4 or higher.\n") + "You can upgrade your JUnit version or write your own Runner (please consider contributing your runner to the Mockito community).\n") + "Bear in mind that you can still enjoy all features of the framework without using runners (they are completely optional).\n") + "If you get this error despite using JUnit 4.4 or higher then please report this error to the mockito mailing list.\n"	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	1556:2113	44:49	"\n" + (((("\n" + "MockitoRunner can only be used with JUnit 4.4 or higher.\n") + "You can upgrade your JUnit version or write your own Runner (please consider contributing your runner to the Mockito community).\n") + "Bear in mind that you can still enjoy all features of the framework without using runners (they are completely optional).\n") + "If you get this error despite using JUnit 4.4 or higher then please report this error to the mockito mailing list.\n")	[]	[]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl]
java.lang.Throwable	Expression	class spoon.support.reflect.code.CtVariableReadImpl	2137:2137	50:50	t	[]	[java.lang.Throwable:t]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl]
org.mockito.exceptions.base.MockitoException	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	1514:2138	43:50	new org.mockito.exceptions.base.MockitoException(("\n" + (((("\n" + "MockitoRunner can only be used with JUnit 4.4 or higher.\n") + "You can upgrade your JUnit version or write your own Runner (please consider contributing your runner to the Mockito community).\n") + "Bear in mind that you can still enjoy all features of the framework without using runners (they are completely optional).\n") + "If you get this error despite using JUnit 4.4 or higher then please report this error to the mockito mailing list.\n")), t)	[]	[java.lang.Throwable:t]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	1508:2139	43:50	throw new org.mockito.exceptions.base.MockitoException(("\n" + (((("\n" + "MockitoRunner can only be used with JUnit 4.4 or higher.\n") + "You can upgrade your JUnit version or write your own Runner (please consider contributing your runner to the Mockito community).\n") + "Bear in mind that you can still enjoy all features of the framework without using runners (they are completely optional).\n") + "If you get this error despite using JUnit 4.4 or higher then please report this error to the mockito mailing list.\n")), t)	[]	[java.lang.Throwable:t]	[spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl]
CtTryImpl	Statement	class spoon.support.reflect.code.CtTryImpl	727:2149	26:51	try {    if (runnerProvider.isJUnit45OrHigherAvailable()) {        return runnerProvider.newInstance("org.mockito.internal.runners.JUnit45AndHigherRunnerImpl", klass);    }else {        return runnerProvider.newInstance("org.mockito.internal.runners.JUnit44RunnerImpl", klass);    }} catch (java.lang.reflect.InvocationTargetException e) {    if (!(new org.mockito.internal.runners.util.TestMethodsFinder().hasTestMethods(klass))) {        throw new org.mockito.exceptions.base.MockitoException((((("\n" + ("\n" + "No tests found in ")) + (klass.getSimpleName())) + "\n") + "Haven\'t you forgot @Test annotation?\n"), e);    }    throw e;} catch (java.lang.Throwable t) {    throw new org.mockito.exceptions.base.MockitoException(("\n" + (((("\n" + "MockitoRunner can only be used with JUnit 4.4 or higher.\n") + "You can upgrade your JUnit version or write your own Runner (please consider contributing your runner to the Mockito community).\n") + "Bear in mind that you can still enjoy all features of the framework without using runners (they are completely optional).\n") + "If you get this error despite using JUnit 4.4 or higher then please report this error to the mockito mailing list.\n")), t);}	[org.mockito.internal.runners.RunnerImpl:newInstance, :TestMethodsFinder, java.lang.String:getSimpleName, boolean:isJUnit45OrHigherAvailable]	[java.lang.reflect.InvocationTargetException:e, java.lang.Throwable:t, org.mockito.internal.runners.util.RunnerProvider:runnerProvider, java.lang.Class<?>:klass]	[]	[spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]

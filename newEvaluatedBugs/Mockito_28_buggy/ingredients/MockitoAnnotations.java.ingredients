java.lang.annotation.ElementType	Expression	class spoon.support.reflect.code.CtFieldReadImpl	3063:3067	77:77	java.lang.annotation.ElementType.FIELD	[]	[java.lang.annotation.ElementType:FIELD]	[spoon.support.reflect.code.CtNewArrayImpl, spoon.support.reflect.declaration.CtAnnotationImpl, spoon.support.reflect.declaration.CtAnnotationTypeImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[]
java.lang.annotation.ElementType[]	Expression	class spoon.support.reflect.code.CtNewArrayImpl	3061:3069	77:77	{ java.lang.annotation.ElementType.FIELD }	[]	[java.lang.annotation.ElementType:FIELD]	[spoon.support.reflect.declaration.CtAnnotationImpl, spoon.support.reflect.declaration.CtAnnotationTypeImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[]
java.lang.annotation.Target	Expression	class spoon.support.reflect.declaration.CtAnnotationImpl	3052:3070	77:77	@java.lang.annotation.Target({ java.lang.annotation.ElementType.FIELD })	[]	[java.lang.annotation.ElementType:FIELD]	[spoon.support.reflect.declaration.CtAnnotationTypeImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[]
void	Expression	class spoon.support.reflect.code.CtTypeAccessImpl	3087:3101	78:78	java.lang.annotation.RetentionPolicy	[]	[]	[spoon.support.reflect.code.CtFieldReadImpl, spoon.support.reflect.declaration.CtAnnotationImpl, spoon.support.reflect.declaration.CtAnnotationTypeImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[]
java.lang.annotation.RetentionPolicy	Expression	class spoon.support.reflect.code.CtFieldReadImpl	3087:3109	78:78	java.lang.annotation.RetentionPolicy.RUNTIME	[]	[java.lang.annotation.RetentionPolicy:RUNTIME]	[spoon.support.reflect.declaration.CtAnnotationImpl, spoon.support.reflect.declaration.CtAnnotationTypeImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[]
java.lang.annotation.Retention	Expression	class spoon.support.reflect.declaration.CtAnnotationImpl	3076:3110	78:78	@java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME)	[]	[java.lang.annotation.RetentionPolicy:RUNTIME]	[spoon.support.reflect.declaration.CtAnnotationTypeImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[]
java.lang.Deprecated	Expression	class spoon.support.reflect.declaration.CtAnnotationImpl	3116:3126	79:79	@java.lang.Deprecated	[]	[]	[spoon.support.reflect.declaration.CtAnnotationTypeImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[]
java.lang.Object	Expression	class spoon.support.reflect.code.CtVariableReadImpl	3519:3527	89:89	testClass	[]	[java.lang.Object:testClass]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtWhileImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
<nulltype>	Expression	class spoon.support.reflect.code.CtLiteralImpl	3532:3535	89:89	null	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtWhileImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	3519:3535	89:89	testClass == null	[]	[java.lang.Object:testClass]	[spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtWhileImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	3579:3696	90:90	"testClass cannot be null. For info how to use @Mock annotations see examples in javadoc for MockitoAnnotations class"	[]	[]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtThrowImpl]
org.mockito.exceptions.base.MockitoException	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	3558:3697	90:90	new org.mockito.exceptions.base.MockitoException("testClass cannot be null. For info how to use @Mock annotations see examples in javadoc for MockitoAnnotations class")	[]	[]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtThrowImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	3552:3698	90:90	throw new org.mockito.exceptions.base.MockitoException("testClass cannot be null. For info how to use @Mock annotations see examples in javadoc for MockitoAnnotations class")	[]	[]	[spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtThrowImpl]
CtIfImpl	Statement	class spoon.support.reflect.code.CtIfImpl	3515:3708	89:91	if (testClass == null) {    throw new org.mockito.exceptions.base.MockitoException("testClass cannot be null. For info how to use @Mock annotations see examples in javadoc for MockitoAnnotations class");}	[]	[java.lang.Object:testClass]	[]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtWhileImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.internal.configuration.GlobalConfiguration	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	3755:3779	93:93	new org.mockito.internal.configuration.GlobalConfiguration()	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtWhileImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.configuration.AnnotationEngine	Expression	class spoon.support.reflect.code.CtInvocationImpl	3755:3801	93:93	new org.mockito.internal.configuration.GlobalConfiguration().getAnnotationEngine()	[org.mockito.configuration.AnnotationEngine:GlobalConfiguration]	[]	[spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtWhileImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtLocalVariableImpl	Statement	class spoon.support.reflect.code.CtLocalVariableImpl	3719:3802	93:93	org.mockito.configuration.AnnotationEngine annotationEngine = new org.mockito.internal.configuration.GlobalConfiguration().getAnnotationEngine()	[org.mockito.configuration.AnnotationEngine:GlobalConfiguration]	[]	[]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtWhileImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Object	Expression	class spoon.support.reflect.code.CtVariableReadImpl	3829:3837	94:94	testClass	[]	[java.lang.Object:testClass]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtWhileImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<? extends java.lang.Object>	Expression	class spoon.support.reflect.code.CtInvocationImpl	3829:3848	94:94	testClass.getClass()	[java.lang.Class<? extends java.lang.Object>:getClass]	[java.lang.Object:testClass]	[spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtWhileImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtLocalVariableImpl	Statement	class spoon.support.reflect.code.CtLocalVariableImpl	3812:3849	94:94	java.lang.Class<?> clazz = testClass.getClass()	[java.lang.Class<? extends java.lang.Object>:getClass]	[java.lang.Object:testClass]	[]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtWhileImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.configuration.AnnotationEngine	Expression	class spoon.support.reflect.code.CtVariableReadImpl	3938:3953	97:97	annotationEngine	[]	[org.mockito.configuration.AnnotationEngine:annotationEngine]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtWhileImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	3938:3964	97:97	annotationEngine.getClass()	[:getClass]	[org.mockito.configuration.AnnotationEngine:annotationEngine]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtWhileImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.configuration.DefaultMockitoConfiguration	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	3969:4001	97:97	new org.mockito.configuration.DefaultMockitoConfiguration()	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtWhileImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	3969:4023	97:97	new org.mockito.configuration.DefaultMockitoConfiguration().getAnnotationEngine()	[:DefaultMockitoConfiguration]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtWhileImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	3969:4034	97:97	new org.mockito.configuration.DefaultMockitoConfiguration().getAnnotationEngine().getClass()	[:DefaultMockitoConfiguration]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtWhileImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	3938:4034	97:97	annotationEngine.getClass()) != (new org.mockito.configuration.DefaultMockitoConfiguration().getAnnotationEngine().getClass()	[:DefaultMockitoConfiguration, :getClass]	[org.mockito.configuration.AnnotationEngine:annotationEngine]	[spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtWhileImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<?>	Expression	class spoon.support.reflect.code.CtVariableReadImpl	4242:4246	100:100	clazz	[]	[java.lang.Class<?>:clazz]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtWhileImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtWhileImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class	Expression	class spoon.support.reflect.code.CtFieldReadImpl	4251:4262	100:100	java.lang.Object.class	[]	[java.lang.Class:class]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtWhileImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtWhileImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	4242:4262	100:100	clazz != (java.lang.Object.class)	[]	[java.lang.Class:class, java.lang.Class<?>:clazz]	[spoon.support.reflect.code.CtWhileImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtWhileImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.configuration.AnnotationEngine	Expression	class spoon.support.reflect.code.CtVariableReadImpl	4301:4316	101:101	annotationEngine	[]	[org.mockito.configuration.AnnotationEngine:annotationEngine]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtWhileImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Object	Expression	class spoon.support.reflect.code.CtVariableReadImpl	4319:4327	101:101	testClass	[]	[java.lang.Object:testClass]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtWhileImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<?>	Expression	class spoon.support.reflect.code.CtVariableReadImpl	4330:4334	101:101	clazz	[]	[java.lang.Class<?>:clazz]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtWhileImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
void	Expression	class spoon.support.reflect.code.CtInvocationImpl	4283:4336	101:101	org.mockito.MockitoAnnotations.scanDeprecatedWay(annotationEngine, testClass, clazz)	[void:scanDeprecatedWay]	[java.lang.Object:testClass, org.mockito.configuration.AnnotationEngine:annotationEngine, java.lang.Class<?>:clazz]	[spoon.support.reflect.code.CtWhileImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<?>	Expression	class spoon.support.reflect.code.CtVariableWriteImpl	4354:4358	102:102	clazz	[]	[java.lang.Class<?>:clazz]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtWhileImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<?>	Expression	class spoon.support.reflect.code.CtVariableReadImpl	4362:4366	102:102	clazz	[]	[java.lang.Class<?>:clazz]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtWhileImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<? super ?>	Expression	class spoon.support.reflect.code.CtInvocationImpl	4362:4382	102:102	clazz.getSuperclass()	[java.lang.Class<? super ?>:getSuperclass]	[java.lang.Class<?>:clazz]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtWhileImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtAssignmentImpl	Statement	class spoon.support.reflect.code.CtAssignmentImpl	4354:4383	102:102	clazz = clazz.getSuperclass()	[java.lang.Class<? super ?>:getSuperclass]	[java.lang.Class<?>:clazz]	[spoon.support.reflect.code.CtWhileImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtWhileImpl	Statement	class spoon.support.reflect.code.CtWhileImpl	4235:4397	100:103	while (clazz != (java.lang.Object.class)) {    org.mockito.MockitoAnnotations.scanDeprecatedWay(annotationEngine, testClass, clazz);    clazz = clazz.getSuperclass();} 	[java.lang.Class<? super ?>:getSuperclass, void:scanDeprecatedWay]	[java.lang.Class:class, java.lang.Object:testClass, org.mockito.configuration.AnnotationEngine:annotationEngine, java.lang.Class<?>:clazz]	[spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtWhileImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtIfImpl	Statement	class spoon.support.reflect.code.CtIfImpl	3934:4407	97:104	if ((annotationEngine.getClass()) != (new org.mockito.configuration.DefaultMockitoConfiguration().getAnnotationEngine().getClass())) {    while (clazz != (java.lang.Object.class)) {        org.mockito.MockitoAnnotations.scanDeprecatedWay(annotationEngine, testClass, clazz);        clazz = clazz.getSuperclass();    } }	[java.lang.Class<? super ?>:getSuperclass, void:scanDeprecatedWay, :DefaultMockitoConfiguration, :getClass]	[java.lang.Class:class, java.lang.Object:testClass, org.mockito.configuration.AnnotationEngine:annotationEngine, java.lang.Class<?>:clazz]	[]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtWhileImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.configuration.AnnotationEngine	Expression	class spoon.support.reflect.code.CtVariableReadImpl	4453:4468	107:107	annotationEngine	[]	[org.mockito.configuration.AnnotationEngine:annotationEngine]	[spoon.support.reflect.code.CtInvocationImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtWhileImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Object	Expression	class spoon.support.reflect.code.CtVariableReadImpl	4478:4486	107:107	testClass	[]	[java.lang.Object:testClass]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtWhileImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<? extends java.lang.Object>	Expression	class spoon.support.reflect.code.CtInvocationImpl	4478:4497	107:107	testClass.getClass()	[java.lang.Class<? extends java.lang.Object>:getClass]	[java.lang.Object:testClass]	[spoon.support.reflect.code.CtInvocationImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtWhileImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Object	Expression	class spoon.support.reflect.code.CtVariableReadImpl	4500:4508	107:107	testClass	[]	[java.lang.Object:testClass]	[spoon.support.reflect.code.CtInvocationImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtWhileImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	4453:4510	107:107	annotationEngine.process(testClass.getClass(), testClass)	[java.lang.Class<? extends java.lang.Object>:getClass, :process]	[java.lang.Object:testClass, org.mockito.configuration.AnnotationEngine:annotationEngine]	[]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtWhileImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<?>	Expression	class spoon.support.reflect.code.CtVariableReadImpl	4649:4653	111:111	clazz	[]	[java.lang.Class<?>:clazz]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.reflect.Field[]	Expression	class spoon.support.reflect.code.CtInvocationImpl	4649:4673	111:111	clazz.getDeclaredFields()	[java.lang.reflect.Field[]:getDeclaredFields]	[java.lang.Class<?>:clazz]	[spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtLocalVariableImpl	Statement	class spoon.support.reflect.code.CtLocalVariableImpl	4632:4674	111:111	java.lang.reflect.Field[] fields = clazz.getDeclaredFields()	[java.lang.reflect.Field[]:getDeclaredFields]	[java.lang.Class<?>:clazz]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtLocalVariableImpl	Statement	class spoon.support.reflect.code.CtLocalVariableImpl	4690:4709	113:113	java.lang.reflect.Field field	[]	[]	[spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.reflect.Field[]	Expression	class spoon.support.reflect.code.CtVariableReadImpl	4704:4709	113:113	fields	[]	[java.lang.reflect.Field[]:fields]	[spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.configuration.AnnotationEngine	Expression	class spoon.support.reflect.code.CtVariableReadImpl	4757:4772	114:114	annotationEngine	[]	[org.mockito.configuration.AnnotationEngine:annotationEngine]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtInvocationImpl]
java.lang.Object	Expression	class spoon.support.reflect.code.CtVariableReadImpl	4775:4783	114:114	testClass	[]	[java.lang.Object:testClass]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtInvocationImpl]
java.lang.reflect.Field	Expression	class spoon.support.reflect.code.CtVariableReadImpl	4786:4790	114:114	field	[]	[java.lang.reflect.Field:field]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtInvocationImpl]
void	Expression	class spoon.support.reflect.code.CtInvocationImpl	4726:4792	114:114	org.mockito.MockitoAnnotations.processAnnotationDeprecatedWay(annotationEngine, testClass, field)	[void:processAnnotationDeprecatedWay]	[java.lang.Object:testClass, java.lang.reflect.Field:field, org.mockito.configuration.AnnotationEngine:annotationEngine]	[spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtInvocationImpl]
CtForEachImpl	Statement	class spoon.support.reflect.code.CtForEachImpl	4685:4802	113:115	for (java.lang.reflect.Field field : fields) {    org.mockito.MockitoAnnotations.processAnnotationDeprecatedWay(annotationEngine, testClass, field);}	[void:processAnnotationDeprecatedWay]	[java.lang.Object:testClass, java.lang.reflect.Field:field, org.mockito.configuration.AnnotationEngine:annotationEngine, java.lang.reflect.Field[]:fields]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	4833:4845	118:118	"deprecation"	[]	[]	[spoon.support.reflect.declaration.CtAnnotationImpl]	[]
java.lang.SuppressWarnings	Expression	class spoon.support.reflect.declaration.CtAnnotationImpl	4815:4846	118:118	@java.lang.SuppressWarnings("deprecation")	[]	[]	[]	[]
boolean	Expression	class spoon.support.reflect.code.CtLiteralImpl	4997:5001	120:120	false	[]	[]	[spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtLocalVariableImpl	Statement	class spoon.support.reflect.code.CtLocalVariableImpl	4971:5002	120:120	boolean alreadyAssigned = false	[]	[]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtLocalVariableImpl	Statement	class spoon.support.reflect.code.CtLocalVariableImpl	5016:5061	121:121	java.lang.annotation.Annotation annotation	[]	[]	[spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.reflect.Field	Expression	class spoon.support.reflect.code.CtVariableReadImpl	5040:5044	121:121	field	[]	[java.lang.reflect.Field:field]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.annotation.Annotation[]	Expression	class spoon.support.reflect.code.CtInvocationImpl	5040:5061	121:121	field.getAnnotations()	[java.lang.annotation.Annotation[]:getAnnotations]	[java.lang.reflect.Field:field]	[spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.configuration.AnnotationEngine	Expression	class spoon.support.reflect.code.CtVariableReadImpl	5092:5107	122:122	annotationEngine	[]	[org.mockito.configuration.AnnotationEngine:annotationEngine]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.annotation.Annotation	Expression	class spoon.support.reflect.code.CtVariableReadImpl	5123:5132	122:122	annotation	[]	[java.lang.annotation.Annotation:annotation]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.reflect.Field	Expression	class spoon.support.reflect.code.CtVariableReadImpl	5135:5139	122:122	field	[]	[java.lang.reflect.Field:field]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Object	Expression	class spoon.support.reflect.code.CtInvocationImpl	5092:5140	122:122	annotationEngine.createMockFor(annotation, field)	[java.lang.Object:createMockFor]	[java.lang.annotation.Annotation:annotation, java.lang.reflect.Field:field, org.mockito.configuration.AnnotationEngine:annotationEngine]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtLocalVariableImpl	Statement	class spoon.support.reflect.code.CtLocalVariableImpl	5078:5141	122:122	java.lang.Object mock = annotationEngine.createMockFor(annotation, field)	[java.lang.Object:createMockFor]	[java.lang.annotation.Annotation:annotation, java.lang.reflect.Field:field, org.mockito.configuration.AnnotationEngine:annotationEngine]	[spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Object	Expression	class spoon.support.reflect.code.CtVariableReadImpl	5159:5162	123:123	mock	[]	[java.lang.Object:mock]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
<nulltype>	Expression	class spoon.support.reflect.code.CtLiteralImpl	5167:5170	123:123	null	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	5159:5170	123:123	mock != null	[]	[java.lang.Object:mock]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.reflect.Field	Expression	class spoon.support.reflect.code.CtVariableReadImpl	5214:5218	124:124	field	[]	[java.lang.reflect.Field:field]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtVariableReadImpl	5221:5235	124:124	alreadyAssigned	[]	[boolean:alreadyAssigned]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
void	Expression	class spoon.support.reflect.code.CtInvocationImpl	5191:5237	124:124	org.mockito.MockitoAnnotations.throwIfAlreadyAssigned(field, alreadyAssigned)	[void:throwIfAlreadyAssigned]	[boolean:alreadyAssigned, java.lang.reflect.Field:field]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtVariableWriteImpl	5255:5269	125:125	alreadyAssigned	[]	[boolean:alreadyAssigned]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtLiteralImpl	5273:5276	125:125	true	[]	[]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtAssignmentImpl	Statement	class spoon.support.reflect.code.CtAssignmentImpl	5255:5277	125:125	alreadyAssigned = true	[]	[boolean:alreadyAssigned]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Object	Expression	class spoon.support.reflect.code.CtVariableReadImpl	5353:5361	127:127	testClass	[]	[java.lang.Object:testClass]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtInvocationImpl]
java.lang.reflect.Field	Expression	class spoon.support.reflect.code.CtVariableReadImpl	5364:5368	127:127	field	[]	[java.lang.reflect.Field:field]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtInvocationImpl]
org.mockito.internal.util.reflection.FieldSetter	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	5337:5369	127:127	new org.mockito.internal.util.reflection.FieldSetter(testClass, field)	[]	[java.lang.Object:testClass, java.lang.reflect.Field:field]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtInvocationImpl]
java.lang.Object	Expression	class spoon.support.reflect.code.CtVariableReadImpl	5375:5378	127:127	mock	[]	[java.lang.Object:mock]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	5337:5380	127:127	new org.mockito.internal.util.reflection.FieldSetter(testClass, field).set(mock)	[:FieldSetter]	[java.lang.Object:testClass, java.lang.reflect.Field:field, java.lang.Object:mock]	[spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	5469:5493	129:129	"Problems setting field "	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.reflect.Field	Expression	class spoon.support.reflect.code.CtVariableReadImpl	5497:5501	129:129	field	[]	[java.lang.reflect.Field:field]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtInvocationImpl	5497:5511	129:129	field.getName()	[java.lang.String:getName]	[java.lang.reflect.Field:field]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	5469:5511	129:129	"Problems setting field " + (field.getName())	[java.lang.String:getName]	[java.lang.reflect.Field:field]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	5515:5532	129:129	" annotated with "	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	5469:5532	129:129	("Problems setting field " + (field.getName())) + " annotated with "	[java.lang.String:getName]	[java.lang.reflect.Field:field]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.annotation.Annotation	Expression	class spoon.support.reflect.code.CtVariableReadImpl	5564:5573	130:130	annotation	[]	[java.lang.annotation.Annotation:annotation]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	5469:5573	129:130	(("Problems setting field " + (field.getName())) + " annotated with ") + annotation	[java.lang.String:getName]	[java.lang.reflect.Field:field, java.lang.annotation.Annotation:annotation]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Exception	Expression	class spoon.support.reflect.code.CtVariableReadImpl	5576:5576	130:130	e	[]	[java.lang.Exception:e]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.base.MockitoException	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	5448:5577	129:130	new org.mockito.exceptions.base.MockitoException(((("Problems setting field " + (field.getName())) + " annotated with ") + annotation), e)	[java.lang.String:getName]	[java.lang.Exception:e, java.lang.reflect.Field:field, java.lang.annotation.Annotation:annotation]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	5442:5578	129:130	throw new org.mockito.exceptions.base.MockitoException(((("Problems setting field " + (field.getName())) + " annotated with ") + annotation), e)	[java.lang.String:getName]	[java.lang.Exception:e, java.lang.reflect.Field:field, java.lang.annotation.Annotation:annotation]	[spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
CtTryImpl	Statement	class spoon.support.reflect.code.CtTryImpl	5311:5596	126:131	try {    new org.mockito.internal.util.reflection.FieldSetter(testClass, field).set(mock);} catch (java.lang.Exception e) {    throw new org.mockito.exceptions.base.MockitoException(((("Problems setting field " + (field.getName())) + " annotated with ") + annotation), e);}	[:FieldSetter, java.lang.String:getName]	[java.lang.Object:testClass, java.lang.Exception:e, java.lang.reflect.Field:field, java.lang.Object:mock, java.lang.annotation.Annotation:annotation]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtIfImpl	Statement	class spoon.support.reflect.code.CtIfImpl	5155:5610	123:132	if (mock != null) {    org.mockito.MockitoAnnotations.throwIfAlreadyAssigned(field, alreadyAssigned);    alreadyAssigned = true;    try {        new org.mockito.internal.util.reflection.FieldSetter(testClass, field).set(mock);    } catch (java.lang.Exception e) {        throw new org.mockito.exceptions.base.MockitoException(((("Problems setting field " + (field.getName())) + " annotated with ") + annotation), e);    }}	[:FieldSetter, java.lang.String:getName, void:throwIfAlreadyAssigned]	[boolean:alreadyAssigned, java.lang.Object:testClass, java.lang.Exception:e, java.lang.Object:mock, java.lang.reflect.Field:field, java.lang.annotation.Annotation:annotation]	[spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtForEachImpl	Statement	class spoon.support.reflect.code.CtForEachImpl	5012:5620	121:133	for (java.lang.annotation.Annotation annotation : field.getAnnotations()) {    java.lang.Object mock = annotationEngine.createMockFor(annotation, field);    if (mock != null) {        org.mockito.MockitoAnnotations.throwIfAlreadyAssigned(field, alreadyAssigned);        alreadyAssigned = true;        try {            new org.mockito.internal.util.reflection.FieldSetter(testClass, field).set(mock);        } catch (java.lang.Exception e) {            throw new org.mockito.exceptions.base.MockitoException(((("Problems setting field " + (field.getName())) + " annotated with ") + annotation), e);        }    }}	[:FieldSetter, java.lang.String:getName, java.lang.annotation.Annotation[]:getAnnotations, void:throwIfAlreadyAssigned, java.lang.Object:createMockFor]	[boolean:alreadyAssigned, java.lang.Object:testClass, java.lang.Exception:e, java.lang.reflect.Field:field, java.lang.annotation.Annotation:annotation, java.lang.Object:mock, org.mockito.configuration.AnnotationEngine:annotationEngine]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtVariableReadImpl	5720:5734	137:137	alreadyAssigned	[]	[boolean:alreadyAssigned]	[spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.Reporter	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	5751:5764	138:138	new org.mockito.exceptions.Reporter()	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.reflect.Field	Expression	class spoon.support.reflect.code.CtVariableReadImpl	5798:5802	138:138	field	[]	[java.lang.reflect.Field:field]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtInvocationImpl	5798:5812	138:138	field.getName()	[java.lang.String:getName]	[java.lang.reflect.Field:field]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	5751:5814	138:138	new org.mockito.exceptions.Reporter().moreThanOneAnnotationNotAllowed(field.getName())	[java.lang.String:getName, :Reporter]	[java.lang.reflect.Field:field]	[spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtIfImpl	Statement	class spoon.support.reflect.code.CtIfImpl	5716:5824	137:139	if (alreadyAssigned) {    new org.mockito.exceptions.Reporter().moreThanOneAnnotationNotAllowed(field.getName());}	[java.lang.String:getName, :Reporter]	[boolean:alreadyAssigned, java.lang.reflect.Field:field]	[]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]

java.lang.Override	Expression	class spoon.support.reflect.declaration.CtAnnotationImpl	1407:1415	39:39	@java.lang.Override	[]	[]	[]	[]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	1532:1541	41:41	"codegen."	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtVariableReadImpl	1564:1569	41:41	prefix	[]	[java.lang.String:prefix]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtVariableReadImpl	1572:1577	41:41	source	[]	[java.lang.String:source]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Object	Expression	class spoon.support.reflect.code.CtVariableReadImpl	1580:1582	41:41	key	[]	[java.lang.Object:key]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.cglib.core.Predicate	Expression	class spoon.support.reflect.code.CtVariableReadImpl	1585:1589	41:41	names	[]	[org.mockito.cglib.core.Predicate:names]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	1545:1590	41:41	super.getClassName(prefix, source, key, names)	[:getClassName]	[java.lang.String:source, org.mockito.cglib.core.Predicate:names, java.lang.String:prefix, org.mockito.internal.creation.cglib.MockitoNamingPolicy:super, java.lang.Object:key]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	1532:1590	41:41	"codegen." + (super.getClassName(prefix, source, key, names))	[:getClassName]	[java.lang.String:source, org.mockito.cglib.core.Predicate:names, java.lang.String:prefix, org.mockito.internal.creation.cglib.MockitoNamingPolicy:super, java.lang.Object:key]	[spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
CtReturnImpl	Statement	class spoon.support.reflect.code.CtReturnImpl	1525:1591	41:41	return "codegen." + (super.getClassName(prefix, source, key, names))	[:getClassName]	[java.lang.String:source, org.mockito.cglib.core.Predicate:names, java.lang.String:prefix, org.mockito.internal.creation.cglib.MockitoNamingPolicy:super, java.lang.Object:key]	[]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.internal.creation.cglib.MockitoNamingPolicy	Expression	class spoon.support.reflect.code.CtNewClassImpl	1371:1607	38:43	new org.mockito.internal.creation.cglib.MockitoNamingPolicy() {    @java.lang.Override    public java.lang.String getClassName(java.lang.String prefix, java.lang.String source, java.lang.Object key, org.mockito.cglib.core.Predicate names) {        return "codegen." + (super.getClassName(prefix, source, key, names));    }}	[:getClassName]	[java.lang.String:source, org.mockito.cglib.core.Predicate:names, java.lang.String:prefix, org.mockito.internal.creation.cglib.MockitoNamingPolicy:super, java.lang.Object:key]	[spoon.support.reflect.declaration.CtFieldImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	1713:1715	46:46	int	[]	[]	[]	[]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	1713:1715	46:46	int	[]	[]	[spoon.support.reflect.code.CtConditionalImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	1713:1715	46:46	int	[]	[]	[spoon.support.reflect.reference.CtExecutableReferenceImpl, spoon.support.reflect.reference.CtParameterReferenceImpl, spoon.support.reflect.code.CtVariableReadImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConditionalImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.reflect.Method	Expression	class spoon.support.reflect.code.CtVariableReadImpl	1760:1765	47:47	method	[]	[java.lang.reflect.Method:method]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConditionalImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtInvocationImpl	1760:1776	47:47	method.isBridge()	[boolean:isBridge]	[java.lang.reflect.Method:method]	[spoon.support.reflect.code.CtConditionalImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
int	Expression	class spoon.support.reflect.code.CtLiteralImpl	1780:1780	47:47	1	[]	[]	[spoon.support.reflect.code.CtConditionalImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
int	Expression	class spoon.support.reflect.code.CtLiteralImpl	1784:1784	47:47	0	[]	[]	[spoon.support.reflect.code.CtConditionalImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
int	Expression	class spoon.support.reflect.code.CtConditionalImpl	1760:1784	47:47	method.isBridge() ? 1 : 0	[boolean:isBridge]	[java.lang.reflect.Method:method]	[spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
CtReturnImpl	Statement	class spoon.support.reflect.code.CtReturnImpl	1753:1785	47:47	return method.isBridge() ? 1 : 0	[boolean:isBridge]	[java.lang.reflect.Method:method]	[]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.cglib.proxy.CallbackFilter	Expression	class spoon.support.reflect.code.CtNewClassImpl	1675:1801	45:49	new org.mockito.cglib.proxy.CallbackFilter() {    public int accept(java.lang.reflect.Method method) {        return method.isBridge() ? 1 : 0;    }}	[boolean:isBridge]	[java.lang.reflect.Method:method]	[spoon.support.reflect.declaration.CtFieldImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[]
org.mockito.internal.creation.cglib.ClassImposterizer	Expression	class spoon.support.reflect.code.CtThisAccessImpl	1218:1221	35:35	this	[]	[]	[spoon.support.reflect.code.CtFieldWriteImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.declaration.CtConstructorImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.internal.creation.instance.Instantiator	Expression	class spoon.support.reflect.code.CtFieldWriteImpl	1218:1234	35:35	this.instantiator	[]	[org.mockito.internal.creation.instance.Instantiator:instantiator]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.declaration.CtConstructorImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.internal.creation.instance.Instantiator	Expression	class spoon.support.reflect.code.CtVariableReadImpl	1238:1249	35:35	instantiator	[]	[org.mockito.internal.creation.instance.Instantiator:instantiator]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.declaration.CtConstructorImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl]
CtAssignmentImpl	Statement	class spoon.support.reflect.code.CtAssignmentImpl	1218:1250	35:35	this.instantiator = instantiator	[]	[org.mockito.internal.creation.instance.Instantiator:instantiator]	[spoon.support.reflect.declaration.CtConstructorImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	1827:1837	51:51	"unchecked"	[]	[]	[spoon.support.reflect.declaration.CtAnnotationImpl]	[]
java.lang.SuppressWarnings	Expression	class spoon.support.reflect.declaration.CtAnnotationImpl	1809:1838	51:51	@java.lang.SuppressWarnings("unchecked")	[]	[]	[]	[]
org.mockito.cglib.proxy.MethodInterceptor	Expression	class spoon.support.reflect.code.CtVariableReadImpl	1994:2004	53:53	interceptor	[]	[org.mockito.cglib.proxy.MethodInterceptor:interceptor]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<T>	Expression	class spoon.support.reflect.code.CtVariableReadImpl	2007:2016	53:53	mockedType	[]	[java.lang.Class<T>:mockedType]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.util.Collection<java.lang.Class>	Expression	class spoon.support.reflect.code.CtVariableReadImpl	2019:2032	53:53	ancillaryTypes	[]	[java.util.Collection<java.lang.Class>:ancillaryTypes]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.util.Collection<java.lang.Class>	Expression	class spoon.support.reflect.code.CtVariableReadImpl	2052:2065	53:53	ancillaryTypes	[]	[java.util.Collection<java.lang.Class>:ancillaryTypes]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtNewArrayImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	1713:1715	46:46	int	[]	[]	[spoon.support.reflect.reference.CtExecutableReferenceImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtNewArrayImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
int	Expression	class spoon.support.reflect.code.CtInvocationImpl	2052:2072	53:53	ancillaryTypes.size()	[int:size]	[java.util.Collection<java.lang.Class>:ancillaryTypes]	[spoon.support.reflect.code.CtNewArrayImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class[]	Expression	class spoon.support.reflect.code.CtNewArrayImpl	2042:2073	53:53	new java.lang.Class[ancillaryTypes.size()]	[int:size]	[java.util.Collection<java.lang.Class>:ancillaryTypes]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class[]	Expression	class spoon.support.reflect.code.CtInvocationImpl	2019:2074	53:53	ancillaryTypes.toArray(new java.lang.Class[ancillaryTypes.size()])	[int:size, java.lang.Class[]:toArray]	[java.util.Collection<java.lang.Class>:ancillaryTypes]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Object	Expression	class spoon.support.reflect.code.CtInvocationImpl	1982:2075	53:53	(T) (imposterise(interceptor, mockedType, ancillaryTypes.toArray(new java.lang.Class[ancillaryTypes.size()])))	[int:size, java.lang.Class[]:toArray]	[org.mockito.cglib.proxy.MethodInterceptor:interceptor, java.lang.Class<T>:mockedType, java.util.Collection<java.lang.Class>:ancillaryTypes]	[spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtReturnImpl	Statement	class spoon.support.reflect.code.CtReturnImpl	1971:2076	53:53	return ((T) (imposterise(interceptor, mockedType, ancillaryTypes.toArray(new java.lang.Class[ancillaryTypes.size()]))))	[int:size, java.lang.Class[]:toArray]	[org.mockito.cglib.proxy.MethodInterceptor:interceptor, java.lang.Class<T>:mockedType, java.util.Collection<java.lang.Class>:ancillaryTypes]	[]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
<nulltype>	Expression	class spoon.support.reflect.code.CtLiteralImpl	2238:2241	57:57	null	[]	[]	[spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtLocalVariableImpl	Statement	class spoon.support.reflect.code.CtLocalVariableImpl	2210:2242	57:57	java.lang.Class<org.mockito.cglib.proxy.Factory> proxyClass = null	[]	[]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
<nulltype>	Expression	class spoon.support.reflect.code.CtLiteralImpl	2275:2278	58:58	null	[]	[]	[spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtLocalVariableImpl	Statement	class spoon.support.reflect.code.CtLocalVariableImpl	2252:2279	58:58	java.lang.Object proxyInstance = null	[]	[]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<T>	Expression	class spoon.support.reflect.code.CtVariableReadImpl	2333:2342	60:60	mockedType	[]	[java.lang.Class<T>:mockedType]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtLiteralImpl	2345:2348	60:60	true	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
void	Expression	class spoon.support.reflect.code.CtInvocationImpl	2307:2350	60:60	setConstructorsAccessible(mockedType, true)	[void:setConstructorsAccessible]	[java.lang.Class<T>:mockedType]	[spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<org.mockito.cglib.proxy.Factory>	Expression	class spoon.support.reflect.code.CtVariableWriteImpl	2364:2373	61:61	proxyClass	[]	[java.lang.Class<org.mockito.cglib.proxy.Factory>:proxyClass]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<T>	Expression	class spoon.support.reflect.code.CtVariableReadImpl	2394:2403	61:61	mockedType	[]	[java.lang.Class<T>:mockedType]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<?>[]	Expression	class spoon.support.reflect.code.CtVariableReadImpl	2406:2419	61:61	ancillaryTypes	[]	[java.lang.Class<?>[]:ancillaryTypes]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<org.mockito.cglib.proxy.Factory>	Expression	class spoon.support.reflect.code.CtInvocationImpl	2377:2420	61:61	createProxyClass(mockedType, ancillaryTypes)	[java.lang.Class<org.mockito.cglib.proxy.Factory>:createProxyClass]	[java.lang.Class<?>[]:ancillaryTypes, java.lang.Class<T>:mockedType]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtAssignmentImpl	Statement	class spoon.support.reflect.code.CtAssignmentImpl	2364:2421	61:61	proxyClass = createProxyClass(mockedType, ancillaryTypes)	[java.lang.Class<org.mockito.cglib.proxy.Factory>:createProxyClass]	[java.lang.Class<?>[]:ancillaryTypes, java.lang.Class<org.mockito.cglib.proxy.Factory>:proxyClass, java.lang.Class<T>:mockedType]	[spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Object	Expression	class spoon.support.reflect.code.CtVariableWriteImpl	2435:2447	62:62	proxyInstance	[]	[java.lang.Object:proxyInstance]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<org.mockito.cglib.proxy.Factory>	Expression	class spoon.support.reflect.code.CtVariableReadImpl	2463:2472	62:62	proxyClass	[]	[java.lang.Class<org.mockito.cglib.proxy.Factory>:proxyClass]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.cglib.proxy.MethodInterceptor	Expression	class spoon.support.reflect.code.CtVariableReadImpl	2475:2485	62:62	interceptor	[]	[org.mockito.cglib.proxy.MethodInterceptor:interceptor]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Object	Expression	class spoon.support.reflect.code.CtInvocationImpl	2451:2486	62:62	createProxy(proxyClass, interceptor)	[java.lang.Object:createProxy]	[java.lang.Class<org.mockito.cglib.proxy.Factory>:proxyClass, org.mockito.cglib.proxy.MethodInterceptor:interceptor]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtAssignmentImpl	Statement	class spoon.support.reflect.code.CtAssignmentImpl	2435:2487	62:62	proxyInstance = createProxy(proxyClass, interceptor)	[java.lang.Object:createProxy]	[java.lang.Object:proxyInstance, java.lang.Class<org.mockito.cglib.proxy.Factory>:proxyClass, org.mockito.cglib.proxy.MethodInterceptor:interceptor]	[spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<T>	Expression	class spoon.support.reflect.code.CtVariableReadImpl	2508:2517	63:63	mockedType	[]	[java.lang.Class<T>:mockedType]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Object	Expression	class spoon.support.reflect.code.CtVariableReadImpl	2524:2536	63:63	proxyInstance	[]	[java.lang.Object:proxyInstance]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
T	Expression	class spoon.support.reflect.code.CtInvocationImpl	2508:2537	63:63	mockedType.cast(proxyInstance)	[T:cast]	[java.lang.Object:proxyInstance, java.lang.Class<T>:mockedType]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtReturnImpl	Statement	class spoon.support.reflect.code.CtReturnImpl	2501:2538	63:63	return mockedType.cast(proxyInstance)	[T:cast]	[java.lang.Object:proxyInstance, java.lang.Class<T>:mockedType]	[spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	2644:2707	66:66	"ClassCastException occurred while creating the mockito proxy :"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	2726:2745	67:67	"  class to mock : "	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<T>	Expression	class spoon.support.reflect.code.CtVariableReadImpl	2763:2772	67:67	mockedType	[]	[java.lang.Class<T>:mockedType]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtInvocationImpl	2749:2773	67:67	org.mockito.internal.creation.cglib.ClassImposterizer.describeClass(mockedType)	[java.lang.String:describeClass]	[java.lang.Class<T>:mockedType]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	2726:2773	67:67	"  class to mock : " + (org.mockito.internal.creation.cglib.ClassImposterizer.describeClass(mockedType))	[java.lang.String:describeClass]	[java.lang.Class<T>:mockedType]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	2792:2811	68:68	"  created class : "	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<org.mockito.cglib.proxy.Factory>	Expression	class spoon.support.reflect.code.CtVariableReadImpl	2829:2838	68:68	proxyClass	[]	[java.lang.Class<org.mockito.cglib.proxy.Factory>:proxyClass]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtInvocationImpl	2815:2839	68:68	org.mockito.internal.creation.cglib.ClassImposterizer.describeClass(proxyClass)	[java.lang.String:describeClass]	[java.lang.Class<org.mockito.cglib.proxy.Factory>:proxyClass]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	2792:2839	68:68	"  created class : " + (org.mockito.internal.creation.cglib.ClassImposterizer.describeClass(proxyClass))	[java.lang.String:describeClass]	[java.lang.Class<org.mockito.cglib.proxy.Factory>:proxyClass]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	2858:2884	69:69	"  proxy instance class : "	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Object	Expression	class spoon.support.reflect.code.CtVariableReadImpl	2902:2914	69:69	proxyInstance	[]	[java.lang.Object:proxyInstance]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtInvocationImpl	2888:2915	69:69	org.mockito.internal.creation.cglib.ClassImposterizer.describeClass(proxyInstance)	[java.lang.String:describeClass]	[java.lang.Object:proxyInstance]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	2858:2915	69:69	"  proxy instance class : " + (org.mockito.internal.creation.cglib.ClassImposterizer.describeClass(proxyInstance))	[java.lang.String:describeClass]	[java.lang.Object:proxyInstance]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	2934:2960	70:70	"  instance creation by : "	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.internal.creation.instance.Instantiator	Expression	class spoon.support.reflect.code.CtFieldReadImpl	2964:2975	70:70	instantiator	[]	[org.mockito.internal.creation.instance.Instantiator:instantiator]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	2964:2986	70:70	instantiator.getClass()	[:getClass]	[org.mockito.internal.creation.instance.Instantiator:instantiator]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	2964:3002	70:70	instantiator.getClass().getSimpleName()	[:getClass]	[org.mockito.internal.creation.instance.Instantiator:instantiator]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	2934:3002	70:70	"  instance creation by : " + (instantiator.getClass().getSimpleName())	[:getClass]	[org.mockito.internal.creation.instance.Instantiator:instantiator]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	3021:3022	71:71	""	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	3041:3153	72:72	"You might experience classloading issues, disabling the Objenesis cache *might* help (see MockitoConfiguration)"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	2622:3167	65:73	join("ClassCastException occurred while creating the mockito proxy :", ("  class to mock : " + (org.mockito.internal.creation.cglib.ClassImposterizer.describeClass(mockedType))), ("  created class : " + (org.mockito.internal.creation.cglib.ClassImposterizer.describeClass(proxyClass))), ("  proxy instance class : " + (org.mockito.internal.creation.cglib.ClassImposterizer.describeClass(proxyInstance))), ("  instance creation by : " + (instantiator.getClass().getSimpleName())), "", "You might experience classloading issues, disabling the Objenesis cache *might* help (see MockitoConfiguration)")	[:getClass, java.lang.String:describeClass, :join]	[java.lang.Object:proxyInstance, java.lang.Class<org.mockito.cglib.proxy.Factory>:proxyClass, java.lang.Class<T>:mockedType, org.mockito.internal.creation.instance.Instantiator:instantiator]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.ClassCastException	Expression	class spoon.support.reflect.code.CtVariableReadImpl	3170:3172	73:73	cce	[]	[java.lang.ClassCastException:cce]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.base.MockitoException	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	2601:3173	65:73	new org.mockito.exceptions.base.MockitoException(join("ClassCastException occurred while creating the mockito proxy :", ("  class to mock : " + (org.mockito.internal.creation.cglib.ClassImposterizer.describeClass(mockedType))), ("  created class : " + (org.mockito.internal.creation.cglib.ClassImposterizer.describeClass(proxyClass))), ("  proxy instance class : " + (org.mockito.internal.creation.cglib.ClassImposterizer.describeClass(proxyInstance))), ("  instance creation by : " + (instantiator.getClass().getSimpleName())), "", "You might experience classloading issues, disabling the Objenesis cache *might* help (see MockitoConfiguration)"), cce)	[:getClass, java.lang.String:describeClass, :join]	[java.lang.ClassCastException:cce, java.lang.Object:proxyInstance, java.lang.Class<org.mockito.cglib.proxy.Factory>:proxyClass, java.lang.Class<T>:mockedType, org.mockito.internal.creation.instance.Instantiator:instantiator]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	2595:3174	65:73	throw new org.mockito.exceptions.base.MockitoException(join("ClassCastException occurred while creating the mockito proxy :", ("  class to mock : " + (org.mockito.internal.creation.cglib.ClassImposterizer.describeClass(mockedType))), ("  created class : " + (org.mockito.internal.creation.cglib.ClassImposterizer.describeClass(proxyClass))), ("  proxy instance class : " + (org.mockito.internal.creation.cglib.ClassImposterizer.describeClass(proxyInstance))), ("  instance creation by : " + (instantiator.getClass().getSimpleName())), "", "You might experience classloading issues, disabling the Objenesis cache *might* help (see MockitoConfiguration)"), cce)	[:getClass, java.lang.String:describeClass, :join]	[java.lang.ClassCastException:cce, java.lang.Object:proxyInstance, java.lang.Class<org.mockito.cglib.proxy.Factory>:proxyClass, java.lang.Class<T>:mockedType, org.mockito.internal.creation.instance.Instantiator:instantiator]	[spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<T>	Expression	class spoon.support.reflect.code.CtVariableReadImpl	3234:3243	75:75	mockedType	[]	[java.lang.Class<T>:mockedType]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtLiteralImpl	3246:3250	75:75	false	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtInvocationImpl]
void	Expression	class spoon.support.reflect.code.CtInvocationImpl	3208:3252	75:75	setConstructorsAccessible(mockedType, false)	[void:setConstructorsAccessible]	[java.lang.Class<T>:mockedType]	[spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtInvocationImpl]
CtTryImpl	Statement	class spoon.support.reflect.code.CtTryImpl	2289:3262	59:76	try {    setConstructorsAccessible(mockedType, true);    proxyClass = createProxyClass(mockedType, ancillaryTypes);    proxyInstance = createProxy(proxyClass, interceptor);    return mockedType.cast(proxyInstance);} catch (java.lang.ClassCastException cce) {    throw new org.mockito.exceptions.base.MockitoException(join("ClassCastException occurred while creating the mockito proxy :", ("  class to mock : " + (org.mockito.internal.creation.cglib.ClassImposterizer.describeClass(mockedType))), ("  created class : " + (org.mockito.internal.creation.cglib.ClassImposterizer.describeClass(proxyClass))), ("  proxy instance class : " + (org.mockito.internal.creation.cglib.ClassImposterizer.describeClass(proxyInstance))), ("  instance creation by : " + (instantiator.getClass().getSimpleName())), "", "You might experience classloading issues, disabling the Objenesis cache *might* help (see MockitoConfiguration)"), cce);} finally {    setConstructorsAccessible(mockedType, false);}	[void:setConstructorsAccessible, java.lang.Class<org.mockito.cglib.proxy.Factory>:createProxyClass, T:cast, java.lang.Object:createProxy, :getClass, java.lang.String:describeClass, :join]	[java.lang.Class<?>[]:ancillaryTypes, java.lang.ClassCastException:cce, java.lang.Object:proxyInstance, java.lang.Class<org.mockito.cglib.proxy.Factory>:proxyClass, java.lang.Class<T>:mockedType, org.mockito.cglib.proxy.MethodInterceptor:interceptor, org.mockito.internal.creation.instance.Instantiator:instantiator]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class	Expression	class spoon.support.reflect.code.CtVariableReadImpl	3340:3343	80:80	type	[]	[java.lang.Class:type]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConditionalImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
<nulltype>	Expression	class spoon.support.reflect.code.CtLiteralImpl	3348:3351	80:80	null	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConditionalImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	3340:3351	80:80	type == null	[]	[java.lang.Class:type]	[spoon.support.reflect.code.CtConditionalImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	3354:3359	80:80	"null"	[]	[]	[spoon.support.reflect.code.CtConditionalImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	3363:3365	80:80	"'"	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConditionalImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class	Expression	class spoon.support.reflect.code.CtVariableReadImpl	3369:3372	80:80	type	[]	[java.lang.Class:type]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConditionalImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtInvocationImpl	3369:3391	80:80	type.getCanonicalName()	[java.lang.String:getCanonicalName]	[java.lang.Class:type]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConditionalImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	3363:3391	80:80	"'" + (type.getCanonicalName())	[java.lang.String:getCanonicalName]	[java.lang.Class:type]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConditionalImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	3395:3424	80:80	"', loaded by classloader : '"	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConditionalImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	3363:3424	80:80	("'" + (type.getCanonicalName())) + "', loaded by classloader : '"	[java.lang.String:getCanonicalName]	[java.lang.Class:type]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConditionalImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class	Expression	class spoon.support.reflect.code.CtVariableReadImpl	3428:3431	80:80	type	[]	[java.lang.Class:type]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConditionalImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.ClassLoader	Expression	class spoon.support.reflect.code.CtInvocationImpl	3428:3448	80:80	type.getClassLoader()	[java.lang.ClassLoader:getClassLoader]	[java.lang.Class:type]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConditionalImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	3363:3448	80:80	(("'" + (type.getCanonicalName())) + "', loaded by classloader : '") + (type.getClassLoader())	[java.lang.ClassLoader:getClassLoader, java.lang.String:getCanonicalName]	[java.lang.Class:type]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConditionalImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	3452:3454	80:80	"'"	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConditionalImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	3363:3454	80:80	((("'" + (type.getCanonicalName())) + "', loaded by classloader : '") + (type.getClassLoader())) + "'"	[java.lang.ClassLoader:getClassLoader, java.lang.String:getCanonicalName]	[java.lang.Class:type]	[spoon.support.reflect.code.CtConditionalImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtConditionalImpl	3340:3454	80:80	type == null ? "null" : ((("'" + (type.getCanonicalName())) + "', loaded by classloader : '") + (type.getClassLoader())) + "'"	[java.lang.ClassLoader:getClassLoader, java.lang.String:getCanonicalName]	[java.lang.Class:type]	[spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtReturnImpl	Statement	class spoon.support.reflect.code.CtReturnImpl	3333:3455	80:80	return type == null ? "null" : ((("'" + (type.getCanonicalName())) + "', loaded by classloader : '") + (type.getClassLoader())) + "'"	[java.lang.ClassLoader:getClassLoader, java.lang.String:getCanonicalName]	[java.lang.Class:type]	[]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Object	Expression	class spoon.support.reflect.code.CtVariableReadImpl	3538:3545	84:84	instance	[]	[java.lang.Object:instance]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConditionalImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
<nulltype>	Expression	class spoon.support.reflect.code.CtLiteralImpl	3550:3553	84:84	null	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConditionalImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	3538:3553	84:84	instance == null	[]	[java.lang.Object:instance]	[spoon.support.reflect.code.CtConditionalImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	3556:3561	84:84	"null"	[]	[]	[spoon.support.reflect.code.CtConditionalImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Object	Expression	class spoon.support.reflect.code.CtVariableReadImpl	3579:3586	84:84	instance	[]	[java.lang.Object:instance]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConditionalImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<? extends java.lang.Object>	Expression	class spoon.support.reflect.code.CtInvocationImpl	3579:3597	84:84	instance.getClass()	[java.lang.Class<? extends java.lang.Object>:getClass]	[java.lang.Object:instance]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConditionalImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtInvocationImpl	3565:3598	84:84	org.mockito.internal.creation.cglib.ClassImposterizer.describeClass(instance.getClass())	[java.lang.Class<? extends java.lang.Object>:getClass, java.lang.String:describeClass]	[java.lang.Object:instance]	[spoon.support.reflect.code.CtConditionalImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtConditionalImpl	3538:3598	84:84	instance == null ? "null" : org.mockito.internal.creation.cglib.ClassImposterizer.describeClass(instance.getClass())	[java.lang.Class<? extends java.lang.Object>:getClass, java.lang.String:describeClass]	[java.lang.Object:instance]	[spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtReturnImpl	Statement	class spoon.support.reflect.code.CtReturnImpl	3531:3599	84:84	return instance == null ? "null" : org.mockito.internal.creation.cglib.ClassImposterizer.describeClass(instance.getClass())	[java.lang.Class<? extends java.lang.Object>:getClass, java.lang.String:describeClass]	[java.lang.Object:instance]	[]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtLocalVariableImpl	Statement	class spoon.support.reflect.code.CtLocalVariableImpl	3750:3814	89:89	java.lang.reflect.Constructor<?> constructor	[]	[]	[spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<?>	Expression	class spoon.support.reflect.code.CtVariableReadImpl	3779:3788	89:89	mockedType	[]	[java.lang.Class<?>:mockedType]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.reflect.Constructor<?>[]	Expression	class spoon.support.reflect.code.CtInvocationImpl	3779:3814	89:89	mockedType.getDeclaredConstructors()	[java.lang.reflect.Constructor<?>[]:getDeclaredConstructors]	[java.lang.Class<?>:mockedType]	[spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.reflect.Constructor<?>	Expression	class spoon.support.reflect.code.CtVariableReadImpl	3831:3841	90:90	constructor	[]	[java.lang.reflect.Constructor<?>:constructor]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtVariableReadImpl	3857:3866	90:90	accessible	[]	[boolean:accessible]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtInvocationImpl]
void	Expression	class spoon.support.reflect.code.CtInvocationImpl	3831:3868	90:90	constructor.setAccessible(accessible)	[void:setAccessible]	[boolean:accessible, java.lang.reflect.Constructor<?>:constructor]	[spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtInvocationImpl]
CtForEachImpl	Statement	class spoon.support.reflect.code.CtForEachImpl	3745:3878	89:91	for (java.lang.reflect.Constructor<?> constructor : mockedType.getDeclaredConstructors()) {    constructor.setAccessible(accessible);}	[void:setAccessible, java.lang.reflect.Constructor<?>[]:getDeclaredConstructors]	[java.lang.Class<?>:mockedType, boolean:accessible, java.lang.reflect.Constructor<?>:constructor]	[]	[spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<?>	Expression	class spoon.support.reflect.code.CtVariableReadImpl	3989:3998	95:95	mockedType	[]	[java.lang.Class<?>:mockedType]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class	Expression	class spoon.support.reflect.code.CtFieldReadImpl	4003:4014	95:95	java.lang.Object.class	[]	[java.lang.Class:class]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	3989:4014	95:95	mockedType == (java.lang.Object.class)	[]	[java.lang.Class:class, java.lang.Class<?>:mockedType]	[spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<?>	Expression	class spoon.support.reflect.code.CtVariableWriteImpl	4031:4040	96:96	mockedType	[]	[java.lang.Class<?>:mockedType]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtAssignmentImpl]
java.lang.Class	Expression	class spoon.support.reflect.code.CtFieldReadImpl	4044:4088	96:96	org.mockito.internal.creation.cglib.ClassImposterizer.ClassWithSuperclassToWorkAroundCglibBug.class	[]	[java.lang.Class:class]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtAssignmentImpl]
CtAssignmentImpl	Statement	class spoon.support.reflect.code.CtAssignmentImpl	4031:4089	96:96	mockedType = org.mockito.internal.creation.cglib.ClassImposterizer.ClassWithSuperclassToWorkAroundCglibBug.class	[]	[java.lang.Class:class, java.lang.Class<?>:mockedType]	[spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtAssignmentImpl]
CtIfImpl	Statement	class spoon.support.reflect.code.CtIfImpl	3985:4099	95:97	if (mockedType == (java.lang.Object.class)) {    mockedType = org.mockito.internal.creation.cglib.ClassImposterizer.ClassWithSuperclassToWorkAroundCglibBug.class;}	[]	[java.lang.Class:class, java.lang.Class<?>:mockedType]	[]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Override	Expression	class spoon.support.reflect.declaration.CtAnnotationImpl	4159:4167	100:100	@java.lang.Override	[]	[]	[]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	4199:4209	101:101	"unchecked"	[]	[]	[spoon.support.reflect.declaration.CtAnnotationImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.SuppressWarnings	Expression	class spoon.support.reflect.declaration.CtAnnotationImpl	4181:4210	101:101	@java.lang.SuppressWarnings("unchecked")	[]	[]	[]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.cglib.proxy.Enhancer	Expression	class spoon.support.reflect.code.CtNewClassImpl	4130:4343	99:105	new org.mockito.cglib.proxy.Enhancer() {    @java.lang.Override    @java.lang.SuppressWarnings("unchecked")    protected void filterConstructors(java.lang.Class sc, java.util.List constructors) {    }}	[]	[]	[spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtLocalVariableImpl	Statement	class spoon.support.reflect.code.CtLocalVariableImpl	4110:4344	99:105	org.mockito.cglib.proxy.Enhancer enhancer = new org.mockito.cglib.proxy.Enhancer() {    @java.lang.Override    @java.lang.SuppressWarnings("unchecked")    protected void filterConstructors(java.lang.Class sc, java.util.List constructors) {    }}	[]	[]	[]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<?>	Expression	class spoon.support.reflect.code.CtVariableReadImpl	4390:4399	106:106	mockedType	[]	[java.lang.Class<?>:mockedType]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<?>[]	Expression	class spoon.support.reflect.code.CtVariableReadImpl	4402:4411	106:106	interfaces	[]	[java.lang.Class<?>[]:interfaces]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<?>[]	Expression	class spoon.support.reflect.code.CtInvocationImpl	4382:4412	106:106	prepend(mockedType, interfaces)	[java.lang.Class<?>[]:prepend]	[java.lang.Class<?>:mockedType, java.lang.Class<?>[]:interfaces]	[spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtLocalVariableImpl	Statement	class spoon.support.reflect.code.CtLocalVariableImpl	4354:4413	106:106	java.lang.Class<?>[] allMockedTypes = prepend(mockedType, interfaces)	[java.lang.Class<?>[]:prepend]	[java.lang.Class<?>:mockedType, java.lang.Class<?>[]:interfaces]	[]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.cglib.proxy.Enhancer	Expression	class spoon.support.reflect.code.CtVariableReadImpl	4417:4424	107:107	enhancer	[]	[org.mockito.cglib.proxy.Enhancer:enhancer]	[spoon.support.reflect.code.CtInvocationImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
void	Expression	class spoon.support.reflect.code.CtTypeAccessImpl	4441:4460	107:107	org.mockito.internal.creation.util.SearchingClassLoader	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<?>[]	Expression	class spoon.support.reflect.code.CtVariableReadImpl	4479:4492	107:107	allMockedTypes	[]	[java.lang.Class<?>[]:allMockedTypes]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	4441:4493	107:107	org.mockito.internal.creation.util.SearchingClassLoader.combineLoadersOf(allMockedTypes)	[:combineLoadersOf]	[java.lang.Class<?>[]:allMockedTypes]	[spoon.support.reflect.code.CtInvocationImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	4417:4495	107:107	enhancer.setClassLoader(org.mockito.internal.creation.util.SearchingClassLoader.combineLoadersOf(allMockedTypes))	[:combineLoadersOf, :setClassLoader]	[org.mockito.cglib.proxy.Enhancer:enhancer, java.lang.Class<?>[]:allMockedTypes]	[]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.cglib.proxy.Enhancer	Expression	class spoon.support.reflect.code.CtVariableReadImpl	4505:4512	108:108	enhancer	[]	[org.mockito.cglib.proxy.Enhancer:enhancer]	[spoon.support.reflect.code.CtInvocationImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtLiteralImpl	4528:4531	108:108	true	[]	[]	[spoon.support.reflect.code.CtInvocationImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	4505:4533	108:108	enhancer.setUseFactory(true)	[:setUseFactory]	[org.mockito.cglib.proxy.Enhancer:enhancer]	[]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<?>	Expression	class spoon.support.reflect.code.CtVariableReadImpl	4547:4556	109:109	mockedType	[]	[java.lang.Class<?>:mockedType]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtInvocationImpl	4547:4570	109:109	mockedType.isInterface()	[boolean:isInterface]	[java.lang.Class<?>:mockedType]	[spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.cglib.proxy.Enhancer	Expression	class spoon.support.reflect.code.CtVariableReadImpl	4587:4594	110:110	enhancer	[]	[org.mockito.cglib.proxy.Enhancer:enhancer]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class	Expression	class spoon.support.reflect.code.CtFieldReadImpl	4610:4621	110:110	java.lang.Object.class	[]	[java.lang.Class:class]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	4587:4623	110:110	enhancer.setSuperclass(java.lang.Object.class)	[:setSuperclass]	[org.mockito.cglib.proxy.Enhancer:enhancer, java.lang.Class:class]	[spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.cglib.proxy.Enhancer	Expression	class spoon.support.reflect.code.CtVariableReadImpl	4637:4644	111:111	enhancer	[]	[org.mockito.cglib.proxy.Enhancer:enhancer]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<?>[]	Expression	class spoon.support.reflect.code.CtVariableReadImpl	4660:4673	111:111	allMockedTypes	[]	[java.lang.Class<?>[]:allMockedTypes]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	4637:4675	111:111	enhancer.setInterfaces(allMockedTypes)	[:setInterfaces]	[org.mockito.cglib.proxy.Enhancer:enhancer, java.lang.Class<?>[]:allMockedTypes]	[spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.cglib.proxy.Enhancer	Expression	class spoon.support.reflect.code.CtVariableReadImpl	4706:4713	113:113	enhancer	[]	[org.mockito.cglib.proxy.Enhancer:enhancer]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<?>	Expression	class spoon.support.reflect.code.CtVariableReadImpl	4729:4738	113:113	mockedType	[]	[java.lang.Class<?>:mockedType]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	4706:4740	113:113	enhancer.setSuperclass(mockedType)	[:setSuperclass]	[org.mockito.cglib.proxy.Enhancer:enhancer, java.lang.Class<?>:mockedType]	[spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.cglib.proxy.Enhancer	Expression	class spoon.support.reflect.code.CtVariableReadImpl	4754:4761	114:114	enhancer	[]	[org.mockito.cglib.proxy.Enhancer:enhancer]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<?>[]	Expression	class spoon.support.reflect.code.CtVariableReadImpl	4777:4786	114:114	interfaces	[]	[java.lang.Class<?>[]:interfaces]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	4754:4788	114:114	enhancer.setInterfaces(interfaces)	[:setInterfaces]	[org.mockito.cglib.proxy.Enhancer:enhancer, java.lang.Class<?>[]:interfaces]	[spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtIfImpl	Statement	class spoon.support.reflect.code.CtIfImpl	4543:4798	109:115	if (mockedType.isInterface()) {    enhancer.setSuperclass(java.lang.Object.class);    enhancer.setInterfaces(allMockedTypes);}else {    enhancer.setSuperclass(mockedType);    enhancer.setInterfaces(interfaces);}	[:setSuperclass, boolean:isInterface, :setInterfaces]	[org.mockito.cglib.proxy.Enhancer:enhancer, java.lang.Class:class, java.lang.Class<?>[]:allMockedTypes, java.lang.Class<?>:mockedType, java.lang.Class<?>[]:interfaces]	[]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.cglib.proxy.Enhancer	Expression	class spoon.support.reflect.code.CtVariableReadImpl	4808:4815	116:116	enhancer	[]	[org.mockito.cglib.proxy.Enhancer:enhancer]	[spoon.support.reflect.code.CtInvocationImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class	Expression	class spoon.support.reflect.code.CtFieldReadImpl	4846:4868	116:116	org.mockito.cglib.proxy.MethodInterceptor.class	[]	[java.lang.Class:class]	[spoon.support.reflect.code.CtNewArrayImpl, spoon.support.reflect.code.CtInvocationImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class	Expression	class spoon.support.reflect.code.CtFieldReadImpl	4871:4880	116:116	org.mockito.cglib.proxy.NoOp.class	[]	[java.lang.Class:class]	[spoon.support.reflect.code.CtNewArrayImpl, spoon.support.reflect.code.CtInvocationImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class[]	Expression	class spoon.support.reflect.code.CtNewArrayImpl	4834:4881	116:116	new java.lang.Class[]{ org.mockito.cglib.proxy.MethodInterceptor.class, org.mockito.cglib.proxy.NoOp.class }	[]	[java.lang.Class:class]	[spoon.support.reflect.code.CtInvocationImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	4808:4883	116:116	enhancer.setCallbackTypes(new java.lang.Class[]{ org.mockito.cglib.proxy.MethodInterceptor.class, org.mockito.cglib.proxy.NoOp.class })	[:setCallbackTypes]	[org.mockito.cglib.proxy.Enhancer:enhancer, java.lang.Class:class]	[]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.cglib.proxy.Enhancer	Expression	class spoon.support.reflect.code.CtVariableReadImpl	4893:4900	117:117	enhancer	[]	[org.mockito.cglib.proxy.Enhancer:enhancer]	[spoon.support.reflect.code.CtInvocationImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.cglib.proxy.CallbackFilter	Expression	class spoon.support.reflect.code.CtFieldReadImpl	4920:4940	117:117	org.mockito.internal.creation.cglib.ClassImposterizer.IGNORE_BRIDGE_METHODS	[]	[org.mockito.cglib.proxy.CallbackFilter:IGNORE_BRIDGE_METHODS]	[spoon.support.reflect.code.CtInvocationImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	4893:4942	117:117	enhancer.setCallbackFilter(org.mockito.internal.creation.cglib.ClassImposterizer.IGNORE_BRIDGE_METHODS)	[:setCallbackFilter]	[org.mockito.cglib.proxy.Enhancer:enhancer, org.mockito.cglib.proxy.CallbackFilter:IGNORE_BRIDGE_METHODS]	[]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<?>	Expression	class spoon.support.reflect.code.CtVariableReadImpl	4956:4965	118:118	mockedType	[]	[java.lang.Class<?>:mockedType]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Object[]	Expression	class spoon.support.reflect.code.CtInvocationImpl	4956:4978	118:118	mockedType.getSigners()	[java.lang.Object[]:getSigners]	[java.lang.Class<?>:mockedType]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
<nulltype>	Expression	class spoon.support.reflect.code.CtLiteralImpl	4983:4986	118:118	null	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	4956:4986	118:118	(mockedType.getSigners()) != null	[java.lang.Object[]:getSigners]	[java.lang.Class<?>:mockedType]	[spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.cglib.proxy.Enhancer	Expression	class spoon.support.reflect.code.CtVariableReadImpl	5003:5010	119:119	enhancer	[]	[org.mockito.cglib.proxy.Enhancer:enhancer]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtInvocationImpl]
org.mockito.cglib.core.NamingPolicy	Expression	class spoon.support.reflect.code.CtFieldReadImpl	5028:5098	119:119	org.mockito.internal.creation.cglib.ClassImposterizer.NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES	[]	[org.mockito.cglib.core.NamingPolicy:NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	5003:5100	119:119	enhancer.setNamingPolicy(org.mockito.internal.creation.cglib.ClassImposterizer.NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES)	[:setNamingPolicy]	[org.mockito.cglib.proxy.Enhancer:enhancer, org.mockito.cglib.core.NamingPolicy:NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES]	[spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtInvocationImpl]
org.mockito.cglib.proxy.Enhancer	Expression	class spoon.support.reflect.code.CtVariableReadImpl	5131:5138	121:121	enhancer	[]	[org.mockito.cglib.proxy.Enhancer:enhancer]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtInvocationImpl]
void	Expression	class spoon.support.reflect.code.CtTypeAccessImpl	5156:5183	121:121	MockitoNamingPolicy.INSTANCE	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	5131:5185	121:121	enhancer.setNamingPolicy(MockitoNamingPolicy.INSTANCE)	[:setNamingPolicy]	[org.mockito.cglib.proxy.Enhancer:enhancer]	[spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtInvocationImpl]
CtIfImpl	Statement	class spoon.support.reflect.code.CtIfImpl	4952:5195	118:122	if ((mockedType.getSigners()) != null) {    enhancer.setNamingPolicy(org.mockito.internal.creation.cglib.ClassImposterizer.NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES);}else {    enhancer.setNamingPolicy(MockitoNamingPolicy.INSTANCE);}	[java.lang.Object[]:getSigners, :setNamingPolicy]	[org.mockito.cglib.proxy.Enhancer:enhancer, java.lang.Class<?>:mockedType, org.mockito.cglib.core.NamingPolicy:NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES]	[]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.cglib.proxy.Enhancer	Expression	class spoon.support.reflect.code.CtVariableReadImpl	5206:5213	124:124	enhancer	[]	[org.mockito.cglib.proxy.Enhancer:enhancer]	[spoon.support.reflect.code.CtInvocationImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
long	Expression	class spoon.support.reflect.code.CtLiteralImpl	5235:5237	124:124	42L	[]	[]	[spoon.support.reflect.code.CtInvocationImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	5206:5239	124:124	enhancer.setSerialVersionUID(42L)	[:setSerialVersionUID]	[org.mockito.cglib.proxy.Enhancer:enhancer]	[]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.cglib.proxy.Enhancer	Expression	class spoon.support.reflect.code.CtVariableReadImpl	5275:5282	127:127	enhancer	[]	[org.mockito.cglib.proxy.Enhancer:enhancer]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<org.mockito.cglib.proxy.Factory>	Expression	class spoon.support.reflect.code.CtInvocationImpl	5275:5296	127:127	enhancer.createClass()	[java.lang.Class<org.mockito.cglib.proxy.Factory>:createClass]	[org.mockito.cglib.proxy.Enhancer:enhancer]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
CtReturnImpl	Statement	class spoon.support.reflect.code.CtReturnImpl	5268:5297	127:127	return enhancer.createClass()	[java.lang.Class<org.mockito.cglib.proxy.Factory>:createClass]	[org.mockito.cglib.proxy.Enhancer:enhancer]	[spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
void	Expression	class spoon.support.reflect.code.CtTypeAccessImpl	5361:5368	129:129	java.lang.reflect.Modifier	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	1713:1715	46:46	int	[]	[]	[spoon.support.reflect.reference.CtExecutableReferenceImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<?>	Expression	class spoon.support.reflect.code.CtVariableReadImpl	5380:5389	129:129	mockedType	[]	[java.lang.Class<?>:mockedType]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	1713:1715	46:46	int	[]	[]	[spoon.support.reflect.reference.CtExecutableReferenceImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
int	Expression	class spoon.support.reflect.code.CtInvocationImpl	5380:5404	129:129	mockedType.getModifiers()	[int:getModifiers]	[java.lang.Class<?>:mockedType]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtInvocationImpl	5361:5405	129:129	java.lang.reflect.Modifier.isPrivate(mockedType.getModifiers())	[int:getModifiers, boolean:isPrivate]	[java.lang.Class<?>:mockedType]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	5453:5456	130:130	"\n"	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	5484:5517	131:131	"Mockito cannot mock this class: "	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	5453:5517	130:131	"\n" + "Mockito cannot mock this class: "	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl]
java.lang.Class<?>	Expression	class spoon.support.reflect.code.CtVariableReadImpl	5521:5530	131:131	mockedType	[]	[java.lang.Class<?>:mockedType]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	5453:5530	130:131	("\n" + "Mockito cannot mock this class: ") + mockedType	[]	[java.lang.Class<?>:mockedType]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	5558:5562	132:132	".\n"	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	5453:5562	130:132	(("\n" + "Mockito cannot mock this class: ") + mockedType) + ".\n"	[]	[java.lang.Class<?>:mockedType]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	5590:5655	133:133	"Most likely it is a private class that is not visible by Mockito"	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	5453:5655	130:133	((("\n" + "Mockito cannot mock this class: ") + mockedType) + ".\n") + "Most likely it is a private class that is not visible by Mockito"	[]	[java.lang.Class<?>:mockedType]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl]
org.mockito.exceptions.base.MockitoException	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	5432:5656	130:133	new org.mockito.exceptions.base.MockitoException((((("\n" + "Mockito cannot mock this class: ") + mockedType) + ".\n") + "Most likely it is a private class that is not visible by Mockito"))	[]	[java.lang.Class<?>:mockedType]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	5426:5657	130:133	throw new org.mockito.exceptions.base.MockitoException((((("\n" + "Mockito cannot mock this class: ") + mockedType) + ".\n") + "Most likely it is a private class that is not visible by Mockito"))	[]	[java.lang.Class<?>:mockedType]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl]
CtIfImpl	Statement	class spoon.support.reflect.code.CtIfImpl	5357:5671	129:134	if (java.lang.reflect.Modifier.isPrivate(mockedType.getModifiers())) {    throw new org.mockito.exceptions.base.MockitoException((((("\n" + "Mockito cannot mock this class: ") + mockedType) + ".\n") + "Most likely it is a private class that is not visible by Mockito"));}	[int:getModifiers, boolean:isPrivate]	[java.lang.Class<?>:mockedType]	[spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	5712:5715	135:135	"\n"	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	5739:5772	136:136	"Mockito cannot mock this class: "	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	5712:5772	135:136	"\n" + "Mockito cannot mock this class: "	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<?>	Expression	class spoon.support.reflect.code.CtVariableReadImpl	5776:5785	136:136	mockedType	[]	[java.lang.Class<?>:mockedType]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	5712:5785	135:136	("\n" + "Mockito cannot mock this class: ") + mockedType	[]	[java.lang.Class<?>:mockedType]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	5809:5812	137:137	"\n"	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	5712:5812	135:137	(("\n" + "Mockito cannot mock this class: ") + mockedType) + "\n"	[]	[java.lang.Class<?>:mockedType]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	5836:5887	138:138	"Mockito can only mock visible & non-final classes."	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	5712:5887	135:138	((("\n" + "Mockito cannot mock this class: ") + mockedType) + "\n") + "Mockito can only mock visible & non-final classes."	[]	[java.lang.Class<?>:mockedType]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	5911:5914	139:139	"\n"	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	5712:5914	135:139	(((("\n" + "Mockito cannot mock this class: ") + mockedType) + "\n") + "Mockito can only mock visible & non-final classes.") + "\n"	[]	[java.lang.Class<?>:mockedType]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	5938:6023	140:140	"If you're not sure why you're getting this error, please report to the mailing list."	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	5712:6023	135:140	((((("\n" + "Mockito cannot mock this class: ") + mockedType) + "\n") + "Mockito can only mock visible & non-final classes.") + "\n") + "If you're not sure why you're getting this error, please report to the mailing list."	[]	[java.lang.Class<?>:mockedType]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.cglib.core.CodeGenerationException	Expression	class spoon.support.reflect.code.CtVariableReadImpl	6026:6026	140:140	e	[]	[org.mockito.cglib.core.CodeGenerationException:e]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.base.MockitoException	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	5691:6027	135:140	new org.mockito.exceptions.base.MockitoException((((((("\n" + "Mockito cannot mock this class: ") + mockedType) + "\n") + "Mockito can only mock visible & non-final classes.") + "\n") + "If you're not sure why you're getting this error, please report to the mailing list."), e)	[]	[org.mockito.cglib.core.CodeGenerationException:e, java.lang.Class<?>:mockedType]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	5685:6028	135:140	throw new org.mockito.exceptions.base.MockitoException((((((("\n" + "Mockito cannot mock this class: ") + mockedType) + "\n") + "Mockito can only mock visible & non-final classes.") + "\n") + "If you're not sure why you're getting this error, please report to the mailing list."), e)	[]	[org.mockito.cglib.core.CodeGenerationException:e, java.lang.Class<?>:mockedType]	[spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtTryImpl	Statement	class spoon.support.reflect.code.CtTryImpl	5250:6038	126:141	try {    return enhancer.createClass();} catch (org.mockito.cglib.core.CodeGenerationException e) {    if (java.lang.reflect.Modifier.isPrivate(mockedType.getModifiers())) {        throw new org.mockito.exceptions.base.MockitoException((((("\n" + "Mockito cannot mock this class: ") + mockedType) + ".\n") + "Most likely it is a private class that is not visible by Mockito"));    }    throw new org.mockito.exceptions.base.MockitoException((((((("\n" + "Mockito cannot mock this class: ") + mockedType) + "\n") + "Mockito can only mock visible & non-final classes.") + "\n") + "If you're not sure why you're getting this error, please report to the mailing list."), e);}	[java.lang.Class<org.mockito.cglib.proxy.Factory>:createClass, int:getModifiers, boolean:isPrivate]	[org.mockito.cglib.proxy.Enhancer:enhancer, org.mockito.cglib.core.CodeGenerationException:e, java.lang.Class<?>:mockedType]	[]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtLocalVariableImpl	Statement	class spoon.support.reflect.code.CtLocalVariableImpl	6152:6165	145:145	org.mockito.cglib.proxy.Factory proxy	[]	[]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.cglib.proxy.Factory	Expression	class spoon.support.reflect.code.CtVariableWriteImpl	6193:6197	147:147	proxy	[]	[org.mockito.cglib.proxy.Factory:proxy]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.internal.creation.instance.Instantiator	Expression	class spoon.support.reflect.code.CtFieldReadImpl	6201:6212	147:147	instantiator	[]	[org.mockito.internal.creation.instance.Instantiator:instantiator]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<org.mockito.cglib.proxy.Factory>	Expression	class spoon.support.reflect.code.CtVariableReadImpl	6226:6235	147:147	proxyClass	[]	[java.lang.Class<org.mockito.cglib.proxy.Factory>:proxyClass]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	6201:6236	147:147	instantiator.newInstance(proxyClass)	[:newInstance]	[java.lang.Class<org.mockito.cglib.proxy.Factory>:proxyClass, org.mockito.internal.creation.instance.Instantiator:instantiator]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl]
CtAssignmentImpl	Statement	class spoon.support.reflect.code.CtAssignmentImpl	6193:6237	147:147	proxy = instantiator.newInstance(proxyClass)	[:newInstance]	[java.lang.Class<org.mockito.cglib.proxy.Factory>:proxyClass, org.mockito.cglib.proxy.Factory:proxy, org.mockito.internal.creation.instance.Instantiator:instantiator]	[spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	6323:6364	149:149	"Unable to create mock instance of type '"	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<org.mockito.cglib.proxy.Factory>	Expression	class spoon.support.reflect.code.CtVariableReadImpl	6368:6377	149:149	proxyClass	[]	[java.lang.Class<org.mockito.cglib.proxy.Factory>:proxyClass]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	6368:6393	149:149	proxyClass.getSuperclass()	[:getSuperclass]	[java.lang.Class<org.mockito.cglib.proxy.Factory>:proxyClass]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	6368:6409	149:149	proxyClass.getSuperclass().getSimpleName()	[:getSuperclass]	[java.lang.Class<org.mockito.cglib.proxy.Factory>:proxyClass]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	6323:6409	149:149	"Unable to create mock instance of type '" + (proxyClass.getSuperclass().getSimpleName())	[:getSuperclass]	[java.lang.Class<org.mockito.cglib.proxy.Factory>:proxyClass]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	6413:6415	149:149	"'"	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	6323:6415	149:149	("Unable to create mock instance of type '" + (proxyClass.getSuperclass().getSimpleName())) + "'"	[:getSuperclass]	[java.lang.Class<org.mockito.cglib.proxy.Factory>:proxyClass]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.InstantiationException	Expression	class spoon.support.reflect.code.CtVariableReadImpl	6418:6418	149:149	e	[]	[java.lang.InstantiationException:e]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.base.MockitoException	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	6302:6419	149:149	new org.mockito.exceptions.base.MockitoException((("Unable to create mock instance of type '" + (proxyClass.getSuperclass().getSimpleName())) + "'"), e)	[:getSuperclass]	[java.lang.Class<org.mockito.cglib.proxy.Factory>:proxyClass, java.lang.InstantiationException:e]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	6296:6420	149:149	throw new org.mockito.exceptions.base.MockitoException((("Unable to create mock instance of type '" + (proxyClass.getSuperclass().getSimpleName())) + "'"), e)	[:getSuperclass]	[java.lang.Class<org.mockito.cglib.proxy.Factory>:proxyClass, java.lang.InstantiationException:e]	[spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtTryImpl	Statement	class spoon.support.reflect.code.CtTryImpl	6175:6430	146:150	try {    proxy = instantiator.newInstance(proxyClass);} catch (java.lang.InstantiationException e) {    throw new org.mockito.exceptions.base.MockitoException((("Unable to create mock instance of type '" + (proxyClass.getSuperclass().getSimpleName())) + "'"), e);}	[:newInstance, :getSuperclass]	[java.lang.Class<org.mockito.cglib.proxy.Factory>:proxyClass, org.mockito.cglib.proxy.Factory:proxy, java.lang.InstantiationException:e, org.mockito.internal.creation.instance.Instantiator:instantiator]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.cglib.proxy.Factory	Expression	class spoon.support.reflect.code.CtVariableReadImpl	6440:6444	151:151	proxy	[]	[org.mockito.cglib.proxy.Factory:proxy]	[spoon.support.reflect.code.CtInvocationImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.cglib.proxy.MethodInterceptor	Expression	class spoon.support.reflect.code.CtVariableReadImpl	6475:6485	151:151	interceptor	[]	[org.mockito.cglib.proxy.MethodInterceptor:interceptor]	[spoon.support.reflect.code.CtNewArrayImpl, spoon.support.reflect.code.CtInvocationImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.internal.creation.cglib.ClassImposterizer	Expression	class spoon.support.reflect.code.CtFieldReadImpl	6488:6525	151:151	SerializableNoOp.SERIALIZABLE_INSTANCE	[]	[org.mockito.internal.creation.cglib.ClassImposterizer:SERIALIZABLE_INSTANCE]	[spoon.support.reflect.code.CtNewArrayImpl, spoon.support.reflect.code.CtInvocationImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.cglib.proxy.Callback[]	Expression	class spoon.support.reflect.code.CtNewArrayImpl	6459:6527	151:151	new org.mockito.cglib.proxy.Callback[]{ interceptor, SerializableNoOp.SERIALIZABLE_INSTANCE }	[]	[org.mockito.internal.creation.cglib.ClassImposterizer:SERIALIZABLE_INSTANCE, org.mockito.cglib.proxy.MethodInterceptor:interceptor]	[spoon.support.reflect.code.CtInvocationImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	6440:6529	151:151	proxy.setCallbacks(new org.mockito.cglib.proxy.Callback[]{ interceptor, SerializableNoOp.SERIALIZABLE_INSTANCE })	[:setCallbacks]	[org.mockito.cglib.proxy.Factory:proxy, org.mockito.internal.creation.cglib.ClassImposterizer:SERIALIZABLE_INSTANCE, org.mockito.cglib.proxy.MethodInterceptor:interceptor]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.cglib.proxy.Factory	Expression	class spoon.support.reflect.code.CtVariableReadImpl	6546:6550	152:152	proxy	[]	[org.mockito.cglib.proxy.Factory:proxy]	[spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtReturnImpl	Statement	class spoon.support.reflect.code.CtReturnImpl	6539:6551	152:152	return proxy	[]	[org.mockito.cglib.proxy.Factory:proxy]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	1713:1715	46:46	int	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtNewArrayImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<?>[]	Expression	class spoon.support.reflect.code.CtVariableReadImpl	6665:6668	156:156	rest	[]	[java.lang.Class<?>[]:rest]	[spoon.support.reflect.code.CtFieldReadImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtNewArrayImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	1713:1715	46:46	int	[]	[]	[spoon.support.reflect.reference.CtFieldReferenceImpl, spoon.support.reflect.code.CtFieldReadImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtNewArrayImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	1713:1715	46:46	int	[]	[]	[spoon.support.reflect.reference.CtFieldReferenceImpl, spoon.support.reflect.code.CtFieldReadImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtNewArrayImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
int	Expression	class spoon.support.reflect.code.CtFieldReadImpl	6665:6675	156:156	rest.length	[]	[int:length, java.lang.Class<?>[]:rest]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtNewArrayImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
int	Expression	class spoon.support.reflect.code.CtLiteralImpl	6677:6677	156:156	1	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtNewArrayImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
int	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	6665:6677	156:156	(rest.length) + 1	[]	[int:length, java.lang.Class<?>[]:rest]	[spoon.support.reflect.code.CtNewArrayImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<?>[]	Expression	class spoon.support.reflect.code.CtNewArrayImpl	6652:6678	156:156	new java.lang.Class<?>[(rest.length) + 1]	[]	[int:length, java.lang.Class<?>[]:rest]	[spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
CtLocalVariableImpl	Statement	class spoon.support.reflect.code.CtLocalVariableImpl	6635:6679	156:156	java.lang.Class<?>[] all = new java.lang.Class<?>[(rest.length) + 1]	[]	[int:length, java.lang.Class<?>[]:rest]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<?>[]	Expression	class spoon.support.reflect.code.CtVariableReadImpl	6689:6691	157:157	all	[]	[java.lang.Class<?>[]:all]	[spoon.support.reflect.code.CtArrayWriteImpl, spoon.support.reflect.code.CtAssignmentImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
int	Expression	class spoon.support.reflect.code.CtLiteralImpl	6693:6693	157:157	0	[]	[]	[spoon.support.reflect.code.CtArrayWriteImpl, spoon.support.reflect.code.CtAssignmentImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<?>	Expression	class spoon.support.reflect.code.CtArrayWriteImpl	6689:6694	157:157	all[0]	[]	[java.lang.Class<?>[]:all]	[spoon.support.reflect.code.CtAssignmentImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<?>	Expression	class spoon.support.reflect.code.CtVariableReadImpl	6698:6702	157:157	first	[]	[java.lang.Class<?>:first]	[spoon.support.reflect.code.CtAssignmentImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
CtAssignmentImpl	Statement	class spoon.support.reflect.code.CtAssignmentImpl	6689:6703	157:157	all[0] = first	[]	[java.lang.Class<?>:first, java.lang.Class<?>[]:all]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
void	Expression	class spoon.support.reflect.code.CtTypeAccessImpl	6713:6718	158:158	java.lang.System	[]	[]	[spoon.support.reflect.code.CtInvocationImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	1713:1715	46:46	int	[]	[]	[spoon.support.reflect.reference.CtExecutableReferenceImpl, spoon.support.reflect.code.CtInvocationImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	1713:1715	46:46	int	[]	[]	[spoon.support.reflect.reference.CtExecutableReferenceImpl, spoon.support.reflect.code.CtInvocationImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	1713:1715	46:46	int	[]	[]	[spoon.support.reflect.reference.CtExecutableReferenceImpl, spoon.support.reflect.code.CtInvocationImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<?>[]	Expression	class spoon.support.reflect.code.CtVariableReadImpl	6730:6733	158:158	rest	[]	[java.lang.Class<?>[]:rest]	[spoon.support.reflect.code.CtInvocationImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
int	Expression	class spoon.support.reflect.code.CtLiteralImpl	6736:6736	158:158	0	[]	[]	[spoon.support.reflect.code.CtInvocationImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<?>[]	Expression	class spoon.support.reflect.code.CtVariableReadImpl	6739:6741	158:158	all	[]	[java.lang.Class<?>[]:all]	[spoon.support.reflect.code.CtInvocationImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
int	Expression	class spoon.support.reflect.code.CtLiteralImpl	6744:6744	158:158	1	[]	[]	[spoon.support.reflect.code.CtInvocationImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<?>[]	Expression	class spoon.support.reflect.code.CtVariableReadImpl	6747:6750	158:158	rest	[]	[java.lang.Class<?>[]:rest]	[spoon.support.reflect.code.CtFieldReadImpl, spoon.support.reflect.code.CtInvocationImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	1713:1715	46:46	int	[]	[]	[spoon.support.reflect.reference.CtFieldReferenceImpl, spoon.support.reflect.code.CtFieldReadImpl, spoon.support.reflect.code.CtInvocationImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	1713:1715	46:46	int	[]	[]	[spoon.support.reflect.reference.CtFieldReferenceImpl, spoon.support.reflect.code.CtFieldReadImpl, spoon.support.reflect.code.CtInvocationImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
int	Expression	class spoon.support.reflect.code.CtFieldReadImpl	6747:6757	158:158	rest.length	[]	[int:length, java.lang.Class<?>[]:rest]	[spoon.support.reflect.code.CtInvocationImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
void	Expression	class spoon.support.reflect.code.CtInvocationImpl	6713:6759	158:158	java.lang.System.arraycopy(rest, 0, all, 1, rest.length)	[void:arraycopy]	[int:length, java.lang.Class<?>[]:rest, java.lang.Class<?>[]:all]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<?>[]	Expression	class spoon.support.reflect.code.CtVariableReadImpl	6776:6778	159:159	all	[]	[java.lang.Class<?>[]:all]	[spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
CtReturnImpl	Statement	class spoon.support.reflect.code.CtReturnImpl	6769:6779	159:159	return all	[]	[java.lang.Class<?>[]:all]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]

java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	1532:1578	42:42	"Checked exception is invalid for this method!"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	1597:1607	43:43	"Invalid: "	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Throwable	Expression	class spoon.support.reflect.code.CtVariableReadImpl	1611:1611	43:43	t	[]	[java.lang.Throwable:t]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	1597:1611	43:43	"Invalid: " + t	[]	[java.lang.Throwable:t]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	1510:1629	41:44	join("Checked exception is invalid for this method!", ("Invalid: " + t))	[:join]	[java.lang.Throwable:t]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.base.MockitoException	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	1489:1630	41:44	new org.mockito.exceptions.base.MockitoException(join("Checked exception is invalid for this method!", ("Invalid: " + t)))	[:join]	[java.lang.Throwable:t]	[spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	1483:1631	41:44	throw new org.mockito.exceptions.base.MockitoException(join("Checked exception is invalid for this method!", ("Invalid: " + t)))	[:join]	[java.lang.Throwable:t]	[]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	1745:1778	49:49	"Cannot stub with null throwable!"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	1723:1796	48:50	join("Cannot stub with null throwable!")	[:join]	[]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.base.MockitoException	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	1702:1797	48:50	new org.mockito.exceptions.base.MockitoException(join("Cannot stub with null throwable!"))	[:join]	[]	[spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	1696:1798	48:50	throw new org.mockito.exceptions.base.MockitoException(join("Cannot stub with null throwable!"))	[:join]	[]	[]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	1932:1967	56:56	"Unfinished stubbing detected here:"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.internal.debugging.Location	Expression	class spoon.support.reflect.code.CtVariableReadImpl	1986:1993	57:57	location	[]	[org.mockito.internal.debugging.Location:location]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	2012:2013	58:58	""	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	2032:2066	59:59	"E.g. thenReturn() may be missing."	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	2085:2115	60:60	"Examples of correct stubbing:"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	2134:2174	61:61	"    when(mock.isOk()).thenReturn(true);"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	2193:2237	62:62	"    when(mock.isOk()).thenThrow(exception);"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	2256:2308	63:63	"    doThrow(exception).when(mock).someVoidMethod();"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	2327:2334	64:64	"Hints:"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	2353:2378	65:65	" 1. missing thenReturn()"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	2397:2463	66:66	" 2. you are trying to stub a final method, you naughty developer!"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	2482:2483	67:67	""	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	1910:2493	55:68	join("Unfinished stubbing detected here:", location, "", "E.g. thenReturn() may be missing.", "Examples of correct stubbing:", "    when(mock.isOk()).thenReturn(true);", "    when(mock.isOk()).thenThrow(exception);", "    doThrow(exception).when(mock).someVoidMethod();", "Hints:", " 1. missing thenReturn()", " 2. you are trying to stub a final method, you naughty developer!", "")	[:join]	[org.mockito.internal.debugging.Location:location]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.UnfinishedStubbingException	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	1878:2494	55:68	new org.mockito.exceptions.UnfinishedStubbingException(join("Unfinished stubbing detected here:", location, "", "E.g. thenReturn() may be missing.", "Examples of correct stubbing:", "    when(mock.isOk()).thenReturn(true);", "    when(mock.isOk()).thenThrow(exception);", "    doThrow(exception).when(mock).someVoidMethod();", "Hints:", " 1. missing thenReturn()", " 2. you are trying to stub a final method, you naughty developer!", ""))	[:join]	[org.mockito.internal.debugging.Location:location]	[spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	1872:2495	55:68	throw new org.mockito.exceptions.UnfinishedStubbingException(join("Unfinished stubbing detected here:", location, "", "E.g. thenReturn() may be missing.", "Examples of correct stubbing:", "    when(mock.isOk()).thenReturn(true);", "    when(mock.isOk()).thenThrow(exception);", "    doThrow(exception).when(mock).someVoidMethod();", "Hints:", " 1. missing thenReturn()", " 2. you are trying to stub a final method, you naughty developer!", ""))	[:join]	[org.mockito.internal.debugging.Location:location]	[]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	2599:2635	73:73	"Incorrect use of API detected here:"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.internal.debugging.Location	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	2654:2667	74:74	new org.mockito.internal.debugging.Location()	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	2686:2687	75:75	""	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	2706:2856	76:76	"You probably stored a reference to OngoingStubbing returned by when() and called stubbing methods like thenReturn() on this reference more than once."	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	2875:2902	77:77	"Examples of correct usage:"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	2921:3000	78:78	"    when(mock.isOk()).thenReturn(true).thenReturn(false).thenThrow(exception);"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	3019:3087	79:79	"    when(mock.isOk()).thenReturn(true, false).thenThrow(exception);"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	3106:3107	80:80	""	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	2577:3117	72:81	join("Incorrect use of API detected here:", new org.mockito.internal.debugging.Location(), "", "You probably stored a reference to OngoingStubbing returned by when() and called stubbing methods like thenReturn() on this reference more than once.", "Examples of correct usage:", "    when(mock.isOk()).thenReturn(true).thenReturn(false).thenThrow(exception);", "    when(mock.isOk()).thenReturn(true, false).thenThrow(exception);", "")	[:join]	[]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.base.MockitoException	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	2556:3118	72:81	new org.mockito.exceptions.base.MockitoException(join("Incorrect use of API detected here:", new org.mockito.internal.debugging.Location(), "", "You probably stored a reference to OngoingStubbing returned by when() and called stubbing methods like thenReturn() on this reference more than once.", "Examples of correct usage:", "    when(mock.isOk()).thenReturn(true).thenReturn(false).thenThrow(exception);", "    when(mock.isOk()).thenReturn(true, false).thenThrow(exception);", ""))	[:join]	[]	[spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	2550:3119	72:81	throw new org.mockito.exceptions.base.MockitoException(join("Incorrect use of API detected here:", new org.mockito.internal.debugging.Location(), "", "You probably stored a reference to OngoingStubbing returned by when() and called stubbing methods like thenReturn() on this reference more than once.", "Examples of correct usage:", "    when(mock.isOk()).thenReturn(true).thenReturn(false).thenThrow(exception);", "    when(mock.isOk()).thenReturn(true, false).thenThrow(exception);", ""))	[:join]	[]	[]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	3245:3316	86:86	"when() requires an argument which has to be 'a method call on a mock'."	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	3335:3348	87:87	"For example:"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	3367:3418	88:88	"    when(mock.getArticles()).thenReturn(articles);"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	3437:3438	89:89	""	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	3457:3497	90:90	"Also, this error might show up because:"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	3516:3582	91:91	"1. you stub either of: final/private/equals()/hashCode() methods."	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	3601:3648	92:92	"   Those methods *cannot* be stubbed/verified."	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	3667:3740	93:93	"2. inside when() you don't call method on mock but on some other object."	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	3759:3760	94:94	""	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	3223:3770	85:95	join("when() requires an argument which has to be 'a method call on a mock'.", "For example:", "    when(mock.getArticles()).thenReturn(articles);", "", "Also, this error might show up because:", "1. you stub either of: final/private/equals()/hashCode() methods.", "   Those methods *cannot* be stubbed/verified.", "2. inside when() you don't call method on mock but on some other object.", "")	[:join]	[]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.MissingMethodInvocationException	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	3186:3771	85:95	new org.mockito.exceptions.MissingMethodInvocationException(join("when() requires an argument which has to be 'a method call on a mock'.", "For example:", "    when(mock.getArticles()).thenReturn(articles);", "", "Also, this error might show up because:", "1. you stub either of: final/private/equals()/hashCode() methods.", "   Those methods *cannot* be stubbed/verified.", "2. inside when() you don't call method on mock but on some other object.", ""))	[:join]	[]	[spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	3180:3772	85:95	throw new org.mockito.exceptions.MissingMethodInvocationException(join("when() requires an argument which has to be 'a method call on a mock'.", "For example:", "    when(mock.getArticles()).thenReturn(articles);", "", "Also, this error might show up because:", "1. you stub either of: final/private/equals()/hashCode() methods.", "   Those methods *cannot* be stubbed/verified.", "2. inside when() you don't call method on mock but on some other object.", ""))	[:join]	[]	[]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	3960:4003	100:100	"Missing method call for verify(mock) here:"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.internal.debugging.Location	Expression	class spoon.support.reflect.code.CtVariableReadImpl	4022:4029	101:101	location	[]	[org.mockito.internal.debugging.Location:location]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	4048:4049	102:102	""	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	4068:4101	103:103	"Example of correct verification:"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	4120:4151	104:104	"    verify(mock).doSomething()"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	4170:4171	105:105	""	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	4190:4294	106:106	"Also, this error might show up because you verify either of: final/private/equals()/hashCode() methods."	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	4313:4357	107:107	"Those methods *cannot* be stubbed/verified."	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	4376:4377	108:108	""	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	3938:4387	99:109	join("Missing method call for verify(mock) here:", location, "", "Example of correct verification:", "    verify(mock).doSomething()", "", "Also, this error might show up because you verify either of: final/private/equals()/hashCode() methods.", "Those methods *cannot* be stubbed/verified.", "")	[:join]	[org.mockito.internal.debugging.Location:location]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.UnfinishedVerificationException	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	3902:4388	99:109	new org.mockito.exceptions.UnfinishedVerificationException(join("Missing method call for verify(mock) here:", location, "", "Example of correct verification:", "    verify(mock).doSomething()", "", "Also, this error might show up because you verify either of: final/private/equals()/hashCode() methods.", "Those methods *cannot* be stubbed/verified.", ""))	[:join]	[org.mockito.internal.debugging.Location:location]	[spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
CtLocalVariableImpl	Statement	class spoon.support.reflect.code.CtLocalVariableImpl	3858:4389	99:109	org.mockito.exceptions.UnfinishedVerificationException exception = new org.mockito.exceptions.UnfinishedVerificationException(join("Missing method call for verify(mock) here:", location, "", "Example of correct verification:", "    verify(mock).doSomething()", "", "Also, this error might show up because you verify either of: final/private/equals()/hashCode() methods.", "Those methods *cannot* be stubbed/verified.", ""))	[:join]	[org.mockito.internal.debugging.Location:location]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.UnfinishedVerificationException	Expression	class spoon.support.reflect.code.CtVariableReadImpl	4406:4414	111:111	exception	[]	[org.mockito.exceptions.UnfinishedVerificationException:exception]	[spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	4400:4415	111:111	throw exception	[]	[org.mockito.exceptions.UnfinishedVerificationException:exception]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	4535:4575	116:116	"Argument passed to verify() is of type "	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class	Expression	class spoon.support.reflect.code.CtVariableReadImpl	4579:4582	116:116	type	[]	[java.lang.Class:type]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtInvocationImpl	4579:4598	116:116	type.getSimpleName()	[java.lang.String:getSimpleName]	[java.lang.Class:type]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	4535:4598	116:116	"Argument passed to verify() is of type " + (type.getSimpleName())	[java.lang.String:getSimpleName]	[java.lang.Class:type]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	4602:4622	116:116	" and is not a mock!"	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	4535:4622	116:116	("Argument passed to verify() is of type " + (type.getSimpleName())) + " and is not a mock!"	[java.lang.String:getSimpleName]	[java.lang.Class:type]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	4641:4688	117:117	"Make sure you place the parenthesis correctly!"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	4707:4750	118:118	"See the examples of correct verifications:"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	4769:4800	119:119	"    verify(mock).someMethod();"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	4819:4861	120:120	"    verify(mock, times(10)).someMethod();"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	4880:4926	121:121	"    verify(mock, atLeastOnce()).someMethod();"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	4513:4936	115:122	join((("Argument passed to verify() is of type " + (type.getSimpleName())) + " and is not a mock!"), "Make sure you place the parenthesis correctly!", "See the examples of correct verifications:", "    verify(mock).someMethod();", "    verify(mock, times(10)).someMethod();", "    verify(mock, atLeastOnce()).someMethod();")	[java.lang.String:getSimpleName, :join]	[java.lang.Class:type]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.NotAMockException	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	4491:4937	115:122	new org.mockito.exceptions.NotAMockException(join((("Argument passed to verify() is of type " + (type.getSimpleName())) + " and is not a mock!"), "Make sure you place the parenthesis correctly!", "See the examples of correct verifications:", "    verify(mock).someMethod();", "    verify(mock, times(10)).someMethod();", "    verify(mock, atLeastOnce()).someMethod();"))	[java.lang.String:getSimpleName, :join]	[java.lang.Class:type]	[spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	4485:4938	115:122	throw new org.mockito.exceptions.NotAMockException(join((("Argument passed to verify() is of type " + (type.getSimpleName())) + " and is not a mock!"), "Make sure you place the parenthesis correctly!", "See the examples of correct verifications:", "    verify(mock).someMethod();", "    verify(mock, times(10)).someMethod();", "    verify(mock, atLeastOnce()).someMethod();"))	[java.lang.String:getSimpleName, :join]	[java.lang.Class:type]	[]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	5053:5111	127:127	"Argument passed to verify() should be a mock but is null!"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	5130:5165	128:128	"Examples of correct verifications:"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	5184:5215	129:129	"    verify(mock).someMethod();"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	5234:5276	130:130	"    verify(mock, times(10)).someMethod();"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	5295:5341	131:131	"    verify(mock, atLeastOnce()).someMethod();"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	5360:5417	132:132	"Also, if you use @Mock annotation don't miss initMocks()"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	5031:5427	126:133	join("Argument passed to verify() should be a mock but is null!", "Examples of correct verifications:", "    verify(mock).someMethod();", "    verify(mock, times(10)).someMethod();", "    verify(mock, atLeastOnce()).someMethod();", "Also, if you use @Mock annotation don't miss initMocks()")	[:join]	[]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.NullInsteadOfMockException	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	5000:5428	126:133	new org.mockito.exceptions.NullInsteadOfMockException(join("Argument passed to verify() should be a mock but is null!", "Examples of correct verifications:", "    verify(mock).someMethod();", "    verify(mock, times(10)).someMethod();", "    verify(mock, atLeastOnce()).someMethod();", "Also, if you use @Mock annotation don't miss initMocks()"))	[:join]	[]	[spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	4994:5429	126:133	throw new org.mockito.exceptions.NullInsteadOfMockException(join("Argument passed to verify() should be a mock but is null!", "Examples of correct verifications:", "    verify(mock).someMethod();", "    verify(mock, times(10)).someMethod();", "    verify(mock, atLeastOnce()).someMethod();", "Also, if you use @Mock annotation don't miss initMocks()"))	[:join]	[]	[]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	5543:5584	138:138	"Argument passed to when() is not a mock!"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	5603:5632	139:139	"Example of correct stubbing:"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	5651:5712	140:140	"    doThrow(new RuntimeException()).when(mock).someMethod();"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	5521:5722	137:141	join("Argument passed to when() is not a mock!", "Example of correct stubbing:", "    doThrow(new RuntimeException()).when(mock).someMethod();")	[:join]	[]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.NotAMockException	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	5499:5723	137:141	new org.mockito.exceptions.NotAMockException(join("Argument passed to when() is not a mock!", "Example of correct stubbing:", "    doThrow(new RuntimeException()).when(mock).someMethod();"))	[:join]	[]	[spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	5493:5724	137:141	throw new org.mockito.exceptions.NotAMockException(join("Argument passed to when() is not a mock!", "Example of correct stubbing:", "    doThrow(new RuntimeException()).when(mock).someMethod();"))	[:join]	[]	[]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	5843:5878	146:146	"Argument passed to when() is null!"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	5897:5926	147:147	"Example of correct stubbing:"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	5945:6006	148:148	"    doThrow(new RuntimeException()).when(mock).someMethod();"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	6025:6082	149:149	"Also, if you use @Mock annotation don't miss initMocks()"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	5821:6092	145:150	join("Argument passed to when() is null!", "Example of correct stubbing:", "    doThrow(new RuntimeException()).when(mock).someMethod();", "Also, if you use @Mock annotation don't miss initMocks()")	[:join]	[]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.NullInsteadOfMockException	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	5790:6093	145:150	new org.mockito.exceptions.NullInsteadOfMockException(join("Argument passed to when() is null!", "Example of correct stubbing:", "    doThrow(new RuntimeException()).when(mock).someMethod();", "Also, if you use @Mock annotation don't miss initMocks()"))	[:join]	[]	[spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	5784:6094	145:150	throw new org.mockito.exceptions.NullInsteadOfMockException(join("Argument passed to when() is null!", "Example of correct stubbing:", "    doThrow(new RuntimeException()).when(mock).someMethod();", "Also, if you use @Mock annotation don't miss initMocks()"))	[:join]	[]	[]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	6226:6255	155:155	"Method requires argument(s)!"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	6274:6315	156:156	"Pass mocks that should be verified, e.g:"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	6334:6382	157:157	"    verifyNoMoreInteractions(mockOne, mockTwo);"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	6401:6447	158:158	"    verifyZeroInteractions(mockOne, mockTwo);"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	6466:6467	159:159	""	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	6204:6485	154:160	join("Method requires argument(s)!", "Pass mocks that should be verified, e.g:", "    verifyNoMoreInteractions(mockOne, mockTwo);", "    verifyZeroInteractions(mockOne, mockTwo);", "")	[:join]	[]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.base.MockitoException	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	6183:6486	154:160	new org.mockito.exceptions.base.MockitoException(join("Method requires argument(s)!", "Pass mocks that should be verified, e.g:", "    verifyNoMoreInteractions(mockOne, mockTwo);", "    verifyZeroInteractions(mockOne, mockTwo);", ""))	[:join]	[]	[spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	6177:6487	154:160	throw new org.mockito.exceptions.base.MockitoException(join("Method requires argument(s)!", "Pass mocks that should be verified, e.g:", "    verifyNoMoreInteractions(mockOne, mockTwo);", "    verifyZeroInteractions(mockOne, mockTwo);", ""))	[:join]	[]	[]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	6611:6645	165:165	"Argument(s) passed is not a mock!"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	6660:6695	166:166	"Examples of correct verifications:"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	6710:6758	167:167	"    verifyNoMoreInteractions(mockOne, mockTwo);"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	6773:6819	168:168	"    verifyZeroInteractions(mockOne, mockTwo);"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	6834:6835	169:169	""	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	6593:6845	164:170	join("Argument(s) passed is not a mock!", "Examples of correct verifications:", "    verifyNoMoreInteractions(mockOne, mockTwo);", "    verifyZeroInteractions(mockOne, mockTwo);", "")	[:join]	[]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.NotAMockException	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	6571:6846	164:170	new org.mockito.exceptions.NotAMockException(join("Argument(s) passed is not a mock!", "Examples of correct verifications:", "    verifyNoMoreInteractions(mockOne, mockTwo);", "    verifyZeroInteractions(mockOne, mockTwo);", ""))	[:join]	[]	[spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	6565:6847	164:170	throw new org.mockito.exceptions.NotAMockException(join("Argument(s) passed is not a mock!", "Examples of correct verifications:", "    verifyNoMoreInteractions(mockOne, mockTwo);", "    verifyZeroInteractions(mockOne, mockTwo);", ""))	[:join]	[]	[]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	6980:7008	175:175	"Argument(s) passed is null!"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	7027:7062	176:176	"Examples of correct verifications:"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	7081:7129	177:177	"    verifyNoMoreInteractions(mockOne, mockTwo);"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	7148:7194	178:178	"    verifyZeroInteractions(mockOne, mockTwo);"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	6958:7204	174:179	join("Argument(s) passed is null!", "Examples of correct verifications:", "    verifyNoMoreInteractions(mockOne, mockTwo);", "    verifyZeroInteractions(mockOne, mockTwo);")	[:join]	[]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.NullInsteadOfMockException	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	6927:7205	174:179	new org.mockito.exceptions.NullInsteadOfMockException(join("Argument(s) passed is null!", "Examples of correct verifications:", "    verifyNoMoreInteractions(mockOne, mockTwo);", "    verifyZeroInteractions(mockOne, mockTwo);"))	[:join]	[]	[spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	6921:7206	174:179	throw new org.mockito.exceptions.NullInsteadOfMockException(join("Argument(s) passed is null!", "Examples of correct verifications:", "    verifyNoMoreInteractions(mockOne, mockTwo);", "    verifyZeroInteractions(mockOne, mockTwo);"))	[:join]	[]	[]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	7327:7361	184:184	"Argument(s) passed is not a mock!"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	7380:7427	185:185	"Pass mocks that require verification in order."	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	7446:7459	186:186	"For example:"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	7478:7527	187:187	"    InOrder inOrder = inOrder(mockOne, mockTwo);"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	7305:7545	183:188	join("Argument(s) passed is not a mock!", "Pass mocks that require verification in order.", "For example:", "    InOrder inOrder = inOrder(mockOne, mockTwo);")	[:join]	[]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.NotAMockException	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	7283:7546	183:188	new org.mockito.exceptions.NotAMockException(join("Argument(s) passed is not a mock!", "Pass mocks that require verification in order.", "For example:", "    InOrder inOrder = inOrder(mockOne, mockTwo);"))	[:join]	[]	[spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	7277:7547	183:188	throw new org.mockito.exceptions.NotAMockException(join("Argument(s) passed is not a mock!", "Pass mocks that require verification in order.", "For example:", "    InOrder inOrder = inOrder(mockOne, mockTwo);"))	[:join]	[]	[]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	7673:7701	193:193	"Argument(s) passed is null!"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	7720:7767	194:194	"Pass mocks that require verification in order."	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	7786:7799	195:195	"For example:"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	7818:7867	196:196	"    InOrder inOrder = inOrder(mockOne, mockTwo);"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	7651:7885	192:197	join("Argument(s) passed is null!", "Pass mocks that require verification in order.", "For example:", "    InOrder inOrder = inOrder(mockOne, mockTwo);")	[:join]	[]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.NullInsteadOfMockException	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	7620:7886	192:197	new org.mockito.exceptions.NullInsteadOfMockException(join("Argument(s) passed is null!", "Pass mocks that require verification in order.", "For example:", "    InOrder inOrder = inOrder(mockOne, mockTwo);"))	[:join]	[]	[spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	7614:7887	192:197	throw new org.mockito.exceptions.NullInsteadOfMockException(join("Argument(s) passed is null!", "Pass mocks that require verification in order.", "For example:", "    InOrder inOrder = inOrder(mockOne, mockTwo);"))	[:join]	[]	[]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	8012:8041	202:202	"Method requires argument(s)!"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	8060:8107	203:203	"Pass mocks that require verification in order."	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	8126:8139	204:204	"For example:"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	8158:8207	205:205	"    InOrder inOrder = inOrder(mockOne, mockTwo);"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	7990:8225	201:206	join("Method requires argument(s)!", "Pass mocks that require verification in order.", "For example:", "    InOrder inOrder = inOrder(mockOne, mockTwo);")	[:join]	[]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.base.MockitoException	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	7969:8226	201:206	new org.mockito.exceptions.base.MockitoException(join("Method requires argument(s)!", "Pass mocks that require verification in order.", "For example:", "    InOrder inOrder = inOrder(mockOne, mockTwo);"))	[:join]	[]	[spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	7963:8227	201:206	throw new org.mockito.exceptions.base.MockitoException(join("Method requires argument(s)!", "Pass mocks that require verification in order.", "For example:", "    InOrder inOrder = inOrder(mockOne, mockTwo);"))	[:join]	[]	[]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	8341:8419	211:211	"InOrder can only verify mocks that were passed in during creation of InOrder."	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	8438:8451	212:212	"For example:"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	8470:8510	213:213	"    InOrder inOrder = inOrder(mockOne);"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	8529:8568	214:214	"    inOrder.verify(mockOne).doStuff();"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	8319:8586	210:215	join("InOrder can only verify mocks that were passed in during creation of InOrder.", "For example:", "    InOrder inOrder = inOrder(mockOne);", "    inOrder.verify(mockOne).doStuff();")	[:join]	[]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.base.MockitoException	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	8298:8587	210:215	new org.mockito.exceptions.base.MockitoException(join("InOrder can only verify mocks that were passed in during creation of InOrder.", "For example:", "    InOrder inOrder = inOrder(mockOne);", "    inOrder.verify(mockOne).doStuff();"))	[:join]	[]	[spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	8292:8588	210:215	throw new org.mockito.exceptions.base.MockitoException(join("InOrder can only verify mocks that were passed in during creation of InOrder.", "For example:", "    InOrder inOrder = inOrder(mockOne);", "    inOrder.verify(mockOne).doStuff();"))	[:join]	[]	[]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	8634:8636	218:218	int	[]	[]	[spoon.support.reflect.declaration.CtParameterImpl]	[]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	8661:8663	218:218	int	[]	[]	[spoon.support.reflect.declaration.CtParameterImpl]	[]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	8760:8794	220:220	"Invalid use of argument matchers!"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	8634:8636	218:218	int	[]	[]	[spoon.support.reflect.reference.CtParameterReferenceImpl, spoon.support.reflect.code.CtVariableReadImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	8634:8636	218:218	int	[]	[]	[spoon.support.reflect.reference.CtExecutableReferenceImpl, spoon.support.reflect.reference.CtParameterReferenceImpl, spoon.support.reflect.code.CtVariableReadImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	8634:8636	218:218	int	[]	[]	[spoon.support.reflect.reference.CtExecutableReferenceImpl, spoon.support.reflect.reference.CtParameterReferenceImpl, spoon.support.reflect.code.CtVariableReadImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
int	Expression	class spoon.support.reflect.code.CtVariableReadImpl	8813:8833	221:221	expectedMatchersCount	[]	[int:expectedMatchersCount]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	8837:8858	221:221	" matchers expected, "	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	8813:8858	221:221	expectedMatchersCount + " matchers expected, "	[]	[int:expectedMatchersCount]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	8634:8636	218:218	int	[]	[]	[spoon.support.reflect.reference.CtParameterReferenceImpl, spoon.support.reflect.code.CtVariableReadImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	8634:8636	218:218	int	[]	[]	[spoon.support.reflect.reference.CtExecutableReferenceImpl, spoon.support.reflect.reference.CtParameterReferenceImpl, spoon.support.reflect.code.CtVariableReadImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	8634:8636	218:218	int	[]	[]	[spoon.support.reflect.reference.CtExecutableReferenceImpl, spoon.support.reflect.reference.CtParameterReferenceImpl, spoon.support.reflect.code.CtVariableReadImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
int	Expression	class spoon.support.reflect.code.CtVariableReadImpl	8862:8882	221:221	recordedMatchersCount	[]	[int:recordedMatchersCount]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	8813:8882	221:221	(expectedMatchersCount + " matchers expected, ") + recordedMatchersCount	[]	[int:expectedMatchersCount, int:recordedMatchersCount]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	8886:8897	221:221	" recorded."	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	8813:8897	221:221	((expectedMatchersCount + " matchers expected, ") + recordedMatchersCount) + " recorded."	[]	[int:expectedMatchersCount, int:recordedMatchersCount]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	8916:8983	222:222	"This exception may occur if matchers are combined with raw values:"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	9002:9019	223:223	"    //incorrect:"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	9038:9083	224:224	"    someMethod(anyObject(), \"raw String\");"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	9102:9170	225:225	"When using matchers, all arguments have to be provided by matchers."	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	9189:9202	226:226	"For example:"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	9221:9236	227:227	"    //correct:"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	9255:9311	228:228	"    someMethod(anyObject(), eq(\"String by matcher\"));"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	9330:9331	229:229	""	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	9350:9396	230:230	"For more info see javadoc for Matchers class."	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	8738:9406	219:231	join("Invalid use of argument matchers!", (((expectedMatchersCount + " matchers expected, ") + recordedMatchersCount) + " recorded."), "This exception may occur if matchers are combined with raw values:", "    //incorrect:", "    someMethod(anyObject(), \"raw String\");", "When using matchers, all arguments have to be provided by matchers.", "For example:", "    //correct:", "    someMethod(anyObject(), eq(\"String by matcher\"));", "", "For more info see javadoc for Matchers class.")	[:join]	[int:expectedMatchersCount, int:recordedMatchersCount]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.InvalidUseOfMatchersException	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	8704:9407	219:231	new org.mockito.exceptions.InvalidUseOfMatchersException(join("Invalid use of argument matchers!", (((expectedMatchersCount + " matchers expected, ") + recordedMatchersCount) + " recorded."), "This exception may occur if matchers are combined with raw values:", "    //incorrect:", "    someMethod(anyObject(), \"raw String\");", "When using matchers, all arguments have to be provided by matchers.", "For example:", "    //correct:", "    someMethod(anyObject(), eq(\"String by matcher\"));", "", "For more info see javadoc for Matchers class."))	[:join]	[int:expectedMatchersCount, int:recordedMatchersCount]	[spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	8698:9408	219:231	throw new org.mockito.exceptions.InvalidUseOfMatchersException(join("Invalid use of argument matchers!", (((expectedMatchersCount + " matchers expected, ") + recordedMatchersCount) + " recorded."), "This exception may occur if matchers are combined with raw values:", "    //incorrect:", "    someMethod(anyObject(), \"raw String\");", "When using matchers, all arguments have to be provided by matchers.", "For example:", "    //correct:", "    someMethod(anyObject(), eq(\"String by matcher\"));", "", "For more info see javadoc for Matchers class."))	[:join]	[int:expectedMatchersCount, int:recordedMatchersCount]	[]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	9542:9577	235:235	"Argument(s) are different! Wanted:"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtVariableReadImpl	9596:9601	236:236	wanted	[]	[java.lang.String:wanted]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.internal.debugging.Location	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	9620:9633	237:237	new org.mockito.internal.debugging.Location()	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	9652:9695	238:238	"Actual invocation has different arguments:"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtVariableReadImpl	9714:9719	239:239	actual	[]	[java.lang.String:actual]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.internal.debugging.Location	Expression	class spoon.support.reflect.code.CtVariableReadImpl	9738:9751	240:240	actualLocation	[]	[org.mockito.internal.debugging.Location:actualLocation]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	9770:9771	241:241	""	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtInvocationImpl	9537:9789	235:242	join("Argument(s) are different! Wanted:", wanted, new org.mockito.internal.debugging.Location(), "Actual invocation has different arguments:", actual, actualLocation, "")	[java.lang.String:join]	[java.lang.String:actual, java.lang.String:wanted, org.mockito.internal.debugging.Location:actualLocation]	[spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtLocalVariableImpl	Statement	class spoon.support.reflect.code.CtLocalVariableImpl	9520:9790	235:242	java.lang.String message = join("Argument(s) are different! Wanted:", wanted, new org.mockito.internal.debugging.Location(), "Actual invocation has different arguments:", actual, actualLocation, "")	[java.lang.String:join]	[java.lang.String:actual, java.lang.String:wanted, org.mockito.internal.debugging.Location:actualLocation]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
void	Expression	class spoon.support.reflect.code.CtTypeAccessImpl	9805:9813	244:244	org.mockito.exceptions.verification.junit.JUnitTool	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtInvocationImpl	9805:9824	244:244	org.mockito.exceptions.verification.junit.JUnitTool.hasJUnit()	[boolean:hasJUnit]	[]	[spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
void	Expression	class spoon.support.reflect.code.CtTypeAccessImpl	9847:9855	245:245	org.mockito.exceptions.verification.junit.JUnitTool	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtVariableReadImpl	9894:9900	245:245	message	[]	[java.lang.String:message]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtVariableReadImpl	9903:9908	245:245	wanted	[]	[java.lang.String:wanted]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtVariableReadImpl	9911:9916	245:245	actual	[]	[java.lang.String:actual]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	9847:9917	245:245	org.mockito.exceptions.verification.junit.JUnitTool.createArgumentsAreDifferentException(message, wanted, actual)	[:createArgumentsAreDifferentException]	[java.lang.String:actual, java.lang.String:wanted, java.lang.String:message]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	9841:9918	245:245	throw org.mockito.exceptions.verification.junit.JUnitTool.createArgumentsAreDifferentException(message, wanted, actual)	[:createArgumentsAreDifferentException]	[java.lang.String:actual, java.lang.String:wanted, java.lang.String:message]	[spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtVariableReadImpl	9981:9987	247:247	message	[]	[java.lang.String:message]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtThrowImpl]
org.mockito.exceptions.ArgumentsAreDifferent	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	9955:9988	247:247	new org.mockito.exceptions.ArgumentsAreDifferent(message)	[]	[java.lang.String:message]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtThrowImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	9949:9989	247:247	throw new org.mockito.exceptions.ArgumentsAreDifferent(message)	[]	[java.lang.String:message]	[spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtThrowImpl]
CtIfImpl	Statement	class spoon.support.reflect.code.CtIfImpl	9801:9999	244:248	if (org.mockito.exceptions.verification.junit.JUnitTool.hasJUnit()) {    throw org.mockito.exceptions.verification.junit.JUnitTool.createArgumentsAreDifferentException(message, wanted, actual);}else {    throw new org.mockito.exceptions.ArgumentsAreDifferent(message);}	[:createArgumentsAreDifferentException, boolean:hasJUnit]	[java.lang.String:actual, java.lang.String:wanted, java.lang.String:message]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.PrintableInvocation	Expression	class spoon.support.reflect.code.CtVariableReadImpl	10145:10150	252:252	wanted	[]	[org.mockito.exceptions.PrintableInvocation:wanted]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtInvocationImpl	10112:10151	252:252	createWantedButNotInvokedMessage(wanted)	[java.lang.String:createWantedButNotInvokedMessage]	[org.mockito.exceptions.PrintableInvocation:wanted]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.WantedButNotInvoked	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	10088:10152	252:252	new org.mockito.exceptions.WantedButNotInvoked(createWantedButNotInvokedMessage(wanted))	[java.lang.String:createWantedButNotInvokedMessage]	[org.mockito.exceptions.PrintableInvocation:wanted]	[spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	10082:10153	252:252	throw new org.mockito.exceptions.WantedButNotInvoked(createWantedButNotInvokedMessage(wanted))	[java.lang.String:createWantedButNotInvokedMessage]	[org.mockito.exceptions.PrintableInvocation:wanted]	[]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
CtLocalVariableImpl	Statement	class spoon.support.reflect.code.CtLocalVariableImpl	10285:10306	256:256	java.lang.String allInvocations	[]	[]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.util.List<? extends org.mockito.exceptions.PrintableInvocation>	Expression	class spoon.support.reflect.code.CtVariableReadImpl	10320:10330	257:257	invocations	[]	[java.util.List<? extends org.mockito.exceptions.PrintableInvocation>:invocations]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtInvocationImpl	10320:10340	257:257	invocations.isEmpty()	[boolean:isEmpty]	[java.util.List<? extends org.mockito.exceptions.PrintableInvocation>:invocations]	[spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtVariableWriteImpl	10357:10370	258:258	allInvocations	[]	[java.lang.String:allInvocations]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtAssignmentImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	10374:10431	258:258	"Actually, there were zero interactions with this mock.\n"	[]	[]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtAssignmentImpl]
CtAssignmentImpl	Statement	class spoon.support.reflect.code.CtAssignmentImpl	10357:10432	258:258	allInvocations = "Actually, there were zero interactions with this mock.\n"	[]	[java.lang.String:allInvocations]	[spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtAssignmentImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	10500:10559	260:260	"\nHowever, there were other interactions with this mock:\n"	[]	[]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.StringBuilder	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	10482:10560	260:260	new java.lang.StringBuilder("\nHowever, there were other interactions with this mock:\n")	[]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtLocalVariableImpl	Statement	class spoon.support.reflect.code.CtLocalVariableImpl	10463:10561	260:260	java.lang.StringBuilder sb = new java.lang.StringBuilder("\nHowever, there were other interactions with this mock:\n")	[]	[]	[spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtLocalVariableImpl	Statement	class spoon.support.reflect.code.CtLocalVariableImpl	10580:10614	261:261	org.mockito.exceptions.PrintableInvocation i	[]	[]	[spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.util.List<? extends org.mockito.exceptions.PrintableInvocation>	Expression	class spoon.support.reflect.code.CtVariableReadImpl	10604:10614	261:261	invocations	[]	[java.util.List<? extends org.mockito.exceptions.PrintableInvocation>:invocations]	[spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.StringBuilder	Expression	class spoon.support.reflect.code.CtVariableReadImpl	10636:10637	262:262	sb	[]	[java.lang.StringBuilder:sb]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.PrintableInvocation	Expression	class spoon.support.reflect.code.CtVariableReadImpl	10646:10646	262:262	i	[]	[org.mockito.exceptions.PrintableInvocation:i]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	10646:10660	262:262	i.getLocation()	[:getLocation]	[org.mockito.exceptions.PrintableInvocation:i]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.StringBuilder	Expression	class spoon.support.reflect.code.CtInvocationImpl	10636:10662	262:262	sb.append(i.getLocation())	[:getLocation, java.lang.StringBuilder:append]	[org.mockito.exceptions.PrintableInvocation:i, java.lang.StringBuilder:sb]	[spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.StringBuilder	Expression	class spoon.support.reflect.code.CtVariableReadImpl	10681:10682	263:263	sb	[]	[java.lang.StringBuilder:sb]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	10691:10694	263:263	"\n"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.StringBuilder	Expression	class spoon.support.reflect.code.CtInvocationImpl	10681:10696	263:263	sb.append("\n")	[java.lang.StringBuilder:append]	[java.lang.StringBuilder:sb]	[spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtForEachImpl	Statement	class spoon.support.reflect.code.CtForEachImpl	10575:10710	261:264	for (org.mockito.exceptions.PrintableInvocation i : invocations) {    sb.append(i.getLocation());    sb.append("\n");}	[:getLocation, java.lang.StringBuilder:append]	[org.mockito.exceptions.PrintableInvocation:i, java.util.List<? extends org.mockito.exceptions.PrintableInvocation>:invocations, java.lang.StringBuilder:sb]	[spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtVariableWriteImpl	10724:10737	265:265	allInvocations	[]	[java.lang.String:allInvocations]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.StringBuilder	Expression	class spoon.support.reflect.code.CtVariableReadImpl	10741:10742	265:265	sb	[]	[java.lang.StringBuilder:sb]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtInvocationImpl	10741:10753	265:265	sb.toString()	[java.lang.String:toString]	[java.lang.StringBuilder:sb]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtAssignmentImpl	Statement	class spoon.support.reflect.code.CtAssignmentImpl	10724:10754	265:265	allInvocations = sb.toString()	[java.lang.String:toString]	[java.lang.String:allInvocations, java.lang.StringBuilder:sb]	[spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtIfImpl	Statement	class spoon.support.reflect.code.CtIfImpl	10316:10764	257:266	if (invocations.isEmpty()) {    allInvocations = "Actually, there were zero interactions with this mock.\n";}else {    java.lang.StringBuilder sb = new java.lang.StringBuilder("\nHowever, there were other interactions with this mock:\n");    for (org.mockito.exceptions.PrintableInvocation i : invocations) {        sb.append(i.getLocation());        sb.append("\n");    }    allInvocations = sb.toString();}	[boolean:isEmpty, :getLocation, java.lang.String:toString, java.lang.StringBuilder:append]	[org.mockito.exceptions.PrintableInvocation:i, java.util.List<? extends org.mockito.exceptions.PrintableInvocation>:invocations, java.lang.String:allInvocations, java.lang.StringBuilder:sb]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.PrintableInvocation	Expression	class spoon.support.reflect.code.CtVariableReadImpl	10825:10830	268:268	wanted	[]	[org.mockito.exceptions.PrintableInvocation:wanted]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtInvocationImpl	10792:10831	268:268	createWantedButNotInvokedMessage(wanted)	[java.lang.String:createWantedButNotInvokedMessage]	[org.mockito.exceptions.PrintableInvocation:wanted]	[spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtLocalVariableImpl	Statement	class spoon.support.reflect.code.CtLocalVariableImpl	10775:10832	268:268	java.lang.String message = createWantedButNotInvokedMessage(wanted)	[java.lang.String:createWantedButNotInvokedMessage]	[org.mockito.exceptions.PrintableInvocation:wanted]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtVariableReadImpl	10872:10878	269:269	message	[]	[java.lang.String:message]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtVariableReadImpl	10882:10895	269:269	allInvocations	[]	[java.lang.String:allInvocations]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	10872:10895	269:269	message + allInvocations	[]	[java.lang.String:allInvocations, java.lang.String:message]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.WantedButNotInvoked	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	10848:10896	269:269	new org.mockito.exceptions.WantedButNotInvoked((message + allInvocations))	[]	[java.lang.String:allInvocations, java.lang.String:message]	[spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	10842:10897	269:269	throw new org.mockito.exceptions.WantedButNotInvoked((message + allInvocations))	[]	[java.lang.String:allInvocations, java.lang.String:message]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	11025:11049	274:274	"Wanted but not invoked:"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.PrintableInvocation	Expression	class spoon.support.reflect.code.CtVariableReadImpl	11068:11073	275:275	wanted	[]	[org.mockito.exceptions.PrintableInvocation:wanted]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	11068:11084	275:275	wanted.toString()	[:toString]	[org.mockito.exceptions.PrintableInvocation:wanted]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.internal.debugging.Location	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	11103:11116	276:276	new org.mockito.internal.debugging.Location()	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	11135:11136	277:277	""	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtInvocationImpl	11003:11146	273:278	join("Wanted but not invoked:", wanted.toString(), new org.mockito.internal.debugging.Location(), "")	[:toString, java.lang.String:join]	[org.mockito.exceptions.PrintableInvocation:wanted]	[spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtReturnImpl	Statement	class spoon.support.reflect.code.CtReturnImpl	10996:11147	273:278	return join("Wanted but not invoked:", wanted.toString(), new org.mockito.internal.debugging.Location(), "")	[:toString, java.lang.String:join]	[org.mockito.exceptions.PrintableInvocation:wanted]	[]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	11330:11360	283:283	"Verification in order failure"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	11383:11407	284:284	"Wanted but not invoked:"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.PrintableInvocation	Expression	class spoon.support.reflect.code.CtVariableReadImpl	11430:11435	285:285	wanted	[]	[org.mockito.exceptions.PrintableInvocation:wanted]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	11430:11446	285:285	wanted.toString()	[:toString]	[org.mockito.exceptions.PrintableInvocation:wanted]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.internal.debugging.Location	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	11469:11482	286:286	new org.mockito.internal.debugging.Location()	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	11505:11550	287:287	"Wanted anywhere AFTER following interaction:"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.PrintableInvocation	Expression	class spoon.support.reflect.code.CtVariableReadImpl	11573:11580	288:288	previous	[]	[org.mockito.exceptions.PrintableInvocation:previous]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	11573:11591	288:288	previous.toString()	[:toString]	[org.mockito.exceptions.PrintableInvocation:previous]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.PrintableInvocation	Expression	class spoon.support.reflect.code.CtVariableReadImpl	11614:11621	289:289	previous	[]	[org.mockito.exceptions.PrintableInvocation:previous]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	11614:11635	289:289	previous.getLocation()	[:getLocation]	[org.mockito.exceptions.PrintableInvocation:previous]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	11658:11659	290:290	""	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	11304:11669	282:291	join("Verification in order failure", "Wanted but not invoked:", wanted.toString(), new org.mockito.internal.debugging.Location(), "Wanted anywhere AFTER following interaction:", previous.toString(), previous.getLocation(), "")	[:getLocation, :toString, :join]	[org.mockito.exceptions.PrintableInvocation:previous, org.mockito.exceptions.PrintableInvocation:wanted]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.VerificationInOrderFailure	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	11273:11670	282:291	new org.mockito.exceptions.VerificationInOrderFailure(join("Verification in order failure", "Wanted but not invoked:", wanted.toString(), new org.mockito.internal.debugging.Location(), "Wanted anywhere AFTER following interaction:", previous.toString(), previous.getLocation(), ""))	[:getLocation, :toString, :join]	[org.mockito.exceptions.PrintableInvocation:previous, org.mockito.exceptions.PrintableInvocation:wanted]	[spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	11267:11671	282:291	throw new org.mockito.exceptions.VerificationInOrderFailure(join("Verification in order failure", "Wanted but not invoked:", wanted.toString(), new org.mockito.internal.debugging.Location(), "Wanted anywhere AFTER following interaction:", previous.toString(), previous.getLocation(), ""))	[:getLocation, :toString, :join]	[org.mockito.exceptions.PrintableInvocation:previous, org.mockito.exceptions.PrintableInvocation:wanted]	[]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	11721:11723	294:294	int	[]	[]	[spoon.support.reflect.declaration.CtParameterImpl]	[]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	11738:11740	294:294	int	[]	[]	[spoon.support.reflect.declaration.CtParameterImpl]	[]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	8634:8636	218:218	int	[]	[]	[spoon.support.reflect.reference.CtExecutableReferenceImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	8634:8636	218:218	int	[]	[]	[spoon.support.reflect.reference.CtExecutableReferenceImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	8634:8636	218:218	int	[]	[]	[spoon.support.reflect.reference.CtParameterReferenceImpl, spoon.support.reflect.code.CtVariableReadImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	8634:8636	218:218	int	[]	[]	[spoon.support.reflect.reference.CtExecutableReferenceImpl, spoon.support.reflect.reference.CtParameterReferenceImpl, spoon.support.reflect.code.CtVariableReadImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	8634:8636	218:218	int	[]	[]	[spoon.support.reflect.reference.CtExecutableReferenceImpl, spoon.support.reflect.reference.CtParameterReferenceImpl, spoon.support.reflect.code.CtVariableReadImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
int	Expression	class spoon.support.reflect.code.CtVariableReadImpl	11867:11877	295:295	wantedCount	[]	[int:wantedCount]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	8634:8636	218:218	int	[]	[]	[spoon.support.reflect.reference.CtParameterReferenceImpl, spoon.support.reflect.code.CtVariableReadImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	8634:8636	218:218	int	[]	[]	[spoon.support.reflect.reference.CtExecutableReferenceImpl, spoon.support.reflect.reference.CtParameterReferenceImpl, spoon.support.reflect.code.CtVariableReadImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	8634:8636	218:218	int	[]	[]	[spoon.support.reflect.reference.CtExecutableReferenceImpl, spoon.support.reflect.reference.CtParameterReferenceImpl, spoon.support.reflect.code.CtVariableReadImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
int	Expression	class spoon.support.reflect.code.CtVariableReadImpl	11880:11890	295:295	actualCount	[]	[int:actualCount]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	8634:8636	218:218	int	[]	[]	[spoon.support.reflect.reference.CtExecutableReferenceImpl, spoon.support.reflect.reference.CtParameterReferenceImpl, spoon.support.reflect.code.CtVariableReadImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	8634:8636	218:218	int	[]	[]	[spoon.support.reflect.reference.CtExecutableReferenceImpl, spoon.support.reflect.reference.CtParameterReferenceImpl, spoon.support.reflect.code.CtVariableReadImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.PrintableInvocation	Expression	class spoon.support.reflect.code.CtVariableReadImpl	11893:11898	295:295	wanted	[]	[org.mockito.exceptions.PrintableInvocation:wanted]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	8634:8636	218:218	int	[]	[]	[spoon.support.reflect.reference.CtExecutableReferenceImpl, spoon.support.reflect.reference.CtParameterReferenceImpl, spoon.support.reflect.code.CtVariableReadImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	8634:8636	218:218	int	[]	[]	[spoon.support.reflect.reference.CtExecutableReferenceImpl, spoon.support.reflect.reference.CtParameterReferenceImpl, spoon.support.reflect.code.CtVariableReadImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.internal.debugging.Location	Expression	class spoon.support.reflect.code.CtVariableReadImpl	11901:11914	295:295	firstUndesired	[]	[org.mockito.internal.debugging.Location:firstUndesired]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtInvocationImpl	11835:11915	295:295	createTooManyInvocationsMessage(wantedCount, actualCount, wanted, firstUndesired)	[java.lang.String:createTooManyInvocationsMessage]	[int:wantedCount, org.mockito.internal.debugging.Location:firstUndesired, int:actualCount, org.mockito.exceptions.PrintableInvocation:wanted]	[spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
CtLocalVariableImpl	Statement	class spoon.support.reflect.code.CtLocalVariableImpl	11818:11916	295:295	java.lang.String message = createTooManyInvocationsMessage(wantedCount, actualCount, wanted, firstUndesired)	[java.lang.String:createTooManyInvocationsMessage]	[int:wantedCount, org.mockito.internal.debugging.Location:firstUndesired, int:actualCount, org.mockito.exceptions.PrintableInvocation:wanted]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtVariableReadImpl	11961:11967	296:296	message	[]	[java.lang.String:message]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.TooManyActualInvocations	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	11932:11968	296:296	new org.mockito.exceptions.TooManyActualInvocations(message)	[]	[java.lang.String:message]	[spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	11926:11969	296:296	throw new org.mockito.exceptions.TooManyActualInvocations(message)	[]	[java.lang.String:message]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	12029:12031	299:299	int	[]	[]	[spoon.support.reflect.declaration.CtParameterImpl]	[]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	12046:12048	299:299	int	[]	[]	[spoon.support.reflect.declaration.CtParameterImpl]	[]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	8634:8636	218:218	int	[]	[]	[spoon.support.reflect.reference.CtExecutableReferenceImpl, spoon.support.reflect.reference.CtParameterReferenceImpl, spoon.support.reflect.code.CtVariableReadImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	8634:8636	218:218	int	[]	[]	[spoon.support.reflect.reference.CtExecutableReferenceImpl, spoon.support.reflect.reference.CtParameterReferenceImpl, spoon.support.reflect.code.CtVariableReadImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.PrintableInvocation	Expression	class spoon.support.reflect.code.CtVariableReadImpl	12167:12172	302:302	wanted	[]	[org.mockito.exceptions.PrintableInvocation:wanted]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	12167:12183	302:302	wanted.toString()	[:toString]	[org.mockito.exceptions.PrintableInvocation:wanted]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	12202:12210	303:303	"Wanted "	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
void	Expression	class spoon.support.reflect.code.CtTypeAccessImpl	12214:12223	303:303	org.mockito.exceptions.Pluralizer	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	8634:8636	218:218	int	[]	[]	[spoon.support.reflect.reference.CtExecutableReferenceImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	8634:8636	218:218	int	[]	[]	[spoon.support.reflect.reference.CtParameterReferenceImpl, spoon.support.reflect.code.CtVariableReadImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	8634:8636	218:218	int	[]	[]	[spoon.support.reflect.reference.CtExecutableReferenceImpl, spoon.support.reflect.reference.CtParameterReferenceImpl, spoon.support.reflect.code.CtVariableReadImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	8634:8636	218:218	int	[]	[]	[spoon.support.reflect.reference.CtExecutableReferenceImpl, spoon.support.reflect.reference.CtParameterReferenceImpl, spoon.support.reflect.code.CtVariableReadImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
int	Expression	class spoon.support.reflect.code.CtVariableReadImpl	12235:12245	303:303	wantedCount	[]	[int:wantedCount]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	12214:12246	303:303	org.mockito.exceptions.Pluralizer.pluralize(wantedCount)	[:pluralize]	[int:wantedCount]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	12202:12246	303:303	"Wanted " + (org.mockito.exceptions.Pluralizer.pluralize(wantedCount))	[:pluralize]	[int:wantedCount]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	12250:12252	303:303	":"	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	12202:12252	303:303	("Wanted " + (org.mockito.exceptions.Pluralizer.pluralize(wantedCount))) + ":"	[:pluralize]	[int:wantedCount]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.internal.debugging.Location	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	12271:12284	304:304	new org.mockito.internal.debugging.Location()	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	12303:12312	305:305	"But was "	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	8634:8636	218:218	int	[]	[]	[spoon.support.reflect.reference.CtExecutableReferenceImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	8634:8636	218:218	int	[]	[]	[spoon.support.reflect.reference.CtParameterReferenceImpl, spoon.support.reflect.code.CtVariableReadImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	8634:8636	218:218	int	[]	[]	[spoon.support.reflect.reference.CtExecutableReferenceImpl, spoon.support.reflect.reference.CtParameterReferenceImpl, spoon.support.reflect.code.CtVariableReadImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	8634:8636	218:218	int	[]	[]	[spoon.support.reflect.reference.CtExecutableReferenceImpl, spoon.support.reflect.reference.CtParameterReferenceImpl, spoon.support.reflect.code.CtVariableReadImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
int	Expression	class spoon.support.reflect.code.CtVariableReadImpl	12326:12336	305:305	actualCount	[]	[int:actualCount]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	12316:12337	305:305	org.mockito.exceptions.Pluralizer.pluralize(actualCount)	[:pluralize]	[int:actualCount]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	12303:12337	305:305	"But was " + (org.mockito.exceptions.Pluralizer.pluralize(actualCount))	[:pluralize]	[int:actualCount]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	12341:12365	305:305	". Undesired invocation:"	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	12303:12365	305:305	("But was " + (org.mockito.exceptions.Pluralizer.pluralize(actualCount))) + ". Undesired invocation:"	[:pluralize]	[int:actualCount]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	8634:8636	218:218	int	[]	[]	[spoon.support.reflect.reference.CtExecutableReferenceImpl, spoon.support.reflect.reference.CtParameterReferenceImpl, spoon.support.reflect.code.CtVariableReadImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	8634:8636	218:218	int	[]	[]	[spoon.support.reflect.reference.CtExecutableReferenceImpl, spoon.support.reflect.reference.CtParameterReferenceImpl, spoon.support.reflect.code.CtVariableReadImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.internal.debugging.Location	Expression	class spoon.support.reflect.code.CtVariableReadImpl	12384:12397	306:306	firstUndesired	[]	[org.mockito.internal.debugging.Location:firstUndesired]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	12416:12417	307:307	""	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtInvocationImpl	12145:12427	301:308	join(wanted.toString(), (("Wanted " + (org.mockito.exceptions.Pluralizer.pluralize(wantedCount))) + ":"), new org.mockito.internal.debugging.Location(), (("But was " + (org.mockito.exceptions.Pluralizer.pluralize(actualCount))) + ". Undesired invocation:"), firstUndesired, "")	[:toString, :pluralize, java.lang.String:join]	[int:wantedCount, org.mockito.internal.debugging.Location:firstUndesired, int:actualCount, org.mockito.exceptions.PrintableInvocation:wanted]	[spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtReturnImpl	Statement	class spoon.support.reflect.code.CtReturnImpl	12138:12428	301:308	return join(wanted.toString(), (("Wanted " + (org.mockito.exceptions.Pluralizer.pluralize(wantedCount))) + ":"), new org.mockito.internal.debugging.Location(), (("But was " + (org.mockito.exceptions.Pluralizer.pluralize(actualCount))) + ". Undesired invocation:"), firstUndesired, "")	[:toString, :pluralize, java.lang.String:join]	[int:wantedCount, org.mockito.internal.debugging.Location:firstUndesired, int:actualCount, org.mockito.exceptions.PrintableInvocation:wanted]	[]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.PrintableInvocation	Expression	class spoon.support.reflect.code.CtVariableReadImpl	12592:12597	313:313	wanted	[]	[org.mockito.exceptions.PrintableInvocation:wanted]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	12592:12608	313:313	wanted.toString()	[:toString]	[org.mockito.exceptions.PrintableInvocation:wanted]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	12627:12646	314:314	"Never wanted here:"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.internal.debugging.Location	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	12665:12678	315:315	new org.mockito.internal.debugging.Location()	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	12697:12715	316:316	"But invoked here:"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.internal.debugging.Location	Expression	class spoon.support.reflect.code.CtVariableReadImpl	12734:12747	317:317	firstUndesired	[]	[org.mockito.internal.debugging.Location:firstUndesired]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	12766:12767	318:318	""	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	12570:12777	312:319	join(wanted.toString(), "Never wanted here:", new org.mockito.internal.debugging.Location(), "But invoked here:", firstUndesired, "")	[:toString, :join]	[org.mockito.internal.debugging.Location:firstUndesired, org.mockito.exceptions.PrintableInvocation:wanted]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.NeverWantedButInvoked	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	12544:12778	312:319	new org.mockito.exceptions.NeverWantedButInvoked(join(wanted.toString(), "Never wanted here:", new org.mockito.internal.debugging.Location(), "But invoked here:", firstUndesired, ""))	[:toString, :join]	[org.mockito.internal.debugging.Location:firstUndesired, org.mockito.exceptions.PrintableInvocation:wanted]	[spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	12538:12779	312:319	throw new org.mockito.exceptions.NeverWantedButInvoked(join(wanted.toString(), "Never wanted here:", new org.mockito.internal.debugging.Location(), "But invoked here:", firstUndesired, ""))	[:toString, :join]	[org.mockito.internal.debugging.Location:firstUndesired, org.mockito.exceptions.PrintableInvocation:wanted]	[]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	12836:12838	322:322	int	[]	[]	[spoon.support.reflect.declaration.CtParameterImpl]	[]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	12853:12855	322:322	int	[]	[]	[spoon.support.reflect.declaration.CtParameterImpl]	[]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	8634:8636	218:218	int	[]	[]	[spoon.support.reflect.reference.CtExecutableReferenceImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	8634:8636	218:218	int	[]	[]	[spoon.support.reflect.reference.CtExecutableReferenceImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	8634:8636	218:218	int	[]	[]	[spoon.support.reflect.reference.CtParameterReferenceImpl, spoon.support.reflect.code.CtVariableReadImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	8634:8636	218:218	int	[]	[]	[spoon.support.reflect.reference.CtExecutableReferenceImpl, spoon.support.reflect.reference.CtParameterReferenceImpl, spoon.support.reflect.code.CtVariableReadImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	8634:8636	218:218	int	[]	[]	[spoon.support.reflect.reference.CtExecutableReferenceImpl, spoon.support.reflect.reference.CtParameterReferenceImpl, spoon.support.reflect.code.CtVariableReadImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
int	Expression	class spoon.support.reflect.code.CtVariableReadImpl	12982:12992	323:323	wantedCount	[]	[int:wantedCount]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	8634:8636	218:218	int	[]	[]	[spoon.support.reflect.reference.CtParameterReferenceImpl, spoon.support.reflect.code.CtVariableReadImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	8634:8636	218:218	int	[]	[]	[spoon.support.reflect.reference.CtExecutableReferenceImpl, spoon.support.reflect.reference.CtParameterReferenceImpl, spoon.support.reflect.code.CtVariableReadImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	8634:8636	218:218	int	[]	[]	[spoon.support.reflect.reference.CtExecutableReferenceImpl, spoon.support.reflect.reference.CtParameterReferenceImpl, spoon.support.reflect.code.CtVariableReadImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
int	Expression	class spoon.support.reflect.code.CtVariableReadImpl	12995:13005	323:323	actualCount	[]	[int:actualCount]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	8634:8636	218:218	int	[]	[]	[spoon.support.reflect.reference.CtExecutableReferenceImpl, spoon.support.reflect.reference.CtParameterReferenceImpl, spoon.support.reflect.code.CtVariableReadImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	8634:8636	218:218	int	[]	[]	[spoon.support.reflect.reference.CtExecutableReferenceImpl, spoon.support.reflect.reference.CtParameterReferenceImpl, spoon.support.reflect.code.CtVariableReadImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.PrintableInvocation	Expression	class spoon.support.reflect.code.CtVariableReadImpl	13008:13013	323:323	wanted	[]	[org.mockito.exceptions.PrintableInvocation:wanted]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	8634:8636	218:218	int	[]	[]	[spoon.support.reflect.reference.CtExecutableReferenceImpl, spoon.support.reflect.reference.CtParameterReferenceImpl, spoon.support.reflect.code.CtVariableReadImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	8634:8636	218:218	int	[]	[]	[spoon.support.reflect.reference.CtExecutableReferenceImpl, spoon.support.reflect.reference.CtParameterReferenceImpl, spoon.support.reflect.code.CtVariableReadImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.internal.debugging.Location	Expression	class spoon.support.reflect.code.CtVariableReadImpl	13016:13029	323:323	firstUndesired	[]	[org.mockito.internal.debugging.Location:firstUndesired]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtInvocationImpl	12950:13030	323:323	createTooManyInvocationsMessage(wantedCount, actualCount, wanted, firstUndesired)	[java.lang.String:createTooManyInvocationsMessage]	[int:wantedCount, org.mockito.internal.debugging.Location:firstUndesired, int:actualCount, org.mockito.exceptions.PrintableInvocation:wanted]	[spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtLocalVariableImpl	Statement	class spoon.support.reflect.code.CtLocalVariableImpl	12933:13031	323:323	java.lang.String message = createTooManyInvocationsMessage(wantedCount, actualCount, wanted, firstUndesired)	[java.lang.String:createTooManyInvocationsMessage]	[int:wantedCount, org.mockito.internal.debugging.Location:firstUndesired, int:actualCount, org.mockito.exceptions.PrintableInvocation:wanted]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	13100:13131	325:325	"Verification in order failure:"	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtVariableReadImpl	13135:13141	325:325	message	[]	[java.lang.String:message]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	13100:13141	325:325	"Verification in order failure:" + message	[]	[java.lang.String:message]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	13078:13159	324:326	join(("Verification in order failure:" + message))	[:join]	[java.lang.String:message]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.VerificationInOrderFailure	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	13047:13160	324:326	new org.mockito.exceptions.VerificationInOrderFailure(join(("Verification in order failure:" + message)))	[:join]	[java.lang.String:message]	[spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	13041:13161	324:326	throw new org.mockito.exceptions.VerificationInOrderFailure(join(("Verification in order failure:" + message)))	[:join]	[java.lang.String:message]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.internal.debugging.Location	Expression	class spoon.support.reflect.code.CtVariableReadImpl	13358:13377	332:332	lastActualInvocation	[]	[org.mockito.internal.debugging.Location:lastActualInvocation]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConditionalImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
<nulltype>	Expression	class spoon.support.reflect.code.CtLiteralImpl	13382:13385	332:332	null	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConditionalImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	13357:13386	332:332	lastActualInvocation != null	[]	[org.mockito.internal.debugging.Location:lastActualInvocation]	[spoon.support.reflect.code.CtConditionalImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.internal.debugging.Location	Expression	class spoon.support.reflect.code.CtVariableReadImpl	13389:13408	332:332	lastActualInvocation	[]	[org.mockito.internal.debugging.Location:lastActualInvocation]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConditionalImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	13412:13415	332:332	"\n"	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConditionalImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	13389:13415	332:332	lastActualInvocation + "\n"	[]	[org.mockito.internal.debugging.Location:lastActualInvocation]	[spoon.support.reflect.code.CtConditionalImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	13419:13422	332:332	"\n"	[]	[]	[spoon.support.reflect.code.CtConditionalImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtConditionalImpl	13357:13422	332:332	(lastActualInvocation != null) ? lastActualInvocation + "\n" : "\n"	[]	[org.mockito.internal.debugging.Location:lastActualInvocation]	[spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtLocalVariableImpl	Statement	class spoon.support.reflect.code.CtLocalVariableImpl	13329:13423	331:332	java.lang.String ending = (lastActualInvocation != null) ? lastActualInvocation + "\n" : "\n"	[]	[org.mockito.internal.debugging.Location:lastActualInvocation]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.PrintableInvocation	Expression	class spoon.support.reflect.code.CtVariableReadImpl	13481:13486	335:335	wanted	[]	[org.mockito.exceptions.PrintableInvocation:wanted]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	13481:13497	335:335	wanted.toString()	[:toString]	[org.mockito.exceptions.PrintableInvocation:wanted]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	13520:13528	336:336	"Wanted "	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.Discrepancy	Expression	class spoon.support.reflect.code.CtVariableReadImpl	13532:13542	336:336	discrepancy	[]	[org.mockito.exceptions.Discrepancy:discrepancy]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	13532:13569	336:336	discrepancy.getPluralizedWantedCount()	[:getPluralizedWantedCount]	[org.mockito.exceptions.Discrepancy:discrepancy]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	13520:13569	336:336	"Wanted " + (discrepancy.getPluralizedWantedCount())	[:getPluralizedWantedCount]	[org.mockito.exceptions.Discrepancy:discrepancy]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	13573:13575	336:336	":"	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	13520:13575	336:336	("Wanted " + (discrepancy.getPluralizedWantedCount())) + ":"	[:getPluralizedWantedCount]	[org.mockito.exceptions.Discrepancy:discrepancy]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.internal.debugging.Location	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	13598:13611	337:337	new org.mockito.internal.debugging.Location()	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	13634:13643	338:338	"But was "	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.Discrepancy	Expression	class spoon.support.reflect.code.CtVariableReadImpl	13647:13657	338:338	discrepancy	[]	[org.mockito.exceptions.Discrepancy:discrepancy]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	13647:13684	338:338	discrepancy.getPluralizedActualCount()	[:getPluralizedActualCount]	[org.mockito.exceptions.Discrepancy:discrepancy]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	13634:13684	338:338	"But was " + (discrepancy.getPluralizedActualCount())	[:getPluralizedActualCount]	[org.mockito.exceptions.Discrepancy:discrepancy]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	13688:13690	338:338	":"	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	13634:13690	338:338	("But was " + (discrepancy.getPluralizedActualCount())) + ":"	[:getPluralizedActualCount]	[org.mockito.exceptions.Discrepancy:discrepancy]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtVariableReadImpl	13713:13718	339:339	ending	[]	[java.lang.String:ending]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtInvocationImpl	13455:13732	334:340	join(wanted.toString(), (("Wanted " + (discrepancy.getPluralizedWantedCount())) + ":"), new org.mockito.internal.debugging.Location(), (("But was " + (discrepancy.getPluralizedActualCount())) + ":"), ending)	[:toString, java.lang.String:join, :getPluralizedWantedCount, :getPluralizedActualCount]	[java.lang.String:ending, org.mockito.exceptions.Discrepancy:discrepancy, org.mockito.exceptions.PrintableInvocation:wanted]	[spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtLocalVariableImpl	Statement	class spoon.support.reflect.code.CtLocalVariableImpl	13438:13733	334:340	java.lang.String message = join(wanted.toString(), (("Wanted " + (discrepancy.getPluralizedWantedCount())) + ":"), new org.mockito.internal.debugging.Location(), (("But was " + (discrepancy.getPluralizedActualCount())) + ":"), ending)	[:toString, java.lang.String:join, :getPluralizedWantedCount, :getPluralizedActualCount]	[java.lang.String:ending, org.mockito.exceptions.Discrepancy:discrepancy, org.mockito.exceptions.PrintableInvocation:wanted]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtVariableReadImpl	13754:13760	341:341	message	[]	[java.lang.String:message]	[spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtReturnImpl	Statement	class spoon.support.reflect.code.CtReturnImpl	13747:13761	341:341	return message	[]	[java.lang.String:message]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.Discrepancy	Expression	class spoon.support.reflect.code.CtVariableReadImpl	13956:13966	345:345	discrepancy	[]	[org.mockito.exceptions.Discrepancy:discrepancy]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.PrintableInvocation	Expression	class spoon.support.reflect.code.CtVariableReadImpl	13969:13974	345:345	wanted	[]	[org.mockito.exceptions.PrintableInvocation:wanted]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.internal.debugging.Location	Expression	class spoon.support.reflect.code.CtVariableReadImpl	13977:13994	345:345	lastActualLocation	[]	[org.mockito.internal.debugging.Location:lastActualLocation]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtInvocationImpl	13922:13995	345:345	createTooLittleInvocationsMessage(discrepancy, wanted, lastActualLocation)	[java.lang.String:createTooLittleInvocationsMessage]	[org.mockito.internal.debugging.Location:lastActualLocation, org.mockito.exceptions.Discrepancy:discrepancy, org.mockito.exceptions.PrintableInvocation:wanted]	[spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
CtLocalVariableImpl	Statement	class spoon.support.reflect.code.CtLocalVariableImpl	13905:13996	345:345	java.lang.String message = createTooLittleInvocationsMessage(discrepancy, wanted, lastActualLocation)	[java.lang.String:createTooLittleInvocationsMessage]	[org.mockito.internal.debugging.Location:lastActualLocation, org.mockito.exceptions.Discrepancy:discrepancy, org.mockito.exceptions.PrintableInvocation:wanted]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtVariableReadImpl	14044:14050	347:347	message	[]	[java.lang.String:message]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.TooLittleActualInvocations	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	14013:14051	347:347	new org.mockito.exceptions.TooLittleActualInvocations(message)	[]	[java.lang.String:message]	[spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	14007:14052	347:347	throw new org.mockito.exceptions.TooLittleActualInvocations(message)	[]	[java.lang.String:message]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.Discrepancy	Expression	class spoon.support.reflect.code.CtVariableReadImpl	14254:14264	351:351	discrepancy	[]	[org.mockito.exceptions.Discrepancy:discrepancy]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.PrintableInvocation	Expression	class spoon.support.reflect.code.CtVariableReadImpl	14267:14272	351:351	wanted	[]	[org.mockito.exceptions.PrintableInvocation:wanted]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.internal.debugging.Location	Expression	class spoon.support.reflect.code.CtVariableReadImpl	14275:14292	351:351	lastActualLocation	[]	[org.mockito.internal.debugging.Location:lastActualLocation]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtInvocationImpl	14220:14293	351:351	createTooLittleInvocationsMessage(discrepancy, wanted, lastActualLocation)	[java.lang.String:createTooLittleInvocationsMessage]	[org.mockito.internal.debugging.Location:lastActualLocation, org.mockito.exceptions.Discrepancy:discrepancy, org.mockito.exceptions.PrintableInvocation:wanted]	[spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtLocalVariableImpl	Statement	class spoon.support.reflect.code.CtLocalVariableImpl	14203:14294	351:351	java.lang.String message = createTooLittleInvocationsMessage(discrepancy, wanted, lastActualLocation)	[java.lang.String:createTooLittleInvocationsMessage]	[org.mockito.internal.debugging.Location:lastActualLocation, org.mockito.exceptions.Discrepancy:discrepancy, org.mockito.exceptions.PrintableInvocation:wanted]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	14364:14395	354:354	"Verification in order failure:"	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtVariableReadImpl	14399:14405	354:354	message	[]	[java.lang.String:message]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	14364:14405	354:354	"Verification in order failure:" + message	[]	[java.lang.String:message]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	14342:14423	353:355	join(("Verification in order failure:" + message))	[:join]	[java.lang.String:message]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.VerificationInOrderFailure	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	14311:14424	353:355	new org.mockito.exceptions.VerificationInOrderFailure(join(("Verification in order failure:" + message)))	[:join]	[java.lang.String:message]	[spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	14305:14425	353:355	throw new org.mockito.exceptions.VerificationInOrderFailure(join(("Verification in order failure:" + message)))	[:join]	[java.lang.String:message]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.internal.exceptions.util.ScenarioPrinter	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	14588:14608	359:359	new org.mockito.internal.exceptions.util.ScenarioPrinter()	[]	[]	[spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtLocalVariableImpl	Statement	class spoon.support.reflect.code.CtLocalVariableImpl	14554:14609	359:359	org.mockito.internal.exceptions.util.ScenarioPrinter scenarioPrinter = new org.mockito.internal.exceptions.util.ScenarioPrinter()	[]	[]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.internal.exceptions.util.ScenarioPrinter	Expression	class spoon.support.reflect.code.CtVariableReadImpl	14637:14651	360:360	scenarioPrinter	[]	[org.mockito.internal.exceptions.util.ScenarioPrinter:scenarioPrinter]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.util.List<org.mockito.internal.exceptions.VerificationAwareInvocation>	Expression	class spoon.support.reflect.code.CtVariableReadImpl	14659:14669	360:360	invocations	[]	[java.util.List<org.mockito.internal.exceptions.VerificationAwareInvocation>:invocations]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtInvocationImpl	14637:14670	360:360	scenarioPrinter.print(invocations)	[java.lang.String:print]	[org.mockito.internal.exceptions.util.ScenarioPrinter:scenarioPrinter, java.util.List<org.mockito.internal.exceptions.VerificationAwareInvocation>:invocations]	[spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtLocalVariableImpl	Statement	class spoon.support.reflect.code.CtLocalVariableImpl	14619:14671	360:360	java.lang.String scenario = scenarioPrinter.print(invocations)	[java.lang.String:print]	[org.mockito.internal.exceptions.util.ScenarioPrinter:scenarioPrinter, java.util.List<org.mockito.internal.exceptions.VerificationAwareInvocation>:invocations]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	14735:14764	363:363	"No interactions wanted here:"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.internal.debugging.Location	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	14783:14796	364:364	new org.mockito.internal.debugging.Location()	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	14815:14843	365:365	"But found this interaction:"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.internal.invocation.Invocation	Expression	class spoon.support.reflect.code.CtVariableReadImpl	14862:14870	366:366	undesired	[]	[org.mockito.internal.invocation.Invocation:undesired]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	14862:14884	366:366	undesired.getLocation()	[:getLocation]	[org.mockito.internal.invocation.Invocation:undesired]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtVariableReadImpl	14903:14910	367:367	scenario	[]	[java.lang.String:scenario]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	14713:14920	362:368	join("No interactions wanted here:", new org.mockito.internal.debugging.Location(), "But found this interaction:", undesired.getLocation(), scenario)	[:getLocation, :join]	[org.mockito.internal.invocation.Invocation:undesired, java.lang.String:scenario]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.NoInteractionsWanted	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	14688:14921	362:368	new org.mockito.exceptions.NoInteractionsWanted(join("No interactions wanted here:", new org.mockito.internal.debugging.Location(), "But found this interaction:", undesired.getLocation(), scenario))	[:getLocation, :join]	[org.mockito.internal.invocation.Invocation:undesired, java.lang.String:scenario]	[spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	14682:14922	362:368	throw new org.mockito.exceptions.NoInteractionsWanted(join("No interactions wanted here:", new org.mockito.internal.debugging.Location(), "But found this interaction:", undesired.getLocation(), scenario))	[:getLocation, :join]	[org.mockito.internal.invocation.Invocation:undesired, java.lang.String:scenario]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	15070:15099	373:373	"No interactions wanted here:"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.internal.debugging.Location	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	15118:15131	374:374	new org.mockito.internal.debugging.Location()	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	15150:15178	375:375	"But found this interaction:"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.internal.invocation.Invocation	Expression	class spoon.support.reflect.code.CtVariableReadImpl	15197:15205	376:376	undesired	[]	[org.mockito.internal.invocation.Invocation:undesired]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	15197:15219	376:376	undesired.getLocation()	[:getLocation]	[org.mockito.internal.invocation.Invocation:undesired]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	15238:15239	377:377	""	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	15048:15257	372:378	join("No interactions wanted here:", new org.mockito.internal.debugging.Location(), "But found this interaction:", undesired.getLocation(), "")	[:getLocation, :join]	[org.mockito.internal.invocation.Invocation:undesired]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.VerificationInOrderFailure	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	15017:15258	372:378	new org.mockito.exceptions.VerificationInOrderFailure(join("No interactions wanted here:", new org.mockito.internal.debugging.Location(), "But found this interaction:", undesired.getLocation(), ""))	[:getLocation, :join]	[org.mockito.internal.invocation.Invocation:undesired]	[spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	15011:15259	372:378	throw new org.mockito.exceptions.VerificationInOrderFailure(join("No interactions wanted here:", new org.mockito.internal.debugging.Location(), "But found this interaction:", undesired.getLocation(), ""))	[:getLocation, :join]	[org.mockito.internal.invocation.Invocation:undesired]	[]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	15380:15397	383:383	"Cannot mock/spy "	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<?>	Expression	class spoon.support.reflect.code.CtVariableReadImpl	15401:15405	383:383	clazz	[]	[java.lang.Class<?>:clazz]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtInvocationImpl	15401:15416	383:383	clazz.toString()	[java.lang.String:toString]	[java.lang.Class<?>:clazz]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	15380:15416	383:383	"Cannot mock/spy " + (clazz.toString())	[java.lang.String:toString]	[java.lang.Class<?>:clazz]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	15435:15470	384:384	"Mockito cannot mock/spy following:"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	15489:15507	385:385	"  - final classes"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	15526:15548	386:386	"  - anonymous classes"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	15567:15587	387:387	"  - primitive types"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	15358:15597	382:388	join(("Cannot mock/spy " + (clazz.toString())), "Mockito cannot mock/spy following:", "  - final classes", "  - anonymous classes", "  - primitive types")	[java.lang.String:toString, :join]	[java.lang.Class<?>:clazz]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.base.MockitoException	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	15337:15598	382:388	new org.mockito.exceptions.base.MockitoException(join(("Cannot mock/spy " + (clazz.toString())), "Mockito cannot mock/spy following:", "  - final classes", "  - anonymous classes", "  - primitive types"))	[java.lang.String:toString, :join]	[java.lang.Class<?>:clazz]	[spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	15331:15599	382:388	throw new org.mockito.exceptions.base.MockitoException(join(("Cannot mock/spy " + (clazz.toString())), "Mockito cannot mock/spy following:", "  - final classes", "  - anonymous classes", "  - primitive types"))	[java.lang.String:toString, :join]	[java.lang.Class<?>:clazz]	[]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	15739:15741	393:393	"'"	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtVariableReadImpl	15745:15754	393:393	methodName	[]	[java.lang.String:methodName]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	15739:15754	393:393	"'" + methodName	[]	[java.lang.String:methodName]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	15758:15829	393:393	"' is a *void method* and it *cannot* be stubbed with a *return value*!"	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	15739:15829	393:393	("'" + methodName) + "' is a *void method* and it *cannot* be stubbed with a *return value*!"	[]	[java.lang.String:methodName]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	15848:15891	394:394	"Voids are usually stubbed with Throwables:"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	15910:15962	395:395	"    doThrow(exception).when(mock).someVoidMethod();"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	15981:15985	396:396	"***"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	16004:16061	397:397	"If you're unsure why you're getting above error read on."	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	16080:16147	398:398	"Due to the nature of the syntax above problem might occur because:"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	16166:16276	399:399	"1. The method you are trying to stub is *overloaded*. Make sure you are calling the right overloaded version."	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	16295:16406	400:400	"2. Somewhere in your test you are stubbing *final methods*. Sorry, Mockito does not verify/stub final methods."	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	16425:16511	401:401	"3. A spy is stubbed using when(spy.foo()).then() syntax. It is safer to stub spies - "	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	16530:16619	402:402	"   - with doReturn|Throw() family of methods. More in javadocs for Mockito.spy() method."	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	16638:16639	403:403	""	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	15717:16654	392:404	join((("'" + methodName) + "' is a *void method* and it *cannot* be stubbed with a *return value*!"), "Voids are usually stubbed with Throwables:", "    doThrow(exception).when(mock).someVoidMethod();", "***", "If you're unsure why you're getting above error read on.", "Due to the nature of the syntax above problem might occur because:", "1. The method you are trying to stub is *overloaded*. Make sure you are calling the right overloaded version.", "2. Somewhere in your test you are stubbing *final methods*. Sorry, Mockito does not verify/stub final methods.", "3. A spy is stubbed using when(spy.foo()).then() syntax. It is safer to stub spies - ", "   - with doReturn|Throw() family of methods. More in javadocs for Mockito.spy() method.", "")	[:join]	[java.lang.String:methodName]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.base.MockitoException	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	15696:16655	392:404	new org.mockito.exceptions.base.MockitoException(join((("'" + methodName) + "' is a *void method* and it *cannot* be stubbed with a *return value*!"), "Voids are usually stubbed with Throwables:", "    doThrow(exception).when(mock).someVoidMethod();", "***", "If you're unsure why you're getting above error read on.", "Due to the nature of the syntax above problem might occur because:", "1. The method you are trying to stub is *overloaded*. Make sure you are calling the right overloaded version.", "2. Somewhere in your test you are stubbing *final methods*. Sorry, Mockito does not verify/stub final methods.", "3. A spy is stubbed using when(spy.foo()).then() syntax. It is safer to stub spies - ", "   - with doReturn|Throw() family of methods. More in javadocs for Mockito.spy() method.", ""))	[:join]	[java.lang.String:methodName]	[spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	15690:16656	392:404	throw new org.mockito.exceptions.base.MockitoException(join((("'" + methodName) + "' is a *void method* and it *cannot* be stubbed with a *return value*!"), "Voids are usually stubbed with Throwables:", "    doThrow(exception).when(mock).someVoidMethod();", "***", "If you're unsure why you're getting above error read on.", "Due to the nature of the syntax above problem might occur because:", "1. The method you are trying to stub is *overloaded*. Make sure you are calling the right overloaded version.", "2. Somewhere in your test you are stubbing *final methods*. Sorry, Mockito does not verify/stub final methods.", "3. A spy is stubbed using when(spy.foo()).then() syntax. It is safer to stub spies - ", "   - with doReturn|Throw() family of methods. More in javadocs for Mockito.spy() method.", ""))	[:join]	[java.lang.String:methodName]	[]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	16777:16812	409:409	"Only void methods can doNothing()!"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	16831:16870	410:410	"Example of correct use of doNothing():"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	16889:16906	411:411	"    doNothing()."	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	16925:16961	412:412	"    doThrow(new RuntimeException())"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	16980:17014	413:413	"    .when(mock).someVoidMethod();"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	17033:17046	414:414	"Above means:"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	17065:17155	415:415	"someVoidMethod() does nothing the 1st time but throws an exception the 2nd time is called"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	16755:17170	408:416	join("Only void methods can doNothing()!", "Example of correct use of doNothing():", "    doNothing().", "    doThrow(new RuntimeException())", "    .when(mock).someVoidMethod();", "Above means:", "someVoidMethod() does nothing the 1st time but throws an exception the 2nd time is called")	[:join]	[]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.base.MockitoException	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	16734:17171	408:416	new org.mockito.exceptions.base.MockitoException(join("Only void methods can doNothing()!", "Example of correct use of doNothing():", "    doNothing().", "    doThrow(new RuntimeException())", "    .when(mock).someVoidMethod();", "Above means:", "someVoidMethod() does nothing the 1st time but throws an exception the 2nd time is called"))	[:join]	[]	[spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	16728:17172	408:416	throw new org.mockito.exceptions.base.MockitoException(join("Only void methods can doNothing()!", "Example of correct use of doNothing():", "    doNothing().", "    doThrow(new RuntimeException())", "    .when(mock).someVoidMethod();", "Above means:", "someVoidMethod() does nothing the 1st time but throws an exception the 2nd time is called"))	[:join]	[]	[]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtVariableReadImpl	17344:17353	421:421	actualType	[]	[java.lang.String:actualType]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	17357:17381	421:421	" cannot be returned by "	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	17344:17381	421:421	actualType + " cannot be returned by "	[]	[java.lang.String:actualType]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtVariableReadImpl	17385:17394	421:421	methodName	[]	[java.lang.String:methodName]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	17344:17394	421:421	(actualType + " cannot be returned by ") + methodName	[]	[java.lang.String:actualType, java.lang.String:methodName]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	17398:17401	421:421	"()"	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	17344:17401	421:421	((actualType + " cannot be returned by ") + methodName) + "()"	[]	[java.lang.String:actualType, java.lang.String:methodName]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtVariableReadImpl	17420:17429	422:422	methodName	[]	[java.lang.String:methodName]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	17433:17451	422:422	"() should return "	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	17420:17451	422:422	methodName + "() should return "	[]	[java.lang.String:methodName]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtVariableReadImpl	17455:17466	422:422	expectedType	[]	[java.lang.String:expectedType]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	17420:17466	422:422	(methodName + "() should return ") + expectedType	[]	[java.lang.String:methodName, java.lang.String:expectedType]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	17485:17489	423:423	"***"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	17508:17578	424:424	"This exception *might* occur in wrongly written multi-threaded tests."	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	17597:17664	425:425	"Please refer to Mockito FAQ on limitations of concurrency testing."	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	17683:17684	426:426	""	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	17322:17702	420:427	join((((actualType + " cannot be returned by ") + methodName) + "()"), ((methodName + "() should return ") + expectedType), "***", "This exception *might* occur in wrongly written multi-threaded tests.", "Please refer to Mockito FAQ on limitations of concurrency testing.", "")	[:join]	[java.lang.String:actualType, java.lang.String:methodName, java.lang.String:expectedType]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.WrongTypeOfReturnValue	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	17295:17703	420:427	new org.mockito.exceptions.WrongTypeOfReturnValue(join((((actualType + " cannot be returned by ") + methodName) + "()"), ((methodName + "() should return ") + expectedType), "***", "This exception *might* occur in wrongly written multi-threaded tests.", "Please refer to Mockito FAQ on limitations of concurrency testing.", ""))	[:join]	[java.lang.String:actualType, java.lang.String:methodName, java.lang.String:expectedType]	[spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	17289:17704	420:427	throw new org.mockito.exceptions.WrongTypeOfReturnValue(join((((actualType + " cannot be returned by ") + methodName) + "()"), ((methodName + "() should return ") + expectedType), "***", "This exception *might* occur in wrongly written multi-threaded tests.", "Please refer to Mockito FAQ on limitations of concurrency testing.", ""))	[:join]	[java.lang.String:actualType, java.lang.String:methodName, java.lang.String:expectedType]	[]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	17743:17745	430:430	int	[]	[]	[spoon.support.reflect.declaration.CtParameterImpl]	[]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	17771:17773	430:430	int	[]	[]	[spoon.support.reflect.declaration.CtParameterImpl]	[]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	17833:17849	431:431	"Wanted at most "	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	8634:8636	218:218	int	[]	[]	[spoon.support.reflect.reference.CtExecutableReferenceImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	8634:8636	218:218	int	[]	[]	[spoon.support.reflect.reference.CtParameterReferenceImpl, spoon.support.reflect.code.CtVariableReadImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	8634:8636	218:218	int	[]	[]	[spoon.support.reflect.reference.CtExecutableReferenceImpl, spoon.support.reflect.reference.CtParameterReferenceImpl, spoon.support.reflect.code.CtVariableReadImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	8634:8636	218:218	int	[]	[]	[spoon.support.reflect.reference.CtExecutableReferenceImpl, spoon.support.reflect.reference.CtParameterReferenceImpl, spoon.support.reflect.code.CtVariableReadImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
int	Expression	class spoon.support.reflect.code.CtVariableReadImpl	17863:17884	431:431	maxNumberOfInvocations	[]	[int:maxNumberOfInvocations]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	17853:17885	431:431	org.mockito.exceptions.Pluralizer.pluralize(maxNumberOfInvocations)	[:pluralize]	[int:maxNumberOfInvocations]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	17833:17885	431:431	"Wanted at most " + (org.mockito.exceptions.Pluralizer.pluralize(maxNumberOfInvocations))	[:pluralize]	[int:maxNumberOfInvocations]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	17889:17899	431:431	" but was "	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	17833:17899	431:431	("Wanted at most " + (org.mockito.exceptions.Pluralizer.pluralize(maxNumberOfInvocations))) + " but was "	[:pluralize]	[int:maxNumberOfInvocations]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	8634:8636	218:218	int	[]	[]	[spoon.support.reflect.reference.CtParameterReferenceImpl, spoon.support.reflect.code.CtVariableReadImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	8634:8636	218:218	int	[]	[]	[spoon.support.reflect.reference.CtExecutableReferenceImpl, spoon.support.reflect.reference.CtParameterReferenceImpl, spoon.support.reflect.code.CtVariableReadImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	8634:8636	218:218	int	[]	[]	[spoon.support.reflect.reference.CtExecutableReferenceImpl, spoon.support.reflect.reference.CtParameterReferenceImpl, spoon.support.reflect.code.CtVariableReadImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
int	Expression	class spoon.support.reflect.code.CtVariableReadImpl	17903:17911	431:431	foundSize	[]	[int:foundSize]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	17833:17911	431:431	(("Wanted at most " + (org.mockito.exceptions.Pluralizer.pluralize(maxNumberOfInvocations))) + " but was ") + foundSize	[:pluralize]	[int:foundSize, int:maxNumberOfInvocations]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	17828:17912	431:431	join(((("Wanted at most " + (org.mockito.exceptions.Pluralizer.pluralize(maxNumberOfInvocations))) + " but was ") + foundSize))	[:pluralize, :join]	[int:foundSize, int:maxNumberOfInvocations]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.base.MockitoAssertionError	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	17802:17913	431:431	new org.mockito.exceptions.base.MockitoAssertionError(join(((("Wanted at most " + (org.mockito.exceptions.Pluralizer.pluralize(maxNumberOfInvocations))) + " but was ") + foundSize)))	[:pluralize, :join]	[int:foundSize, int:maxNumberOfInvocations]	[spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	17796:17914	431:431	throw new org.mockito.exceptions.base.MockitoAssertionError(join(((("Wanted at most " + (org.mockito.exceptions.Pluralizer.pluralize(maxNumberOfInvocations))) + " but was ") + foundSize)))	[:pluralize, :join]	[int:foundSize, int:maxNumberOfInvocations]	[]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	18055:18097	436:436	"Misplaced argument matcher detected here:"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.internal.debugging.Location	Expression	class spoon.support.reflect.code.CtVariableReadImpl	18116:18123	437:437	location	[]	[org.mockito.internal.debugging.Location:location]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	18142:18143	438:438	""	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	18162:18232	439:439	"You cannot use argument matchers outside of verification or stubbing."	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	18251:18299	440:440	"Examples of correct usage of argument matchers:"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	18318:18365	441:441	"    when(mock.get(anyInt())).thenReturn(null);"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	18384:18460	442:442	"    doThrow(new RuntimeException()).when(mock).someVoidMethod(anyObject());"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	18479:18526	443:443	"    verify(mock).someMethod(contains(\"foo\"))"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	18545:18546	444:444	""	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	18565:18666	445:445	"Also, this error might show up because you use argument matchers with methods that cannot be mocked."	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	18685:18768	446:446	"Following methods *cannot* be stubbed/verified: final/private/equals()/hashCode()."	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	18787:18788	447:447	""	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	18033:18806	435:448	join("Misplaced argument matcher detected here:", location, "", "You cannot use argument matchers outside of verification or stubbing.", "Examples of correct usage of argument matchers:", "    when(mock.get(anyInt())).thenReturn(null);", "    doThrow(new RuntimeException()).when(mock).someVoidMethod(anyObject());", "    verify(mock).someMethod(contains(\"foo\"))", "", "Also, this error might show up because you use argument matchers with methods that cannot be mocked.", "Following methods *cannot* be stubbed/verified: final/private/equals()/hashCode().", "")	[:join]	[org.mockito.internal.debugging.Location:location]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.InvalidUseOfMatchersException	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	17999:18807	435:448	new org.mockito.exceptions.InvalidUseOfMatchersException(join("Misplaced argument matcher detected here:", location, "", "You cannot use argument matchers outside of verification or stubbing.", "Examples of correct usage of argument matchers:", "    when(mock.get(anyInt())).thenReturn(null);", "    doThrow(new RuntimeException()).when(mock).someVoidMethod(anyObject());", "    verify(mock).someMethod(contains(\"foo\"))", "", "Also, this error might show up because you use argument matchers with methods that cannot be mocked.", "Following methods *cannot* be stubbed/verified: final/private/equals()/hashCode().", ""))	[:join]	[org.mockito.internal.debugging.Location:location]	[spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	17993:18808	435:448	throw new org.mockito.exceptions.InvalidUseOfMatchersException(join("Misplaced argument matcher detected here:", location, "", "You cannot use argument matchers outside of verification or stubbing.", "Examples of correct usage of argument matchers:", "    when(mock.get(anyInt())).thenReturn(null);", "    doThrow(new RuntimeException()).when(mock).someVoidMethod(anyObject());", "    verify(mock).someMethod(contains(\"foo\"))", "", "Also, this error might show up because you use argument matchers with methods that cannot be mocked.", "Following methods *cannot* be stubbed/verified: final/private/equals()/hashCode().", ""))	[:join]	[org.mockito.internal.debugging.Location:location]	[]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	18965:19003	453:453	"You have a NullPointerException here:"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.internal.debugging.Location	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	19022:19035	454:454	new org.mockito.internal.debugging.Location()	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	19054:19108	455:455	"because this method call was *not* stubbed correctly:"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.internal.debugging.Location	Expression	class spoon.support.reflect.code.CtVariableReadImpl	19127:19134	456:456	location	[]	[org.mockito.internal.debugging.Location:location]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtVariableReadImpl	19153:19162	457:457	invocation	[]	[java.lang.String:invocation]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	19181:19182	458:458	""	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	18943:19200	452:459	join("You have a NullPointerException here:", new org.mockito.internal.debugging.Location(), "because this method call was *not* stubbed correctly:", location, invocation, "")	[:join]	[org.mockito.internal.debugging.Location:location, java.lang.String:invocation]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.SmartNullPointerException	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	18913:19201	452:459	new org.mockito.exceptions.SmartNullPointerException(join("You have a NullPointerException here:", new org.mockito.internal.debugging.Location(), "because this method call was *not* stubbed correctly:", location, invocation, ""))	[:join]	[org.mockito.internal.debugging.Location:location, java.lang.String:invocation]	[spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	18907:19202	452:459	throw new org.mockito.exceptions.SmartNullPointerException(join("You have a NullPointerException here:", new org.mockito.internal.debugging.Location(), "because this method call was *not* stubbed correctly:", location, invocation, ""))	[:join]	[org.mockito.internal.debugging.Location:location, java.lang.String:invocation]	[]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	19315:19347	464:464	"No argument value was captured!"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	19366:19432	465:465	"You might have forgotten to use argument.capture() in verify()..."	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	19451:19523	466:466	"...or you used capture() in stubbing but stubbed method was not called."	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	19542:19610	467:467	"Be aware that it is recommended to use capture() only with verify()"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	19629:19630	468:468	""	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	19649:19689	469:469	"Examples of correct argument capturing:"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	19708:19785	470:470	"    ArgumentCaptor<Person> argument = ArgumentCaptor.forClass(Person.class);"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	19804:19854	471:471	"    verify(mock).doSomething(argument.capture());"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	19873:19932	472:472	"    assertEquals(\"John\", argument.getValue().getName());"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	19951:19952	473:473	""	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	19293:19970	463:474	join("No argument value was captured!", "You might have forgotten to use argument.capture() in verify()...", "...or you used capture() in stubbing but stubbed method was not called.", "Be aware that it is recommended to use capture() only with verify()", "", "Examples of correct argument capturing:", "    ArgumentCaptor<Person> argument = ArgumentCaptor.forClass(Person.class);", "    verify(mock).doSomething(argument.capture());", "    assertEquals(\"John\", argument.getValue().getName());", "")	[:join]	[]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.base.MockitoException	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	19272:19971	463:474	new org.mockito.exceptions.base.MockitoException(join("No argument value was captured!", "You might have forgotten to use argument.capture() in verify()...", "...or you used capture() in stubbing but stubbed method was not called.", "Be aware that it is recommended to use capture() only with verify()", "", "Examples of correct argument capturing:", "    ArgumentCaptor<Person> argument = ArgumentCaptor.forClass(Person.class);", "    verify(mock).doSomething(argument.capture());", "    assertEquals(\"John\", argument.getValue().getName());", ""))	[:join]	[]	[spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	19266:19972	463:474	throw new org.mockito.exceptions.base.MockitoException(join("No argument value was captured!", "You might have forgotten to use argument.capture() in verify()...", "...or you used capture() in stubbing but stubbed method was not called.", "Be aware that it is recommended to use capture() only with verify()", "", "Examples of correct argument capturing:", "    ArgumentCaptor<Person> argument = ArgumentCaptor.forClass(Person.class);", "    verify(mock).doSomething(argument.capture());", "    assertEquals(\"John\", argument.getValue().getName());", ""))	[:join]	[]	[]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	20101:20152	479:479	"extraInterfaces() does not accept null parameters."	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	20079:20170	478:480	join("extraInterfaces() does not accept null parameters.")	[:join]	[]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.base.MockitoException	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	20058:20171	478:480	new org.mockito.exceptions.base.MockitoException(join("extraInterfaces() does not accept null parameters."))	[:join]	[]	[spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	20052:20172	478:480	throw new org.mockito.exceptions.base.MockitoException(join("extraInterfaces() does not accept null parameters."))	[:join]	[]	[]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	20313:20356	485:485	"extraInterfaces() accepts only interfaces."	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	20375:20403	486:486	"You passed following type: "	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<?>	Expression	class spoon.support.reflect.code.CtVariableReadImpl	20407:20415	486:486	wrongType	[]	[java.lang.Class<?>:wrongType]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtInvocationImpl	20407:20431	486:486	wrongType.getSimpleName()	[java.lang.String:getSimpleName]	[java.lang.Class<?>:wrongType]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	20375:20431	486:486	"You passed following type: " + (wrongType.getSimpleName())	[java.lang.String:getSimpleName]	[java.lang.Class<?>:wrongType]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	20435:20463	486:486	" which is not an interface."	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	20375:20463	486:486	("You passed following type: " + (wrongType.getSimpleName())) + " which is not an interface."	[java.lang.String:getSimpleName]	[java.lang.Class<?>:wrongType]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	20291:20473	484:487	join("extraInterfaces() accepts only interfaces.", (("You passed following type: " + (wrongType.getSimpleName())) + " which is not an interface."))	[java.lang.String:getSimpleName, :join]	[java.lang.Class<?>:wrongType]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.base.MockitoException	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	20270:20474	484:487	new org.mockito.exceptions.base.MockitoException(join("extraInterfaces() accepts only interfaces.", (("You passed following type: " + (wrongType.getSimpleName())) + " which is not an interface.")))	[java.lang.String:getSimpleName, :join]	[java.lang.Class<?>:wrongType]	[spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	20264:20475	484:487	throw new org.mockito.exceptions.base.MockitoException(join("extraInterfaces() accepts only interfaces.", (("You passed following type: " + (wrongType.getSimpleName())) + " which is not an interface.")))	[java.lang.String:getSimpleName, :join]	[java.lang.Class<?>:wrongType]	[]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	20618:20686	492:492	"extraInterfaces() does not accept the same type as the mocked type."	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	20705:20733	493:493	"You mocked following type: "	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<?>	Expression	class spoon.support.reflect.code.CtVariableReadImpl	20737:20745	493:493	wrongType	[]	[java.lang.Class<?>:wrongType]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtInvocationImpl	20737:20761	493:493	wrongType.getSimpleName()	[java.lang.String:getSimpleName]	[java.lang.Class<?>:wrongType]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	20705:20761	493:493	"You mocked following type: " + (wrongType.getSimpleName())	[java.lang.String:getSimpleName]	[java.lang.Class<?>:wrongType]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	20780:20844	494:494	"and you passed the same very interface to the extraInterfaces()"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	20596:20854	491:495	join("extraInterfaces() does not accept the same type as the mocked type.", ("You mocked following type: " + (wrongType.getSimpleName())), "and you passed the same very interface to the extraInterfaces()")	[java.lang.String:getSimpleName, :join]	[java.lang.Class<?>:wrongType]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.base.MockitoException	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	20575:20855	491:495	new org.mockito.exceptions.base.MockitoException(join("extraInterfaces() does not accept the same type as the mocked type.", ("You mocked following type: " + (wrongType.getSimpleName())), "and you passed the same very interface to the extraInterfaces()"))	[java.lang.String:getSimpleName, :join]	[java.lang.Class<?>:wrongType]	[spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	20569:20856	491:495	throw new org.mockito.exceptions.base.MockitoException(join("extraInterfaces() does not accept the same type as the mocked type.", ("You mocked following type: " + (wrongType.getSimpleName())), "and you passed the same very interface to the extraInterfaces()"))	[java.lang.String:getSimpleName, :join]	[java.lang.Class<?>:wrongType]	[]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	20985:21036	500:500	"extraInterfaces() requires at least one interface."	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	20963:21046	499:501	join("extraInterfaces() requires at least one interface.")	[:join]	[]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.base.MockitoException	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	20942:21047	499:501	new org.mockito.exceptions.base.MockitoException(join("extraInterfaces() requires at least one interface."))	[:join]	[]	[spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	20936:21048	499:501	throw new org.mockito.exceptions.base.MockitoException(join("extraInterfaces() requires at least one interface."))	[:join]	[]	[]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	21221:21286	506:506	"Mocked type must be the same as the type of your spied instance."	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	21305:21327	507:507	"Mocked type must be: "	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Object	Expression	class spoon.support.reflect.code.CtVariableReadImpl	21331:21343	507:507	spiedInstance	[]	[java.lang.Object:spiedInstance]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<? extends java.lang.Object>	Expression	class spoon.support.reflect.code.CtInvocationImpl	21331:21354	507:507	spiedInstance.getClass()	[java.lang.Class<? extends java.lang.Object>:getClass]	[java.lang.Object:spiedInstance]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtInvocationImpl	21331:21370	507:507	spiedInstance.getClass().getSimpleName()	[java.lang.Class<? extends java.lang.Object>:getClass, java.lang.String:getClass]	[java.lang.Object:spiedInstance]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	21305:21370	507:507	"Mocked type must be: " + (spiedInstance.getClass().getSimpleName())	[java.lang.Class<? extends java.lang.Object>:getClass, java.lang.String:getClass]	[java.lang.Object:spiedInstance]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	21374:21385	507:507	", but is: "	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	21305:21385	507:507	("Mocked type must be: " + (spiedInstance.getClass().getSimpleName())) + ", but is: "	[java.lang.Class<? extends java.lang.Object>:getClass, java.lang.String:getClass]	[java.lang.Object:spiedInstance]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<?>	Expression	class spoon.support.reflect.code.CtVariableReadImpl	21389:21398	507:507	mockedType	[]	[java.lang.Class<?>:mockedType]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtInvocationImpl	21389:21414	507:507	mockedType.getSimpleName()	[java.lang.String:getSimpleName]	[java.lang.Class<?>:mockedType]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	21305:21414	507:507	(("Mocked type must be: " + (spiedInstance.getClass().getSimpleName())) + ", but is: ") + (mockedType.getSimpleName())	[java.lang.Class<? extends java.lang.Object>:getClass, java.lang.String:getClass, java.lang.String:getSimpleName]	[java.lang.Object:spiedInstance, java.lang.Class<?>:mockedType]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	21433:21453	508:508	"  //correct spying:"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	21472:21561	509:509	"  spy = mock( ->ArrayList.class<- , withSettings().spiedInstance( ->new ArrayList()<- );"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	21580:21615	510:510	"  //incorrect - types don't match:"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	21634:21718	511:511	"  spy = mock( ->List.class<- , withSettings().spiedInstance( ->new ArrayList()<- );"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	21199:21728	505:512	join("Mocked type must be the same as the type of your spied instance.", ((("Mocked type must be: " + (spiedInstance.getClass().getSimpleName())) + ", but is: ") + (mockedType.getSimpleName())), "  //correct spying:", "  spy = mock( ->ArrayList.class<- , withSettings().spiedInstance( ->new ArrayList()<- );", "  //incorrect - types don't match:", "  spy = mock( ->List.class<- , withSettings().spiedInstance( ->new ArrayList()<- );")	[java.lang.Class<? extends java.lang.Object>:getClass, java.lang.String:getClass, java.lang.String:getSimpleName, :join]	[java.lang.Object:spiedInstance, java.lang.Class<?>:mockedType]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.base.MockitoException	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	21178:21729	505:512	new org.mockito.exceptions.base.MockitoException(join("Mocked type must be the same as the type of your spied instance.", ((("Mocked type must be: " + (spiedInstance.getClass().getSimpleName())) + ", but is: ") + (mockedType.getSimpleName())), "  //correct spying:", "  spy = mock( ->ArrayList.class<- , withSettings().spiedInstance( ->new ArrayList()<- );", "  //incorrect - types don't match:", "  spy = mock( ->List.class<- , withSettings().spiedInstance( ->new ArrayList()<- );"))	[java.lang.Class<? extends java.lang.Object>:getClass, java.lang.String:getClass, java.lang.String:getSimpleName, :join]	[java.lang.Object:spiedInstance, java.lang.Class<?>:mockedType]	[spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	21172:21730	505:512	throw new org.mockito.exceptions.base.MockitoException(join("Mocked type must be the same as the type of your spied instance.", ((("Mocked type must be: " + (spiedInstance.getClass().getSimpleName())) + ", but is: ") + (mockedType.getSimpleName())), "  //correct spying:", "  spy = mock( ->ArrayList.class<- , withSettings().spiedInstance( ->new ArrayList()<- );", "  //incorrect - types don't match:", "  spy = mock( ->List.class<- , withSettings().spiedInstance( ->new ArrayList()<- );"))	[java.lang.Class<? extends java.lang.Object>:getClass, java.lang.String:getClass, java.lang.String:getSimpleName, :join]	[java.lang.Object:spiedInstance, java.lang.Class<?>:mockedType]	[]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	21848:21935	517:517	"Cannot call real method on java interface. Interface does not have any implementation!"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	21954:22023	518:518	"Calling real methods is only possible when mocking concrete classes."	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	22042:22063	519:519	"  //correct example:"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	22082:22142	520:520	"  when(mockOfConcreteClass.doStuff()).thenCallRealMethod();"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	21826:22152	516:521	join("Cannot call real method on java interface. Interface does not have any implementation!", "Calling real methods is only possible when mocking concrete classes.", "  //correct example:", "  when(mockOfConcreteClass.doStuff()).thenCallRealMethod();")	[:join]	[]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.base.MockitoException	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	21805:22153	516:521	new org.mockito.exceptions.base.MockitoException(join("Cannot call real method on java interface. Interface does not have any implementation!", "Calling real methods is only possible when mocking concrete classes.", "  //correct example:", "  when(mockOfConcreteClass.doStuff()).thenCallRealMethod();"))	[:join]	[]	[spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	21799:22154	516:521	throw new org.mockito.exceptions.base.MockitoException(join("Cannot call real method on java interface. Interface does not have any implementation!", "Calling real methods is only possible when mocking concrete classes.", "  //correct example:", "  when(mockOfConcreteClass.doStuff()).thenCallRealMethod();"))	[:join]	[]	[]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	22261:22294	526:526	"Mockito cannot verify toString()"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	22313:22421	527:527	"toString() is too often used behind of scenes  (i.e. during String concatenation, in IDE debugging views). "	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	22449:22516	528:528	"Verifying it may give inconsistent or hard to understand results. "	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	22544:22678	529:529	"Not to mention that verifying toString() most likely hints awkward design (hard to explain in a short exception message. Trust me...)"	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	22449:22678	528:529	"Verifying it may give inconsistent or hard to understand results. " + "Not to mention that verifying toString() most likely hints awkward design (hard to explain in a short exception message. Trust me...)"	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	22313:22678	527:529	"toString() is too often used behind of scenes  (i.e. during String concatenation, in IDE debugging views). " + ("Verifying it may give inconsistent or hard to understand results. " + "Not to mention that verifying toString() most likely hints awkward design (hard to explain in a short exception message. Trust me...)")	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	22697:22822	530:530	"However, it is possible to stub toString(). Stubbing toString() smells a bit funny but there are rare, legitimate use cases."	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	22239:22832	525:531	join("Mockito cannot verify toString()", ("toString() is too often used behind of scenes  (i.e. during String concatenation, in IDE debugging views). " + ("Verifying it may give inconsistent or hard to understand results. " + "Not to mention that verifying toString() most likely hints awkward design (hard to explain in a short exception message. Trust me...)")), "However, it is possible to stub toString(). Stubbing toString() smells a bit funny but there are rare, legitimate use cases.")	[:join]	[]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.base.MockitoException	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	22218:22833	525:531	new org.mockito.exceptions.base.MockitoException(join("Mockito cannot verify toString()", ("toString() is too often used behind of scenes  (i.e. during String concatenation, in IDE debugging views). " + ("Verifying it may give inconsistent or hard to understand results. " + "Not to mention that verifying toString() most likely hints awkward design (hard to explain in a short exception message. Trust me...)")), "However, it is possible to stub toString(). Stubbing toString() smells a bit funny but there are rare, legitimate use cases."))	[:join]	[]	[spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	22212:22834	525:531	throw new org.mockito.exceptions.base.MockitoException(join("Mockito cannot verify toString()", ("toString() is too often used behind of scenes  (i.e. during String concatenation, in IDE debugging views). " + ("Verifying it may give inconsistent or hard to understand results. " + "Not to mention that verifying toString() most likely hints awkward design (hard to explain in a short exception message. Trust me...)")), "However, it is possible to stub toString(). Stubbing toString() smells a bit funny but there are rare, legitimate use cases."))	[:join]	[]	[]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	22946:23009	535:535	"You cannot have more than one Mockito annotation on a field!\n"	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	23029:23041	536:536	"The field '"	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	22946:23041	535:536	"You cannot have more than one Mockito annotation on a field!\n" + "The field '"	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtVariableReadImpl	23045:23053	536:536	fieldName	[]	[java.lang.String:fieldName]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	22946:23053	535:536	("You cannot have more than one Mockito annotation on a field!\n" + "The field '") + fieldName	[]	[java.lang.String:fieldName]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	23057:23095	536:536	"\' has multiple Mockito annotations.\n"	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	22946:23095	535:536	(("You cannot have more than one Mockito annotation on a field!\n" + "The field '") + fieldName) + "\' has multiple Mockito annotations.\n"	[]	[java.lang.String:fieldName]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	23115:23201	537:537	"For info how to use annotations see examples in javadoc for MockitoAnnotations class."	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	22946:23201	535:537	((("You cannot have more than one Mockito annotation on a field!\n" + "The field '") + fieldName) + "\' has multiple Mockito annotations.\n") + "For info how to use annotations see examples in javadoc for MockitoAnnotations class."	[]	[java.lang.String:fieldName]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl]
org.mockito.exceptions.base.MockitoException	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	22925:23202	535:537	new org.mockito.exceptions.base.MockitoException((((("You cannot have more than one Mockito annotation on a field!\n" + "The field '") + fieldName) + "\' has multiple Mockito annotations.\n") + "For info how to use annotations see examples in javadoc for MockitoAnnotations class."))	[]	[java.lang.String:fieldName]	[spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	22919:23203	535:537	throw new org.mockito.exceptions.base.MockitoException((((("You cannot have more than one Mockito annotation on a field!\n" + "The field '") + fieldName) + "\' has multiple Mockito annotations.\n") + "For info how to use annotations see examples in javadoc for MockitoAnnotations class."))	[]	[java.lang.String:fieldName]	[]	[spoon.support.reflect.code.CtThrowImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	23363:23433	541:541	"This combination of annotations is not permitted on a single field:\n"	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	23453:23455	542:542	"@"	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	23363:23455	541:542	"This combination of annotations is not permitted on a single field:\n" + "@"	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtVariableReadImpl	23459:23480	542:542	undesiredAnnotationOne	[]	[java.lang.String:undesiredAnnotationOne]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	23363:23480	541:542	("This combination of annotations is not permitted on a single field:\n" + "@") + undesiredAnnotationOne	[]	[java.lang.String:undesiredAnnotationOne]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	23484:23491	542:542	" and @"	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	23363:23491	541:542	(("This combination of annotations is not permitted on a single field:\n" + "@") + undesiredAnnotationOne) + " and @"	[]	[java.lang.String:undesiredAnnotationOne]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtVariableReadImpl	23495:23516	542:542	undesiredAnnotationTwo	[]	[java.lang.String:undesiredAnnotationTwo]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	23363:23516	541:542	((("This combination of annotations is not permitted on a single field:\n" + "@") + undesiredAnnotationOne) + " and @") + undesiredAnnotationTwo	[]	[java.lang.String:undesiredAnnotationOne, java.lang.String:undesiredAnnotationTwo]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl]
org.mockito.exceptions.base.MockitoException	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	23342:23517	541:542	new org.mockito.exceptions.base.MockitoException((((("This combination of annotations is not permitted on a single field:\n" + "@") + undesiredAnnotationOne) + " and @") + undesiredAnnotationTwo))	[]	[java.lang.String:undesiredAnnotationOne, java.lang.String:undesiredAnnotationTwo]	[spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	23336:23518	541:542	throw new org.mockito.exceptions.base.MockitoException((((("This combination of annotations is not permitted on a single field:\n" + "@") + undesiredAnnotationOne) + " and @") + undesiredAnnotationTwo))	[]	[java.lang.String:undesiredAnnotationOne, java.lang.String:undesiredAnnotationTwo]	[]	[spoon.support.reflect.code.CtThrowImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	23655:23687	546:546	"Cannot instantiate a @Spy for '"	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtVariableReadImpl	23691:23699	546:546	fieldName	[]	[java.lang.String:fieldName]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	23655:23699	546:546	"Cannot instantiate a @Spy for '" + fieldName	[]	[java.lang.String:fieldName]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	23703:23712	546:546	"' field."	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	23655:23712	546:546	("Cannot instantiate a @Spy for '" + fieldName) + "' field."	[]	[java.lang.String:fieldName]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	23727:23831	547:547	"You haven't provided the instance for spying at field declaration so I tried to construct the instance."	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	23846:23874	548:548	"However, I failed because: "	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Exception	Expression	class spoon.support.reflect.code.CtVariableReadImpl	23878:23884	548:548	details	[]	[java.lang.Exception:details]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtInvocationImpl	23878:23897	548:548	details.getMessage()	[java.lang.String:getMessage]	[java.lang.Exception:details]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	23846:23897	548:548	"However, I failed because: " + (details.getMessage())	[java.lang.String:getMessage]	[java.lang.Exception:details]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	23912:23947	549:549	"Examples of correct usage of @Spy:"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	23962:24000	550:550	"   @Spy List mock = new LinkedList();"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	24015:24076	551:551	"   @Spy Foo foo; //only if Foo has parameterless constructor"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	24091:24153	552:552	"   //also, don't forget about MockitoAnnotations.initMocks();"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	24172:24173	553:553	""	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	23650:24174	546:553	join((("Cannot instantiate a @Spy for '" + fieldName) + "' field."), "You haven't provided the instance for spying at field declaration so I tried to construct the instance.", ("However, I failed because: " + (details.getMessage())), "Examples of correct usage of @Spy:", "   @Spy List mock = new LinkedList();", "   @Spy Foo foo; //only if Foo has parameterless constructor", "   //also, don't forget about MockitoAnnotations.initMocks();", "")	[java.lang.String:getMessage, :join]	[java.lang.Exception:details, java.lang.String:fieldName]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Exception	Expression	class spoon.support.reflect.code.CtVariableReadImpl	24177:24183	553:553	details	[]	[java.lang.Exception:details]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.base.MockitoException	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	23629:24184	546:553	new org.mockito.exceptions.base.MockitoException(join((("Cannot instantiate a @Spy for '" + fieldName) + "' field."), "You haven't provided the instance for spying at field declaration so I tried to construct the instance.", ("However, I failed because: " + (details.getMessage())), "Examples of correct usage of @Spy:", "   @Spy List mock = new LinkedList();", "   @Spy Foo foo; //only if Foo has parameterless constructor", "   //also, don't forget about MockitoAnnotations.initMocks();", ""), details)	[java.lang.String:getMessage, :join]	[java.lang.Exception:details, java.lang.String:fieldName]	[spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	23623:24185	546:553	throw new org.mockito.exceptions.base.MockitoException(join((("Cannot instantiate a @Spy for '" + fieldName) + "' field."), "You haven't provided the instance for spying at field declaration so I tried to construct the instance.", ("However, I failed because: " + (details.getMessage())), "Examples of correct usage of @Spy:", "   @Spy List mock = new LinkedList();", "   @Spy Foo foo; //only if Foo has parameterless constructor", "   //also, don't forget about MockitoAnnotations.initMocks();", ""), details)	[java.lang.String:getMessage, :join]	[java.lang.Exception:details, java.lang.String:fieldName]	[]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	24330:24376	557:557	"Cannot instantiate @InjectMocks field named '"	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtVariableReadImpl	24380:24388	557:557	fieldName	[]	[java.lang.String:fieldName]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	24330:24388	557:557	"Cannot instantiate @InjectMocks field named '" + fieldName	[]	[java.lang.String:fieldName]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	24392:24395	557:557	"'."	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	24330:24395	557:557	("Cannot instantiate @InjectMocks field named '" + fieldName) + "'."	[]	[java.lang.String:fieldName]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	24410:24503	558:558	"You haven't provided the instance at field declaration so I tried to construct the instance."	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	24518:24546	559:559	"However, I failed because: "	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Exception	Expression	class spoon.support.reflect.code.CtVariableReadImpl	24550:24556	559:559	details	[]	[java.lang.Exception:details]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtInvocationImpl	24550:24569	559:559	details.getMessage()	[java.lang.String:getMessage]	[java.lang.Exception:details]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	24518:24569	559:559	"However, I failed because: " + (details.getMessage())	[java.lang.String:getMessage]	[java.lang.Exception:details]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	24584:24627	560:560	"Examples of correct usage of @InjectMocks:"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	24642:24691	561:561	"   @InjectMocks Service service = new Service();"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	24706:24739	562:562	"   @InjectMocks Service service;"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	24754:24816	563:563	"   //also, don't forget about MockitoAnnotations.initMocks();"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	24831:24891	564:564	"   //and... don't forget about some @Mocks for injection :)"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	24910:24911	565:565	""	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	24325:24912	557:565	join((("Cannot instantiate @InjectMocks field named '" + fieldName) + "'."), "You haven't provided the instance at field declaration so I tried to construct the instance.", ("However, I failed because: " + (details.getMessage())), "Examples of correct usage of @InjectMocks:", "   @InjectMocks Service service = new Service();", "   @InjectMocks Service service;", "   //also, don't forget about MockitoAnnotations.initMocks();", "   //and... don't forget about some @Mocks for injection :)", "")	[java.lang.String:getMessage, :join]	[java.lang.Exception:details, java.lang.String:fieldName]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Exception	Expression	class spoon.support.reflect.code.CtVariableReadImpl	24915:24921	565:565	details	[]	[java.lang.Exception:details]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.base.MockitoException	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	24304:24922	557:565	new org.mockito.exceptions.base.MockitoException(join((("Cannot instantiate @InjectMocks field named '" + fieldName) + "'."), "You haven't provided the instance at field declaration so I tried to construct the instance.", ("However, I failed because: " + (details.getMessage())), "Examples of correct usage of @InjectMocks:", "   @InjectMocks Service service = new Service();", "   @InjectMocks Service service;", "   //also, don't forget about MockitoAnnotations.initMocks();", "   //and... don't forget about some @Mocks for injection :)", ""), details)	[java.lang.String:getMessage, :join]	[java.lang.Exception:details, java.lang.String:fieldName]	[spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	24298:24923	557:565	throw new org.mockito.exceptions.base.MockitoException(join((("Cannot instantiate @InjectMocks field named '" + fieldName) + "'."), "You haven't provided the instance at field declaration so I tried to construct the instance.", ("However, I failed because: " + (details.getMessage())), "Examples of correct usage of @InjectMocks:", "   @InjectMocks Service service = new Service();", "   @InjectMocks Service service;", "   //also, don't forget about MockitoAnnotations.initMocks();", "   //and... don't forget about some @Mocks for injection :)", ""), details)	[java.lang.String:getMessage, :join]	[java.lang.Exception:details, java.lang.String:fieldName]	[]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	25034:25035	569:569	""	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	25054:25097	570:570	"Don't panic! I'm just a friendly reminder!"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	25116:25170	571:571	"timeout() should not be used with atMost() because..."	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	25189:25275	572:572	"...it does not make much sense - the test would have passed immediately in concurency"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	25294:25371	573:573	"We kept this method only to avoid compilation errors when upgrading Mockito."	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	25390:25458	574:574	"In future release we will remove timeout(x).atMost(y) from the API."	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	25477:25532	575:575	"If you want to find out more please refer to issue 235"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	25551:25552	576:576	""	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	25029:25553	569:576	join("", "Don't panic! I'm just a friendly reminder!", "timeout() should not be used with atMost() because...", "...it does not make much sense - the test would have passed immediately in concurency", "We kept this method only to avoid compilation errors when upgrading Mockito.", "In future release we will remove timeout(x).atMost(y) from the API.", "If you want to find out more please refer to issue 235", "")	[:join]	[]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.FriendlyReminderException	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	24999:25554	569:576	new org.mockito.exceptions.FriendlyReminderException(join("", "Don't panic! I'm just a friendly reminder!", "timeout() should not be used with atMost() because...", "...it does not make much sense - the test would have passed immediately in concurency", "We kept this method only to avoid compilation errors when upgrading Mockito.", "In future release we will remove timeout(x).atMost(y) from the API.", "If you want to find out more please refer to issue 235", ""))	[:join]	[]	[spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	24993:25555	569:576	throw new org.mockito.exceptions.FriendlyReminderException(join("", "Don't panic! I'm just a friendly reminder!", "timeout() should not be used with atMost() because...", "...it does not make much sense - the test would have passed immediately in concurency", "We kept this method only to avoid compilation errors when upgrading Mockito.", "In future release we will remove timeout(x).atMost(y) from the API.", "If you want to find out more please refer to issue 235", ""))	[:join]	[]	[]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	25705:25751	581:581	"Cannot instantiate @InjectMocks field named '"	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.reflect.Field	Expression	class spoon.support.reflect.code.CtVariableReadImpl	25755:25759	581:581	field	[]	[java.lang.reflect.Field:field]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtInvocationImpl	25755:25769	581:581	field.getName()	[java.lang.String:getName]	[java.lang.reflect.Field:field]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	25705:25769	581:581	"Cannot instantiate @InjectMocks field named '" + (field.getName())	[java.lang.String:getName]	[java.lang.reflect.Field:field]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	25773:25785	581:581	"' of type '"	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	25705:25785	581:581	("Cannot instantiate @InjectMocks field named '" + (field.getName())) + "' of type '"	[java.lang.String:getName]	[java.lang.reflect.Field:field]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.reflect.Field	Expression	class spoon.support.reflect.code.CtVariableReadImpl	25789:25793	581:581	field	[]	[java.lang.reflect.Field:field]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<?>	Expression	class spoon.support.reflect.code.CtInvocationImpl	25789:25803	581:581	field.getType()	[java.lang.Class<?>:getType]	[java.lang.reflect.Field:field]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	25705:25803	581:581	(("Cannot instantiate @InjectMocks field named '" + (field.getName())) + "' of type '") + (field.getType())	[java.lang.String:getName, java.lang.Class<?>:getType]	[java.lang.reflect.Field:field]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	25808:25811	581:581	"'."	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	25705:25811	581:581	((("Cannot instantiate @InjectMocks field named '" + (field.getName())) + "' of type '") + (field.getType())) + "'."	[java.lang.String:getName, java.lang.Class<?>:getType]	[java.lang.reflect.Field:field]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	25830:25923	582:582	"You haven't provided the instance at field declaration so I tried to construct the instance."	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	25942:26016	583:583	"However the constructor or the initialization block threw an exception : "	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Throwable	Expression	class spoon.support.reflect.code.CtVariableReadImpl	26020:26026	583:583	details	[]	[java.lang.Throwable:details]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtInvocationImpl	26020:26039	583:583	details.getMessage()	[java.lang.String:getMessage]	[java.lang.Throwable:details]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	25942:26039	583:583	"However the constructor or the initialization block threw an exception : " + (details.getMessage())	[java.lang.String:getMessage]	[java.lang.Throwable:details]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	26058:26059	584:584	""	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	25683:26060	580:584	join((((("Cannot instantiate @InjectMocks field named '" + (field.getName())) + "' of type '") + (field.getType())) + "'."), "You haven't provided the instance at field declaration so I tried to construct the instance.", ("However the constructor or the initialization block threw an exception : " + (details.getMessage())), "")	[java.lang.String:getName, java.lang.String:getMessage, java.lang.Class<?>:getType, :join]	[java.lang.reflect.Field:field, java.lang.Throwable:details]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Throwable	Expression	class spoon.support.reflect.code.CtVariableReadImpl	26063:26069	584:584	details	[]	[java.lang.Throwable:details]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.base.MockitoException	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	25662:26070	580:584	new org.mockito.exceptions.base.MockitoException(join((((("Cannot instantiate @InjectMocks field named '" + (field.getName())) + "' of type '") + (field.getType())) + "'."), "You haven't provided the instance at field declaration so I tried to construct the instance.", ("However the constructor or the initialization block threw an exception : " + (details.getMessage())), ""), details)	[java.lang.String:getName, java.lang.String:getMessage, java.lang.Class<?>:getType, :join]	[java.lang.reflect.Field:field, java.lang.Throwable:details]	[spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	25656:26071	580:584	throw new org.mockito.exceptions.base.MockitoException(join((((("Cannot instantiate @InjectMocks field named '" + (field.getName())) + "' of type '") + (field.getType())) + "'."), "You haven't provided the instance at field declaration so I tried to construct the instance.", ("However the constructor or the initialization block threw an exception : " + (details.getMessage())), ""), details)	[java.lang.String:getName, java.lang.String:getMessage, java.lang.Class<?>:getType, :join]	[java.lang.reflect.Field:field, java.lang.Throwable:details]	[]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	26182:26236	589:589	"invocationListeners() does not accept null parameters"	[]	[]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl]
org.mockito.exceptions.base.MockitoException	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	26161:26237	589:589	new org.mockito.exceptions.base.MockitoException("invocationListeners() does not accept null parameters")	[]	[]	[spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	26155:26238	589:589	throw new org.mockito.exceptions.base.MockitoException("invocationListeners() does not accept null parameters")	[]	[]	[]	[spoon.support.reflect.code.CtThrowImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	26348:26401	593:593	"invocationListeners() requires at least one listener"	[]	[]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl]
org.mockito.exceptions.base.MockitoException	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	26327:26402	593:593	new org.mockito.exceptions.base.MockitoException("invocationListeners() requires at least one listener")	[]	[]	[spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	26321:26403	593:593	throw new org.mockito.exceptions.base.MockitoException("invocationListeners() requires at least one listener")	[]	[]	[]	[spoon.support.reflect.code.CtThrowImpl]
void	Expression	class spoon.support.reflect.code.CtTypeAccessImpl	26556:26567	597:597	org.mockito.internal.util.StringJoiner	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	26591:26626	598:598	"The invocation listener with type "	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.listeners.InvocationListener	Expression	class spoon.support.reflect.code.CtVariableReadImpl	26630:26637	598:598	listener	[]	[org.mockito.listeners.InvocationListener:listener]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	26630:26648	598:598	listener.getClass()	[:getClass]	[org.mockito.listeners.InvocationListener:listener]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	26630:26658	598:598	listener.getClass().getName()	[:getClass]	[org.mockito.listeners.InvocationListener:listener]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	26591:26658	598:598	"The invocation listener with type " + (listener.getClass().getName())	[:getClass]	[org.mockito.listeners.InvocationListener:listener]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	26677:26699	599:599	"threw an exception : "	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Throwable	Expression	class spoon.support.reflect.code.CtVariableReadImpl	26703:26719	599:599	listenerThrowable	[]	[java.lang.Throwable:listenerThrowable]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<? extends java.lang.Throwable>	Expression	class spoon.support.reflect.code.CtInvocationImpl	26703:26730	599:599	listenerThrowable.getClass()	[java.lang.Class<? extends java.lang.Throwable>:getClass]	[java.lang.Throwable:listenerThrowable]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtInvocationImpl	26703:26740	599:599	listenerThrowable.getClass().getName()	[java.lang.Class<? extends java.lang.Throwable>:getClass, java.lang.String:getClass]	[java.lang.Throwable:listenerThrowable]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	26677:26740	599:599	"threw an exception : " + (listenerThrowable.getClass().getName())	[java.lang.Class<? extends java.lang.Throwable>:getClass, java.lang.String:getClass]	[java.lang.Throwable:listenerThrowable]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Throwable	Expression	class spoon.support.reflect.code.CtVariableReadImpl	26744:26760	599:599	listenerThrowable	[]	[java.lang.Throwable:listenerThrowable]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtInvocationImpl	26744:26773	599:599	listenerThrowable.getMessage()	[java.lang.String:getMessage]	[java.lang.Throwable:listenerThrowable]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	26677:26773	599:599	("threw an exception : " + (listenerThrowable.getClass().getName())) + (listenerThrowable.getMessage())	[java.lang.Class<? extends java.lang.Throwable>:getClass, java.lang.String:getClass, java.lang.String:getMessage]	[java.lang.Throwable:listenerThrowable]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	26556:26774	597:599	org.mockito.internal.util.StringJoiner.join(("The invocation listener with type " + (listener.getClass().getName())), (("threw an exception : " + (listenerThrowable.getClass().getName())) + (listenerThrowable.getMessage())))	[java.lang.Class<? extends java.lang.Throwable>:getClass, java.lang.String:getClass, :getClass, java.lang.String:getMessage, :join]	[java.lang.Throwable:listenerThrowable, org.mockito.listeners.InvocationListener:listener]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Throwable	Expression	class spoon.support.reflect.code.CtVariableReadImpl	26777:26793	599:599	listenerThrowable	[]	[java.lang.Throwable:listenerThrowable]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.base.MockitoException	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	26535:26794	597:599	new org.mockito.exceptions.base.MockitoException(org.mockito.internal.util.StringJoiner.join(("The invocation listener with type " + (listener.getClass().getName())), (("threw an exception : " + (listenerThrowable.getClass().getName())) + (listenerThrowable.getMessage()))), listenerThrowable)	[java.lang.Class<? extends java.lang.Throwable>:getClass, java.lang.String:getClass, :getClass, java.lang.String:getMessage, :join]	[java.lang.Throwable:listenerThrowable, org.mockito.listeners.InvocationListener:listener]	[spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	26529:26795	597:599	throw new org.mockito.exceptions.base.MockitoException(org.mockito.internal.util.StringJoiner.join(("The invocation listener with type " + (listener.getClass().getName())), (("threw an exception : " + (listenerThrowable.getClass().getName())) + (listenerThrowable.getMessage()))), listenerThrowable)	[java.lang.Class<? extends java.lang.Throwable>:getClass, java.lang.String:getClass, :getClass, java.lang.String:getMessage, :join]	[java.lang.Throwable:listenerThrowable, org.mockito.listeners.InvocationListener:listener]	[]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	26955:26997	604:604	"Mockito couldn't inject mock dependency '"	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.internal.util.MockUtil	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	27001:27014	604:604	new org.mockito.internal.util.MockUtil()	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Object	Expression	class spoon.support.reflect.code.CtVariableReadImpl	27028:27039	604:604	matchingMock	[]	[java.lang.Object:matchingMock]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	27001:27040	604:604	new org.mockito.internal.util.MockUtil().getMockName(matchingMock)	[:MockUtil]	[java.lang.Object:matchingMock]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	26955:27040	604:604	"Mockito couldn't inject mock dependency '" + (new org.mockito.internal.util.MockUtil().getMockName(matchingMock))	[:MockUtil]	[java.lang.Object:matchingMock]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	27044:27056	604:604	"' on field "	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	26955:27056	604:604	("Mockito couldn't inject mock dependency '" + (new org.mockito.internal.util.MockUtil().getMockName(matchingMock))) + "' on field "	[:MockUtil]	[java.lang.Object:matchingMock]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	27075:27077	605:605	"'"	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.reflect.Field	Expression	class spoon.support.reflect.code.CtVariableReadImpl	27081:27085	605:605	field	[]	[java.lang.reflect.Field:field]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	27075:27085	605:605	"'" + field	[]	[java.lang.reflect.Field:field]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	27089:27091	605:605	"'"	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	27075:27091	605:605	("'" + field) + "'"	[]	[java.lang.reflect.Field:field]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	27110:27123	606:606	"whose type '"	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.reflect.Field	Expression	class spoon.support.reflect.code.CtVariableReadImpl	27127:27131	606:606	field	[]	[java.lang.reflect.Field:field]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class<?>	Expression	class spoon.support.reflect.code.CtInvocationImpl	27127:27151	606:606	field.getDeclaringClass()	[java.lang.Class<?>:getDeclaringClass]	[java.lang.reflect.Field:field]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtInvocationImpl	27127:27170	606:606	field.getDeclaringClass().getCanonicalName()	[java.lang.String:getDeclaringClass, java.lang.Class<?>:getDeclaringClass]	[java.lang.reflect.Field:field]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	27110:27170	606:606	"whose type '" + (field.getDeclaringClass().getCanonicalName())	[java.lang.String:getDeclaringClass, java.lang.Class<?>:getDeclaringClass]	[java.lang.reflect.Field:field]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	27174:27220	606:606	"' was annotated by @InjectMocks in your test."	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	27110:27220	606:606	("whose type '" + (field.getDeclaringClass().getCanonicalName())) + "' was annotated by @InjectMocks in your test."	[java.lang.String:getDeclaringClass, java.lang.Class<?>:getDeclaringClass]	[java.lang.reflect.Field:field]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	27239:27263	607:607	"Also I failed because: "	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Exception	Expression	class spoon.support.reflect.code.CtVariableReadImpl	27267:27273	607:607	details	[]	[java.lang.Exception:details]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Throwable	Expression	class spoon.support.reflect.code.CtInvocationImpl	27267:27284	607:607	details.getCause()	[java.lang.Throwable:getCause]	[java.lang.Exception:details]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtInvocationImpl	27267:27297	607:607	details.getCause().getMessage()	[java.lang.String:getCause, java.lang.Throwable:getCause]	[java.lang.Exception:details]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	27239:27297	607:607	"Also I failed because: " + (details.getCause().getMessage())	[java.lang.String:getCause, java.lang.Throwable:getCause]	[java.lang.Exception:details]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	27316:27317	608:608	""	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	26933:27327	603:609	join((("Mockito couldn't inject mock dependency '" + (new org.mockito.internal.util.MockUtil().getMockName(matchingMock))) + "' on field "), (("'" + field) + "'"), (("whose type '" + (field.getDeclaringClass().getCanonicalName())) + "' was annotated by @InjectMocks in your test."), ("Also I failed because: " + (details.getCause().getMessage())), "")	[java.lang.String:getCause, java.lang.String:getDeclaringClass, java.lang.Throwable:getCause, java.lang.Class<?>:getDeclaringClass, :join, :MockUtil]	[java.lang.Exception:details, java.lang.reflect.Field:field, java.lang.Object:matchingMock]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Exception	Expression	class spoon.support.reflect.code.CtVariableReadImpl	27330:27336	609:609	details	[]	[java.lang.Exception:details]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.base.MockitoException	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	26912:27337	603:609	new org.mockito.exceptions.base.MockitoException(join((("Mockito couldn't inject mock dependency '" + (new org.mockito.internal.util.MockUtil().getMockName(matchingMock))) + "' on field "), (("'" + field) + "'"), (("whose type '" + (field.getDeclaringClass().getCanonicalName())) + "' was annotated by @InjectMocks in your test."), ("Also I failed because: " + (details.getCause().getMessage())), ""), details)	[java.lang.String:getCause, java.lang.String:getDeclaringClass, java.lang.Throwable:getCause, java.lang.Class<?>:getDeclaringClass, :join, :MockUtil]	[java.lang.Exception:details, java.lang.reflect.Field:field, java.lang.Object:matchingMock]	[spoon.support.reflect.code.CtThrowImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	26906:27338	603:609	throw new org.mockito.exceptions.base.MockitoException(join((("Mockito couldn't inject mock dependency '" + (new org.mockito.internal.util.MockUtil().getMockName(matchingMock))) + "' on field "), (("'" + field) + "'"), (("whose type '" + (field.getDeclaringClass().getCanonicalName())) + "' was annotated by @InjectMocks in your test."), ("Also I failed because: " + (details.getCause().getMessage())), ""), details)	[java.lang.String:getCause, java.lang.String:getDeclaringClass, java.lang.Throwable:getCause, java.lang.Class<?>:getDeclaringClass, :join, :MockUtil]	[java.lang.Exception:details, java.lang.reflect.Field:field, java.lang.Object:matchingMock]	[]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]

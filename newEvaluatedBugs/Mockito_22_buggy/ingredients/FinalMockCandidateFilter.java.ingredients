java.util.Collection<java.lang.Object>	Expression	class spoon.support.reflect.code.CtVariableReadImpl	943:947	24:24	mocks	[]	[java.util.Collection<java.lang.Object>:mocks]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
int	Expression	class spoon.support.reflect.code.CtInvocationImpl	943:954	24:24	mocks.size()	[int:size]	[java.util.Collection<java.lang.Object>:mocks]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
int	Expression	class spoon.support.reflect.code.CtLiteralImpl	959:959	24:24	1	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	943:959	24:24	(mocks.size()) == 1	[int:size]	[java.util.Collection<java.lang.Object>:mocks]	[spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.util.Collection<java.lang.Object>	Expression	class spoon.support.reflect.code.CtVariableReadImpl	1004:1008	25:25	mocks	[]	[java.util.Collection<java.lang.Object>:mocks]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.util.Iterator<java.lang.Object>	Expression	class spoon.support.reflect.code.CtInvocationImpl	1004:1019	25:25	mocks.iterator()	[java.util.Iterator<java.lang.Object>:iterator]	[java.util.Collection<java.lang.Object>:mocks]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Object	Expression	class spoon.support.reflect.code.CtInvocationImpl	1004:1026	25:25	mocks.iterator().next()	[java.lang.Object:iterator, java.util.Iterator<java.lang.Object>:iterator]	[java.util.Collection<java.lang.Object>:mocks]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtLocalVariableImpl	Statement	class spoon.support.reflect.code.CtLocalVariableImpl	976:1027	25:25	final java.lang.Object matchingMock = mocks.iterator().next()	[java.lang.Object:iterator, java.util.Iterator<java.lang.Object>:iterator]	[java.util.Collection<java.lang.Object>:mocks]	[spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Object	Expression	class spoon.support.reflect.code.CtVariableReadImpl	1196:1208	30:30	fieldInstance	[]	[java.lang.Object:fieldInstance]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtUnaryOperatorImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.reflect.Field	Expression	class spoon.support.reflect.code.CtVariableReadImpl	1211:1215	30:30	field	[]	[java.lang.reflect.Field:field]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtUnaryOperatorImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.internal.util.reflection.BeanPropertySetter	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	1173:1216	30:30	new org.mockito.internal.util.reflection.BeanPropertySetter(fieldInstance, field)	[]	[java.lang.Object:fieldInstance, java.lang.reflect.Field:field]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtUnaryOperatorImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Object	Expression	class spoon.support.reflect.code.CtVariableReadImpl	1222:1233	30:30	matchingMock	[]	[java.lang.Object:matchingMock]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtUnaryOperatorImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	1173:1234	30:30	new org.mockito.internal.util.reflection.BeanPropertySetter(fieldInstance, field).set(matchingMock)	[:BeanPropertySetter]	[java.lang.Object:fieldInstance, java.lang.reflect.Field:field, java.lang.Object:matchingMock]	[spoon.support.reflect.code.CtUnaryOperatorImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtUnaryOperatorImpl	1172:1234	30:30	!(new org.mockito.internal.util.reflection.BeanPropertySetter(fieldInstance, field).set(matchingMock))	[:BeanPropertySetter]	[java.lang.Object:fieldInstance, java.lang.reflect.Field:field, java.lang.Object:matchingMock]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Object	Expression	class spoon.support.reflect.code.CtVariableReadImpl	1283:1295	31:31	fieldInstance	[]	[java.lang.Object:fieldInstance]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtInvocationImpl]
java.lang.reflect.Field	Expression	class spoon.support.reflect.code.CtVariableReadImpl	1298:1302	31:31	field	[]	[java.lang.reflect.Field:field]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtInvocationImpl]
org.mockito.internal.util.reflection.FieldSetter	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	1267:1303	31:31	new org.mockito.internal.util.reflection.FieldSetter(fieldInstance, field)	[]	[java.lang.Object:fieldInstance, java.lang.reflect.Field:field]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtInvocationImpl]
java.lang.Object	Expression	class spoon.support.reflect.code.CtVariableReadImpl	1309:1320	31:31	matchingMock	[]	[java.lang.Object:matchingMock]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	1267:1322	31:31	new org.mockito.internal.util.reflection.FieldSetter(fieldInstance, field).set(matchingMock)	[:FieldSetter]	[java.lang.Object:fieldInstance, java.lang.reflect.Field:field, java.lang.Object:matchingMock]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtInvocationImpl]
CtIfImpl	Statement	class spoon.support.reflect.code.CtIfImpl	1168:1348	30:32	if (!(new org.mockito.internal.util.reflection.BeanPropertySetter(fieldInstance, field).set(matchingMock))) {    new org.mockito.internal.util.reflection.FieldSetter(fieldInstance, field).set(matchingMock);}	[:FieldSetter, :BeanPropertySetter]	[java.lang.Object:fieldInstance, java.lang.reflect.Field:field, java.lang.Object:matchingMock]	[spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.exceptions.Reporter	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	1425:1438	34:34	new org.mockito.exceptions.Reporter()	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtInvocationImpl]
java.lang.reflect.Field	Expression	class spoon.support.reflect.code.CtVariableReadImpl	1463:1467	34:34	field	[]	[java.lang.reflect.Field:field]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtInvocationImpl]
java.lang.Object	Expression	class spoon.support.reflect.code.CtVariableReadImpl	1470:1481	34:34	matchingMock	[]	[java.lang.Object:matchingMock]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtInvocationImpl]
java.lang.RuntimeException	Expression	class spoon.support.reflect.code.CtVariableReadImpl	1484:1484	34:34	e	[]	[java.lang.RuntimeException:e]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtInvocationImpl]
null	Expression	class spoon.support.reflect.code.CtInvocationImpl	1425:1486	34:34	new org.mockito.exceptions.Reporter().cannotInjectDependency(field, matchingMock, e)	[:Reporter]	[java.lang.reflect.Field:field, java.lang.RuntimeException:e, java.lang.Object:matchingMock]	[spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtInvocationImpl]
CtTryImpl	Statement	class spoon.support.reflect.code.CtTryImpl	1138:1508	29:35	try {    if (!(new org.mockito.internal.util.reflection.BeanPropertySetter(fieldInstance, field).set(matchingMock))) {        new org.mockito.internal.util.reflection.FieldSetter(fieldInstance, field).set(matchingMock);    }} catch (java.lang.RuntimeException e) {    new org.mockito.exceptions.Reporter().cannotInjectDependency(field, matchingMock, e);}	[:FieldSetter, :BeanPropertySetter, :Reporter]	[java.lang.Object:fieldInstance, java.lang.reflect.Field:field, java.lang.RuntimeException:e, java.lang.Object:matchingMock]	[]	[spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Object	Expression	class spoon.support.reflect.code.CtVariableReadImpl	1537:1548	36:36	matchingMock	[]	[java.lang.Object:matchingMock]	[spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtReturnImpl	Statement	class spoon.support.reflect.code.CtReturnImpl	1530:1549	36:36	return matchingMock	[]	[java.lang.Object:matchingMock]	[]	[spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.mockito.internal.configuration.injection.filter.OngoingInjecter	Expression	class spoon.support.reflect.code.CtNewClassImpl	1049:1581	27:38	new org.mockito.internal.configuration.injection.filter.OngoingInjecter() {    public java.lang.Object thenInject() {        try {            if (!(new org.mockito.internal.util.reflection.BeanPropertySetter(fieldInstance, field).set(matchingMock))) {                new org.mockito.internal.util.reflection.FieldSetter(fieldInstance, field).set(matchingMock);            }        } catch (java.lang.RuntimeException e) {            new org.mockito.exceptions.Reporter().cannotInjectDependency(field, matchingMock, e);        }        return matchingMock;    }}	[:FieldSetter, :BeanPropertySetter, :Reporter]	[java.lang.Object:fieldInstance, java.lang.reflect.Field:field, java.lang.RuntimeException:e, java.lang.Object:matchingMock]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtReturnImpl	Statement	class spoon.support.reflect.code.CtReturnImpl	1042:1582	27:38	return new org.mockito.internal.configuration.injection.filter.OngoingInjecter() {    public java.lang.Object thenInject() {        try {            if (!(new org.mockito.internal.util.reflection.BeanPropertySetter(fieldInstance, field).set(matchingMock))) {                new org.mockito.internal.util.reflection.FieldSetter(fieldInstance, field).set(matchingMock);            }        } catch (java.lang.RuntimeException e) {            new org.mockito.exceptions.Reporter().cannotInjectDependency(field, matchingMock, e);        }        return matchingMock;    }}	[:FieldSetter, :BeanPropertySetter, :Reporter]	[java.lang.Object:fieldInstance, java.lang.reflect.Field:field, java.lang.RuntimeException:e, java.lang.Object:matchingMock]	[spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtIfImpl	Statement	class spoon.support.reflect.code.CtIfImpl	940:1592	24:39	if ((mocks.size()) == 1) {    final java.lang.Object matchingMock = mocks.iterator().next();    return new org.mockito.internal.configuration.injection.filter.OngoingInjecter() {        public java.lang.Object thenInject() {            try {                if (!(new org.mockito.internal.util.reflection.BeanPropertySetter(fieldInstance, field).set(matchingMock))) {                    new org.mockito.internal.util.reflection.FieldSetter(fieldInstance, field).set(matchingMock);                }            } catch (java.lang.RuntimeException e) {                new org.mockito.exceptions.Reporter().cannotInjectDependency(field, matchingMock, e);            }            return matchingMock;        }    };}	[:FieldSetter, :BeanPropertySetter, int:size, java.lang.Object:iterator, java.util.Iterator<java.lang.Object>:iterator, :Reporter]	[java.lang.Object:fieldInstance, java.lang.reflect.Field:field, java.lang.RuntimeException:e, java.lang.Object:matchingMock, java.util.Collection<java.lang.Object>:mocks]	[]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
<nulltype>	Expression	class spoon.support.reflect.code.CtLiteralImpl	1698:1701	43:43	null	[]	[]	[spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl]
CtReturnImpl	Statement	class spoon.support.reflect.code.CtReturnImpl	1691:1702	43:43	return null	[]	[]	[]	[spoon.support.reflect.code.CtReturnImpl]
org.mockito.internal.configuration.injection.filter.OngoingInjecter	Expression	class spoon.support.reflect.code.CtNewClassImpl	1610:1726	41:45	new org.mockito.internal.configuration.injection.filter.OngoingInjecter() {    public java.lang.Object thenInject() {        return null;    }}	[]	[]	[spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtReturnImpl	Statement	class spoon.support.reflect.code.CtReturnImpl	1603:1727	41:45	return new org.mockito.internal.configuration.injection.filter.OngoingInjecter() {    public java.lang.Object thenInject() {        return null;    }}	[]	[]	[]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]

Matcher		java.util.regex.Matcher	[]
Matcher		java.util.regex.Matcher	[java.util.regex.Pattern, java.lang.CharSequence]
Matcher	java.util.regex.Pattern	pattern	[]
Matcher	java.util.regex.MatchResult	toMatchResult	[]
Matcher	java.util.regex.Matcher	usePattern	[java.util.regex.Pattern]
Matcher	java.util.regex.Matcher	reset	[]
Matcher	java.util.regex.Matcher	reset	[java.lang.CharSequence]
Matcher	int	start	[]
Matcher	int	start	[int]
Matcher	int	start	[java.lang.String]
Matcher	int	end	[]
Matcher	int	end	[int]
Matcher	int	end	[java.lang.String]
Matcher	java.lang.String	group	[]
Matcher	java.lang.String	group	[int]
Matcher	java.lang.String	group	[java.lang.String]
Matcher	int	groupCount	[]
Matcher	boolean	matches	[]
Matcher	boolean	find	[]
Matcher	boolean	find	[int]
Matcher	boolean	lookingAt	[]
Matcher	java.lang.String	quoteReplacement	[java.lang.String]
Matcher	java.util.regex.Matcher	appendReplacement	[java.lang.StringBuffer, java.lang.String]
Matcher	java.lang.StringBuffer	appendTail	[java.lang.StringBuffer]
Matcher	java.lang.String	replaceAll	[java.lang.String]
Matcher	java.lang.String	replaceFirst	[java.lang.String]
Matcher	java.util.regex.Matcher	region	[int, int]
Matcher	int	regionStart	[]
Matcher	int	regionEnd	[]
Matcher	boolean	hasTransparentBounds	[]
Matcher	java.util.regex.Matcher	useTransparentBounds	[boolean]
Matcher	boolean	hasAnchoringBounds	[]
Matcher	java.util.regex.Matcher	useAnchoringBounds	[boolean]
Matcher	java.lang.String	toString	[]
Matcher	boolean	hitEnd	[]
Matcher	boolean	requireEnd	[]
Matcher	boolean	search	[int]
Matcher	boolean	match	[int, int]
Matcher	int	getTextLength	[]
Matcher	java.lang.CharSequence	getSubSequence	[int, int]
Matcher	char	charAt	[int]
Matcher	int	getMatchedGroupIndex	[java.lang.String]
TreeInfo		java.util.regex.Pattern$TreeInfo	[]
TreeInfo	void	reset	[]
BitClass		java.util.regex.Pattern$BitClass	[]
BitClass		java.util.regex.Pattern$BitClass	[boolean[]]
BitClass	java.util.regex.Pattern.BitClass	add	[int, int]
BitClass	boolean	isSatisfiedBy	[int]
Node		java.util.regex.Pattern$Node	[]
Node	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
Node	boolean	study	[java.util.regex.Pattern$TreeInfo]
LastNode		java.util.regex.Pattern$LastNode	[]
LastNode	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
Start		java.util.regex.Pattern$Start	[java.util.regex.Pattern$Node]
Start	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
Start	boolean	study	[java.util.regex.Pattern$TreeInfo]
StartS		java.util.regex.Pattern$StartS	[java.util.regex.Pattern$Node]
StartS	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
Begin		java.util.regex.Pattern$Begin	[]
Begin	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
End		java.util.regex.Pattern$End	[]
End	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
Caret		java.util.regex.Pattern$Caret	[]
Caret	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
UnixCaret		java.util.regex.Pattern$UnixCaret	[]
UnixCaret	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
LastMatch		java.util.regex.Pattern$LastMatch	[]
LastMatch	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
Dollar		java.util.regex.Pattern$Dollar	[boolean]
Dollar	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
Dollar	boolean	study	[java.util.regex.Pattern$TreeInfo]
UnixDollar		java.util.regex.Pattern$UnixDollar	[boolean]
UnixDollar	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
UnixDollar	boolean	study	[java.util.regex.Pattern$TreeInfo]
LineEnding		java.util.regex.Pattern$LineEnding	[]
LineEnding	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
LineEnding	boolean	study	[java.util.regex.Pattern$TreeInfo]
CharProperty		java.util.regex.Pattern$CharProperty	[]
CharProperty	boolean	isSatisfiedBy	[int]
1		java.util.regex.Pattern$CharProperty$1	[]
1	boolean	isSatisfiedBy	[int]
CharProperty	java.util.regex.Pattern.CharProperty	complement	[]
CharProperty	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
CharProperty	boolean	study	[java.util.regex.Pattern$TreeInfo]
BmpCharProperty		java.util.regex.Pattern$BmpCharProperty	[]
BmpCharProperty	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
SingleS		java.util.regex.Pattern$SingleS	[int]
SingleS	boolean	isSatisfiedBy	[int]
Single		java.util.regex.Pattern$Single	[int]
Single	boolean	isSatisfiedBy	[int]
SingleI		java.util.regex.Pattern$SingleI	[int, int]
SingleI	boolean	isSatisfiedBy	[int]
SingleU		java.util.regex.Pattern$SingleU	[int]
SingleU	boolean	isSatisfiedBy	[int]
Block		java.util.regex.Pattern$Block	[java.lang.Character$UnicodeBlock]
Block	boolean	isSatisfiedBy	[int]
Script		java.util.regex.Pattern$Script	[java.lang.Character$UnicodeScript]
Script	boolean	isSatisfiedBy	[int]
Category		java.util.regex.Pattern$Category	[int]
Category	boolean	isSatisfiedBy	[int]
Utype		java.util.regex.Pattern$Utype	[java.util.regex.UnicodeProp]
Utype	boolean	isSatisfiedBy	[int]
Ctype		java.util.regex.Pattern$Ctype	[int]
Ctype	boolean	isSatisfiedBy	[int]
VertWS		java.util.regex.Pattern$VertWS	[]
VertWS	boolean	isSatisfiedBy	[int]
HorizWS		java.util.regex.Pattern$HorizWS	[]
HorizWS	boolean	isSatisfiedBy	[int]
SliceNode		java.util.regex.Pattern$SliceNode	[int[]]
SliceNode	boolean	study	[java.util.regex.Pattern$TreeInfo]
Slice		java.util.regex.Pattern$Slice	[int[]]
Slice	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
SliceI		java.util.regex.Pattern$SliceI	[int[]]
SliceI	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
SliceU		java.util.regex.Pattern$SliceU	[int[]]
SliceU	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
SliceS		java.util.regex.Pattern$SliceS	[int[]]
SliceS	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
SliceIS		java.util.regex.Pattern$SliceIS	[int[]]
SliceIS	int	toLower	[int]
SliceIS	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
SliceUS		java.util.regex.Pattern$SliceUS	[int[]]
SliceUS	int	toLower	[int]
All		java.util.regex.Pattern$All	[]
All	boolean	isSatisfiedBy	[int]
Dot		java.util.regex.Pattern$Dot	[]
Dot	boolean	isSatisfiedBy	[int]
UnixDot		java.util.regex.Pattern$UnixDot	[]
UnixDot	boolean	isSatisfiedBy	[int]
Ques		java.util.regex.Pattern$Ques	[java.util.regex.Pattern$Node, int]
Ques	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
Ques	boolean	study	[java.util.regex.Pattern$TreeInfo]
Curly		java.util.regex.Pattern$Curly	[java.util.regex.Pattern$Node, int, int, int]
Curly	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
Curly	boolean	match0	[java.util.regex.Matcher, int, int, java.lang.CharSequence]
Curly	boolean	match1	[java.util.regex.Matcher, int, int, java.lang.CharSequence]
Curly	boolean	match2	[java.util.regex.Matcher, int, int, java.lang.CharSequence]
Curly	boolean	study	[java.util.regex.Pattern$TreeInfo]
GroupCurly		java.util.regex.Pattern$GroupCurly	[java.util.regex.Pattern$Node, int, int, int, int, int, boolean]
GroupCurly	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
GroupCurly	boolean	match0	[java.util.regex.Matcher, int, int, java.lang.CharSequence]
GroupCurly	boolean	match1	[java.util.regex.Matcher, int, int, java.lang.CharSequence]
GroupCurly	boolean	match2	[java.util.regex.Matcher, int, int, java.lang.CharSequence]
GroupCurly	boolean	study	[java.util.regex.Pattern$TreeInfo]
BranchConn		java.util.regex.Pattern$BranchConn	[]
BranchConn	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
BranchConn	boolean	study	[java.util.regex.Pattern$TreeInfo]
Branch		java.util.regex.Pattern$Branch	[java.util.regex.Pattern$Node, java.util.regex.Pattern$Node, java.util.regex.Pattern$Node]
Branch	void	add	[java.util.regex.Pattern$Node]
Branch	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
Branch	boolean	study	[java.util.regex.Pattern$TreeInfo]
GroupHead		java.util.regex.Pattern$GroupHead	[int]
GroupHead	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
GroupHead	boolean	matchRef	[java.util.regex.Matcher, int, java.lang.CharSequence]
GroupRef		java.util.regex.Pattern$GroupRef	[java.util.regex.Pattern$GroupHead]
GroupRef	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
GroupRef	boolean	study	[java.util.regex.Pattern$TreeInfo]
GroupTail		java.util.regex.Pattern$GroupTail	[int, int]
GroupTail	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
Prolog		java.util.regex.Pattern$Prolog	[java.util.regex.Pattern$Loop]
Prolog	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
Prolog	boolean	study	[java.util.regex.Pattern$TreeInfo]
Loop		java.util.regex.Pattern$Loop	[int, int]
Loop	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
Loop	boolean	matchInit	[java.util.regex.Matcher, int, java.lang.CharSequence]
Loop	boolean	study	[java.util.regex.Pattern$TreeInfo]
LazyLoop		java.util.regex.Pattern$LazyLoop	[int, int]
LazyLoop	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
LazyLoop	boolean	matchInit	[java.util.regex.Matcher, int, java.lang.CharSequence]
LazyLoop	boolean	study	[java.util.regex.Pattern$TreeInfo]
BackRef		java.util.regex.Pattern$BackRef	[int]
BackRef	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
BackRef	boolean	study	[java.util.regex.Pattern$TreeInfo]
CIBackRef		java.util.regex.Pattern$CIBackRef	[int, boolean]
CIBackRef	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
CIBackRef	boolean	study	[java.util.regex.Pattern$TreeInfo]
First		java.util.regex.Pattern$First	[java.util.regex.Pattern$Node]
First	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
First	boolean	study	[java.util.regex.Pattern$TreeInfo]
Conditional		java.util.regex.Pattern$Conditional	[java.util.regex.Pattern$Node, java.util.regex.Pattern$Node, java.util.regex.Pattern$Node]
Conditional	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
Conditional	boolean	study	[java.util.regex.Pattern$TreeInfo]
Pos		java.util.regex.Pattern$Pos	[java.util.regex.Pattern$Node]
Pos	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
Neg		java.util.regex.Pattern$Neg	[java.util.regex.Pattern$Node]
Neg	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
Behind		java.util.regex.Pattern$Behind	[java.util.regex.Pattern$Node, int, int]
Behind	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
BehindS		java.util.regex.Pattern$BehindS	[java.util.regex.Pattern$Node, int, int]
BehindS	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
NotBehind		java.util.regex.Pattern$NotBehind	[java.util.regex.Pattern$Node, int, int]
NotBehind	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
NotBehindS		java.util.regex.Pattern$NotBehindS	[java.util.regex.Pattern$Node, int, int]
NotBehindS	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
Bound		java.util.regex.Pattern$Bound	[int, boolean]
Bound	boolean	isWord	[int]
Bound	int	check	[java.util.regex.Matcher, int, java.lang.CharSequence]
Bound	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
BnM	java.util.regex.Pattern.Node	optimize	[java.util.regex.Pattern$Node]
BnM		java.util.regex.Pattern$BnM	[int[], int[], int[], java.util.regex.Pattern$Node]
BnM	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
BnM	boolean	study	[java.util.regex.Pattern$TreeInfo]
BnMS		java.util.regex.Pattern$BnMS	[int[], int[], int[], java.util.regex.Pattern$Node]
BnMS	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
CharPropertyFactory		java.util.regex.Pattern$CharPropertyNames$CharPropertyFactory	[]
CharPropertyFactory	java.util.regex.Pattern.CharProperty	make	[]
CloneableProperty		java.util.regex.Pattern$CharPropertyNames$CloneableProperty	[]
CloneableProperty	java.util.regex.Pattern.CharPropertyNames.CloneableProperty	clone	[]
1		java.util.regex.Pattern$CharPropertyNames$1	[]
1	java.util.regex.Pattern.CharProperty	make	[]
2		java.util.regex.Pattern$CharPropertyNames$2	[]
2	boolean	isSatisfiedBy	[int]
3		java.util.regex.Pattern$CharPropertyNames$3	[]
3	boolean	isSatisfiedBy	[int]
4		java.util.regex.Pattern$CharPropertyNames$4	[]
4	boolean	isSatisfiedBy	[int]
5		java.util.regex.Pattern$CharPropertyNames$5	[]
5	boolean	isSatisfiedBy	[int]
6		java.util.regex.Pattern$CharPropertyNames$6	[]
6	boolean	isSatisfiedBy	[int]
7		java.util.regex.Pattern$CharPropertyNames$7	[]
7	boolean	isSatisfiedBy	[int]
8		java.util.regex.Pattern$CharPropertyNames$8	[]
8	boolean	isSatisfiedBy	[int]
9		java.util.regex.Pattern$CharPropertyNames$9	[]
9	boolean	isSatisfiedBy	[int]
10		java.util.regex.Pattern$CharPropertyNames$10	[]
10	boolean	isSatisfiedBy	[int]
11		java.util.regex.Pattern$CharPropertyNames$11	[]
11	boolean	isSatisfiedBy	[int]
12		java.util.regex.Pattern$CharPropertyNames$12	[]
12	boolean	isSatisfiedBy	[int]
13		java.util.regex.Pattern$CharPropertyNames$13	[]
13	boolean	isSatisfiedBy	[int]
14		java.util.regex.Pattern$CharPropertyNames$14	[]
14	boolean	isSatisfiedBy	[int]
15		java.util.regex.Pattern$CharPropertyNames$15	[]
15	boolean	isSatisfiedBy	[int]
16		java.util.regex.Pattern$CharPropertyNames$16	[]
16	boolean	isSatisfiedBy	[int]
17		java.util.regex.Pattern$CharPropertyNames$17	[]
17	boolean	isSatisfiedBy	[int]
18		java.util.regex.Pattern$CharPropertyNames$18	[]
18	boolean	isSatisfiedBy	[int]
19		java.util.regex.Pattern$CharPropertyNames$19	[]
19	boolean	isSatisfiedBy	[int]
CharPropertyNames		java.util.regex.Pattern$CharPropertyNames	[]
CharPropertyNames	java.util.regex.Pattern.CharProperty	charPropertyFor	[java.lang.String]
20		java.util.regex.Pattern$CharPropertyNames$20	[]
20	java.util.regex.Pattern.CharProperty	make	[]
CharPropertyNames	void	defCategory	[java.lang.String, int]
21		java.util.regex.Pattern$CharPropertyNames$21	[]
21	java.util.regex.Pattern.CharProperty	make	[]
CharPropertyNames	void	defRange	[java.lang.String, int, int]
22		java.util.regex.Pattern$CharPropertyNames$22	[]
22	java.util.regex.Pattern.CharProperty	make	[]
CharPropertyNames	void	defCtype	[java.lang.String, int]
23		java.util.regex.Pattern$CharPropertyNames$23	[]
23	java.util.regex.Pattern.CharProperty	make	[]
CharPropertyNames	void	defClone	[java.lang.String, java.util.regex.Pattern$CharPropertyNames$CloneableProperty]
1		java.util.regex.Pattern$1	[]
1	boolean	match	[java.util.regex.Matcher, int, java.lang.CharSequence]
Pattern	java.util.regex.Pattern	compile	[java.lang.String]
Pattern	java.util.regex.Pattern	compile	[java.lang.String, int]
Pattern	java.lang.String	pattern	[]
Pattern	java.lang.String	toString	[]
Pattern	java.util.regex.Matcher	matcher	[java.lang.CharSequence]
Pattern	int	flags	[]
Pattern	boolean	matches	[java.lang.String, java.lang.CharSequence]
Pattern	java.lang.String[]	split	[java.lang.CharSequence, int]
Pattern	java.lang.String[]	split	[java.lang.CharSequence]
Pattern	java.lang.String	quote	[java.lang.String]
Pattern	void	readObject	[java.io.ObjectInputStream]
Pattern		java.util.regex.Pattern	[java.lang.String, int]
Pattern	void	normalize	[]
Pattern	int	normalizeCharClass	[java.lang.StringBuilder, int]
Pattern	java.lang.String	produceEquivalentAlternation	[java.lang.String]
Pattern	java.lang.String[]	producePermutations	[java.lang.String]
Pattern	int	getClass	[int]
Pattern	java.lang.String	composeOneStep	[java.lang.String]
Pattern	void	RemoveQEQuoting	[]
Pattern	void	compile	[]
Pattern	java.util.Map<java.lang.String, java.lang.Integer>	namedGroups	[]
Pattern	void	printObjectTree	[java.util.regex.Pattern$Node]
Pattern	boolean	has	[int]
Pattern	void	accept	[int, java.lang.String]
Pattern	void	mark	[int]
Pattern	int	peek	[]
Pattern	int	read	[]
Pattern	int	readEscaped	[]
Pattern	int	next	[]
Pattern	int	nextEscaped	[]
Pattern	int	peekPastWhitespace	[int]
Pattern	int	parsePastWhitespace	[int]
Pattern	int	parsePastLine	[]
Pattern	int	peekPastLine	[]
Pattern	boolean	isLineSeparator	[int]
Pattern	int	skip	[]
Pattern	void	unread	[]
Pattern	java.util.regex.PatternSyntaxException	error	[java.lang.String]
Pattern	boolean	findSupplementary	[int, int]
Pattern	boolean	isSupplementary	[int]
Pattern	java.util.regex.Pattern.Node	expr	[java.util.regex.Pattern$Node]
Pattern	java.util.regex.Pattern.Node	sequence	[java.util.regex.Pattern$Node]
Pattern	java.util.regex.Pattern.Node	atom	[]
Pattern	void	append	[int, int]
Pattern	java.util.regex.Pattern.Node	ref	[int]
Pattern	int	escape	[boolean, boolean, boolean]
Pattern	java.util.regex.Pattern.CharProperty	clazz	[boolean]
Pattern	java.util.regex.Pattern.CharProperty	bitsOrSingle	[java.util.regex.Pattern$BitClass, int]
Pattern	java.util.regex.Pattern.CharProperty	range	[java.util.regex.Pattern$BitClass]
Pattern	java.util.regex.Pattern.CharProperty	family	[boolean, boolean]
Pattern	java.util.regex.Pattern.CharProperty	unicodeScriptPropertyFor	[java.lang.String]
Pattern	java.util.regex.Pattern.CharProperty	unicodeBlockPropertyFor	[java.lang.String]
Pattern	java.util.regex.Pattern.CharProperty	charPropertyNodeFor	[java.lang.String]
Pattern	java.lang.String	groupname	[int]
Pattern	java.util.regex.Pattern.Node	group0	[]
Pattern	java.util.regex.Pattern.Node	createGroup	[boolean]
Pattern	void	addFlag	[]
Pattern	void	subFlag	[]
Pattern	java.util.regex.Pattern.Node	closure	[java.util.regex.Pattern$Node]
Pattern	int	c	[]
Pattern	int	o	[]
Pattern	int	x	[]
Pattern	int	cursor	[]
Pattern	void	setcursor	[int]
Pattern	int	uxxxx	[]
Pattern	int	u	[]
Pattern	int	countChars	[java.lang.CharSequence, int, int]
Pattern	int	countCodePoints	[java.lang.CharSequence]
Pattern	java.util.regex.Pattern.CharProperty	newSingle	[int]
Pattern	java.util.regex.Pattern.Node	newSlice	[int[], int, boolean]
Pattern	boolean	inRange	[int, int, int]
2		java.util.regex.Pattern$2	[]
2	boolean	isSatisfiedBy	[int]
Pattern	java.util.regex.Pattern.CharProperty	rangeFor	[int, int]
3		java.util.regex.Pattern$3	[]
3	boolean	isSatisfiedBy	[int]
4		java.util.regex.Pattern$4	[]
4	boolean	isSatisfiedBy	[int]
Pattern	java.util.regex.Pattern.CharProperty	caseInsensitiveRangeFor	[int, int]
5		java.util.regex.Pattern$5	[]
5	boolean	isSatisfiedBy	[int]
Pattern	java.util.regex.Pattern.CharProperty	union	[java.util.regex.Pattern$CharProperty, java.util.regex.Pattern$CharProperty]
6		java.util.regex.Pattern$6	[]
6	boolean	isSatisfiedBy	[int]
Pattern	java.util.regex.Pattern.CharProperty	intersection	[java.util.regex.Pattern$CharProperty, java.util.regex.Pattern$CharProperty]
7		java.util.regex.Pattern$7	[]
7	boolean	isSatisfiedBy	[int]
Pattern	java.util.regex.Pattern.CharProperty	setDifference	[java.util.regex.Pattern$CharProperty, java.util.regex.Pattern$CharProperty]
Pattern	boolean	hasBaseCharacter	[java.util.regex.Matcher, int, java.lang.CharSequence]
Pattern	java.util.function.Predicate<java.lang.String>	asPredicate	[]
1MatcherIterator		java.util.regex.Pattern$1MatcherIterator	[]
1MatcherIterator	java.lang.String	next	[]
1MatcherIterator	boolean	hasNext	[]
Pattern	java.util.stream.Stream<java.lang.String>	splitAsStream	[java.lang.CharSequence]
Validate		org.jsoup.helper.Validate	[]
Validate	void	notNull	[java.lang.Object]
Validate	void	notNull	[java.lang.Object, java.lang.String]
Validate	void	isTrue	[boolean]
Validate	void	isTrue	[boolean, java.lang.String]
Validate	void	isFalse	[boolean]
Validate	void	isFalse	[boolean, java.lang.String]
Validate	void	noNullElements	[java.lang.Object[]]
Validate	void	noNullElements	[java.lang.Object[], java.lang.String]
Validate	void	notEmpty	[java.lang.String]
Validate	void	notEmpty	[java.lang.String, java.lang.String]
Validate	void	fail	[java.lang.String]
Comment		org.jsoup.nodes.Comment	[java.lang.String, java.lang.String]
Comment	java.lang.String	nodeName	[]
Comment	java.lang.String	getData	[]
Comment	void	outerHtmlHead	[java.lang.Appendable, int, org.jsoup.nodes.Document$OutputSettings]
Comment	void	outerHtmlTail	[java.lang.Appendable, int, org.jsoup.nodes.Document$OutputSettings]
Comment	java.lang.String	toString	[]
Syntax		org.jsoup.nodes.Document$OutputSettings$Syntax	[]
OutputSettings		org.jsoup.nodes.Document$OutputSettings	[]
OutputSettings	org.jsoup.nodes.Entities.EscapeMode	escapeMode	[]
OutputSettings	org.jsoup.nodes.Document.OutputSettings	escapeMode	[org.jsoup.nodes.Entities$EscapeMode]
OutputSettings	java.nio.charset.Charset	charset	[]
OutputSettings	org.jsoup.nodes.Document.OutputSettings	charset	[java.nio.charset.Charset]
OutputSettings	org.jsoup.nodes.Document.OutputSettings	charset	[java.lang.String]
OutputSettings	java.nio.charset.CharsetEncoder	encoder	[]
OutputSettings	org.jsoup.nodes.Document.OutputSettings.Syntax	syntax	[]
OutputSettings	org.jsoup.nodes.Document.OutputSettings	syntax	[org.jsoup.nodes.Document$OutputSettings$Syntax]
OutputSettings	boolean	prettyPrint	[]
OutputSettings	org.jsoup.nodes.Document.OutputSettings	prettyPrint	[boolean]
OutputSettings	boolean	outline	[]
OutputSettings	org.jsoup.nodes.Document.OutputSettings	outline	[boolean]
OutputSettings	int	indentAmount	[]
OutputSettings	org.jsoup.nodes.Document.OutputSettings	indentAmount	[int]
OutputSettings	org.jsoup.nodes.Document.OutputSettings	clone	[]
QuirksMode		org.jsoup.nodes.Document$QuirksMode	[]
Document		org.jsoup.nodes.Document	[java.lang.String]
Document	org.jsoup.nodes.Document	createShell	[java.lang.String]
Document	java.lang.String	location	[]
Document	org.jsoup.nodes.Element	head	[]
Document	org.jsoup.nodes.Element	body	[]
Document	java.lang.String	title	[]
Document	void	title	[java.lang.String]
Document	org.jsoup.nodes.Element	createElement	[java.lang.String]
Document	org.jsoup.nodes.Document	normalise	[]
Document	void	normaliseTextNodes	[org.jsoup.nodes.Element]
Document	void	normaliseStructure	[java.lang.String, org.jsoup.nodes.Element]
Document	org.jsoup.nodes.Element	findFirstElementByTagName	[java.lang.String, org.jsoup.nodes.Node]
Document	java.lang.String	outerHtml	[]
Document	org.jsoup.nodes.Element	text	[java.lang.String]
Document	java.lang.String	nodeName	[]
Document	void	charset	[java.nio.charset.Charset]
Document	java.nio.charset.Charset	charset	[]
Document	void	updateMetaCharsetElement	[boolean]
Document	boolean	updateMetaCharsetElement	[]
Document	org.jsoup.nodes.Document	clone	[]
Document	void	ensureMetaCharsetElement	[]
Document	org.jsoup.nodes.Document.OutputSettings	outputSettings	[]
Document	org.jsoup.nodes.Document	outputSettings	[org.jsoup.nodes.Document$OutputSettings]
Document	org.jsoup.nodes.Document.QuirksMode	quirksMode	[]
Document	org.jsoup.nodes.Document	quirksMode	[org.jsoup.nodes.Document$QuirksMode]
DocumentType		org.jsoup.nodes.DocumentType	[java.lang.String, java.lang.String, java.lang.String, java.lang.String]
DocumentType		org.jsoup.nodes.DocumentType	[java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
DocumentType	java.lang.String	nodeName	[]
DocumentType	void	outerHtmlHead	[java.lang.Appendable, int, org.jsoup.nodes.Document$OutputSettings]
DocumentType	void	outerHtmlTail	[java.lang.Appendable, int, org.jsoup.nodes.Document$OutputSettings]
DocumentType	boolean	has	[java.lang.String]
Element		org.jsoup.nodes.Element	[java.lang.String]
Element		org.jsoup.nodes.Element	[org.jsoup.parser.Tag, java.lang.String, org.jsoup.nodes.Attributes]
Element		org.jsoup.nodes.Element	[org.jsoup.parser.Tag, java.lang.String]
Element	java.lang.String	nodeName	[]
Element	java.lang.String	tagName	[]
Element	org.jsoup.nodes.Element	tagName	[java.lang.String]
Element	org.jsoup.parser.Tag	tag	[]
Element	boolean	isBlock	[]
Element	java.lang.String	id	[]
Element	org.jsoup.nodes.Element	attr	[java.lang.String, java.lang.String]
Element	org.jsoup.nodes.Element	attr	[java.lang.String, boolean]
Element	java.util.Map<java.lang.String, java.lang.String>	dataset	[]
Element	org.jsoup.nodes.Element	parent	[]
Element	org.jsoup.select.Elements	parents	[]
Element	void	accumulateParents	[org.jsoup.nodes.Element, org.jsoup.select.Elements]
Element	org.jsoup.nodes.Element	child	[int]
Element	org.jsoup.select.Elements	children	[]
Element	java.util.List<org.jsoup.nodes.TextNode>	textNodes	[]
Element	java.util.List<org.jsoup.nodes.DataNode>	dataNodes	[]
Element	org.jsoup.select.Elements	select	[java.lang.String]
Element	boolean	is	[java.lang.String]
Element	boolean	is	[org.jsoup.select.Evaluator]
Element	org.jsoup.nodes.Element	appendChild	[org.jsoup.nodes.Node]
Element	org.jsoup.nodes.Element	prependChild	[org.jsoup.nodes.Node]
Element	org.jsoup.nodes.Element	insertChildren	[int, java.util.Collection]
Element	org.jsoup.nodes.Element	appendElement	[java.lang.String]
Element	org.jsoup.nodes.Element	prependElement	[java.lang.String]
Element	org.jsoup.nodes.Element	appendText	[java.lang.String]
Element	org.jsoup.nodes.Element	prependText	[java.lang.String]
Element	org.jsoup.nodes.Element	append	[java.lang.String]
Element	org.jsoup.nodes.Element	prepend	[java.lang.String]
Element	org.jsoup.nodes.Element	before	[java.lang.String]
Element	org.jsoup.nodes.Element	before	[org.jsoup.nodes.Node]
Element	org.jsoup.nodes.Element	after	[java.lang.String]
Element	org.jsoup.nodes.Element	after	[org.jsoup.nodes.Node]
Element	org.jsoup.nodes.Element	empty	[]
Element	org.jsoup.nodes.Element	wrap	[java.lang.String]
Element	java.lang.String	cssSelector	[]
Element	org.jsoup.select.Elements	siblingElements	[]
Element	org.jsoup.nodes.Element	nextElementSibling	[]
Element	org.jsoup.nodes.Element	previousElementSibling	[]
Element	org.jsoup.nodes.Element	firstElementSibling	[]
Element	java.lang.Integer	elementSiblingIndex	[]
Element	org.jsoup.nodes.Element	lastElementSibling	[]
Element	java.lang.Integer	indexInList	[org.jsoup.nodes.Element, java.util.List]
Element	org.jsoup.select.Elements	getElementsByTag	[java.lang.String]
Element	org.jsoup.nodes.Element	getElementById	[java.lang.String]
Element	org.jsoup.select.Elements	getElementsByClass	[java.lang.String]
Element	org.jsoup.select.Elements	getElementsByAttribute	[java.lang.String]
Element	org.jsoup.select.Elements	getElementsByAttributeStarting	[java.lang.String]
Element	org.jsoup.select.Elements	getElementsByAttributeValue	[java.lang.String, java.lang.String]
Element	org.jsoup.select.Elements	getElementsByAttributeValueNot	[java.lang.String, java.lang.String]
Element	org.jsoup.select.Elements	getElementsByAttributeValueStarting	[java.lang.String, java.lang.String]
Element	org.jsoup.select.Elements	getElementsByAttributeValueEnding	[java.lang.String, java.lang.String]
Element	org.jsoup.select.Elements	getElementsByAttributeValueContaining	[java.lang.String, java.lang.String]
Element	org.jsoup.select.Elements	getElementsByAttributeValueMatching	[java.lang.String, java.util.regex.Pattern]
Element	org.jsoup.select.Elements	getElementsByAttributeValueMatching	[java.lang.String, java.lang.String]
Element	org.jsoup.select.Elements	getElementsByIndexLessThan	[int]
Element	org.jsoup.select.Elements	getElementsByIndexGreaterThan	[int]
Element	org.jsoup.select.Elements	getElementsByIndexEquals	[int]
Element	org.jsoup.select.Elements	getElementsContainingText	[java.lang.String]
Element	org.jsoup.select.Elements	getElementsContainingOwnText	[java.lang.String]
Element	org.jsoup.select.Elements	getElementsMatchingText	[java.util.regex.Pattern]
Element	org.jsoup.select.Elements	getElementsMatchingText	[java.lang.String]
Element	org.jsoup.select.Elements	getElementsMatchingOwnText	[java.util.regex.Pattern]
Element	org.jsoup.select.Elements	getElementsMatchingOwnText	[java.lang.String]
Element	org.jsoup.select.Elements	getAllElements	[]
1		org.jsoup.nodes.Element$1	[]
1	void	head	[org.jsoup.nodes.Node, int]
1	void	tail	[org.jsoup.nodes.Node, int]
Element	java.lang.String	text	[]
Element	java.lang.String	ownText	[]
Element	void	ownText	[java.lang.StringBuilder]
Element	void	appendNormalisedText	[java.lang.StringBuilder, org.jsoup.nodes.TextNode]
Element	void	appendWhitespaceIfBr	[org.jsoup.nodes.Element, java.lang.StringBuilder]
Element	boolean	preserveWhitespace	[org.jsoup.nodes.Node]
Element	org.jsoup.nodes.Element	text	[java.lang.String]
Element	boolean	hasText	[]
Element	java.lang.String	data	[]
Element	java.lang.String	className	[]
Element	java.util.Set<java.lang.String>	classNames	[]
Element	org.jsoup.nodes.Element	classNames	[java.util.Set]
Element	boolean	hasClass	[java.lang.String]
Element	org.jsoup.nodes.Element	addClass	[java.lang.String]
Element	org.jsoup.nodes.Element	removeClass	[java.lang.String]
Element	org.jsoup.nodes.Element	toggleClass	[java.lang.String]
Element	java.lang.String	val	[]
Element	org.jsoup.nodes.Element	val	[java.lang.String]
Element	void	outerHtmlHead	[java.lang.Appendable, int, org.jsoup.nodes.Document$OutputSettings]
Element	void	outerHtmlTail	[java.lang.Appendable, int, org.jsoup.nodes.Document$OutputSettings]
Element	java.lang.String	html	[]
Element	void	html	[java.lang.StringBuilder]
Element	T	html	[T extends java.lang.Appendable]
Element	org.jsoup.nodes.Element	html	[java.lang.String]
Element	java.lang.String	toString	[]
Element	org.jsoup.nodes.Element	clone	[]
OuterHtmlVisitor		org.jsoup.nodes.Node$OuterHtmlVisitor	[java.lang.Appendable, org.jsoup.nodes.Document$OutputSettings]
OuterHtmlVisitor	void	head	[org.jsoup.nodes.Node, int]
OuterHtmlVisitor	void	tail	[org.jsoup.nodes.Node, int]
Node		org.jsoup.nodes.Node	[java.lang.String, org.jsoup.nodes.Attributes]
Node		org.jsoup.nodes.Node	[java.lang.String]
Node		org.jsoup.nodes.Node	[]
Node	java.lang.String	nodeName	[]
Node	java.lang.String	attr	[java.lang.String]
Node	org.jsoup.nodes.Attributes	attributes	[]
Node	org.jsoup.nodes.Node	attr	[java.lang.String, java.lang.String]
Node	boolean	hasAttr	[java.lang.String]
Node	org.jsoup.nodes.Node	removeAttr	[java.lang.String]
Node	java.lang.String	baseUri	[]
1		org.jsoup.nodes.Node$1	[]
1	void	head	[org.jsoup.nodes.Node, int]
1	void	tail	[org.jsoup.nodes.Node, int]
Node	void	setBaseUri	[java.lang.String]
Node	java.lang.String	absUrl	[java.lang.String]
Node	org.jsoup.nodes.Node	childNode	[int]
Node	java.util.List<org.jsoup.nodes.Node>	childNodes	[]
Node	java.util.List<org.jsoup.nodes.Node>	childNodesCopy	[]
Node	int	childNodeSize	[]
Node	org.jsoup.nodes.Node[]	childNodesAsArray	[]
Node	org.jsoup.nodes.Node	parent	[]
Node	org.jsoup.nodes.Node	parentNode	[]
Node	org.jsoup.nodes.Node	root	[]
Node	org.jsoup.nodes.Document	ownerDocument	[]
Node	void	remove	[]
Node	org.jsoup.nodes.Node	before	[java.lang.String]
Node	org.jsoup.nodes.Node	before	[org.jsoup.nodes.Node]
Node	org.jsoup.nodes.Node	after	[java.lang.String]
Node	org.jsoup.nodes.Node	after	[org.jsoup.nodes.Node]
Node	void	addSiblingHtml	[int, java.lang.String]
Node	org.jsoup.nodes.Node	wrap	[java.lang.String]
Node	org.jsoup.nodes.Node	unwrap	[]
Node	org.jsoup.nodes.Element	getDeepChild	[org.jsoup.nodes.Element]
Node	void	replaceWith	[org.jsoup.nodes.Node]
Node	void	setParentNode	[org.jsoup.nodes.Node]
Node	void	replaceChild	[org.jsoup.nodes.Node, org.jsoup.nodes.Node]
Node	void	removeChild	[org.jsoup.nodes.Node]
Node	void	addChildren	[org.jsoup.nodes.Node[]]
Node	void	addChildren	[int, org.jsoup.nodes.Node[]]
Node	void	ensureChildNodes	[]
Node	void	reparentChild	[org.jsoup.nodes.Node]
Node	void	reindexChildren	[int]
Node	java.util.List<org.jsoup.nodes.Node>	siblingNodes	[]
Node	org.jsoup.nodes.Node	nextSibling	[]
Node	org.jsoup.nodes.Node	previousSibling	[]
Node	int	siblingIndex	[]
Node	void	setSiblingIndex	[int]
Node	org.jsoup.nodes.Node	traverse	[org.jsoup.select.NodeVisitor]
Node	java.lang.String	outerHtml	[]
Node	void	outerHtml	[java.lang.Appendable]
Node	org.jsoup.nodes.Document.OutputSettings	getOutputSettings	[]
Node	void	outerHtmlHead	[java.lang.Appendable, int, org.jsoup.nodes.Document$OutputSettings]
Node	void	outerHtmlTail	[java.lang.Appendable, int, org.jsoup.nodes.Document$OutputSettings]
Node	T	html	[T extends java.lang.Appendable]
Node	java.lang.String	toString	[]
Node	void	indent	[java.lang.Appendable, int, org.jsoup.nodes.Document$OutputSettings]
Node	boolean	equals	[java.lang.Object]
Node	boolean	hasSameValue	[java.lang.Object]
Node	org.jsoup.nodes.Node	clone	[]
Node	org.jsoup.nodes.Node	doClone	[org.jsoup.nodes.Node]
XmlDeclaration		org.jsoup.nodes.XmlDeclaration	[java.lang.String, java.lang.String, boolean]
XmlDeclaration	java.lang.String	nodeName	[]
XmlDeclaration	java.lang.String	name	[]
XmlDeclaration	java.lang.String	getWholeDeclaration	[]
XmlDeclaration	void	outerHtmlHead	[java.lang.Appendable, int, org.jsoup.nodes.Document$OutputSettings]
XmlDeclaration	void	outerHtmlTail	[java.lang.Appendable, int, org.jsoup.nodes.Document$OutputSettings]
XmlDeclaration	java.lang.String	toString	[]
Tag		org.jsoup.select.Evaluator$Tag	[java.lang.String]
Tag	boolean	matches	[org.jsoup.nodes.Element, org.jsoup.nodes.Element]
Tag	java.lang.String	toString	[]
TagEndsWith		org.jsoup.select.Evaluator$TagEndsWith	[java.lang.String]
TagEndsWith	boolean	matches	[org.jsoup.nodes.Element, org.jsoup.nodes.Element]
TagEndsWith	java.lang.String	toString	[]
Id		org.jsoup.select.Evaluator$Id	[java.lang.String]
Id	boolean	matches	[org.jsoup.nodes.Element, org.jsoup.nodes.Element]
Id	java.lang.String	toString	[]
Class		org.jsoup.select.Evaluator$Class	[java.lang.String]
Class	boolean	matches	[org.jsoup.nodes.Element, org.jsoup.nodes.Element]
Class	java.lang.String	toString	[]
Attribute		org.jsoup.select.Evaluator$Attribute	[java.lang.String]
Attribute	boolean	matches	[org.jsoup.nodes.Element, org.jsoup.nodes.Element]
Attribute	java.lang.String	toString	[]
AttributeStarting		org.jsoup.select.Evaluator$AttributeStarting	[java.lang.String]
AttributeStarting	boolean	matches	[org.jsoup.nodes.Element, org.jsoup.nodes.Element]
AttributeStarting	java.lang.String	toString	[]
AttributeWithValue		org.jsoup.select.Evaluator$AttributeWithValue	[java.lang.String, java.lang.String]
AttributeWithValue	boolean	matches	[org.jsoup.nodes.Element, org.jsoup.nodes.Element]
AttributeWithValue	java.lang.String	toString	[]
AttributeWithValueNot		org.jsoup.select.Evaluator$AttributeWithValueNot	[java.lang.String, java.lang.String]
AttributeWithValueNot	boolean	matches	[org.jsoup.nodes.Element, org.jsoup.nodes.Element]
AttributeWithValueNot	java.lang.String	toString	[]
AttributeWithValueStarting		org.jsoup.select.Evaluator$AttributeWithValueStarting	[java.lang.String, java.lang.String]
AttributeWithValueStarting	boolean	matches	[org.jsoup.nodes.Element, org.jsoup.nodes.Element]
AttributeWithValueStarting	java.lang.String	toString	[]
AttributeWithValueEnding		org.jsoup.select.Evaluator$AttributeWithValueEnding	[java.lang.String, java.lang.String]
AttributeWithValueEnding	boolean	matches	[org.jsoup.nodes.Element, org.jsoup.nodes.Element]
AttributeWithValueEnding	java.lang.String	toString	[]
AttributeWithValueContaining		org.jsoup.select.Evaluator$AttributeWithValueContaining	[java.lang.String, java.lang.String]
AttributeWithValueContaining	boolean	matches	[org.jsoup.nodes.Element, org.jsoup.nodes.Element]
AttributeWithValueContaining	java.lang.String	toString	[]
AttributeWithValueMatching		org.jsoup.select.Evaluator$AttributeWithValueMatching	[java.lang.String, java.util.regex.Pattern]
AttributeWithValueMatching	boolean	matches	[org.jsoup.nodes.Element, org.jsoup.nodes.Element]
AttributeWithValueMatching	java.lang.String	toString	[]
AttributeKeyPair		org.jsoup.select.Evaluator$AttributeKeyPair	[java.lang.String, java.lang.String]
AllElements		org.jsoup.select.Evaluator$AllElements	[]
AllElements	boolean	matches	[org.jsoup.nodes.Element, org.jsoup.nodes.Element]
AllElements	java.lang.String	toString	[]
IndexLessThan		org.jsoup.select.Evaluator$IndexLessThan	[int]
IndexLessThan	boolean	matches	[org.jsoup.nodes.Element, org.jsoup.nodes.Element]
IndexLessThan	java.lang.String	toString	[]
IndexGreaterThan		org.jsoup.select.Evaluator$IndexGreaterThan	[int]
IndexGreaterThan	boolean	matches	[org.jsoup.nodes.Element, org.jsoup.nodes.Element]
IndexGreaterThan	java.lang.String	toString	[]
IndexEquals		org.jsoup.select.Evaluator$IndexEquals	[int]
IndexEquals	boolean	matches	[org.jsoup.nodes.Element, org.jsoup.nodes.Element]
IndexEquals	java.lang.String	toString	[]
IsLastChild		org.jsoup.select.Evaluator$IsLastChild	[]
IsLastChild	boolean	matches	[org.jsoup.nodes.Element, org.jsoup.nodes.Element]
IsLastChild	java.lang.String	toString	[]
IsFirstOfType		org.jsoup.select.Evaluator$IsFirstOfType	[]
IsFirstOfType	java.lang.String	toString	[]
IsLastOfType		org.jsoup.select.Evaluator$IsLastOfType	[]
IsLastOfType	java.lang.String	toString	[]
CssNthEvaluator		org.jsoup.select.Evaluator$CssNthEvaluator	[int, int]
CssNthEvaluator		org.jsoup.select.Evaluator$CssNthEvaluator	[int]
CssNthEvaluator	boolean	matches	[org.jsoup.nodes.Element, org.jsoup.nodes.Element]
CssNthEvaluator	java.lang.String	toString	[]
CssNthEvaluator	java.lang.String	getPseudoClass	[]
CssNthEvaluator	int	calculatePosition	[org.jsoup.nodes.Element, org.jsoup.nodes.Element]
IsNthChild		org.jsoup.select.Evaluator$IsNthChild	[int, int]
IsNthChild	int	calculatePosition	[org.jsoup.nodes.Element, org.jsoup.nodes.Element]
IsNthChild	java.lang.String	getPseudoClass	[]
IsNthLastChild		org.jsoup.select.Evaluator$IsNthLastChild	[int, int]
IsNthLastChild	int	calculatePosition	[org.jsoup.nodes.Element, org.jsoup.nodes.Element]
IsNthLastChild	java.lang.String	getPseudoClass	[]
IsNthOfType		org.jsoup.select.Evaluator$IsNthOfType	[int, int]
IsNthOfType	int	calculatePosition	[org.jsoup.nodes.Element, org.jsoup.nodes.Element]
IsNthOfType	java.lang.String	getPseudoClass	[]
IsNthLastOfType		org.jsoup.select.Evaluator$IsNthLastOfType	[int, int]
IsNthLastOfType	int	calculatePosition	[org.jsoup.nodes.Element, org.jsoup.nodes.Element]
IsNthLastOfType	java.lang.String	getPseudoClass	[]
IsFirstChild		org.jsoup.select.Evaluator$IsFirstChild	[]
IsFirstChild	boolean	matches	[org.jsoup.nodes.Element, org.jsoup.nodes.Element]
IsFirstChild	java.lang.String	toString	[]
IsRoot		org.jsoup.select.Evaluator$IsRoot	[]
IsRoot	boolean	matches	[org.jsoup.nodes.Element, org.jsoup.nodes.Element]
IsRoot	java.lang.String	toString	[]
IsOnlyChild		org.jsoup.select.Evaluator$IsOnlyChild	[]
IsOnlyChild	boolean	matches	[org.jsoup.nodes.Element, org.jsoup.nodes.Element]
IsOnlyChild	java.lang.String	toString	[]
IsOnlyOfType		org.jsoup.select.Evaluator$IsOnlyOfType	[]
IsOnlyOfType	boolean	matches	[org.jsoup.nodes.Element, org.jsoup.nodes.Element]
IsOnlyOfType	java.lang.String	toString	[]
IsEmpty		org.jsoup.select.Evaluator$IsEmpty	[]
IsEmpty	boolean	matches	[org.jsoup.nodes.Element, org.jsoup.nodes.Element]
IsEmpty	java.lang.String	toString	[]
IndexEvaluator		org.jsoup.select.Evaluator$IndexEvaluator	[int]
ContainsText		org.jsoup.select.Evaluator$ContainsText	[java.lang.String]
ContainsText	boolean	matches	[org.jsoup.nodes.Element, org.jsoup.nodes.Element]
ContainsText	java.lang.String	toString	[]
ContainsData		org.jsoup.select.Evaluator$ContainsData	[java.lang.String]
ContainsData	boolean	matches	[org.jsoup.nodes.Element, org.jsoup.nodes.Element]
ContainsData	java.lang.String	toString	[]
ContainsOwnText		org.jsoup.select.Evaluator$ContainsOwnText	[java.lang.String]
ContainsOwnText	boolean	matches	[org.jsoup.nodes.Element, org.jsoup.nodes.Element]
ContainsOwnText	java.lang.String	toString	[]
Matches		org.jsoup.select.Evaluator$Matches	[java.util.regex.Pattern]
Matches	boolean	matches	[org.jsoup.nodes.Element, org.jsoup.nodes.Element]
Matches	java.lang.String	toString	[]
MatchesOwn		org.jsoup.select.Evaluator$MatchesOwn	[java.util.regex.Pattern]
MatchesOwn	boolean	matches	[org.jsoup.nodes.Element, org.jsoup.nodes.Element]
MatchesOwn	java.lang.String	toString	[]
Evaluator		org.jsoup.select.Evaluator	[]
Evaluator	boolean	matches	[org.jsoup.nodes.Element, org.jsoup.nodes.Element]

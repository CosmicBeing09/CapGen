org.jsoup.nodes.Entities.EscapeMode	Expression	class spoon.support.reflect.code.CtThisAccessImpl	825:828	28:28	this	[]	[]	[spoon.support.reflect.code.CtFieldWriteImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.declaration.CtConstructorImpl, spoon.support.reflect.declaration.CtEnumImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl]
java.util.Map<java.lang.Character, java.lang.String>	Expression	class spoon.support.reflect.code.CtFieldWriteImpl	825:832	28:28	this.map	[]	[java.util.Map<java.lang.Character, java.lang.String>:map]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.declaration.CtConstructorImpl, spoon.support.reflect.declaration.CtEnumImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl]
java.util.Map<java.lang.Character, java.lang.String>	Expression	class spoon.support.reflect.code.CtVariableReadImpl	836:838	28:28	map	[]	[java.util.Map<java.lang.Character, java.lang.String>:map]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.declaration.CtConstructorImpl, spoon.support.reflect.declaration.CtEnumImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl]
CtAssignmentImpl	Statement	class spoon.support.reflect.code.CtAssignmentImpl	825:839	28:28	this.map = map	[]	[java.util.Map<java.lang.Character, java.lang.String>:map]	[spoon.support.reflect.declaration.CtConstructorImpl, spoon.support.reflect.declaration.CtEnumImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl]
java.util.Map<java.lang.Character, java.lang.String>	Expression	class spoon.support.reflect.code.CtFieldReadImpl	920:922	32:32	map	[]	[java.util.Map<java.lang.Character, java.lang.String>:map]	[spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl]
CtReturnImpl	Statement	class spoon.support.reflect.code.CtReturnImpl	913:923	32:32	return map	[]	[java.util.Map<java.lang.Character, java.lang.String>:map]	[]	[spoon.support.reflect.code.CtReturnImpl]
java.util.Map<java.lang.Character, java.lang.String>	Expression	class spoon.support.reflect.code.CtFieldReadImpl	567:576	19:19	org.jsoup.nodes.Entities.xhtmlByVal	[]	[java.util.Map<java.lang.Character, java.lang.String>:xhtmlByVal]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.declaration.CtEnumValueImpl, spoon.support.reflect.declaration.CtEnumImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[]
org.jsoup.nodes.Entities.EscapeMode	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	471:577	18:19	new org.jsoup.nodes.Entities.EscapeMode(org.jsoup.nodes.Entities.xhtmlByVal)	[]	[java.util.Map<java.lang.Character, java.lang.String>:xhtmlByVal]	[spoon.support.reflect.declaration.CtEnumValueImpl, spoon.support.reflect.declaration.CtEnumImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[]
java.util.Map<java.lang.Character, java.lang.String>	Expression	class spoon.support.reflect.code.CtFieldReadImpl	638:646	21:21	org.jsoup.nodes.Entities.baseByVal	[]	[java.util.Map<java.lang.Character, java.lang.String>:baseByVal]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.declaration.CtEnumValueImpl, spoon.support.reflect.declaration.CtEnumImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[]
org.jsoup.nodes.Entities.EscapeMode	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	588:647	20:21	new org.jsoup.nodes.Entities.EscapeMode(org.jsoup.nodes.Entities.baseByVal)	[]	[java.util.Map<java.lang.Character, java.lang.String>:baseByVal]	[spoon.support.reflect.declaration.CtEnumValueImpl, spoon.support.reflect.declaration.CtEnumImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[]
java.util.Map<java.lang.Character, java.lang.String>	Expression	class spoon.support.reflect.code.CtFieldReadImpl	706:714	23:23	org.jsoup.nodes.Entities.fullByVal	[]	[java.util.Map<java.lang.Character, java.lang.String>:fullByVal]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.declaration.CtEnumValueImpl, spoon.support.reflect.declaration.CtEnumImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[]
org.jsoup.nodes.Entities.EscapeMode	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	658:715	22:23	new org.jsoup.nodes.Entities.EscapeMode(org.jsoup.nodes.Entities.fullByVal)	[]	[java.util.Map<java.lang.Character, java.lang.String>:fullByVal]	[spoon.support.reflect.declaration.CtEnumValueImpl, spoon.support.reflect.declaration.CtEnumImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[]
java.lang.String	Expression	class spoon.support.reflect.code.CtVariableReadImpl	7557:7560	200:200	name	[]	[java.lang.String:name]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	7569:7578	200:200	"US-ASCII"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtInvocationImpl	7557:7579	200:200	name.equals("US-ASCII")	[boolean:equals]	[java.lang.String:name]	[spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.jsoup.nodes.Entities.CoreCharset	Expression	class spoon.support.reflect.code.CtFieldReadImpl	7605:7609	201:201	org.jsoup.nodes.Entities.CoreCharset.ascii	[]	[org.jsoup.nodes.Entities.CoreCharset:ascii]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtReturnImpl]
CtReturnImpl	Statement	class spoon.support.reflect.code.CtReturnImpl	7598:7610	201:201	return org.jsoup.nodes.Entities.CoreCharset.ascii	[]	[org.jsoup.nodes.Entities.CoreCharset:ascii]	[spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtReturnImpl]
CtIfImpl	Statement	class spoon.support.reflect.code.CtIfImpl	7553:7610	200:201	if (name.equals("US-ASCII"))    return org.jsoup.nodes.Entities.CoreCharset.ascii;	[boolean:equals]	[java.lang.String:name, org.jsoup.nodes.Entities.CoreCharset:ascii]	[]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtVariableReadImpl	7628:7631	202:202	name	[]	[java.lang.String:name]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	7644:7649	202:202	"UTF-"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtInvocationImpl	7628:7650	202:202	name.startsWith("UTF-")	[boolean:startsWith]	[java.lang.String:name]	[spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.jsoup.nodes.Entities.CoreCharset	Expression	class spoon.support.reflect.code.CtFieldReadImpl	7707:7709	203:203	org.jsoup.nodes.Entities.CoreCharset.utf	[]	[org.jsoup.nodes.Entities.CoreCharset:utf]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtReturnImpl]
CtReturnImpl	Statement	class spoon.support.reflect.code.CtReturnImpl	7700:7710	203:203	return org.jsoup.nodes.Entities.CoreCharset.utf	[]	[org.jsoup.nodes.Entities.CoreCharset:utf]	[spoon.support.reflect.code.CtIfImpl]	[spoon.support.reflect.code.CtReturnImpl]
CtIfImpl	Statement	class spoon.support.reflect.code.CtIfImpl	7624:7710	202:203	if (name.startsWith("UTF-"))    return org.jsoup.nodes.Entities.CoreCharset.utf;	[boolean:startsWith]	[java.lang.String:name, org.jsoup.nodes.Entities.CoreCharset:utf]	[]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.jsoup.nodes.Entities.CoreCharset	Expression	class spoon.support.reflect.code.CtFieldReadImpl	7731:7738	204:204	org.jsoup.nodes.Entities.CoreCharset.fallback	[]	[org.jsoup.nodes.Entities.CoreCharset:fallback]	[spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtReturnImpl	Statement	class spoon.support.reflect.code.CtReturnImpl	7724:7739	204:204	return org.jsoup.nodes.Entities.CoreCharset.fallback	[]	[org.jsoup.nodes.Entities.CoreCharset:fallback]	[]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.jsoup.nodes.Entities.CoreCharset	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	7461:7465	197:197	new org.jsoup.nodes.Entities.CoreCharset()	[]	[]	[spoon.support.reflect.declaration.CtEnumValueImpl, spoon.support.reflect.declaration.CtEnumImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[]
org.jsoup.nodes.Entities.CoreCharset	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	7468:7470	197:197	new org.jsoup.nodes.Entities.CoreCharset()	[]	[]	[spoon.support.reflect.declaration.CtEnumValueImpl, spoon.support.reflect.declaration.CtEnumImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[]
org.jsoup.nodes.Entities.CoreCharset	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	7473:7480	197:197	new org.jsoup.nodes.Entities.CoreCharset()	[]	[]	[spoon.support.reflect.declaration.CtEnumValueImpl, spoon.support.reflect.declaration.CtEnumImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	7860:7865	211:211	"quot"	[]	[]	[spoon.support.reflect.code.CtNewArrayImpl, spoon.support.reflect.code.CtNewArrayImpl, spoon.support.reflect.declaration.CtFieldImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[]
int	Expression	class spoon.support.reflect.code.CtLiteralImpl	7868:7874	211:211	34	[]	[]	[spoon.support.reflect.code.CtNewArrayImpl, spoon.support.reflect.code.CtNewArrayImpl, spoon.support.reflect.declaration.CtFieldImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[]
java.lang.Object[]	Expression	class spoon.support.reflect.code.CtNewArrayImpl	7859:7875	211:211	new java.lang.Object[]{ "quot", 34 }	[]	[]	[spoon.support.reflect.code.CtNewArrayImpl, spoon.support.reflect.declaration.CtFieldImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	7891:7895	212:212	"amp"	[]	[]	[spoon.support.reflect.code.CtNewArrayImpl, spoon.support.reflect.code.CtNewArrayImpl, spoon.support.reflect.declaration.CtFieldImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[]
int	Expression	class spoon.support.reflect.code.CtLiteralImpl	7898:7904	212:212	38	[]	[]	[spoon.support.reflect.code.CtNewArrayImpl, spoon.support.reflect.code.CtNewArrayImpl, spoon.support.reflect.declaration.CtFieldImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[]
java.lang.Object[]	Expression	class spoon.support.reflect.code.CtNewArrayImpl	7890:7905	212:212	new java.lang.Object[]{ "amp", 38 }	[]	[]	[spoon.support.reflect.code.CtNewArrayImpl, spoon.support.reflect.declaration.CtFieldImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	7921:7924	213:213	"lt"	[]	[]	[spoon.support.reflect.code.CtNewArrayImpl, spoon.support.reflect.code.CtNewArrayImpl, spoon.support.reflect.declaration.CtFieldImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[]
int	Expression	class spoon.support.reflect.code.CtLiteralImpl	7927:7933	213:213	60	[]	[]	[spoon.support.reflect.code.CtNewArrayImpl, spoon.support.reflect.code.CtNewArrayImpl, spoon.support.reflect.declaration.CtFieldImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[]
java.lang.Object[]	Expression	class spoon.support.reflect.code.CtNewArrayImpl	7920:7934	213:213	new java.lang.Object[]{ "lt", 60 }	[]	[]	[spoon.support.reflect.code.CtNewArrayImpl, spoon.support.reflect.declaration.CtFieldImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	7950:7953	214:214	"gt"	[]	[]	[spoon.support.reflect.code.CtNewArrayImpl, spoon.support.reflect.code.CtNewArrayImpl, spoon.support.reflect.declaration.CtFieldImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[]
int	Expression	class spoon.support.reflect.code.CtLiteralImpl	7956:7962	214:214	62	[]	[]	[spoon.support.reflect.code.CtNewArrayImpl, spoon.support.reflect.code.CtNewArrayImpl, spoon.support.reflect.declaration.CtFieldImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[]
java.lang.Object[]	Expression	class spoon.support.reflect.code.CtNewArrayImpl	7949:7963	214:214	new java.lang.Object[]{ "gt", 62 }	[]	[]	[spoon.support.reflect.code.CtNewArrayImpl, spoon.support.reflect.declaration.CtFieldImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[]
java.lang.Object[][]	Expression	class spoon.support.reflect.code.CtNewArrayImpl	7845:7969	210:215	new java.lang.Object[][]{ new java.lang.Object[]{ "quot", 34 }, new java.lang.Object[]{ "amp", 38 }, new java.lang.Object[]{ "lt", 60 }, new java.lang.Object[]{ "gt", 62 } }	[]	[]	[spoon.support.reflect.declaration.CtFieldImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[]
java.util.Map<java.lang.Character, java.lang.String>	Expression	class spoon.support.reflect.code.CtFieldWriteImpl	7994:8003	218:218	xhtmlByVal	[]	[java.util.Map<java.lang.Character, java.lang.String>:xhtmlByVal]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.declaration.CtAnonymousExecutableImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.util.HashMap<java.lang.Character, java.lang.String>	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	8007:8038	218:218	new java.util.HashMap<java.lang.Character, java.lang.String>()	[]	[]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.declaration.CtAnonymousExecutableImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtAssignmentImpl	Statement	class spoon.support.reflect.code.CtAssignmentImpl	7994:8039	218:218	xhtmlByVal = new java.util.HashMap<java.lang.Character, java.lang.String>()	[]	[java.util.Map<java.lang.Character, java.lang.String>:xhtmlByVal]	[spoon.support.reflect.declaration.CtAnonymousExecutableImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.util.Map<java.lang.String, java.lang.Character>	Expression	class spoon.support.reflect.code.CtFieldWriteImpl	8049:8052	219:219	base	[]	[java.util.Map<java.lang.String, java.lang.Character>:base]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.declaration.CtAnonymousExecutableImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	8069:8094	219:219	"entities-base.properties"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.declaration.CtAnonymousExecutableImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.util.Map<java.lang.String, java.lang.Character>	Expression	class spoon.support.reflect.code.CtInvocationImpl	8056:8095	219:219	org.jsoup.nodes.Entities.loadEntities("entities-base.properties")	[java.util.Map<java.lang.String, java.lang.Character>:loadEntities]	[]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.declaration.CtAnonymousExecutableImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtAssignmentImpl	Statement	class spoon.support.reflect.code.CtAssignmentImpl	8049:8096	219:219	base = org.jsoup.nodes.Entities.loadEntities("entities-base.properties")	[java.util.Map<java.lang.String, java.lang.Character>:loadEntities]	[java.util.Map<java.lang.String, java.lang.Character>:base]	[spoon.support.reflect.declaration.CtAnonymousExecutableImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.util.Map<java.lang.Character, java.lang.String>	Expression	class spoon.support.reflect.code.CtFieldWriteImpl	8132:8140	220:220	baseByVal	[]	[java.util.Map<java.lang.Character, java.lang.String>:baseByVal]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.declaration.CtAnonymousExecutableImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.util.Map<java.lang.String, java.lang.Character>	Expression	class spoon.support.reflect.code.CtFieldReadImpl	8159:8162	220:220	org.jsoup.nodes.Entities.base	[]	[java.util.Map<java.lang.String, java.lang.Character>:base]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.declaration.CtAnonymousExecutableImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.util.Map<java.lang.Character, java.lang.String>	Expression	class spoon.support.reflect.code.CtInvocationImpl	8144:8163	220:220	org.jsoup.nodes.Entities.toCharacterKey(org.jsoup.nodes.Entities.base)	[java.util.Map<java.lang.Character, java.lang.String>:toCharacterKey]	[java.util.Map<java.lang.String, java.lang.Character>:base]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.declaration.CtAnonymousExecutableImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtAssignmentImpl	Statement	class spoon.support.reflect.code.CtAssignmentImpl	8132:8164	220:220	baseByVal = org.jsoup.nodes.Entities.toCharacterKey(org.jsoup.nodes.Entities.base)	[java.util.Map<java.lang.Character, java.lang.String>:toCharacterKey]	[java.util.Map<java.lang.String, java.lang.Character>:base, java.util.Map<java.lang.Character, java.lang.String>:baseByVal]	[spoon.support.reflect.declaration.CtAnonymousExecutableImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.util.Map<java.lang.String, java.lang.Character>	Expression	class spoon.support.reflect.code.CtFieldWriteImpl	8174:8177	221:221	full	[]	[java.util.Map<java.lang.String, java.lang.Character>:full]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.declaration.CtAnonymousExecutableImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	8194:8219	221:221	"entities-full.properties"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.declaration.CtAnonymousExecutableImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.util.Map<java.lang.String, java.lang.Character>	Expression	class spoon.support.reflect.code.CtInvocationImpl	8181:8220	221:221	org.jsoup.nodes.Entities.loadEntities("entities-full.properties")	[java.util.Map<java.lang.String, java.lang.Character>:loadEntities]	[]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.declaration.CtAnonymousExecutableImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtAssignmentImpl	Statement	class spoon.support.reflect.code.CtAssignmentImpl	8174:8221	221:221	full = org.jsoup.nodes.Entities.loadEntities("entities-full.properties")	[java.util.Map<java.lang.String, java.lang.Character>:loadEntities]	[java.util.Map<java.lang.String, java.lang.Character>:full]	[spoon.support.reflect.declaration.CtAnonymousExecutableImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.util.Map<java.lang.Character, java.lang.String>	Expression	class spoon.support.reflect.code.CtFieldWriteImpl	8258:8266	222:222	fullByVal	[]	[java.util.Map<java.lang.Character, java.lang.String>:fullByVal]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.declaration.CtAnonymousExecutableImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.util.Map<java.lang.String, java.lang.Character>	Expression	class spoon.support.reflect.code.CtFieldReadImpl	8285:8288	222:222	org.jsoup.nodes.Entities.full	[]	[java.util.Map<java.lang.String, java.lang.Character>:full]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.declaration.CtAnonymousExecutableImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.util.Map<java.lang.Character, java.lang.String>	Expression	class spoon.support.reflect.code.CtInvocationImpl	8270:8289	222:222	org.jsoup.nodes.Entities.toCharacterKey(org.jsoup.nodes.Entities.full)	[java.util.Map<java.lang.Character, java.lang.String>:toCharacterKey]	[java.util.Map<java.lang.String, java.lang.Character>:full]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.declaration.CtAnonymousExecutableImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtAssignmentImpl	Statement	class spoon.support.reflect.code.CtAssignmentImpl	8258:8290	222:222	fullByVal = org.jsoup.nodes.Entities.toCharacterKey(org.jsoup.nodes.Entities.full)	[java.util.Map<java.lang.Character, java.lang.String>:toCharacterKey]	[java.util.Map<java.lang.String, java.lang.Character>:full, java.util.Map<java.lang.Character, java.lang.String>:fullByVal]	[spoon.support.reflect.declaration.CtAnonymousExecutableImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtLocalVariableImpl	Statement	class spoon.support.reflect.code.CtLocalVariableImpl	8306:8333	224:224	java.lang.Object[] entity	[]	[]	[spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.declaration.CtAnonymousExecutableImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Object[][]	Expression	class spoon.support.reflect.code.CtFieldReadImpl	8324:8333	224:224	org.jsoup.nodes.Entities.xhtmlArray	[]	[java.lang.Object[][]:xhtmlArray]	[spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.declaration.CtAnonymousExecutableImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
void	Expression	class spoon.support.reflect.code.CtTypeAccessImpl	8364:8372	225:225	java.lang.Character	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.declaration.CtAnonymousExecutableImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Object[]	Expression	class spoon.support.reflect.code.CtVariableReadImpl	8400:8405	225:225	entity	[]	[java.lang.Object[]:entity]	[spoon.support.reflect.code.CtArrayReadImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.declaration.CtAnonymousExecutableImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
int	Expression	class spoon.support.reflect.code.CtLiteralImpl	8407:8407	225:225	1	[]	[]	[spoon.support.reflect.code.CtArrayReadImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.declaration.CtAnonymousExecutableImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Object	Expression	class spoon.support.reflect.code.CtArrayReadImpl	8400:8408	225:225	(java.lang.Integer) (entity[1])	[]	[java.lang.Object[]:entity]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.declaration.CtAnonymousExecutableImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
int	Expression	class spoon.support.reflect.code.CtInvocationImpl	8389:8420	225:225	(char) (((java.lang.Integer) (entity[1])).intValue())	[]	[java.lang.Object[]:entity]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.declaration.CtAnonymousExecutableImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Character	Expression	class spoon.support.reflect.code.CtInvocationImpl	8364:8421	225:225	java.lang.Character.valueOf(((char) (((java.lang.Integer) (entity[1])).intValue())))	[java.lang.Character:valueOf]	[java.lang.Object[]:entity]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.declaration.CtAnonymousExecutableImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtLocalVariableImpl	Statement	class spoon.support.reflect.code.CtLocalVariableImpl	8350:8422	225:225	java.lang.Character c = java.lang.Character.valueOf(((char) (((java.lang.Integer) (entity[1])).intValue())))	[java.lang.Character:valueOf]	[java.lang.Object[]:entity]	[spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.declaration.CtAnonymousExecutableImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.util.Map<java.lang.Character, java.lang.String>	Expression	class spoon.support.reflect.code.CtFieldReadImpl	8436:8445	226:226	org.jsoup.nodes.Entities.xhtmlByVal	[]	[java.util.Map<java.lang.Character, java.lang.String>:xhtmlByVal]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.declaration.CtAnonymousExecutableImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Character	Expression	class spoon.support.reflect.code.CtVariableReadImpl	8451:8451	226:226	c	[]	[java.lang.Character:c]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.declaration.CtAnonymousExecutableImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Object[]	Expression	class spoon.support.reflect.code.CtVariableReadImpl	8464:8469	226:226	entity	[]	[java.lang.Object[]:entity]	[spoon.support.reflect.code.CtArrayReadImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.declaration.CtAnonymousExecutableImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
int	Expression	class spoon.support.reflect.code.CtLiteralImpl	8471:8471	226:226	0	[]	[]	[spoon.support.reflect.code.CtArrayReadImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.declaration.CtAnonymousExecutableImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Object	Expression	class spoon.support.reflect.code.CtArrayReadImpl	8464:8472	226:226	(java.lang.String) (entity[0])	[]	[java.lang.Object[]:entity]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.declaration.CtAnonymousExecutableImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtInvocationImpl	8436:8475	226:226	org.jsoup.nodes.Entities.xhtmlByVal.put(c, ((java.lang.String) (entity[0])))	[java.lang.String:put]	[java.lang.Object[]:entity, java.lang.Character:c, java.util.Map<java.lang.Character, java.lang.String>:xhtmlByVal]	[spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.declaration.CtAnonymousExecutableImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtForEachImpl	Statement	class spoon.support.reflect.code.CtForEachImpl	8301:8485	224:227	for (java.lang.Object[] entity : org.jsoup.nodes.Entities.xhtmlArray) {    java.lang.Character c = java.lang.Character.valueOf(((char) (((java.lang.Integer) (entity[1])).intValue())));    org.jsoup.nodes.Entities.xhtmlByVal.put(c, ((java.lang.String) (entity[0])));}	[java.lang.String:put, java.lang.Character:valueOf]	[java.lang.Object[]:entity, java.lang.Character:c, java.lang.Object[][]:xhtmlArray, java.util.Map<java.lang.Character, java.lang.String>:xhtmlByVal]	[spoon.support.reflect.declaration.CtAnonymousExecutableImpl, spoon.support.reflect.declaration.CtClassImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.support.reflect.declaration.CtPackageImpl, spoon.reflect.CtModelImpl$CtRootPackage, spoon.reflect.CtModelImpl$CtRootPackage$1]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.util.Map<java.lang.String, java.lang.Character>	Expression	class spoon.support.reflect.code.CtFieldReadImpl	1501:1504	50:50	org.jsoup.nodes.Entities.full	[]	[java.util.Map<java.lang.String, java.lang.Character>:full]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtVariableReadImpl	1518:1521	50:50	name	[]	[java.lang.String:name]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtInvocationImpl	1501:1522	50:50	org.jsoup.nodes.Entities.full.containsKey(name)	[boolean:containsKey]	[java.lang.String:name, java.util.Map<java.lang.String, java.lang.Character>:full]	[spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
CtReturnImpl	Statement	class spoon.support.reflect.code.CtReturnImpl	1494:1523	50:50	return org.jsoup.nodes.Entities.full.containsKey(name)	[boolean:containsKey]	[java.lang.String:name, java.util.Map<java.lang.String, java.lang.Character>:full]	[]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
java.util.Map<java.lang.String, java.lang.Character>	Expression	class spoon.support.reflect.code.CtFieldReadImpl	1856:1859	60:60	org.jsoup.nodes.Entities.base	[]	[java.util.Map<java.lang.String, java.lang.Character>:base]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtVariableReadImpl	1873:1876	60:60	name	[]	[java.lang.String:name]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtInvocationImpl	1856:1877	60:60	org.jsoup.nodes.Entities.base.containsKey(name)	[boolean:containsKey]	[java.lang.String:name, java.util.Map<java.lang.String, java.lang.Character>:base]	[spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
CtReturnImpl	Statement	class spoon.support.reflect.code.CtReturnImpl	1849:1878	60:60	return org.jsoup.nodes.Entities.base.containsKey(name)	[boolean:containsKey]	[java.lang.String:name, java.util.Map<java.lang.String, java.lang.Character>:base]	[]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
java.util.Map<java.lang.String, java.lang.Character>	Expression	class spoon.support.reflect.code.CtFieldReadImpl	2179:2182	69:69	org.jsoup.nodes.Entities.full	[]	[java.util.Map<java.lang.String, java.lang.Character>:full]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtVariableReadImpl	2188:2191	69:69	name	[]	[java.lang.String:name]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Character	Expression	class spoon.support.reflect.code.CtInvocationImpl	2179:2192	69:69	org.jsoup.nodes.Entities.full.get(name)	[java.lang.Character:get]	[java.lang.String:name, java.util.Map<java.lang.String, java.lang.Character>:full]	[spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
CtReturnImpl	Statement	class spoon.support.reflect.code.CtReturnImpl	2172:2193	69:69	return org.jsoup.nodes.Entities.full.get(name)	[java.lang.Character:get]	[java.lang.String:name, java.util.Map<java.lang.String, java.lang.Character>:full]	[]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtVariableReadImpl	2325:2330	73:73	string	[]	[java.lang.String:string]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
int	Expression	class spoon.support.reflect.code.CtInvocationImpl	2325:2339	73:73	string.length()	[int:length]	[java.lang.String:string]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
int	Expression	class spoon.support.reflect.code.CtLiteralImpl	2343:2343	73:73	2	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
int	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	2325:2343	73:73	(string.length()) * 2	[int:length]	[java.lang.String:string]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.StringBuilder	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	2307:2344	73:73	new java.lang.StringBuilder(((string.length()) * 2))	[int:length]	[java.lang.String:string]	[spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtLocalVariableImpl	Statement	class spoon.support.reflect.code.CtLocalVariableImpl	2285:2345	73:73	java.lang.StringBuilder accum = new java.lang.StringBuilder(((string.length()) * 2))	[int:length]	[java.lang.String:string]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.StringBuilder	Expression	class spoon.support.reflect.code.CtVariableReadImpl	2362:2366	74:74	accum	[]	[java.lang.StringBuilder:accum]	[spoon.support.reflect.code.CtInvocationImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtVariableReadImpl	2369:2374	74:74	string	[]	[java.lang.String:string]	[spoon.support.reflect.code.CtInvocationImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.jsoup.nodes.Document.OutputSettings	Expression	class spoon.support.reflect.code.CtVariableReadImpl	2377:2379	74:74	out	[]	[org.jsoup.nodes.Document.OutputSettings:out]	[spoon.support.reflect.code.CtInvocationImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtLiteralImpl	2382:2386	74:74	false	[]	[]	[spoon.support.reflect.code.CtInvocationImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtLiteralImpl	2389:2393	74:74	false	[]	[]	[spoon.support.reflect.code.CtInvocationImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtLiteralImpl	2396:2400	74:74	false	[]	[]	[spoon.support.reflect.code.CtInvocationImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
void	Expression	class spoon.support.reflect.code.CtInvocationImpl	2355:2402	74:74	org.jsoup.nodes.Entities.escape(accum, string, out, false, false, false)	[void:escape]	[java.lang.String:string, org.jsoup.nodes.Document.OutputSettings:out, java.lang.StringBuilder:accum]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.StringBuilder	Expression	class spoon.support.reflect.code.CtVariableReadImpl	2419:2423	75:75	accum	[]	[java.lang.StringBuilder:accum]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtInvocationImpl	2419:2434	75:75	accum.toString()	[java.lang.String:toString]	[java.lang.StringBuilder:accum]	[spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtReturnImpl	Statement	class spoon.support.reflect.code.CtReturnImpl	2412:2435	75:75	return accum.toString()	[java.lang.String:toString]	[java.lang.StringBuilder:accum]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtLiteralImpl	2771:2775	82:82	false	[]	[]	[spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtOperatorAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtLocalVariableImpl	Statement	class spoon.support.reflect.code.CtLocalVariableImpl	2748:2776	82:82	boolean lastWasWhite = false	[]	[]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtOperatorAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtLiteralImpl	2812:2816	83:83	false	[]	[]	[spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtOperatorAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtLocalVariableImpl	Statement	class spoon.support.reflect.code.CtLocalVariableImpl	2786:2817	83:83	boolean reachedNonWhite = false	[]	[]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtOperatorAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.jsoup.nodes.Document.OutputSettings	Expression	class spoon.support.reflect.code.CtVariableReadImpl	2857:2859	84:84	out	[]	[org.jsoup.nodes.Document.OutputSettings:out]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtOperatorAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.jsoup.nodes.Entities.EscapeMode	Expression	class spoon.support.reflect.code.CtInvocationImpl	2857:2872	84:84	out.escapeMode()	[org.jsoup.nodes.Entities.EscapeMode:escapeMode]	[org.jsoup.nodes.Document.OutputSettings:out]	[spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtOperatorAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtLocalVariableImpl	Statement	class spoon.support.reflect.code.CtLocalVariableImpl	2827:2873	84:84	final org.jsoup.nodes.Entities.EscapeMode escapeMode = out.escapeMode()	[org.jsoup.nodes.Entities.EscapeMode:escapeMode]	[org.jsoup.nodes.Document.OutputSettings:out]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtOperatorAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.jsoup.nodes.Document.OutputSettings	Expression	class spoon.support.reflect.code.CtVariableReadImpl	2914:2916	85:85	out	[]	[org.jsoup.nodes.Document.OutputSettings:out]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtOperatorAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.nio.charset.CharsetEncoder	Expression	class spoon.support.reflect.code.CtInvocationImpl	2914:2926	85:85	out.encoder()	[java.nio.charset.CharsetEncoder:encoder]	[org.jsoup.nodes.Document.OutputSettings:out]	[spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtOperatorAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtLocalVariableImpl	Statement	class spoon.support.reflect.code.CtLocalVariableImpl	2883:2927	85:85	final java.nio.charset.CharsetEncoder encoder = out.encoder()	[java.nio.charset.CharsetEncoder:encoder]	[org.jsoup.nodes.Document.OutputSettings:out]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtOperatorAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
void	Expression	class spoon.support.reflect.code.CtTypeAccessImpl	2969:2979	86:86	org.jsoup.nodes.Entities.CoreCharset	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtOperatorAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.nio.charset.CharsetEncoder	Expression	class spoon.support.reflect.code.CtVariableReadImpl	2988:2994	86:86	encoder	[]	[java.nio.charset.CharsetEncoder:encoder]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtOperatorAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.nio.charset.Charset	Expression	class spoon.support.reflect.code.CtInvocationImpl	2988:3004	86:86	encoder.charset()	[java.nio.charset.Charset:charset]	[java.nio.charset.CharsetEncoder:encoder]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtOperatorAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtInvocationImpl	2988:3011	86:86	encoder.charset().name()	[java.lang.String:charset, java.nio.charset.Charset:charset]	[java.nio.charset.CharsetEncoder:encoder]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtOperatorAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.jsoup.nodes.Entities.CoreCharset	Expression	class spoon.support.reflect.code.CtInvocationImpl	2969:3012	86:86	org.jsoup.nodes.Entities.CoreCharset.byName(encoder.charset().name())	[java.lang.String:charset, java.nio.charset.Charset:charset, org.jsoup.nodes.Entities.CoreCharset:byName]	[java.nio.charset.CharsetEncoder:encoder]	[spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtOperatorAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtLocalVariableImpl	Statement	class spoon.support.reflect.code.CtLocalVariableImpl	2937:3013	86:86	final org.jsoup.nodes.Entities.CoreCharset coreCharset = org.jsoup.nodes.Entities.CoreCharset.byName(encoder.charset().name())	[java.lang.String:charset, java.nio.charset.Charset:charset, org.jsoup.nodes.Entities.CoreCharset:byName]	[java.nio.charset.CharsetEncoder:encoder]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtOperatorAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.jsoup.nodes.Entities.EscapeMode	Expression	class spoon.support.reflect.code.CtVariableReadImpl	3058:3067	87:87	escapeMode	[]	[org.jsoup.nodes.Entities.EscapeMode:escapeMode]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtOperatorAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.util.Map<java.lang.Character, java.lang.String>	Expression	class spoon.support.reflect.code.CtInvocationImpl	3058:3076	87:87	escapeMode.getMap()	[java.util.Map<java.lang.Character, java.lang.String>:getMap]	[org.jsoup.nodes.Entities.EscapeMode:escapeMode]	[spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtOperatorAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtLocalVariableImpl	Statement	class spoon.support.reflect.code.CtLocalVariableImpl	3023:3077	87:87	final java.util.Map<java.lang.Character, java.lang.String> map = escapeMode.getMap()	[java.util.Map<java.lang.Character, java.lang.String>:getMap]	[org.jsoup.nodes.Entities.EscapeMode:escapeMode]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtOperatorAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	3093:3095	88:88	int	[]	[]	[spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtOperatorAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtVariableReadImpl	3106:3111	88:88	string	[]	[java.lang.String:string]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtOperatorAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
int	Expression	class spoon.support.reflect.code.CtInvocationImpl	3106:3120	88:88	string.length()	[int:length]	[java.lang.String:string]	[spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtOperatorAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtLocalVariableImpl	Statement	class spoon.support.reflect.code.CtLocalVariableImpl	3087:3121	88:88	final int length = string.length()	[int:length]	[java.lang.String:string]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtOperatorAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	3132:3134	90:90	int	[]	[]	[spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtOperatorAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtLocalVariableImpl	Statement	class spoon.support.reflect.code.CtLocalVariableImpl	3132:3145	90:90	int codePoint	[]	[]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtOperatorAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
null	PrimitiveType	class spoon.support.reflect.reference.CtTypeReferenceImpl	3160:3162	91:91	int	[]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtOperatorAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
int	Expression	class spoon.support.reflect.code.CtLiteralImpl	3173:3173	91:91	0	[]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtOperatorAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtLocalVariableImpl	Statement	class spoon.support.reflect.code.CtLocalVariableImpl	3160:3173	91:91	int offset = 0	[]	[]	[spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtOperatorAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
int	Expression	class spoon.support.reflect.code.CtVariableReadImpl	3176:3181	91:91	offset	[]	[int:offset]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtOperatorAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
int	Expression	class spoon.support.reflect.code.CtVariableReadImpl	3185:3190	91:91	length	[]	[int:length]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtOperatorAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	3176:3190	91:91	offset < length	[]	[int:length, int:offset]	[spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtOperatorAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
int	Expression	class spoon.support.reflect.code.CtVariableWriteImpl	3193:3198	91:91	offset	[]	[int:offset]	[spoon.support.reflect.code.CtOperatorAssignmentImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtOperatorAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
void	Expression	class spoon.support.reflect.code.CtTypeAccessImpl	3203:3211	91:91	java.lang.Character	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtOperatorAssignmentImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtOperatorAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
int	Expression	class spoon.support.reflect.code.CtVariableReadImpl	3223:3231	91:91	codePoint	[]	[int:codePoint]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtOperatorAssignmentImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtOperatorAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
int	Expression	class spoon.support.reflect.code.CtInvocationImpl	3203:3232	91:91	java.lang.Character.charCount(codePoint)	[int:charCount]	[int:codePoint]	[spoon.support.reflect.code.CtOperatorAssignmentImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtOperatorAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtOperatorAssignmentImpl	Statement	class spoon.support.reflect.code.CtOperatorAssignmentImpl	3193:3232	91:91	offset += java.lang.Character.charCount(codePoint)	[int:charCount]	[int:offset, int:codePoint]	[spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtOperatorAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
int	Expression	class spoon.support.reflect.code.CtVariableWriteImpl	3249:3257	92:92	codePoint	[]	[int:codePoint]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtVariableReadImpl	3261:3266	92:92	string	[]	[java.lang.String:string]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
int	Expression	class spoon.support.reflect.code.CtVariableReadImpl	3280:3285	92:92	offset	[]	[int:offset]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
int	Expression	class spoon.support.reflect.code.CtInvocationImpl	3261:3286	92:92	string.codePointAt(offset)	[int:codePointAt]	[java.lang.String:string, int:offset]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtAssignmentImpl	Statement	class spoon.support.reflect.code.CtAssignmentImpl	3249:3287	92:92	codePoint = string.codePointAt(offset)	[int:codePointAt]	[java.lang.String:string, int:offset, int:codePoint]	[spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtVariableReadImpl	3306:3319	94:94	normaliseWhite	[]	[boolean:normaliseWhite]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
void	Expression	class spoon.support.reflect.code.CtTypeAccessImpl	3344:3353	95:95	org.jsoup.helper.StringUtil	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
int	Expression	class spoon.support.reflect.code.CtVariableReadImpl	3368:3376	95:95	codePoint	[]	[int:codePoint]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtInvocationImpl	3344:3377	95:95	org.jsoup.helper.StringUtil.isWhitespace(codePoint)	[boolean:isWhitespace]	[int:codePoint]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtVariableReadImpl	3407:3423	96:96	stripLeadingWhite	[]	[boolean:stripLeadingWhite]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtVariableReadImpl	3429:3443	96:96	reachedNonWhite	[]	[boolean:reachedNonWhite]	[spoon.support.reflect.code.CtUnaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtUnaryOperatorImpl	3428:3443	96:96	!reachedNonWhite	[]	[boolean:reachedNonWhite]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	3406:3444	96:96	stripLeadingWhite && (!reachedNonWhite)	[]	[boolean:stripLeadingWhite, boolean:reachedNonWhite]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtVariableReadImpl	3449:3460	96:96	lastWasWhite	[]	[boolean:lastWasWhite]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	3406:3460	96:96	(stripLeadingWhite && (!reachedNonWhite)) || lastWasWhite	[]	[boolean:lastWasWhite, boolean:stripLeadingWhite, boolean:reachedNonWhite]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtInvocationImpl]
CtContinueImpl	Statement	class spoon.support.reflect.code.CtContinueImpl	3487:3495	97:97	continue	[]	[]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtContinueImpl]
CtIfImpl	Statement	class spoon.support.reflect.code.CtIfImpl	3402:3495	96:97	if ((stripLeadingWhite && (!reachedNonWhite)) || lastWasWhite)    continue;	[]	[boolean:lastWasWhite, boolean:stripLeadingWhite, boolean:reachedNonWhite]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.StringBuilder	Expression	class spoon.support.reflect.code.CtVariableReadImpl	3517:3521	98:98	accum	[]	[java.lang.StringBuilder:accum]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtInvocationImpl]
char	Expression	class spoon.support.reflect.code.CtLiteralImpl	3530:3532	98:98	' '	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.StringBuilder	Expression	class spoon.support.reflect.code.CtInvocationImpl	3517:3534	98:98	accum.append(' ')	[java.lang.StringBuilder:append]	[java.lang.StringBuilder:accum]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtVariableWriteImpl	3556:3567	99:99	lastWasWhite	[]	[boolean:lastWasWhite]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtLiteralImpl	3571:3574	99:99	true	[]	[]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtInvocationImpl]
CtAssignmentImpl	Statement	class spoon.support.reflect.code.CtAssignmentImpl	3556:3575	99:99	lastWasWhite = true	[]	[boolean:lastWasWhite]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtInvocationImpl]
CtContinueImpl	Statement	class spoon.support.reflect.code.CtContinueImpl	3597:3605	100:100	continue	[]	[]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtVariableWriteImpl	3652:3663	102:102	lastWasWhite	[]	[boolean:lastWasWhite]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl]
boolean	Expression	class spoon.support.reflect.code.CtLiteralImpl	3667:3671	102:102	false	[]	[]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl]
CtAssignmentImpl	Statement	class spoon.support.reflect.code.CtAssignmentImpl	3652:3672	102:102	lastWasWhite = false	[]	[boolean:lastWasWhite]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl]
boolean	Expression	class spoon.support.reflect.code.CtVariableWriteImpl	3694:3708	103:103	reachedNonWhite	[]	[boolean:reachedNonWhite]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl]
boolean	Expression	class spoon.support.reflect.code.CtLiteralImpl	3712:3715	103:103	true	[]	[]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl]
CtAssignmentImpl	Statement	class spoon.support.reflect.code.CtAssignmentImpl	3694:3716	103:103	reachedNonWhite = true	[]	[boolean:reachedNonWhite]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl]
CtIfImpl	Statement	class spoon.support.reflect.code.CtIfImpl	3340:3734	95:104	if (org.jsoup.helper.StringUtil.isWhitespace(codePoint)) {    if ((stripLeadingWhite && (!reachedNonWhite)) || lastWasWhite)        continue;    accum.append(' ');    lastWasWhite = true;    continue;}else {    lastWasWhite = false;    reachedNonWhite = true;}	[boolean:isWhitespace, java.lang.StringBuilder:append]	[boolean:lastWasWhite, java.lang.StringBuilder:accum, int:codePoint, boolean:stripLeadingWhite, boolean:reachedNonWhite]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtIfImpl	Statement	class spoon.support.reflect.code.CtIfImpl	3302:3748	94:105	if (normaliseWhite) {    if (org.jsoup.helper.StringUtil.isWhitespace(codePoint)) {        if ((stripLeadingWhite && (!reachedNonWhite)) || lastWasWhite)            continue;        accum.append(' ');        lastWasWhite = true;        continue;    }else {        lastWasWhite = false;        reachedNonWhite = true;    }}	[boolean:isWhitespace, java.lang.StringBuilder:append]	[boolean:lastWasWhite, boolean:normaliseWhite, java.lang.StringBuilder:accum, int:codePoint, boolean:stripLeadingWhite, boolean:reachedNonWhite]	[spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
int	Expression	class spoon.support.reflect.code.CtVariableReadImpl	3895:3903	107:107	codePoint	[]	[int:codePoint]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
void	Expression	class spoon.support.reflect.code.CtTypeAccessImpl	3907:3915	107:107	java.lang.Character	[]	[]	[spoon.support.reflect.code.CtFieldReadImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
int	Expression	class spoon.support.reflect.code.CtFieldReadImpl	3907:3944	107:107	java.lang.Character.MIN_SUPPLEMENTARY_CODE_POINT	[]	[int:MIN_SUPPLEMENTARY_CODE_POINT]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	3895:3944	107:107	codePoint < (java.lang.Character.MIN_SUPPLEMENTARY_CODE_POINT)	[]	[int:codePoint, int:MIN_SUPPLEMENTARY_CODE_POINT]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
int	Expression	class spoon.support.reflect.code.CtVariableReadImpl	3987:3995	108:108	(char) (codePoint)	[]	[int:(char) (codePoint)]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtLocalVariableImpl	Statement	class spoon.support.reflect.code.CtLocalVariableImpl	3965:3996	108:108	final char c = ((char) (codePoint))	[]	[int:(char) (codePoint)]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
char	Expression	class spoon.support.reflect.code.CtVariableReadImpl	4077:4077	110:110	c	[]	[char:c]	[spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
char	Expression	class spoon.support.reflect.code.CtLiteralImpl	4107:4109	111:111	'&'	[]	[]	[spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.StringBuilder	Expression	class spoon.support.reflect.code.CtVariableReadImpl	4136:4140	112:112	accum	[]	[java.lang.StringBuilder:accum]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	4149:4155	112:112	"&amp;"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.StringBuilder	Expression	class spoon.support.reflect.code.CtInvocationImpl	4136:4157	112:112	accum.append("&amp;")	[java.lang.StringBuilder:append]	[java.lang.StringBuilder:accum]	[spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtBreakImpl	Statement	class spoon.support.reflect.code.CtBreakImpl	4183:4188	113:113	break	[]	[]	[spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtCaseImpl	Statement	class spoon.support.reflect.code.CtCaseImpl	4102:4109	111:111	case '&' :    accum.append("&amp;");    break;	[java.lang.StringBuilder:append]	[java.lang.StringBuilder:accum]	[spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
int	Expression	class spoon.support.reflect.code.CtLiteralImpl	4215:4218	114:114	160	[]	[]	[spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.jsoup.nodes.Entities.EscapeMode	Expression	class spoon.support.reflect.code.CtVariableReadImpl	4249:4258	115:115	escapeMode	[]	[org.jsoup.nodes.Entities.EscapeMode:escapeMode]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
void	Expression	class spoon.support.reflect.code.CtTypeAccessImpl	4263:4272	115:115	org.jsoup.nodes.Entities.EscapeMode	[]	[]	[spoon.support.reflect.code.CtFieldReadImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.jsoup.nodes.Entities.EscapeMode	Expression	class spoon.support.reflect.code.CtFieldReadImpl	4263:4278	115:115	org.jsoup.nodes.Entities.EscapeMode.xhtml	[]	[org.jsoup.nodes.Entities.EscapeMode:xhtml]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	4249:4278	115:115	escapeMode != (org.jsoup.nodes.Entities.EscapeMode.xhtml)	[]	[org.jsoup.nodes.Entities.EscapeMode:escapeMode, org.jsoup.nodes.Entities.EscapeMode:xhtml]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.StringBuilder	Expression	class spoon.support.reflect.code.CtVariableReadImpl	4309:4313	116:116	accum	[]	[java.lang.StringBuilder:accum]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	4322:4329	116:116	"&nbsp;"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtInvocationImpl]
java.lang.StringBuilder	Expression	class spoon.support.reflect.code.CtInvocationImpl	4309:4331	116:116	accum.append("&nbsp;")	[java.lang.StringBuilder:append]	[java.lang.StringBuilder:accum]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtInvocationImpl]
java.lang.StringBuilder	Expression	class spoon.support.reflect.code.CtVariableReadImpl	4390:4394	118:118	accum	[]	[java.lang.StringBuilder:accum]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtInvocationImpl]
char	Expression	class spoon.support.reflect.code.CtVariableReadImpl	4403:4403	118:118	c	[]	[char:c]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtInvocationImpl]
java.lang.StringBuilder	Expression	class spoon.support.reflect.code.CtInvocationImpl	4390:4405	118:118	accum.append(c)	[java.lang.StringBuilder:append]	[java.lang.StringBuilder:accum, char:c]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtInvocationImpl]
CtIfImpl	Statement	class spoon.support.reflect.code.CtIfImpl	4245:4405	115:118	if (escapeMode != (org.jsoup.nodes.Entities.EscapeMode.xhtml))    accum.append("&nbsp;");else    accum.append(c);	[java.lang.StringBuilder:append]	[org.jsoup.nodes.Entities.EscapeMode:escapeMode, org.jsoup.nodes.Entities.EscapeMode:xhtml, java.lang.StringBuilder:accum, char:c]	[spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtBreakImpl	Statement	class spoon.support.reflect.code.CtBreakImpl	4431:4436	119:119	break	[]	[]	[spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtCaseImpl	Statement	class spoon.support.reflect.code.CtCaseImpl	4210:4218	114:114	case 160 :    if (escapeMode != (org.jsoup.nodes.Entities.EscapeMode.xhtml))        accum.append("&nbsp;");    else        accum.append(c);    break;	[java.lang.StringBuilder:append]	[org.jsoup.nodes.Entities.EscapeMode:escapeMode, org.jsoup.nodes.Entities.EscapeMode:xhtml, java.lang.StringBuilder:accum, char:c]	[spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
char	Expression	class spoon.support.reflect.code.CtLiteralImpl	4463:4465	120:120	'<'	[]	[]	[spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtVariableReadImpl	4497:4507	121:121	inAttribute	[]	[boolean:inAttribute]	[spoon.support.reflect.code.CtUnaryOperatorImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtUnaryOperatorImpl	4496:4507	121:121	!inAttribute	[]	[boolean:inAttribute]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.StringBuilder	Expression	class spoon.support.reflect.code.CtVariableReadImpl	4538:4542	122:122	accum	[]	[java.lang.StringBuilder:accum]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	4551:4556	122:122	"&lt;"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtInvocationImpl]
java.lang.StringBuilder	Expression	class spoon.support.reflect.code.CtInvocationImpl	4538:4558	122:122	accum.append("&lt;")	[java.lang.StringBuilder:append]	[java.lang.StringBuilder:accum]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtInvocationImpl]
java.lang.StringBuilder	Expression	class spoon.support.reflect.code.CtVariableReadImpl	4617:4621	124:124	accum	[]	[java.lang.StringBuilder:accum]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtInvocationImpl]
char	Expression	class spoon.support.reflect.code.CtVariableReadImpl	4630:4630	124:124	c	[]	[char:c]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtInvocationImpl]
java.lang.StringBuilder	Expression	class spoon.support.reflect.code.CtInvocationImpl	4617:4632	124:124	accum.append(c)	[java.lang.StringBuilder:append]	[java.lang.StringBuilder:accum, char:c]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtInvocationImpl]
CtIfImpl	Statement	class spoon.support.reflect.code.CtIfImpl	4492:4632	121:124	if (!inAttribute)    accum.append("&lt;");else    accum.append(c);	[java.lang.StringBuilder:append]	[java.lang.StringBuilder:accum, boolean:inAttribute, char:c]	[spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtBreakImpl	Statement	class spoon.support.reflect.code.CtBreakImpl	4658:4663	125:125	break	[]	[]	[spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtCaseImpl	Statement	class spoon.support.reflect.code.CtCaseImpl	4458:4465	120:120	case '<' :    if (!inAttribute)        accum.append("&lt;");    else        accum.append(c);    break;	[java.lang.StringBuilder:append]	[java.lang.StringBuilder:accum, boolean:inAttribute, char:c]	[spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
char	Expression	class spoon.support.reflect.code.CtLiteralImpl	4690:4692	126:126	'>'	[]	[]	[spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtVariableReadImpl	4724:4734	127:127	inAttribute	[]	[boolean:inAttribute]	[spoon.support.reflect.code.CtUnaryOperatorImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtUnaryOperatorImpl	4723:4734	127:127	!inAttribute	[]	[boolean:inAttribute]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.StringBuilder	Expression	class spoon.support.reflect.code.CtVariableReadImpl	4765:4769	128:128	accum	[]	[java.lang.StringBuilder:accum]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	4778:4783	128:128	"&gt;"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtInvocationImpl]
java.lang.StringBuilder	Expression	class spoon.support.reflect.code.CtInvocationImpl	4765:4785	128:128	accum.append("&gt;")	[java.lang.StringBuilder:append]	[java.lang.StringBuilder:accum]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtInvocationImpl]
java.lang.StringBuilder	Expression	class spoon.support.reflect.code.CtVariableReadImpl	4844:4848	130:130	accum	[]	[java.lang.StringBuilder:accum]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtInvocationImpl]
char	Expression	class spoon.support.reflect.code.CtVariableReadImpl	4857:4857	130:130	c	[]	[char:c]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtInvocationImpl]
java.lang.StringBuilder	Expression	class spoon.support.reflect.code.CtInvocationImpl	4844:4859	130:130	accum.append(c)	[java.lang.StringBuilder:append]	[java.lang.StringBuilder:accum, char:c]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtInvocationImpl]
CtIfImpl	Statement	class spoon.support.reflect.code.CtIfImpl	4719:4859	127:130	if (!inAttribute)    accum.append("&gt;");else    accum.append(c);	[java.lang.StringBuilder:append]	[java.lang.StringBuilder:accum, boolean:inAttribute, char:c]	[spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtBreakImpl	Statement	class spoon.support.reflect.code.CtBreakImpl	4885:4890	131:131	break	[]	[]	[spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtCaseImpl	Statement	class spoon.support.reflect.code.CtCaseImpl	4685:4692	126:126	case '>' :    if (!inAttribute)        accum.append("&gt;");    else        accum.append(c);    break;	[java.lang.StringBuilder:append]	[java.lang.StringBuilder:accum, boolean:inAttribute, char:c]	[spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
char	Expression	class spoon.support.reflect.code.CtLiteralImpl	4917:4919	132:132	'"'	[]	[]	[spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtVariableReadImpl	4950:4960	133:133	inAttribute	[]	[boolean:inAttribute]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.StringBuilder	Expression	class spoon.support.reflect.code.CtVariableReadImpl	4991:4995	134:134	accum	[]	[java.lang.StringBuilder:accum]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	5004:5011	134:134	"&quot;"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtInvocationImpl]
java.lang.StringBuilder	Expression	class spoon.support.reflect.code.CtInvocationImpl	4991:5013	134:134	accum.append("&quot;")	[java.lang.StringBuilder:append]	[java.lang.StringBuilder:accum]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtInvocationImpl]
java.lang.StringBuilder	Expression	class spoon.support.reflect.code.CtVariableReadImpl	5072:5076	136:136	accum	[]	[java.lang.StringBuilder:accum]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtInvocationImpl]
char	Expression	class spoon.support.reflect.code.CtVariableReadImpl	5085:5085	136:136	c	[]	[char:c]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtInvocationImpl]
java.lang.StringBuilder	Expression	class spoon.support.reflect.code.CtInvocationImpl	5072:5087	136:136	accum.append(c)	[java.lang.StringBuilder:append]	[java.lang.StringBuilder:accum, char:c]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtInvocationImpl]
CtIfImpl	Statement	class spoon.support.reflect.code.CtIfImpl	4946:5087	133:136	if (inAttribute)    accum.append("&quot;");else    accum.append(c);	[java.lang.StringBuilder:append]	[java.lang.StringBuilder:accum, boolean:inAttribute, char:c]	[spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtBreakImpl	Statement	class spoon.support.reflect.code.CtBreakImpl	5113:5118	137:137	break	[]	[]	[spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtCaseImpl	Statement	class spoon.support.reflect.code.CtCaseImpl	4912:4919	132:132	case '"' :    if (inAttribute)        accum.append("&quot;");    else        accum.append(c);    break;	[java.lang.StringBuilder:append]	[java.lang.StringBuilder:accum, boolean:inAttribute, char:c]	[spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
org.jsoup.nodes.Entities.CoreCharset	Expression	class spoon.support.reflect.code.CtVariableReadImpl	5187:5197	139:139	coreCharset	[]	[org.jsoup.nodes.Entities.CoreCharset:coreCharset]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
char	Expression	class spoon.support.reflect.code.CtVariableReadImpl	5200:5200	139:139	c	[]	[char:c]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.nio.charset.CharsetEncoder	Expression	class spoon.support.reflect.code.CtVariableReadImpl	5203:5209	139:139	encoder	[]	[java.nio.charset.CharsetEncoder:encoder]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtInvocationImpl	5177:5210	139:139	org.jsoup.nodes.Entities.canEncode(coreCharset, c, encoder)	[boolean:canEncode]	[java.nio.charset.CharsetEncoder:encoder, char:c, org.jsoup.nodes.Entities.CoreCharset:coreCharset]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.StringBuilder	Expression	class spoon.support.reflect.code.CtVariableReadImpl	5241:5245	140:140	accum	[]	[java.lang.StringBuilder:accum]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtInvocationImpl]
char	Expression	class spoon.support.reflect.code.CtVariableReadImpl	5254:5254	140:140	c	[]	[char:c]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtInvocationImpl]
java.lang.StringBuilder	Expression	class spoon.support.reflect.code.CtInvocationImpl	5241:5256	140:140	accum.append(c)	[java.lang.StringBuilder:append]	[java.lang.StringBuilder:accum, char:c]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtInvocationImpl]
java.util.Map<java.lang.Character, java.lang.String>	Expression	class spoon.support.reflect.code.CtVariableReadImpl	5291:5293	141:141	map	[]	[java.util.Map<java.lang.Character, java.lang.String>:map]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
char	Expression	class spoon.support.reflect.code.CtVariableReadImpl	5307:5307	141:141	c	[]	[char:c]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtInvocationImpl	5291:5308	141:141	map.containsKey(c)	[boolean:containsKey]	[char:c, java.util.Map<java.lang.Character, java.lang.String>:map]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.StringBuilder	Expression	class spoon.support.reflect.code.CtVariableReadImpl	5339:5343	142:142	accum	[]	[java.lang.StringBuilder:accum]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
char	Expression	class spoon.support.reflect.code.CtLiteralImpl	5352:5354	142:142	'&'	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.StringBuilder	Expression	class spoon.support.reflect.code.CtInvocationImpl	5339:5355	142:142	accum.append('&')	[java.lang.StringBuilder:append]	[java.lang.StringBuilder:accum]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.util.Map<java.lang.Character, java.lang.String>	Expression	class spoon.support.reflect.code.CtVariableReadImpl	5364:5366	142:142	map	[]	[java.util.Map<java.lang.Character, java.lang.String>:map]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
char	Expression	class spoon.support.reflect.code.CtVariableReadImpl	5372:5372	142:142	c	[]	[char:c]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtInvocationImpl	5364:5373	142:142	map.get(c)	[java.lang.String:get]	[char:c, java.util.Map<java.lang.Character, java.lang.String>:map]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.StringBuilder	Expression	class spoon.support.reflect.code.CtInvocationImpl	5339:5374	142:142	accum.append('&').append(map.get(c))	[java.lang.String:get, java.lang.StringBuilder:append]	[java.lang.StringBuilder:accum, char:c, java.util.Map<java.lang.Character, java.lang.String>:map]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
char	Expression	class spoon.support.reflect.code.CtLiteralImpl	5383:5385	142:142	';'	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.StringBuilder	Expression	class spoon.support.reflect.code.CtInvocationImpl	5339:5387	142:142	accum.append('&').append(map.get(c)).append(';')	[java.lang.String:get, java.lang.StringBuilder:append]	[java.lang.StringBuilder:accum, char:c, java.util.Map<java.lang.Character, java.lang.String>:map]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.StringBuilder	Expression	class spoon.support.reflect.code.CtVariableReadImpl	5446:5450	144:144	accum	[]	[java.lang.StringBuilder:accum]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	5459:5463	144:144	"&#x"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.StringBuilder	Expression	class spoon.support.reflect.code.CtInvocationImpl	5446:5464	144:144	accum.append("&#x")	[java.lang.StringBuilder:append]	[java.lang.StringBuilder:accum]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
void	Expression	class spoon.support.reflect.code.CtTypeAccessImpl	5473:5479	144:144	java.lang.Integer	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
int	Expression	class spoon.support.reflect.code.CtVariableReadImpl	5493:5501	144:144	codePoint	[]	[int:codePoint]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtInvocationImpl	5473:5502	144:144	java.lang.Integer.toHexString(codePoint)	[java.lang.String:toHexString]	[int:codePoint]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.StringBuilder	Expression	class spoon.support.reflect.code.CtInvocationImpl	5446:5503	144:144	accum.append("&#x").append(java.lang.Integer.toHexString(codePoint))	[java.lang.StringBuilder:append, java.lang.String:toHexString]	[java.lang.StringBuilder:accum, int:codePoint]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
char	Expression	class spoon.support.reflect.code.CtLiteralImpl	5512:5514	144:144	';'	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.StringBuilder	Expression	class spoon.support.reflect.code.CtInvocationImpl	5446:5516	144:144	accum.append("&#x").append(java.lang.Integer.toHexString(codePoint)).append(';')	[java.lang.StringBuilder:append, java.lang.String:toHexString]	[java.lang.StringBuilder:accum, int:codePoint]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtIfImpl	Statement	class spoon.support.reflect.code.CtIfImpl	5287:5516	141:144	if (map.containsKey(c))    accum.append('&').append(map.get(c)).append(';');else    accum.append("&#x").append(java.lang.Integer.toHexString(codePoint)).append(';');	[java.lang.String:get, java.lang.StringBuilder:append, boolean:containsKey, java.lang.String:toHexString]	[java.lang.StringBuilder:accum, int:codePoint, char:c, java.util.Map<java.lang.Character, java.lang.String>:map]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtIfImpl	Statement	class spoon.support.reflect.code.CtIfImpl	5173:5516	139:144	if (org.jsoup.nodes.Entities.canEncode(coreCharset, c, encoder))    accum.append(c);else    if (map.containsKey(c))        accum.append('&').append(map.get(c)).append(';');    else        accum.append("&#x").append(java.lang.Integer.toHexString(codePoint)).append(';');	[java.lang.String:get, boolean:canEncode, java.lang.StringBuilder:append, boolean:containsKey, java.lang.String:toHexString]	[java.nio.charset.CharsetEncoder:encoder, java.lang.StringBuilder:accum, int:codePoint, char:c, org.jsoup.nodes.Entities.CoreCharset:coreCharset, java.util.Map<java.lang.Character, java.lang.String>:map]	[spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtCaseImpl	Statement	class spoon.support.reflect.code.CtCaseImpl	5140:5146	138:138	default :    if (org.jsoup.nodes.Entities.canEncode(coreCharset, c, encoder))        accum.append(c);    else        if (map.containsKey(c))            accum.append('&').append(map.get(c)).append(';');        else            accum.append("&#x").append(java.lang.Integer.toHexString(codePoint)).append(';');	[java.lang.String:get, boolean:canEncode, java.lang.StringBuilder:append, boolean:containsKey, java.lang.String:toHexString]	[java.nio.charset.CharsetEncoder:encoder, java.lang.StringBuilder:accum, int:codePoint, char:c, org.jsoup.nodes.Entities.CoreCharset:coreCharset, java.util.Map<java.lang.Character, java.lang.String>:map]	[spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtSwitchImpl	Statement	class spoon.support.reflect.code.CtSwitchImpl	4069:5534	110:145	switch (c) {    case '&' :        accum.append("&amp;");        break;    case 160 :        if (escapeMode != (org.jsoup.nodes.Entities.EscapeMode.xhtml))            accum.append("&nbsp;");        else            accum.append(c);        break;    case '<' :        if (!inAttribute)            accum.append("&lt;");        else            accum.append(c);        break;    case '>' :        if (!inAttribute)            accum.append("&gt;");        else            accum.append(c);        break;    case '"' :        if (inAttribute)            accum.append("&quot;");        else            accum.append(c);        break;    default :        if (org.jsoup.nodes.Entities.canEncode(coreCharset, c, encoder))            accum.append(c);        else            if (map.containsKey(c))                accum.append('&').append(map.get(c)).append(';');            else                accum.append("&#x").append(java.lang.Integer.toHexString(codePoint)).append(';');}	[java.lang.String:get, boolean:canEncode, java.lang.StringBuilder:append, boolean:containsKey, java.lang.String:toHexString]	[java.nio.charset.CharsetEncoder:encoder, org.jsoup.nodes.Entities.EscapeMode:escapeMode, org.jsoup.nodes.Entities.EscapeMode:xhtml, java.lang.StringBuilder:accum, int:codePoint, char:c, boolean:inAttribute, org.jsoup.nodes.Entities.CoreCharset:coreCharset, java.util.Map<java.lang.Character, java.lang.String>:map]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
void	Expression	class spoon.support.reflect.code.CtTypeAccessImpl	5601:5609	147:147	java.lang.Character	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
int	Expression	class spoon.support.reflect.code.CtVariableReadImpl	5619:5627	147:147	codePoint	[]	[int:codePoint]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
char[]	Expression	class spoon.support.reflect.code.CtInvocationImpl	5601:5628	147:147	java.lang.Character.toChars(codePoint)	[char[]:toChars]	[int:codePoint]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	5590:5629	147:147	new java.lang.String(java.lang.Character.toChars(codePoint))	[char[]:toChars]	[int:codePoint]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtLocalVariableImpl	Statement	class spoon.support.reflect.code.CtLocalVariableImpl	5573:5630	147:147	final java.lang.String c = new java.lang.String(java.lang.Character.toChars(codePoint))	[char[]:toChars]	[int:codePoint]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.nio.charset.CharsetEncoder	Expression	class spoon.support.reflect.code.CtVariableReadImpl	5652:5658	148:148	encoder	[]	[java.nio.charset.CharsetEncoder:encoder]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtVariableReadImpl	5670:5670	148:148	c	[]	[java.lang.String:c]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtInvocationImpl	5652:5671	148:148	encoder.canEncode(c)	[boolean:canEncode]	[java.nio.charset.CharsetEncoder:encoder, java.lang.String:c]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.StringBuilder	Expression	class spoon.support.reflect.code.CtVariableReadImpl	5734:5738	149:149	accum	[]	[java.lang.StringBuilder:accum]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtVariableReadImpl	5747:5747	149:149	c	[]	[java.lang.String:c]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtInvocationImpl]
java.lang.StringBuilder	Expression	class spoon.support.reflect.code.CtInvocationImpl	5734:5749	149:149	accum.append(c)	[java.lang.StringBuilder:append]	[java.lang.StringBuilder:accum, java.lang.String:c]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtInvocationImpl]
java.lang.StringBuilder	Expression	class spoon.support.reflect.code.CtVariableReadImpl	5792:5796	151:151	accum	[]	[java.lang.StringBuilder:accum]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	5805:5809	151:151	"&#x"	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.StringBuilder	Expression	class spoon.support.reflect.code.CtInvocationImpl	5792:5810	151:151	accum.append("&#x")	[java.lang.StringBuilder:append]	[java.lang.StringBuilder:accum]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
void	Expression	class spoon.support.reflect.code.CtTypeAccessImpl	5819:5825	151:151	java.lang.Integer	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
int	Expression	class spoon.support.reflect.code.CtVariableReadImpl	5839:5847	151:151	codePoint	[]	[int:codePoint]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtInvocationImpl	5819:5848	151:151	java.lang.Integer.toHexString(codePoint)	[java.lang.String:toHexString]	[int:codePoint]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.StringBuilder	Expression	class spoon.support.reflect.code.CtInvocationImpl	5792:5849	151:151	accum.append("&#x").append(java.lang.Integer.toHexString(codePoint))	[java.lang.StringBuilder:append, java.lang.String:toHexString]	[java.lang.StringBuilder:accum, int:codePoint]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
char	Expression	class spoon.support.reflect.code.CtLiteralImpl	5858:5860	151:151	';'	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.StringBuilder	Expression	class spoon.support.reflect.code.CtInvocationImpl	5792:5862	151:151	accum.append("&#x").append(java.lang.Integer.toHexString(codePoint)).append(';')	[java.lang.StringBuilder:append, java.lang.String:toHexString]	[java.lang.StringBuilder:accum, int:codePoint]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtIfImpl	Statement	class spoon.support.reflect.code.CtIfImpl	5648:5862	148:151	if (encoder.canEncode(c))    accum.append(c);else    accum.append("&#x").append(java.lang.Integer.toHexString(codePoint)).append(';');	[boolean:canEncode, java.lang.StringBuilder:append, java.lang.String:toHexString]	[java.nio.charset.CharsetEncoder:encoder, java.lang.StringBuilder:accum, java.lang.String:c, int:codePoint]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtIfImpl	Statement	class spoon.support.reflect.code.CtIfImpl	3891:5876	107:152	if (codePoint < (java.lang.Character.MIN_SUPPLEMENTARY_CODE_POINT)) {    final char c = ((char) (codePoint));    switch (c) {        case '&' :            accum.append("&amp;");            break;        case 160 :            if (escapeMode != (org.jsoup.nodes.Entities.EscapeMode.xhtml))                accum.append("&nbsp;");            else                accum.append(c);            break;        case '<' :            if (!inAttribute)                accum.append("&lt;");            else                accum.append(c);            break;        case '>' :            if (!inAttribute)                accum.append("&gt;");            else                accum.append(c);            break;        case '"' :            if (inAttribute)                accum.append("&quot;");            else                accum.append(c);            break;        default :            if (org.jsoup.nodes.Entities.canEncode(coreCharset, c, encoder))                accum.append(c);            else                if (map.containsKey(c))                    accum.append('&').append(map.get(c)).append(';');                else                    accum.append("&#x").append(java.lang.Integer.toHexString(codePoint)).append(';');    }}else {    final java.lang.String c = new java.lang.String(java.lang.Character.toChars(codePoint));    if (encoder.canEncode(c))        accum.append(c);    else        accum.append("&#x").append(java.lang.Integer.toHexString(codePoint)).append(';');}	[java.lang.String:get, boolean:canEncode, char[]:toChars, java.lang.StringBuilder:append, boolean:containsKey, java.lang.String:toHexString]	[java.nio.charset.CharsetEncoder:encoder, int:(char) (codePoint), org.jsoup.nodes.Entities.EscapeMode:escapeMode, org.jsoup.nodes.Entities.EscapeMode:xhtml, java.lang.StringBuilder:accum, int:codePoint, java.lang.String:c, char:c, boolean:inAttribute, int:MIN_SUPPLEMENTARY_CODE_POINT, org.jsoup.nodes.Entities.CoreCharset:coreCharset, java.util.Map<java.lang.Character, java.lang.String>:map]	[spoon.support.reflect.code.CtForImpl]	[spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtForImpl	Statement	class spoon.support.reflect.code.CtForImpl	3155:5886	91:153	for (int offset = 0; offset < length; offset += java.lang.Character.charCount(codePoint)) {    codePoint = string.codePointAt(offset);    if (normaliseWhite) {        if (org.jsoup.helper.StringUtil.isWhitespace(codePoint)) {            if ((stripLeadingWhite && (!reachedNonWhite)) || lastWasWhite)                continue;            accum.append(' ');            lastWasWhite = true;            continue;        }else {            lastWasWhite = false;            reachedNonWhite = true;        }    }    if (codePoint < (java.lang.Character.MIN_SUPPLEMENTARY_CODE_POINT)) {        final char c = ((char) (codePoint));        switch (c) {            case '&' :                accum.append("&amp;");                break;            case 160 :                if (escapeMode != (org.jsoup.nodes.Entities.EscapeMode.xhtml))                    accum.append("&nbsp;");                else                    accum.append(c);                break;            case '<' :                if (!inAttribute)                    accum.append("&lt;");                else                    accum.append(c);                break;            case '>' :                if (!inAttribute)                    accum.append("&gt;");                else                    accum.append(c);                break;            case '"' :                if (inAttribute)                    accum.append("&quot;");                else                    accum.append(c);                break;            default :                if (org.jsoup.nodes.Entities.canEncode(coreCharset, c, encoder))                    accum.append(c);                else                    if (map.containsKey(c))                        accum.append('&').append(map.get(c)).append(';');                    else                        accum.append("&#x").append(java.lang.Integer.toHexString(codePoint)).append(';');        }    }else {        final java.lang.String c = new java.lang.String(java.lang.Character.toChars(codePoint));        if (encoder.canEncode(c))            accum.append(c);        else            accum.append("&#x").append(java.lang.Integer.toHexString(codePoint)).append(';');    }}	[java.lang.String:get, int:charCount, boolean:isWhitespace, int:codePointAt, boolean:canEncode, char[]:toChars, java.lang.StringBuilder:append, boolean:containsKey, java.lang.String:toHexString]	[java.lang.String:string, boolean:lastWasWhite, org.jsoup.nodes.Entities.EscapeMode:xhtml, boolean:normaliseWhite, java.lang.StringBuilder:accum, int:offset, boolean:stripLeadingWhite, boolean:reachedNonWhite, boolean:inAttribute, int:MIN_SUPPLEMENTARY_CODE_POINT, org.jsoup.nodes.Entities.CoreCharset:coreCharset, java.util.Map<java.lang.Character, java.lang.String>:map, java.nio.charset.CharsetEncoder:encoder, int:length, int:(char) (codePoint), org.jsoup.nodes.Entities.EscapeMode:escapeMode, int:codePoint, java.lang.String:c, char:c]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtOperatorAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtContinueImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtAssignmentImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtBreakImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtVariableReadImpl	5963:5968	157:157	string	[]	[java.lang.String:string]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtLiteralImpl	5971:5975	157:157	false	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtInvocationImpl	5954:5976	157:157	org.jsoup.nodes.Entities.unescape(string, false)	[java.lang.String:unescape]	[java.lang.String:string]	[spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
CtReturnImpl	Statement	class spoon.support.reflect.code.CtReturnImpl	5947:5977	157:157	return org.jsoup.nodes.Entities.unescape(string, false)	[java.lang.String:unescape]	[java.lang.String:string]	[]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
void	Expression	class spoon.support.reflect.code.CtTypeAccessImpl	6280:6285	167:167	org.jsoup.parser.Parser	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtVariableReadImpl	6304:6309	167:167	string	[]	[java.lang.String:string]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtVariableReadImpl	6312:6317	167:167	strict	[]	[boolean:strict]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtInvocationImpl	6280:6318	167:167	org.jsoup.parser.Parser.unescapeEntities(string, strict)	[java.lang.String:unescapeEntities]	[java.lang.String:string, boolean:strict]	[spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
CtReturnImpl	Statement	class spoon.support.reflect.code.CtReturnImpl	6273:6319	167:167	return org.jsoup.parser.Parser.unescapeEntities(string, strict)	[java.lang.String:unescapeEntities]	[java.lang.String:string, boolean:strict]	[]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
org.jsoup.nodes.Entities.CoreCharset	Expression	class spoon.support.reflect.code.CtVariableReadImpl	7118:7124	186:186	charset	[]	[org.jsoup.nodes.Entities.CoreCharset:charset]	[spoon.support.reflect.code.CtSwitchImpl]	[spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
org.jsoup.nodes.Entities.CoreCharset	Expression	class spoon.support.reflect.code.CtFieldReadImpl	7146:7150	187:187	org.jsoup.nodes.Entities.CoreCharset.ascii	[]	[org.jsoup.nodes.Entities.CoreCharset:ascii]	[spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl]	[spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
char	Expression	class spoon.support.reflect.code.CtVariableReadImpl	7176:7176	188:188	c	[]	[char:c]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl]	[spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
int	Expression	class spoon.support.reflect.code.CtLiteralImpl	7180:7183	188:188	128	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl]	[spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	7176:7183	188:188	c < 128	[]	[char:c]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl]	[spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
CtReturnImpl	Statement	class spoon.support.reflect.code.CtReturnImpl	7169:7184	188:188	return c < 128	[]	[char:c]	[spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl]	[spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
CtCaseImpl	Statement	class spoon.support.reflect.code.CtCaseImpl	7141:7150	187:187	case ascii :    return c < 128;	[]	[org.jsoup.nodes.Entities.CoreCharset:ascii, char:c]	[spoon.support.reflect.code.CtSwitchImpl]	[spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
org.jsoup.nodes.Entities.CoreCharset	Expression	class spoon.support.reflect.code.CtFieldReadImpl	7203:7205	189:189	org.jsoup.nodes.Entities.CoreCharset.utf	[]	[org.jsoup.nodes.Entities.CoreCharset:utf]	[spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl]	[spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtLiteralImpl	7231:7234	190:190	true	[]	[]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl]	[spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
CtReturnImpl	Statement	class spoon.support.reflect.code.CtReturnImpl	7224:7235	190:190	return true	[]	[]	[spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl]	[spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
CtCaseImpl	Statement	class spoon.support.reflect.code.CtCaseImpl	7198:7205	189:189	case utf :    return true;	[]	[org.jsoup.nodes.Entities.CoreCharset:utf]	[spoon.support.reflect.code.CtSwitchImpl]	[spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
java.nio.charset.CharsetEncoder	Expression	class spoon.support.reflect.code.CtVariableReadImpl	7382:7389	192:192	fallback	[]	[java.nio.charset.CharsetEncoder:fallback]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl]	[spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
char	Expression	class spoon.support.reflect.code.CtVariableReadImpl	7401:7401	192:192	c	[]	[char:c]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl]	[spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtInvocationImpl	7382:7402	192:192	fallback.canEncode(c)	[boolean:canEncode]	[java.nio.charset.CharsetEncoder:fallback, char:c]	[spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl]	[spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
CtReturnImpl	Statement	class spoon.support.reflect.code.CtReturnImpl	7375:7403	192:192	return fallback.canEncode(c)	[boolean:canEncode]	[java.nio.charset.CharsetEncoder:fallback, char:c]	[spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtSwitchImpl]	[spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
CtCaseImpl	Statement	class spoon.support.reflect.code.CtCaseImpl	7350:7356	191:191	default :    return fallback.canEncode(c);	[boolean:canEncode]	[java.nio.charset.CharsetEncoder:fallback, char:c]	[spoon.support.reflect.code.CtSwitchImpl]	[spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
CtSwitchImpl	Statement	class spoon.support.reflect.code.CtSwitchImpl	7110:7413	186:193	switch (charset) {    case ascii :        return c < 128;    case utf :        return true;    default :        return fallback.canEncode(c);}	[boolean:canEncode]	[java.nio.charset.CharsetEncoder:fallback, org.jsoup.nodes.Entities.CoreCharset:charset, org.jsoup.nodes.Entities.CoreCharset:ascii, org.jsoup.nodes.Entities.CoreCharset:utf, char:c]	[]	[spoon.support.reflect.code.CtSwitchImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtCaseImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl]
java.util.Properties	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	8600:8615	231:231	new java.util.Properties()	[]	[]	[spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtLocalVariableImpl	Statement	class spoon.support.reflect.code.CtLocalVariableImpl	8576:8616	231:231	java.util.Properties properties = new java.util.Properties()	[]	[]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.util.HashMap<java.lang.String, java.lang.Character>	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	8660:8691	232:232	new java.util.HashMap<java.lang.String, java.lang.Character>()	[]	[]	[spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtLocalVariableImpl	Statement	class spoon.support.reflect.code.CtLocalVariableImpl	8626:8692	232:232	java.util.Map<java.lang.String, java.lang.Character> entities = new java.util.HashMap<java.lang.String, java.lang.Character>()	[]	[]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Class	Expression	class spoon.support.reflect.code.CtFieldReadImpl	8737:8750	234:234	org.jsoup.nodes.Entities.class	[]	[java.lang.Class:class]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtVariableReadImpl	8772:8779	234:234	filename	[]	[java.lang.String:filename]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.io.InputStream	Expression	class spoon.support.reflect.code.CtInvocationImpl	8737:8780	234:234	org.jsoup.nodes.Entities.class.getResourceAsStream(filename)	[java.io.InputStream:getResourceAsStream]	[java.lang.Class:class, java.lang.String:filename]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtLocalVariableImpl	Statement	class spoon.support.reflect.code.CtLocalVariableImpl	8720:8781	234:234	java.io.InputStream in = org.jsoup.nodes.Entities.class.getResourceAsStream(filename)	[java.io.InputStream:getResourceAsStream]	[java.lang.Class:class, java.lang.String:filename]	[spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.util.Properties	Expression	class spoon.support.reflect.code.CtVariableReadImpl	8795:8804	235:235	properties	[]	[java.util.Properties:properties]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.io.InputStream	Expression	class spoon.support.reflect.code.CtVariableReadImpl	8811:8812	235:235	in	[]	[java.io.InputStream:in]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
void	Expression	class spoon.support.reflect.code.CtInvocationImpl	8795:8814	235:235	properties.load(in)	[void:load]	[java.util.Properties:properties, java.io.InputStream:in]	[spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.io.InputStream	Expression	class spoon.support.reflect.code.CtVariableReadImpl	8828:8829	236:236	in	[]	[java.io.InputStream:in]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
void	Expression	class spoon.support.reflect.code.CtInvocationImpl	8828:8838	236:236	in.close()	[void:close]	[java.io.InputStream:in]	[spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	8921:8955	238:238	"Error loading entities resource: "	[]	[]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.io.IOException	Expression	class spoon.support.reflect.code.CtVariableReadImpl	8959:8959	238:238	e	[]	[java.io.IOException:e]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtInvocationImpl	8959:8972	238:238	e.getMessage()	[java.lang.String:getMessage]	[java.io.IOException:e]	[spoon.support.reflect.code.CtBinaryOperatorImpl, spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtBinaryOperatorImpl	8921:8972	238:238	"Error loading entities resource: " + (e.getMessage())	[java.lang.String:getMessage]	[java.io.IOException:e]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtLiteralImpl	8975:8984	238:238	"Entities"	[]	[]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtVariableReadImpl	8987:8994	238:238	filename	[]	[java.lang.String:filename]	[spoon.support.reflect.code.CtConstructorCallImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
java.util.MissingResourceException	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	8892:8995	238:238	new java.util.MissingResourceException(("Error loading entities resource: " + (e.getMessage())), "Entities", filename)	[java.lang.String:getMessage]	[java.lang.String:filename, java.io.IOException:e]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
CtThrowImpl	Statement	class spoon.support.reflect.code.CtThrowImpl	8886:8996	238:238	throw new java.util.MissingResourceException(("Error loading entities resource: " + (e.getMessage())), "Entities", filename)	[java.lang.String:getMessage]	[java.lang.String:filename, java.io.IOException:e]	[spoon.support.reflect.code.CtCatchImpl, spoon.support.reflect.code.CtTryImpl]	[spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtInvocationImpl]
CtTryImpl	Statement	class spoon.support.reflect.code.CtTryImpl	8702:9006	233:239	try {    java.io.InputStream in = org.jsoup.nodes.Entities.class.getResourceAsStream(filename);    properties.load(in);    in.close();} catch (java.io.IOException e) {    throw new java.util.MissingResourceException(("Error loading entities resource: " + (e.getMessage())), "Entities", filename);}	[void:close, void:load, java.io.InputStream:getResourceAsStream, java.lang.String:getMessage]	[java.lang.Class:class, java.util.Properties:properties, java.lang.String:filename, java.io.InputStream:in, java.io.IOException:e]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtLocalVariableImpl	Statement	class spoon.support.reflect.code.CtLocalVariableImpl	9022:9059	241:241	java.util.Map.Entry entry	[]	[]	[spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.util.Properties	Expression	class spoon.support.reflect.code.CtVariableReadImpl	9039:9048	241:241	properties	[]	[java.util.Properties:properties]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>>	Expression	class spoon.support.reflect.code.CtInvocationImpl	9039:9059	241:241	properties.entrySet()	[java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>>:entrySet]	[java.util.Properties:properties]	[spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
void	Expression	class spoon.support.reflect.code.CtTypeAccessImpl	9092:9100	242:242	java.lang.Character	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
void	Expression	class spoon.support.reflect.code.CtTypeAccessImpl	9117:9123	242:242	java.lang.Integer	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.util.Map.Entry	Expression	class spoon.support.reflect.code.CtVariableReadImpl	9143:9147	242:242	entry	[]	[java.util.Map.Entry:entry]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Object	Expression	class spoon.support.reflect.code.CtInvocationImpl	9143:9158	242:242	(java.lang.String) (entry.getValue())	[]	[java.util.Map.Entry:entry]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
int	Expression	class spoon.support.reflect.code.CtLiteralImpl	9161:9162	242:242	16	[]	[]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
int	Expression	class spoon.support.reflect.code.CtInvocationImpl	9117:9163	242:242	(char) (java.lang.Integer.parseInt(((java.lang.String) (entry.getValue())), 16))	[]	[java.util.Map.Entry:entry]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Character	Expression	class spoon.support.reflect.code.CtInvocationImpl	9092:9164	242:242	java.lang.Character.valueOf(((char) (java.lang.Integer.parseInt(((java.lang.String) (entry.getValue())), 16))))	[java.lang.Character:valueOf]	[java.util.Map.Entry:entry]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtLocalVariableImpl	Statement	class spoon.support.reflect.code.CtLocalVariableImpl	9076:9165	242:242	java.lang.Character val = java.lang.Character.valueOf(((char) (java.lang.Integer.parseInt(((java.lang.String) (entry.getValue())), 16))))	[java.lang.Character:valueOf]	[java.util.Map.Entry:entry]	[spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.util.Map.Entry	Expression	class spoon.support.reflect.code.CtVariableReadImpl	9202:9206	243:243	entry	[]	[java.util.Map.Entry:entry]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Object	Expression	class spoon.support.reflect.code.CtInvocationImpl	9202:9215	243:243	(java.lang.String) (entry.getKey())	[]	[java.util.Map.Entry:entry]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtLocalVariableImpl	Statement	class spoon.support.reflect.code.CtLocalVariableImpl	9179:9216	243:243	java.lang.String name = ((java.lang.String) (entry.getKey()))	[]	[java.util.Map.Entry:entry]	[spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.util.Map<java.lang.String, java.lang.Character>	Expression	class spoon.support.reflect.code.CtVariableReadImpl	9230:9237	244:244	entities	[]	[java.util.Map<java.lang.String, java.lang.Character>:entities]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtVariableReadImpl	9243:9246	244:244	name	[]	[java.lang.String:name]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Character	Expression	class spoon.support.reflect.code.CtVariableReadImpl	9249:9251	244:244	val	[]	[java.lang.Character:val]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Character	Expression	class spoon.support.reflect.code.CtInvocationImpl	9230:9253	244:244	entities.put(name, val)	[java.lang.Character:put]	[java.lang.String:name, java.util.Map<java.lang.String, java.lang.Character>:entities, java.lang.Character:val]	[spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtForEachImpl	Statement	class spoon.support.reflect.code.CtForEachImpl	9017:9263	241:245	for (java.util.Map.Entry entry : properties.entrySet()) {    java.lang.Character val = java.lang.Character.valueOf(((char) (java.lang.Integer.parseInt(((java.lang.String) (entry.getValue())), 16))));    java.lang.String name = ((java.lang.String) (entry.getKey()));    entities.put(name, val);}	[java.lang.Character:put, java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>>:entrySet, java.lang.Character:valueOf]	[java.lang.String:name, java.util.Map<java.lang.String, java.lang.Character>:entities, java.util.Properties:properties, java.util.Map.Entry:entry, java.lang.Character:val]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.util.Map<java.lang.String, java.lang.Character>	Expression	class spoon.support.reflect.code.CtVariableReadImpl	9280:9287	246:246	entities	[]	[java.util.Map<java.lang.String, java.lang.Character>:entities]	[spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtReturnImpl	Statement	class spoon.support.reflect.code.CtReturnImpl	9273:9288	246:246	return entities	[]	[java.util.Map<java.lang.String, java.lang.Character>:entities]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtTryImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtThrowImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.util.HashMap<java.lang.Character, java.lang.String>	Expression	class spoon.support.reflect.code.CtConstructorCallImpl	9426:9457	250:250	new java.util.HashMap<java.lang.Character, java.lang.String>()	[]	[]	[spoon.support.reflect.code.CtLocalVariableImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtLocalVariableImpl	Statement	class spoon.support.reflect.code.CtLocalVariableImpl	9394:9458	250:250	java.util.Map<java.lang.Character, java.lang.String> outMap = new java.util.HashMap<java.lang.Character, java.lang.String>()	[]	[]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtLocalVariableImpl	Statement	class spoon.support.reflect.code.CtLocalVariableImpl	9473:9524	251:251	java.util.Map.Entry<java.lang.String, java.lang.Character> entry	[]	[]	[spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.util.Map<java.lang.String, java.lang.Character>	Expression	class spoon.support.reflect.code.CtVariableReadImpl	9509:9513	251:251	inMap	[]	[java.util.Map<java.lang.String, java.lang.Character>:inMap]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Character>>	Expression	class spoon.support.reflect.code.CtInvocationImpl	9509:9524	251:251	inMap.entrySet()	[java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Character>>:entrySet]	[java.util.Map<java.lang.String, java.lang.Character>:inMap]	[spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.util.Map.Entry<java.lang.String, java.lang.Character>	Expression	class spoon.support.reflect.code.CtVariableReadImpl	9563:9567	252:252	entry	[]	[java.util.Map.Entry<java.lang.String, java.lang.Character>:entry]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Character	Expression	class spoon.support.reflect.code.CtInvocationImpl	9563:9578	252:252	entry.getValue()	[java.lang.Character:getValue]	[java.util.Map.Entry<java.lang.String, java.lang.Character>:entry]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtLocalVariableImpl	Statement	class spoon.support.reflect.code.CtLocalVariableImpl	9541:9579	252:252	java.lang.Character character = entry.getValue()	[java.lang.Character:getValue]	[java.util.Map.Entry<java.lang.String, java.lang.Character>:entry]	[spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.util.Map.Entry<java.lang.String, java.lang.Character>	Expression	class spoon.support.reflect.code.CtVariableReadImpl	9607:9611	253:253	entry	[]	[java.util.Map.Entry<java.lang.String, java.lang.Character>:entry]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtInvocationImpl	9607:9620	253:253	entry.getKey()	[java.lang.String:getKey]	[java.util.Map.Entry<java.lang.String, java.lang.Character>:entry]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtLocalVariableImpl	Statement	class spoon.support.reflect.code.CtLocalVariableImpl	9593:9621	253:253	java.lang.String name = entry.getKey()	[java.lang.String:getKey]	[java.util.Map.Entry<java.lang.String, java.lang.Character>:entry]	[spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.util.Map<java.lang.Character, java.lang.String>	Expression	class spoon.support.reflect.code.CtVariableReadImpl	9640:9645	255:255	outMap	[]	[java.util.Map<java.lang.Character, java.lang.String>:outMap]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.Character	Expression	class spoon.support.reflect.code.CtVariableReadImpl	9659:9667	255:255	character	[]	[java.lang.Character:character]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtInvocationImpl	9640:9668	255:255	outMap.containsKey(character)	[boolean:containsKey]	[java.lang.Character:character, java.util.Map<java.lang.Character, java.lang.String>:outMap]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtVariableReadImpl	9748:9751	257:257	name	[]	[java.lang.String:name]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtInvocationImpl	9748:9765	257:257	name.toLowerCase()	[java.lang.String:toLowerCase]	[java.lang.String:name]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtVariableReadImpl	9774:9777	257:257	name	[]	[java.lang.String:name]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
boolean	Expression	class spoon.support.reflect.code.CtInvocationImpl	9748:9778	257:257	name.toLowerCase().equals(name)	[boolean:toLowerCase, java.lang.String:toLowerCase]	[java.lang.String:name]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.util.Map<java.lang.Character, java.lang.String>	Expression	class spoon.support.reflect.code.CtVariableReadImpl	9801:9806	258:258	outMap	[]	[java.util.Map<java.lang.Character, java.lang.String>:outMap]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtInvocationImpl]
java.lang.Character	Expression	class spoon.support.reflect.code.CtVariableReadImpl	9812:9820	258:258	character	[]	[java.lang.Character:character]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtVariableReadImpl	9823:9826	258:258	name	[]	[java.lang.String:name]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtInvocationImpl	9801:9828	258:258	outMap.put(character, name)	[java.lang.String:put]	[java.lang.Character:character, java.lang.String:name, java.util.Map<java.lang.Character, java.lang.String>:outMap]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtInvocationImpl]
CtIfImpl	Statement	class spoon.support.reflect.code.CtIfImpl	9744:9828	257:258	if (name.toLowerCase().equals(name))    outMap.put(character, name);	[java.lang.String:put, boolean:toLowerCase, java.lang.String:toLowerCase]	[java.lang.String:name, java.lang.Character:character, java.util.Map<java.lang.Character, java.lang.String>:outMap]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.util.Map<java.lang.Character, java.lang.String>	Expression	class spoon.support.reflect.code.CtVariableReadImpl	9867:9872	260:260	outMap	[]	[java.util.Map<java.lang.Character, java.lang.String>:outMap]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtInvocationImpl]
java.lang.Character	Expression	class spoon.support.reflect.code.CtVariableReadImpl	9878:9886	260:260	character	[]	[java.lang.Character:character]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtVariableReadImpl	9889:9892	260:260	name	[]	[java.lang.String:name]	[spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtInvocationImpl]
java.lang.String	Expression	class spoon.support.reflect.code.CtInvocationImpl	9867:9894	260:260	outMap.put(character, name)	[java.lang.String:put]	[java.lang.Character:character, java.lang.String:name, java.util.Map<java.lang.Character, java.lang.String>:outMap]	[spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtInvocationImpl]
CtIfImpl	Statement	class spoon.support.reflect.code.CtIfImpl	9636:9908	255:261	if (outMap.containsKey(character)) {    if (name.toLowerCase().equals(name))        outMap.put(character, name);}else {    outMap.put(character, name);}	[java.lang.String:put, boolean:toLowerCase, java.lang.String:toLowerCase, boolean:containsKey]	[java.lang.Character:character, java.lang.String:name, java.util.Map<java.lang.Character, java.lang.String>:outMap]	[spoon.support.reflect.code.CtForEachImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtForEachImpl	Statement	class spoon.support.reflect.code.CtForEachImpl	9468:9918	251:262	for (java.util.Map.Entry<java.lang.String, java.lang.Character> entry : inMap.entrySet()) {    java.lang.Character character = entry.getValue();    java.lang.String name = entry.getKey();    if (outMap.containsKey(character)) {        if (name.toLowerCase().equals(name))            outMap.put(character, name);    }else {        outMap.put(character, name);    }}	[java.lang.String:getKey, java.lang.Character:getValue, java.lang.String:put, boolean:toLowerCase, java.lang.String:toLowerCase, java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Character>>:entrySet, boolean:containsKey]	[java.lang.Character:character, java.lang.String:name, java.util.Map.Entry<java.lang.String, java.lang.Character>:entry, java.util.Map<java.lang.String, java.lang.Character>:inMap, java.util.Map<java.lang.Character, java.lang.String>:outMap]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
java.util.Map<java.lang.Character, java.lang.String>	Expression	class spoon.support.reflect.code.CtVariableReadImpl	9935:9940	263:263	outMap	[]	[java.util.Map<java.lang.Character, java.lang.String>:outMap]	[spoon.support.reflect.code.CtReturnImpl]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]
CtReturnImpl	Statement	class spoon.support.reflect.code.CtReturnImpl	9928:9941	263:263	return outMap	[]	[java.util.Map<java.lang.Character, java.lang.String>:outMap]	[]	[spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtForEachImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtLocalVariableImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtIfImpl, spoon.support.reflect.code.CtReturnImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl, spoon.support.reflect.code.CtInvocationImpl]

org.jsoup.safety.Cleaner::::76::::3096::::3100::::clean::::dirtyDocument	false
org.jsoup.safety.Cleaner::::76::::3096::::3100::::clean::::destination	false
org.jsoup.parser.HtmlTreeBuilderState::::327::::14149::::14175::::org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartToHead::::org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartPClosers	false
org.jsoup.parser.HtmlTreeBuilderState::::327::::14149::::14175::::org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartToHead::::org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartEmptyFormatters	false
org.jsoup.parser.HtmlTreeBuilderState::::327::::14149::::14175::::org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartToHead::::org.jsoup.parser.HtmlTreeBuilderState.Constants.Headings	false
org.jsoup.parser.HtmlTreeBuilderState::::327::::14149::::14175::::org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartToHead::::org.jsoup.parser.HtmlTreeBuilderState.Constants.DdDt	false
org.jsoup.parser.HtmlTreeBuilderState::::327::::14149::::14175::::org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartToHead::::org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyEndAdoptionFormatters	false
org.jsoup.Jsoup::::252::::10860::::10866::::cleaner::::new org.jsoup.safety.Cleaner(whitelist)	false
org.jsoup.Jsoup::::250::::10762::::10778::::parseBodyFragment::::connect	false
org.jsoup.safety.Whitelist::::513::::20091::::20150::::!(tagName.equals(":all"))) && (isSafeAttribute(":all", el, attr)::::isSafeAttribute(":all", el, attr)	false
org.jsoup.safety.Cleaner::::76::::3074::::3086::::dirtyDocument::::destination	false
org.jsoup.safety.Cleaner::::75::::3007::::3019::::dirtyDocument::::destination	false
org.jsoup.safety.Whitelist::::615::::23119::::23132::::prime * result::::prime * result) + ((value) == null ? 0 : value.hashCode()	false
org.jsoup.safety.Whitelist::::434::::16990::::16997::::protocol::::tag	false
org.jsoup.safety.Whitelist::::433::::16934::::16941::::protocol::::tag	false
org.jsoup.safety.Whitelist::::416::::16316::::16324::::attribute::::tag	false
org.jsoup.safety.Whitelist::::412::::16166::::16174::::attribute::::tag	false
org.jsoup.safety.Cleaner::::109::::4489::::4498::::sourceText::::source	false
org.jsoup.safety.Cleaner::::108::::4432::::4437::::(org.jsoup.nodes.TextNode) (source)::::source	false
org.jsoup.safety.Whitelist::::513::::20092::::20098::::tagName::::value	false
org.jsoup.safety.Cleaner::::158::::6518::::6519::::el::::this.destination	false
org.jsoup.safety.Cleaner::::158::::6518::::6519::::el::::root	false
org.jsoup.safety.Cleaner::::158::::6518::::6519::::el::::destination	false
org.jsoup.safety.Cleaner::::158::::6508::::6514::::this.el::::this.destination	false
org.jsoup.safety.Cleaner::::158::::6508::::6514::::this.el::::root	false
org.jsoup.safety.Cleaner::::158::::6508::::6514::::this.el::::destination	false
org.jsoup.safety.Cleaner::::148::::6268::::6280::::enforcedAttrs::::destAttrs	false
org.jsoup.safety.Cleaner::::141::::5971::::5981::::sourceAttrs::::destAttrs	false
org.jsoup.safety.Cleaner::::103::::4151::::4159::::destChild::::destination	false
org.jsoup.safety.Cleaner::::100::::4042::::4050::::destChild::::destination	false
org.jsoup.safety.Cleaner::::158::::6518::::6519::::el::::this.root	false
org.jsoup.safety.Cleaner::::158::::6508::::6514::::this.el::::this.root	false
org.jsoup.safety.Cleaner::::103::::4151::::4159::::destChild::::sourceEl	false
org.jsoup.safety.Cleaner::::100::::4042::::4050::::destChild::::sourceEl	false
org.jsoup.safety.Whitelist::::434::::16990::::16997::::protocol::::attribute	false
org.jsoup.safety.Whitelist::::433::::16934::::16941::::protocol::::attribute	false
org.jsoup.safety.Cleaner::::110::::4575::::4582::::destText::::sourceText	false
org.jsoup.parser.HtmlTreeBuilderState::::327::::14149::::14175::::org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartToHead::::org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartPreListing	false
org.jsoup.safety.Whitelist::::551::::21425::::21431::::tagName::::value	false
org.jsoup.safety.Whitelist::::624::::23467::::23469::::(org.jsoup.safety.Whitelist.TypedValue) (obj)::::obj	false
org.jsoup.safety.Whitelist::::262::::9750::::9752::::key::::tag	false
org.jsoup.safety.Whitelist::::261::::9694::::9696::::key::::tag	false
org.jsoup.safety.Cleaner::::95::::3774::::3779::::(org.jsoup.nodes.Element) (source)::::source	false
org.jsoup.safety.Cleaner::::90::::3590::::3605::::this.destination::::this.root	false
org.jsoup.safety.Cleaner::::90::::3590::::3605::::this.destination::::this.el	false
org.jsoup.safety.Cleaner::::90::::3590::::3605::::this.destination::::root	false
org.jsoup.safety.Cleaner::::90::::3590::::3605::::this.destination::::el	false
org.jsoup.safety.Cleaner::::89::::3560::::3568::::this.root::::this.el	false
org.jsoup.safety.Cleaner::::89::::3560::::3568::::this.root::::this.destination	false
org.jsoup.safety.Cleaner::::89::::3560::::3568::::this.root::::el	false
org.jsoup.safety.Cleaner::::89::::3560::::3568::::this.root::::destination	false
org.jsoup.safety.Cleaner::::130::::5538::::5543::::source::::dest	false
org.jsoup.safety.Cleaner::::130::::5519::::5527::::traversor::::source	false
org.jsoup.safety.Cleaner::::130::::5519::::5527::::traversor::::dest	false
org.jsoup.safety.Cleaner::::128::::5426::::5431::::source::::dest	false
org.jsoup.safety.Whitelist::::209::::7803::::7809::::tagName::::value	false
org.jsoup.safety.Whitelist::::208::::7752::::7758::::tagName::::value	false
org.jsoup.safety.Whitelist::::434::::16990::::16997::::protocol::::value	false
org.jsoup.safety.Whitelist::::433::::16934::::16941::::protocol::::value	false
org.jsoup.safety.Cleaner::::148::::6268::::6280::::enforcedAttrs::::sourceAttrs	false
org.jsoup.safety.Cleaner::::111::::4609::::4634::::source instanceof org.jsoup.nodes.DataNode::::source instanceof org.jsoup.nodes.Element	false
org.jsoup.safety.Cleaner::::150::::6316::::6319::::dest::::sourceEl	false
org.jsoup.safety.Whitelist::::412::::16166::::16174::::attribute::::value	false
org.jsoup.safety.Whitelist::::262::::9750::::9752::::key::::value	false
org.jsoup.safety.Whitelist::::261::::9694::::9696::::key::::value	false
org.jsoup.safety.Cleaner::::111::::4609::::4634::::source instanceof org.jsoup.nodes.DataNode::::source instanceof org.jsoup.nodes.TextNode	false
org.jsoup.safety.Cleaner::::130::::5519::::5527::::traversor::::new org.jsoup.select.NodeTraversor(cleaningVisitor)	false
org.jsoup.safety.Whitelist::::615::::23119::::23123::::prime::::prime * result	false
org.jsoup.safety.Whitelist::::622::::23336::::23346::::obj == null::::(this) == obj	false
org.jsoup.safety.Cleaner::::107::::4353::::4378::::source instanceof org.jsoup.nodes.TextNode::::source instanceof org.jsoup.nodes.Element	false
org.jsoup.safety.Whitelist::::623::::23379::::23406::::getClass()) != (obj.getClass()::::obj == null	false
org.jsoup.safety.Whitelist::::623::::23379::::23406::::getClass()) != (obj.getClass()::::(this) == obj	false
org.jsoup.safety.Whitelist::::420::::16422::::16435::::this.protocols::::protocols	false
org.jsoup.safety.Cleaner::::109::::4489::::4498::::sourceText::::destText	false
org.jsoup.safety.Whitelist::::424::::16607::::16620::::this.protocols::::protocols	false
org.jsoup.nodes.Document::::46::::1367::::1370::::html::::this	false
org.jsoup.nodes.Document::::45::::1331::::1334::::html::::this	false
org.jsoup.nodes.Document::::44::::1296::::1298::::doc::::this	false
org.jsoup.safety.Whitelist::::262::::9712::::9723::::attributeSet::::currentSet	false
org.jsoup.safety.Whitelist::::268::::9995::::10006::::attributeSet::::currentSet	false
org.jsoup.safety.Cleaner::::130::::5519::::5527::::traversor::::destination	false
org.jsoup.safety.Whitelist::::513::::20092::::20098::::tagName::::"Cannot remove a protocol that is not set."	false
org.jsoup.parser.HtmlTreeBuilderState::::327::::14149::::14175::::org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartToHead::::org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartApplets	false
org.jsoup.safety.Whitelist::::621::::23294::::23304::::(this) == obj::::obj == null	false
org.jsoup.safety.Cleaner::::111::::4659::::4664::::source::::sourceEl	false
org.jsoup.safety.Cleaner::::110::::4551::::4561::::destination::::sourceEl	false
org.jsoup.safety.Cleaner::::103::::4137::::4147::::destination::::sourceEl	false
org.jsoup.safety.Cleaner::::100::::4018::::4028::::destination::::sourceEl	false
org.jsoup.safety.Cleaner::::150::::6316::::6319::::dest::::destination	false
org.jsoup.helper.StringUtil::::193::::6875::::6877::::abs::::new java.net.URL(relUrl)	false
org.jsoup.safety.Cleaner::::100::::4018::::4028::::destination::::source	false
org.jsoup.safety.Whitelist::::513::::20092::::20098::::tagName::::attr	false
org.jsoup.helper.StringUtil::::193::::6875::::6877::::abs::::org.jsoup.helper.StringUtil.resolve(base, relUrl)	false
org.jsoup.helper.StringUtil::::193::::6875::::6877::::abs::::base	false
org.jsoup.safety.Cleaner::::97::::3823::::3830::::sourceEl::::source	false
org.jsoup.safety.Whitelist::::416::::16316::::16324::::attribute::::value	false
org.jsoup.safety.Cleaner::::76::::3074::::3086::::dirtyDocument::::clean	false
org.jsoup.safety.Cleaner::::128::::5434::::5437::::dest::::destination	false
org.jsoup.nodes.Document::::45::::1331::::1334::::html::::doc	false
org.jsoup.nodes.Document::::44::::1296::::1298::::doc::::html	false
org.jsoup.nodes.Document::::46::::1367::::1370::::html::::doc	false
org.jsoup.safety.Cleaner::::128::::5426::::5431::::source::::destination	false
org.jsoup.safety.Cleaner::::130::::5538::::5543::::source::::destination	false
org.jsoup.safety.Cleaner::::122::::5199::::5209::::destination::::source	false
org.jsoup.Jsoup::::252::::10860::::10866::::isValid::::clean	false
org.jsoup.safety.Whitelist::::513::::20092::::20098::::tagName::::"No attribute names supplied."	false
org.jsoup.nodes.Document::::46::::1367::::1370::::html::::body()	false
org.jsoup.nodes.Document::::45::::1331::::1334::::html::::body()	false
org.jsoup.safety.Cleaner::::104::::4199::::4202::::root::::destination	false
org.jsoup.safety.Cleaner::::110::::4551::::4561::::destination::::source	false
org.jsoup.safety.Cleaner::::89::::3572::::3575::::root::::destination	false
org.jsoup.safety.Cleaner::::141::::5971::::5981::::sourceAttrs::::enforcedAttrs	false
org.jsoup.safety.Cleaner::::109::::4516::::4521::::source::::sourceEl	false
org.jsoup.parser.HtmlTreeBuilderState::::327::::14149::::14175::::org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartToHead::::org.jsoup.parser.HtmlTreeBuilderState.Constants.Formatters	false
org.jsoup.safety.Cleaner::::99::::3989::::3995::::meta.el::::sourceEl	false
org.jsoup.safety.Cleaner::::102::::4091::::4114::::meta.numAttribsDiscarded::::numDiscarded	false
org.jsoup.safety.Cleaner::::104::::4199::::4202::::root::::sourceEl	false
org.jsoup.parser.HtmlTreeBuilderState::::327::::14149::::14175::::org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartToHead::::org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyEndClosers	false
org.jsoup.nodes.Document::::46::::1367::::1370::::html::::head()	false
org.jsoup.nodes.Document::::45::::1331::::1334::::html::::head()	false
org.jsoup.nodes.Document::::44::::1296::::1298::::doc::::new org.jsoup.nodes.Document(baseUri)	false
org.jsoup.nodes.Document::::45::::1331::::1334::::html::::findFirstElementByTagName("html", this)	false
org.jsoup.nodes.Document::::46::::1367::::1370::::html::::findFirstElementByTagName("html", this)	false
org.jsoup.safety.Cleaner::::99::::3989::::3995::::meta.el::::destination	false
org.jsoup.safety.Cleaner::::99::::3989::::3995::::meta.el::::destChild	false
org.jsoup.safety.Cleaner::::111::::4609::::4685::::source instanceof org.jsoup.nodes.DataNode) && (whitelist.isSafeTag(source.parent().nodeName())::::source instanceof org.jsoup.nodes.TextNode	false
org.jsoup.safety.Cleaner::::111::::4609::::4685::::source instanceof org.jsoup.nodes.DataNode) && (whitelist.isSafeTag(source.parent().nodeName())::::source instanceof org.jsoup.nodes.Element	false
org.jsoup.parser.HtmlTreeBuilderState::::1324::::62442::::62447::::org.jsoup.parser.HtmlTreeBuilderState.InBody::::org.jsoup.parser.HtmlTreeBuilderState.InHead	false
org.jsoup.safety.Cleaner::::104::::4189::::4202::::source != (root)::::source instanceof org.jsoup.nodes.TextNode	false
org.jsoup.safety.Cleaner::::104::::4189::::4202::::source != (root)::::source instanceof org.jsoup.nodes.Element	false
org.jsoup.safety.Cleaner::::104::::4189::::4202::::source != (root)::::source instanceof org.jsoup.nodes.DataNode	false
org.jsoup.nodes.Document::::44::::1296::::1298::::doc::::body()	false
org.jsoup.nodes.Document::::46::::1367::::1370::::html::::new org.jsoup.nodes.Document(baseUri)	false
org.jsoup.nodes.Attributes::::168::::4909::::4916::::incoming::::this	false
org.jsoup.safety.Whitelist::::615::::23119::::23123::::prime::::prime * result) + ((value) == null ? 0 : value.hashCode()	false
org.jsoup.safety.Cleaner::::148::::6251::::6259::::destAttrs::::new org.jsoup.nodes.Attributes()	false
org.jsoup.nodes.Document::::45::::1331::::1334::::html::::new org.jsoup.nodes.Document(baseUri)	false
org.jsoup.nodes.Document::::44::::1296::::1298::::doc::::head()	false
org.jsoup.safety.Cleaner::::121::::5098::::5164::::source instanceof org.jsoup.nodes.Element) && (whitelist.isSafeTag(source.nodeName())::::source instanceof org.jsoup.nodes.TextNode	false
org.jsoup.safety.Cleaner::::121::::5098::::5164::::source instanceof org.jsoup.nodes.Element) && (whitelist.isSafeTag(source.nodeName())::::source instanceof org.jsoup.nodes.DataNode	false
org.jsoup.safety.Cleaner::::73::::2944::::2956::::dirtyDocument::::clean	false
org.jsoup.safety.Cleaner::::75::::3007::::3019::::dirtyDocument::::clean	false
org.jsoup.safety.Cleaner::::107::::4353::::4378::::source instanceof org.jsoup.nodes.TextNode::::source instanceof org.jsoup.nodes.DataNode	false
org.jsoup.safety.Cleaner::::104::::4199::::4202::::root::::this.el	false
org.jsoup.safety.Cleaner::::104::::4199::::4202::::root::::this.destination	false
org.jsoup.safety.Cleaner::::104::::4199::::4202::::root::::el	false
org.jsoup.parser.HtmlTreeBuilderState::::1324::::62442::::62447::::org.jsoup.parser.HtmlTreeBuilderState.InBody::::org.jsoup.parser.HtmlTreeBuilderState.InTable	false
org.jsoup.safety.Whitelist::::513::::20092::::20098::::tagName::::"#"	false
org.jsoup.parser.HtmlTreeBuilderState::::1324::::62421::::62449::::return tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InBody)::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.nodes.Document::::44::::1296::::1298::::doc::::findFirstElementByTagName("html", this)	false
org.jsoup.safety.Whitelist::::555::::21674::::21678::::attrs::::new org.jsoup.nodes.Attributes()	false
org.jsoup.safety.Whitelist::::486::::18955::::18957::::tag::::value	false
org.jsoup.Jsoup::::250::::10762::::10778::::parseBodyFragment::::parse	false
org.jsoup.safety.Cleaner::::89::::3572::::3575::::root::::this.el	false
org.jsoup.safety.Cleaner::::89::::3572::::3575::::root::::this.destination	false
org.jsoup.safety.Cleaner::::89::::3572::::3575::::root::::el	false
org.jsoup.parser.HtmlTreeBuilderState::::327::::14149::::14175::::org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartToHead::::org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartMedia	false
org.jsoup.safety.Whitelist::::513::::20091::::20150::::!(tagName.equals(":all"))) && (isSafeAttribute(":all", el, attr)::::tagName.equals(":all")	false
org.jsoup.safety.Whitelist::::513::::20091::::20150::::!(tagName.equals(":all"))) && (isSafeAttribute(":all", el, attr)::::!(tagName.equals(":all"))	false
org.jsoup.parser.HtmlTreeBuilderState::::1324::::62421::::62449::::return tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InBody)::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.Token::::151::::4964::::4981::::return attributes::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(systemIdentifier)	false
org.jsoup.parser.Token::::151::::4964::::4981::::return attributes::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(publicIdentifier)	false
org.jsoup.parser.Token::::151::::4964::::4981::::return attributes::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(pendingAttributeValue)	false
org.jsoup.parser.Token::::151::::4964::::4981::::return attributes::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(name)	false
org.jsoup.parser.Token::::151::::4964::::4981::::return attributes::::INSERT::::STATEMENT::::org.jsoup.parser.Token.reset(data)	false
org.jsoup.safety.Cleaner::::143::::6078::::6086::::destAttrs::::new org.jsoup.nodes.Attributes()	false
org.jsoup.safety.Cleaner::::135::::5688::::5695::::sourceEl::::destination	false
org.jsoup.safety.Whitelist::::615::::23119::::23175::::prime * result) + ((value) == null ? 0 : value.hashCode()::::value.hashCode()	false
org.jsoup.safety.Whitelist::::615::::23119::::23175::::prime * result) + ((value) == null ? 0 : value.hashCode()::::result	false
org.jsoup.safety.Whitelist::::615::::23119::::23175::::prime * result) + ((value) == null ? 0 : value.hashCode()::::(value) == null ? 0 : value.hashCode()	false
org.jsoup.safety.Whitelist::::513::::20092::::20098::::tagName::::el	false
org.jsoup.safety.Whitelist::::513::::20092::::20098::::tagName::::":all"	false
org.jsoup.safety.Cleaner::::140::::5912::::5919::::sourceEl::::destination	false
org.jsoup.safety.Cleaner::::98::::3938::::3945::::sourceEl::::destination	false
org.jsoup.helper.StringUtil::::193::::6875::::6877::::abs::::new java.net.URL(base, relUrl)	false
org.jsoup.safety.Cleaner::::148::::6251::::6259::::destAttrs::::sourceAttrs	false
org.jsoup.safety.Cleaner::::137::::5816::::5823::::sourceEl::::destination	false
org.jsoup.safety.Cleaner::::111::::4659::::4664::::source::::destination	false
org.jsoup.safety.Cleaner::::159::::6534::::6557::::this.numAttribsDiscarded::::numDiscarded	false
org.jsoup.safety.Whitelist::::616::::23197::::23202::::result::::prime * result	false
org.jsoup.safety.Whitelist::::523::::20650::::20653::::attr::::el	false
org.jsoup.safety.Cleaner::::97::::3823::::3830::::sourceEl::::destination	false
org.jsoup.safety.Whitelist::::415::::16258::::16260::::tag::::value	false
org.jsoup.safety.Cleaner::::159::::6561::::6579::::numAttribsDiscarded::::numDiscarded	false
org.jsoup.safety.Cleaner::::104::::4199::::4202::::root::::destChild	false
org.jsoup.safety.Cleaner::::109::::4516::::4521::::source::::destination	false
org.jsoup.safety.Whitelist::::615::::23127::::23132::::result::::prime * result	false
org.jsoup.safety.Whitelist::::411::::16134::::16136::::tag::::value	false
org.jsoup.safety.Whitelist::::256::::9472::::9474::::tag::::value	false
org.jsoup.safety.Whitelist::::252::::9305::::9307::::tag::::value	false
org.jsoup.safety.Cleaner::::121::::5147::::5152::::source::::destination	false
org.jsoup.safety.Whitelist::::513::::20118::::20150::::isSafeAttribute(":all", el, attr)::::INSERT::::PARAMETER::::isSafeAttribute(value,":all", el, attr)	false
org.jsoup.safety.Whitelist::::513::::20118::::20150::::isSafeAttribute(":all", el, attr)::::INSERT::::PARAMETER::::isSafeAttribute(tagName,":all", el, attr)	false
org.jsoup.safety.Cleaner::::94::::3700::::3724::::source instanceof org.jsoup.nodes.Element::::source instanceof org.jsoup.nodes.TextNode	false
org.jsoup.safety.Cleaner::::121::::5098::::5122::::source instanceof org.jsoup.nodes.Element::::source instanceof org.jsoup.nodes.TextNode	false
org.jsoup.safety.Whitelist::::415::::16258::::16260::::tag::::attribute	false
org.jsoup.safety.Cleaner::::143::::6078::::6086::::destAttrs::::sourceAttrs	false
org.jsoup.safety.Whitelist::::615::::23110::::23115::::result::::prime	false
org.jsoup.safety.Cleaner::::76::::3096::::3100::::clean::::root	false
org.jsoup.nodes.Document::::46::::1367::::1370::::html::::body().prependChild(new org.jsoup.nodes.TextNode(" ", ""))	false
org.jsoup.safety.Cleaner::::137::::5836::::5844::::destAttrs::::sourceAttrs	false
org.jsoup.nodes.Document::::45::::1331::::1334::::html::::body().prependChild(new org.jsoup.nodes.TextNode(" ", ""))	false
org.jsoup.safety.Whitelist::::513::::20092::::20098::::tagName::::this	false
org.jsoup.safety.Whitelist::::616::::23197::::23202::::result::::prime	false
org.jsoup.safety.Whitelist::::615::::23119::::23175::::prime * result) + ((value) == null ? 0 : value.hashCode()::::prime	false
org.jsoup.safety.Whitelist::::615::::23110::::23115::::result::::prime * result	false
org.jsoup.helper.StringUtil::::193::::6875::::6877::::abs::::new java.net.URL(baseUrl)	false
org.jsoup.parser.HtmlTreeBuilderState::::323::::13878::::14090::::for (org.jsoup.nodes.Attribute attribute : startTag.getAttributes()) {    if (!(html.hasAttr(attribute.getKey())))        html.attributes().put(attribute);}::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::1324::::62442::::62447::::org.jsoup.parser.HtmlTreeBuilderState.InBody::::org.jsoup.parser.HtmlTreeBuilderState.InRow	false
org.jsoup.nodes.Document::::46::::1367::::1393::::html.appendElement("body")::::INSERT::::STATEMENT::::body().prependChild(new org.jsoup.nodes.TextNode(" ", ""))	false
org.jsoup.safety.Cleaner::::148::::6251::::6259::::destAttrs::::enforcedAttrs	false
org.jsoup.nodes.Document::::44::::1296::::1298::::doc::::body().prependChild(new org.jsoup.nodes.TextNode(" ", ""))	false
org.jsoup.safety.Cleaner::::103::::4151::::4159::::destChild::::meta.el	false
org.jsoup.safety.Cleaner::::100::::4042::::4050::::destChild::::meta.el	false
org.jsoup.parser.HtmlTreeBuilderState::::322::::13817::::13852::::org.jsoup.nodes.Element html = tb.getStack().get(0)::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::322::::13817::::13852::::org.jsoup.nodes.Element html = tb.getStack().get(0)::::INSERT::::STATEMENT::::org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb)	false
org.jsoup.safety.Whitelist::::264::::9779::::9793::::this.attributes::::attributes	false
org.jsoup.safety.Whitelist::::268::::9966::::9980::::this.attributes::::attributes	false
org.jsoup.safety.Cleaner::::121::::5098::::5164::::source instanceof org.jsoup.nodes.Element) && (whitelist.isSafeTag(source.nodeName())::::source != (root)	false
org.jsoup.nodes.Document::::45::::1331::::1357::::html.appendElement("head")::::INSERT::::STATEMENT::::body().prependChild(new org.jsoup.nodes.TextNode(" ", ""))	false
org.jsoup.nodes.Document::::43::::1235::::1271::::org.jsoup.nodes.Document doc = new org.jsoup.nodes.Document(baseUri)::::INSERT::::STATEMENT::::body().prependChild(new org.jsoup.nodes.TextNode(" ", ""))	false
org.jsoup.safety.Whitelist::::616::::23197::::23202::::result::::prime * result) + ((value) == null ? 0 : value.hashCode()	false
org.jsoup.parser.HtmlTreeBuilderState::::322::::13817::::13852::::org.jsoup.nodes.Element html = tb.getStack().get(0)::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.HtmlTreeBuilderState::::322::::13817::::13852::::org.jsoup.nodes.Element html = tb.getStack().get(0)::::INSERT::::STATEMENT::::tb.process(startTag)	false
org.jsoup.parser.HtmlTreeBuilderState::::327::::14123::::14176::::org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartToHead)::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.safety.Cleaner::::100::::4042::::4050::::destChild::::root	false
org.jsoup.safety.Cleaner::::128::::5434::::5437::::dest::::source	false
org.jsoup.parser.HtmlTreeBuilderState::::323::::13878::::14090::::for (org.jsoup.nodes.Attribute attribute : startTag.getAttributes()) {    if (!(html.hasAttr(attribute.getKey())))        html.attributes().put(attribute);}::::INSERT::::STATEMENT::::if (lastNode == furthestBlock) {}	false
org.jsoup.safety.Cleaner::::103::::4151::::4159::::destChild::::root	false
org.jsoup.parser.HtmlTreeBuilderState::::323::::13878::::14090::::for (org.jsoup.nodes.Attribute attribute : startTag.getAttributes()) {    if (!(html.hasAttr(attribute.getKey())))        html.attributes().put(attribute);}::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.parser.HtmlTreeBuilderState::::322::::13817::::13852::::org.jsoup.nodes.Element html = tb.getStack().get(0)::::INSERT::::STATEMENT::::closeCell(tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::322::::13817::::13852::::org.jsoup.nodes.Element html = tb.getStack().get(0)::::INSERT::::STATEMENT::::if (lastNode == furthestBlock) {}	false
org.jsoup.nodes.Document::::44::::1281::::1321::::org.jsoup.nodes.Element html = doc.appendElement("html")::::INSERT::::STATEMENT::::body().prependChild(new org.jsoup.nodes.TextNode(" ", ""))	false
org.jsoup.safety.Cleaner::::143::::6078::::6086::::destAttrs::::enforcedAttrs	false
org.jsoup.parser.HtmlTreeBuilderState::::1324::::62442::::62447::::org.jsoup.parser.HtmlTreeBuilderState.InBody::::org.jsoup.parser.HtmlTreeBuilderState.InTableBody	false
org.jsoup.safety.Whitelist::::615::::23127::::23132::::result::::prime * result) + ((value) == null ? 0 : value.hashCode()	false
org.jsoup.safety.Whitelist::::413::::16186::::16213::::org.jsoup.helper.Validate.notNull(protocols)::::DELETE::::STATEMENT	false
org.jsoup.safety.Cleaner::::99::::3989::::3995::::meta.el::::root	false
org.jsoup.safety.Cleaner::::148::::6251::::6282::::destAttrs.addAll(enforcedAttrs)::::DELETE::::STATEMENT	false
org.jsoup.safety.Cleaner::::94::::3700::::3724::::source instanceof org.jsoup.nodes.Element::::source instanceof org.jsoup.nodes.DataNode	false
org.jsoup.safety.Cleaner::::137::::5836::::5844::::destAttrs::::enforcedAttrs	false
org.jsoup.parser.HtmlTreeBuilderState::::1324::::62442::::62447::::org.jsoup.parser.HtmlTreeBuilderState.InBody::::org.jsoup.parser.HtmlTreeBuilderState.Text	false
org.jsoup.safety.Cleaner::::130::::5519::::5545::::traversor.traverse(source)::::DELETE::::STATEMENT	false
org.jsoup.safety.Cleaner::::104::::4185::::4328::::if (source != (root)) {    (numDiscarded)++;}::::INSERT::::STATEMENT::::if (source != (root)) {    (numDiscarded)++;}	false
org.jsoup.nodes.Document::::45::::1331::::1357::::html.appendElement("head")::::INSERT::::STATEMENT::::ensureMetaCharsetElement()	false
org.jsoup.safety.Whitelist::::627::::23584::::23588::::value::::"Cannot remove a protocol that is not set."	false
org.jsoup.safety.Cleaner::::111::::4609::::4685::::source instanceof org.jsoup.nodes.DataNode) && (whitelist.isSafeTag(source.parent().nodeName())::::source != (root)	false
org.jsoup.Jsoup::::250::::10762::::10792::::org.jsoup.Jsoup.parseBodyFragment(bodyHtml, "")::::INSERT::::PARAMETER::::parseBodyFragment(bodyHtml,org.jsoup.Jsoup.clean(bodyHtml, "", whitelist), "")	false
org.jsoup.nodes.Document::::41::::1199::::1224::::org.jsoup.helper.Validate.notNull(baseUri)::::INSERT::::STATEMENT::::body().prependChild(new org.jsoup.nodes.TextNode(" ", ""))	false
org.jsoup.safety.Whitelist::::627::::23583::::23608::::!(value.equals(other.value))::::INSERT::::STATEMENT::::if ((value) == null) {    if ((other.value) != null)        return false;}else    if (!(value.equals(other.value)))        return false;	false
org.jsoup.safety.Whitelist::::627::::23579::::23623::::if (!(value.equals(other.value)))    return false;::::INSERT::::STATEMENT::::if ((value) == null) {    if ((other.value) != null)        return false;}else    if (!(value.equals(other.value)))        return false;	false
org.jsoup.safety.Whitelist::::627::::23579::::23623::::if (!(value.equals(other.value)))    return false;::::INSERT::::STATEMENT::::if (!(value.equals(other.value)))    return false;	false
org.jsoup.safety.Cleaner::::110::::4551::::4561::::destination::::destChild	false
org.jsoup.safety.Cleaner::::103::::4137::::4147::::destination::::destChild	false
org.jsoup.nodes.Document::::48::::1404::::1414::::return doc::::INSERT::::STATEMENT::::body().prependChild(new org.jsoup.nodes.TextNode(" ", ""))	false
org.jsoup.safety.Cleaner::::140::::5912::::5919::::sourceEl::::dest	false
org.jsoup.safety.Whitelist::::615::::23159::::23163::::value::::"Cannot remove a protocol that is not set."	false
org.jsoup.safety.Cleaner::::137::::5816::::5823::::sourceEl::::dest	false
org.jsoup.safety.Whitelist::::411::::16134::::16136::::tag::::attribute	false
org.jsoup.safety.Whitelist::::627::::23583::::23608::::!(value.equals(other.value))::::INSERT::::STATEMENT::::if (obj == null)    return false;	false
org.jsoup.safety.Whitelist::::627::::23583::::23608::::!(value.equals(other.value))::::INSERT::::STATEMENT::::if ((this) == obj)    return true;	false
org.jsoup.safety.Whitelist::::627::::23579::::23623::::if (!(value.equals(other.value)))    return false;::::INSERT::::STATEMENT::::if (obj == null)    return false;	false
org.jsoup.safety.Whitelist::::627::::23579::::23623::::if (!(value.equals(other.value)))    return false;::::INSERT::::STATEMENT::::if ((this) == obj)    return true;	false
org.jsoup.parser.HtmlTreeBuilderState::::327::::14149::::14175::::org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartToHead::::org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartOptions	false
org.jsoup.safety.Cleaner::::121::::5098::::5122::::source instanceof org.jsoup.nodes.Element::::source instanceof org.jsoup.nodes.DataNode	false
org.jsoup.safety.Cleaner::::76::::3074::::3086::::dirtyDocument::::root	false
org.jsoup.parser.HtmlTreeBuilderState::::327::::14149::::14175::::org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartToHead::::org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartLiBreakers	false
org.jsoup.safety.Whitelist::::615::::23136::::23175::::(value) == null ? 0 : value.hashCode()::::value.hashCode()	false
org.jsoup.nodes.Document::::46::::1367::::1393::::html.appendElement("body")::::INSERT::::STATEMENT::::ensureMetaCharsetElement()	false
org.jsoup.nodes.Attributes::::159::::4661::::4669::::return 0::::INSERT::::STATEMENT::::if ((attributes) == null)    return new org.jsoup.nodes.Attributes();	false
org.jsoup.nodes.Attributes::::159::::4661::::4669::::return 0::::INSERT::::STATEMENT::::if ((attributes) == null)    return false;	false
org.jsoup.nodes.Attributes::::159::::4661::::4669::::return 0::::INSERT::::STATEMENT::::if ((attributes) == null)    return ;	false
org.jsoup.nodes.Attributes::::159::::4661::::4669::::return 0::::INSERT::::STATEMENT::::if ((attributes) == null)    return 0;	false
org.jsoup.nodes.Attributes::::159::::4661::::4669::::return 0::::INSERT::::STATEMENT::::if ((attributes) == null)    return "";	false
org.jsoup.safety.Cleaner::::100::::4018::::4028::::destination::::destChild	false
org.jsoup.nodes.Document::::46::::1367::::1393::::html.appendElement("body")::::DELETE::::STATEMENT	false
org.jsoup.nodes.Document::::45::::1331::::1357::::html.appendElement("head")::::DELETE::::STATEMENT	false
org.jsoup.nodes.Document::::41::::1199::::1224::::org.jsoup.helper.Validate.notNull(baseUri)::::DELETE::::STATEMENT	false
org.jsoup.safety.Cleaner::::135::::5688::::5695::::sourceEl::::dest	false
org.jsoup.nodes.Document::::44::::1281::::1321::::org.jsoup.nodes.Element html = doc.appendElement("html")::::INSERT::::STATEMENT::::ensureMetaCharsetElement()	false
org.jsoup.safety.Cleaner::::130::::5519::::5527::::traversor::::root	false
org.jsoup.nodes.Attributes::::169::::4943::::4949::::return ::::INSERT::::STATEMENT::::if ((attributes) == null)    return ;	false
org.jsoup.parser.HtmlTreeBuilderState::::323::::13878::::14090::::for (org.jsoup.nodes.Attribute attribute : startTag.getAttributes()) {    if (!(html.hasAttr(attribute.getKey())))        html.attributes().put(attribute);}::::INSERT::::STATEMENT::::org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb)	false
org.jsoup.safety.Cleaner::::122::::5185::::5219::::destination = destination.parent()::::this.destination = destination	false
org.jsoup.safety.Whitelist::::615::::23110::::23115::::result::::prime * result) + ((value) == null ? 0 : value.hashCode()	false
org.jsoup.safety.Whitelist::::627::::23583::::23608::::!(value.equals(other.value))::::INSERT::::STATEMENT::::if (!(value.equals(other.value)))    return false;	false
org.jsoup.safety.Whitelist::::523::::20650::::20670::::attr.setValue(value)::::INSERT::::STATEMENT::::if (prot.equals("#")) {    if (isValidAnchor(value)) {        return true;    }else {        continue;    }}	false
org.jsoup.safety.Cleaner::::100::::4042::::4050::::destChild::::this.el	false
org.jsoup.safety.Cleaner::::100::::4042::::4050::::destChild::::this.destination	false
org.jsoup.safety.Cleaner::::100::::4042::::4050::::destChild::::el	false
org.jsoup.parser.HtmlTreeBuilderState::::1324::::62442::::62447::::org.jsoup.parser.HtmlTreeBuilderState.InBody::::org.jsoup.parser.HtmlTreeBuilderState.InCell	false
org.jsoup.safety.Cleaner::::100::::4042::::4050::::destChild::::this.root	false
org.jsoup.safety.Whitelist::::627::::23584::::23588::::value::::"No attribute names supplied."	false
org.jsoup.safety.Cleaner::::73::::2927::::2958::::org.jsoup.helper.Validate.notNull(dirtyDocument)::::DELETE::::STATEMENT	false
org.jsoup.parser.HtmlTreeBuilderState::::322::::13817::::13852::::org.jsoup.nodes.Element html = tb.getStack().get(0)::::INSERT::::STATEMENT::::if (notIgnored)    return tb.process(endTag);	false
org.jsoup.safety.Cleaner::::103::::4151::::4159::::destChild::::this.el	false
org.jsoup.safety.Cleaner::::103::::4151::::4159::::destChild::::this.destination	false
org.jsoup.safety.Cleaner::::103::::4151::::4159::::destChild::::el	false
org.jsoup.safety.Whitelist::::615::::23159::::23163::::value::::"No attribute names supplied."	false
org.jsoup.safety.Cleaner::::103::::4151::::4159::::destChild::::this.root	false
org.jsoup.parser.HtmlTreeBuilderState::::327::::14149::::14175::::org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartToHead::::org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyEndTableFosters	false
org.jsoup.parser.HtmlTreeBuilderState::::1324::::62442::::62447::::org.jsoup.parser.HtmlTreeBuilderState.InBody::::org.jsoup.parser.HtmlTreeBuilderState.InCaption	false
org.jsoup.nodes.Attributes::::169::::4943::::4949::::return ::::INSERT::::STATEMENT::::if ((attributes) == null)    return "";	false
org.jsoup.parser.HtmlTreeBuilderState::::327::::14149::::14175::::org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartToHead::::org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartRuby	false
org.jsoup.nodes.Document::::46::::1367::::1393::::html.appendElement("body")::::INSERT::::STATEMENT::::updateMetaCharsetElement(true)	false
org.jsoup.nodes.Document::::46::::1367::::1393::::html.appendElement("body")::::INSERT::::STATEMENT::::outputSettings.charset(charset)	false
org.jsoup.safety.Whitelist::::523::::20650::::20670::::attr.setValue(value)::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.nodes.Document::::41::::1199::::1224::::org.jsoup.helper.Validate.notNull(baseUri)::::INSERT::::STATEMENT::::ensureMetaCharsetElement()	false
org.jsoup.safety.Whitelist::::416::::16316::::16324::::attribute::::protocol	false
org.jsoup.nodes.Document::::45::::1331::::1334::::html::::head().appendElement("title")	false
org.jsoup.nodes.Document::::48::::1404::::1414::::return doc::::INSERT::::STATEMENT::::outputSettings.charset(charset)	false
org.jsoup.nodes.Document::::43::::1235::::1271::::org.jsoup.nodes.Document doc = new org.jsoup.nodes.Document(baseUri)::::INSERT::::STATEMENT::::ensureMetaCharsetElement()	false
org.jsoup.nodes.Document::::46::::1367::::1370::::html::::head().appendElement("title")	false
org.jsoup.nodes.Document::::46::::1367::::1393::::html.appendElement("body")::::INSERT::::STATEMENT::::normaliseTextNodes(this)	false
org.jsoup.nodes.Document::::46::::1367::::1393::::html.appendElement("body")::::INSERT::::STATEMENT::::normaliseTextNodes(head())	false
org.jsoup.safety.Whitelist::::412::::16166::::16174::::attribute::::protocol	false
org.jsoup.nodes.Document::::45::::1331::::1357::::html.appendElement("head")::::INSERT::::STATEMENT::::updateMetaCharsetElement(true)	false
org.jsoup.nodes.Document::::45::::1331::::1357::::html.appendElement("head")::::INSERT::::STATEMENT::::outputSettings.charset(charset)	false
org.jsoup.safety.Whitelist::::627::::23584::::23588::::value::::":all"	false
org.jsoup.safety.Whitelist::::627::::23583::::23608::::!(value.equals(other.value))::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.safety.Whitelist::::627::::23579::::23623::::if (!(value.equals(other.value)))    return false;::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.safety.Whitelist::::627::::23579::::23623::::if (!(value.equals(other.value)))    return false;::::INSERT::::STATEMENT::::if ((other.value) != null)    return false;	false
org.jsoup.safety.Whitelist::::430::::16819::::16848::::attrMap.put(attrKey, protSet)::::DELETE::::STATEMENT	false
org.jsoup.safety.Whitelist::::424::::16607::::16643::::this.protocols.put(tagName, attrMap)::::DELETE::::STATEMENT	false
org.jsoup.safety.Cleaner::::110::::4551::::4584::::destination.appendChild(destText)::::DELETE::::STATEMENT	false
org.jsoup.parser.HtmlTreeBuilderState::::323::::13878::::14090::::for (org.jsoup.nodes.Attribute attribute : startTag.getAttributes()) {    if (!(html.hasAttr(attribute.getKey())))        html.attributes().put(attribute);}::::INSERT::::STATEMENT::::tb.process(startTag)	false
org.jsoup.safety.Whitelist::::615::::23159::::23163::::value::::":all"	false
org.jsoup.safety.Cleaner::::128::::5426::::5431::::source::::root	false
org.jsoup.safety.Cleaner::::100::::4018::::4052::::destination.appendChild(destChild)::::DELETE::::STATEMENT	false
org.jsoup.safety.Whitelist::::615::::23137::::23151::::(value) == null::::isValidAnchor(value)	false
org.jsoup.safety.Whitelist::::268::::9966::::10008::::this.attributes.put(tagName, attributeSet)::::DELETE::::STATEMENT	false
org.jsoup.safety.Cleaner::::111::::4609::::4634::::source instanceof org.jsoup.nodes.DataNode::::source != (root)	false
org.jsoup.nodes.Document::::45::::1331::::1357::::html.appendElement("head")::::INSERT::::STATEMENT::::normaliseTextNodes(this)	false
org.jsoup.nodes.Document::::45::::1331::::1357::::html.appendElement("head")::::INSERT::::STATEMENT::::normaliseTextNodes(head())	false
org.jsoup.safety.Whitelist::::268::::9966::::10008::::this.attributes.put(tagName, attributeSet)::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.nodes.Document::::43::::1235::::1271::::org.jsoup.nodes.Document doc = new org.jsoup.nodes.Document(baseUri)::::INSERT::::STATEMENT::::updateMetaCharsetElement(true)	false
org.jsoup.nodes.Document::::43::::1235::::1271::::org.jsoup.nodes.Document doc = new org.jsoup.nodes.Document(baseUri)::::INSERT::::STATEMENT::::outputSettings.charset(charset)	false
org.jsoup.safety.Whitelist::::513::::20092::::20098::::tagName::::new org.jsoup.nodes.Attributes()	false
org.jsoup.safety.Cleaner::::104::::4199::::4202::::root::::meta.el	false
org.jsoup.safety.Whitelist::::625::::23488::::23500::::(value) == null::::isValidAnchor(value)	false
org.jsoup.safety.Whitelist::::553::::21498::::21569::::java.util.Map<org.jsoup.safety.Whitelist.AttributeKey, org.jsoup.safety.Whitelist.AttributeValue> keyVals = enforcedAttributes.get(tag)::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.safety.Cleaner::::76::::3096::::3100::::clean::::this.root	false
org.jsoup.safety.Cleaner::::76::::3096::::3100::::clean::::this.el	false
org.jsoup.safety.Cleaner::::76::::3096::::3100::::clean::::this.destination	false
org.jsoup.safety.Cleaner::::76::::3096::::3100::::clean::::el	false
org.jsoup.nodes.Attributes::::168::::4909::::4912::::size::::toString	false
org.jsoup.nodes.Document::::44::::1296::::1298::::doc::::head().appendElement("title")	false
org.jsoup.nodes.Document::::44::::1281::::1321::::org.jsoup.nodes.Element html = doc.appendElement("html")::::INSERT::::STATEMENT::::updateMetaCharsetElement(true)	false
org.jsoup.nodes.Document::::44::::1281::::1321::::org.jsoup.nodes.Element html = doc.appendElement("html")::::INSERT::::STATEMENT::::outputSettings.charset(charset)	false
org.jsoup.safety.Whitelist::::627::::23583::::23608::::!(value.equals(other.value))::::INSERT::::STATEMENT::::if ((other.value) != null)    return false;	false
org.jsoup.safety.Whitelist::::552::::21447::::21481::::enforcedAttributes.containsKey(tag)::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.parser.HtmlTreeBuilderState::::323::::13878::::14090::::for (org.jsoup.nodes.Attribute attribute : startTag.getAttributes()) {    if (!(html.hasAttr(attribute.getKey())))        html.attributes().put(attribute);}::::INSERT::::STATEMENT::::closeCell(tb)	false
org.jsoup.safety.Whitelist::::553::::21542::::21559::::enforcedAttributes::::attrs	false
org.jsoup.safety.Whitelist::::423::::16541::::16593::::attrMap = new java.util.HashMap<org.jsoup.safety.Whitelist.AttributeKey, java.util.Set<org.jsoup.safety.Whitelist.Protocol>>()::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.parser.HtmlTreeBuilderState::::1324::::62421::::62449::::return tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InBody)::::INSERT::::STATEMENT::::closeCell(tb)	false
org.jsoup.safety.Whitelist::::622::::23332::::23361::::if (obj == null)    return false;::::INSERT::::STATEMENT::::if (obj == null)    return false;	false
org.jsoup.safety.Whitelist::::622::::23332::::23361::::if (obj == null)    return false;::::INSERT::::STATEMENT::::if ((this) == obj)    return true;	false
org.jsoup.safety.Whitelist::::621::::23290::::23318::::if ((this) == obj)    return true;::::INSERT::::STATEMENT::::if ((this) == obj)    return true;	false
org.jsoup.parser.HtmlTreeBuilderState::::323::::13878::::14090::::for (org.jsoup.nodes.Attribute attribute : startTag.getAttributes()) {    if (!(html.hasAttr(attribute.getKey())))        html.attributes().put(attribute);}::::INSERT::::STATEMENT::::if (node == formatEl)    break;	false
org.jsoup.nodes.Document::::43::::1235::::1271::::org.jsoup.nodes.Document doc = new org.jsoup.nodes.Document(baseUri)::::INSERT::::STATEMENT::::normaliseTextNodes(this)	false
org.jsoup.nodes.Document::::43::::1235::::1271::::org.jsoup.nodes.Document doc = new org.jsoup.nodes.Document(baseUri)::::INSERT::::STATEMENT::::normaliseTextNodes(head())	false
org.jsoup.safety.Whitelist::::623::::23375::::23421::::if ((getClass()) != (obj.getClass()))    return false;::::INSERT::::STATEMENT::::if (obj == null)    return false;	false
org.jsoup.safety.Whitelist::::623::::23375::::23421::::if ((getClass()) != (obj.getClass()))    return false;::::INSERT::::STATEMENT::::if ((this) == obj)    return true;	false
org.jsoup.safety.Cleaner::::98::::3938::::3945::::sourceEl::::destChild	false
org.jsoup.safety.Whitelist::::624::::23435::::23470::::org.jsoup.safety.Whitelist.TypedValue other = ((org.jsoup.safety.Whitelist.TypedValue) (obj))::::INSERT::::STATEMENT::::if (obj == null)    return false;	false
org.jsoup.safety.Whitelist::::624::::23435::::23470::::org.jsoup.safety.Whitelist.TypedValue other = ((org.jsoup.safety.Whitelist.TypedValue) (obj))::::INSERT::::STATEMENT::::if ((this) == obj)    return true;	false
org.jsoup.nodes.Document::::44::::1281::::1321::::org.jsoup.nodes.Element html = doc.appendElement("html")::::INSERT::::STATEMENT::::normaliseTextNodes(this)	false
org.jsoup.nodes.Document::::44::::1281::::1321::::org.jsoup.nodes.Element html = doc.appendElement("html")::::INSERT::::STATEMENT::::normaliseTextNodes(head())	false
org.jsoup.safety.Cleaner::::130::::5519::::5527::::traversor::::this.root	false
org.jsoup.safety.Cleaner::::130::::5519::::5527::::traversor::::this.el	false
org.jsoup.safety.Cleaner::::130::::5519::::5527::::traversor::::this.destination	false
org.jsoup.safety.Cleaner::::130::::5519::::5527::::traversor::::el	false
org.jsoup.safety.Whitelist::::513::::20092::::20098::::tagName::::".*\\s.*"	false
org.jsoup.safety.Whitelist::::523::::20650::::20670::::attr.setValue(value)::::DELETE::::STATEMENT	false
org.jsoup.safety.Cleaner::::143::::6078::::6103::::destAttrs.put(sourceAttr)::::DELETE::::STATEMENT	false
org.jsoup.safety.Whitelist::::424::::16607::::16643::::this.protocols.put(tagName, attrMap)::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.safety.Cleaner::::99::::3989::::3995::::meta.el::::this.root	false
org.jsoup.safety.Cleaner::::99::::3989::::3995::::meta.el::::this.destination	false
org.jsoup.parser.HtmlTreeBuilderState::::1324::::62442::::62447::::org.jsoup.parser.HtmlTreeBuilderState.InBody::::org.jsoup.parser.HtmlTreeBuilderState.InSelect	false
org.jsoup.safety.Cleaner::::97::::3823::::3830::::sourceEl::::destChild	false
org.jsoup.parser.HtmlTreeBuilderState::::327::::14149::::14175::::org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartToHead::::org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartInputAttribs	false
org.jsoup.parser.HtmlTreeBuilderState::::322::::13817::::13852::::org.jsoup.nodes.Element html = tb.getStack().get(0)::::INSERT::::STATEMENT::::if (node == formatEl)    break;	false
org.jsoup.nodes.Attributes::::168::::4905::::4949::::if ((incoming.size()) == 0)    return ;::::INSERT::::STATEMENT::::if ((incoming.size()) == 0)    return ;	false
org.jsoup.safety.Whitelist::::429::::16772::::16805::::protSet = new java.util.HashSet<org.jsoup.safety.Whitelist.Protocol>()::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.safety.Cleaner::::75::::3007::::3019::::dirtyDocument::::root	false
org.jsoup.safety.Whitelist::::628::::23637::::23648::::return true::::INSERT::::STATEMENT::::if ((this) == obj)    return true;	false
org.jsoup.parser.HtmlTreeBuilderState::::1324::::62442::::62447::::org.jsoup.parser.HtmlTreeBuilderState.InBody::::org.jsoup.parser.HtmlTreeBuilderState.BeforeHtml	false
org.jsoup.safety.Whitelist::::426::::16667::::16694::::attrMap.containsKey(attrKey)::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.safety.Whitelist::::622::::23349::::23361::::return false::::INSERT::::STATEMENT::::if ((this) == obj)    return true;	false
org.jsoup.parser.HtmlTreeBuilderState::::320::::13718::::13732::::tb.error(this)::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.safety.Whitelist::::628::::23637::::23648::::return true::::INSERT::::STATEMENT::::if ((value) == null) {    if ((other.value) != null)        return false;}else    if (!(value.equals(other.value)))        return false;	false
org.jsoup.safety.Whitelist::::627::::23611::::23623::::return false::::INSERT::::STATEMENT::::if ((this) == obj)    return true;	false
org.jsoup.nodes.Document::::41::::1199::::1224::::org.jsoup.helper.Validate.notNull(baseUri)::::INSERT::::STATEMENT::::updateMetaCharsetElement(true)	false
org.jsoup.nodes.Document::::41::::1199::::1224::::org.jsoup.helper.Validate.notNull(baseUri)::::INSERT::::STATEMENT::::outputSettings.charset(charset)	false
org.jsoup.nodes.Document::::41::::1199::::1224::::org.jsoup.helper.Validate.notNull(baseUri)::::INSERT::::STATEMENT::::normaliseTextNodes(this)	false
org.jsoup.nodes.Document::::41::::1199::::1224::::org.jsoup.helper.Validate.notNull(baseUri)::::INSERT::::STATEMENT::::normaliseTextNodes(head())	false
org.jsoup.safety.Whitelist::::623::::23409::::23421::::return false::::INSERT::::STATEMENT::::if ((this) == obj)    return true;	false
org.jsoup.safety.Whitelist::::430::::16819::::16848::::attrMap.put(attrKey, protSet)::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.safety.Whitelist::::430::::16819::::16825::::attrMap::::new org.jsoup.nodes.Attributes()	false
org.jsoup.safety.Whitelist::::420::::16422::::16456::::this.protocols.containsKey(tagName)::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.nodes.Attributes::::168::::4909::::4912::::size::::hashCode	false
org.jsoup.safety.Whitelist::::625::::23484::::23623::::if ((value) == null) {    if ((other.value) != null)        return false;}else    if (!(value.equals(other.value)))        return false;::::INSERT::::STATEMENT::::if ((this) == obj)    return true;	false
org.jsoup.safety.Whitelist::::553::::21542::::21559::::enforcedAttributes::::new org.jsoup.nodes.Attributes()	false
org.jsoup.safety.Whitelist::::513::::20091::::20113::::!(tagName.equals(":all"))::::DELETE::::INFIX	false
org.jsoup.safety.Cleaner::::111::::4659::::4664::::source::::destChild	false
org.jsoup.nodes.Attributes::::159::::4661::::4669::::return 0::::INSERT::::STATEMENT::::if ((attributes) == null)    attributes = new java.util.LinkedHashMap<java.lang.String, org.jsoup.nodes.Attribute>(2);	false
org.jsoup.safety.Whitelist::::628::::23637::::23648::::return true::::INSERT::::STATEMENT::::if (obj == null)    return false;	false
org.jsoup.parser.HtmlTreeBuilderState::::1324::::62442::::62447::::org.jsoup.parser.HtmlTreeBuilderState.InBody::::org.jsoup.parser.HtmlTreeBuilderState.InFrameset	false
org.jsoup.safety.Cleaner::::150::::6316::::6319::::dest::::root	false
org.jsoup.safety.Whitelist::::599::::22756::::22782::::return new org.jsoup.safety.Whitelist.Protocol(value)::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.safety.Whitelist::::627::::23611::::23623::::return false::::INSERT::::STATEMENT::::if (obj == null)    return false;	false
org.jsoup.nodes.Attributes::::169::::4943::::4949::::return ::::INSERT::::STATEMENT::::if ((attributes) == null)    return false;	false
org.jsoup.safety.Whitelist::::558::::21773::::21785::::return attrs::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.safety.Whitelist::::622::::23349::::23361::::return false::::INSERT::::STATEMENT::::if (obj == null)    return false;	false
org.jsoup.safety.Whitelist::::554::::21583::::21753::::for (java.util.Map.Entry<org.jsoup.safety.Whitelist.AttributeKey, org.jsoup.safety.Whitelist.AttributeValue> entry : keyVals.entrySet()) {    attrs.put(entry.getKey().toString(), entry.getValue().toString());}::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.parser.HtmlTreeBuilderState::::323::::13878::::14090::::for (org.jsoup.nodes.Attribute attribute : startTag.getAttributes()) {    if (!(html.hasAttr(attribute.getKey())))        html.attributes().put(attribute);}::::INSERT::::STATEMENT::::if (notIgnored)    return tb.process(endTag);	false
org.jsoup.safety.Whitelist::::623::::23409::::23421::::return false::::INSERT::::STATEMENT::::if (obj == null)    return false;	false
org.jsoup.safety.Whitelist::::625::::23484::::23623::::if ((value) == null) {    if ((other.value) != null)        return false;}else    if (!(value.equals(other.value)))        return false;::::INSERT::::STATEMENT::::if (obj == null)    return false;	false
org.jsoup.safety.Whitelist::::627::::23611::::23623::::return false::::INSERT::::STATEMENT::::if ((value) == null) {    if ((other.value) != null)        return false;}else    if (!(value.equals(other.value)))        return false;	false
org.jsoup.safety.Whitelist::::579::::22284::::22314::::return new org.jsoup.safety.Whitelist.AttributeKey(value)::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.safety.Whitelist::::621::::23307::::23318::::return true::::INSERT::::STATEMENT::::if ((this) == obj)    return true;	false
org.jsoup.safety.Whitelist::::513::::20084::::20151::::return (!(tagName.equals(":all"))) && (isSafeAttribute(":all", el, attr))::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.nodes.Attributes::::168::::4905::::4949::::if ((incoming.size()) == 0)    return ;::::INSERT::::STATEMENT::::if ((attributes) == null)    return ;	false
org.jsoup.safety.Whitelist::::424::::16607::::16620::::this.protocols::::new org.jsoup.nodes.Attributes()	false
org.jsoup.parser.HtmlTreeBuilderState::::327::::14149::::14175::::org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartToHead::::org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartDrop	false
org.jsoup.safety.Whitelist::::569::::22051::::22076::::return new org.jsoup.safety.Whitelist.TagName(value)::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.safety.Cleaner::::110::::4551::::4561::::destination::::root	false
org.jsoup.parser.HtmlTreeBuilderState::::327::::14123::::14176::::org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartToHead)::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.safety.Whitelist::::486::::18914::::18960::::return tagNames.contains(org.jsoup.safety.Whitelist.TagName.valueOf(tag))::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.safety.Cleaner::::90::::3609::::3619::::destination::::root	false
org.jsoup.nodes.Attributes::::169::::4943::::4949::::return ::::INSERT::::STATEMENT::::if ((incoming.size()) == 0)    return ;	false
org.jsoup.nodes.Attributes::::168::::4905::::4949::::if ((incoming.size()) == 0)    return ;::::INSERT::::STATEMENT::::if ((attributes) == null)    return "";	false
org.jsoup.parser.HtmlTreeBuilderState::::327::::14123::::14176::::org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartToHead)::::INSERT::::STATEMENT::::if (lastNode == furthestBlock) {}	false
org.jsoup.safety.Whitelist::::615::::23136::::23175::::(value) == null ? 0 : value.hashCode()::::prime * result) + ((value) == null ? 0 : value.hashCode()	false
org.jsoup.safety.Whitelist::::621::::23290::::23318::::if ((this) == obj)    return true;::::INSERT::::STATEMENT::::if (obj == null)    return false;	false
org.jsoup.safety.Cleaner::::104::::4185::::4328::::if (source != (root)) {    (numDiscarded)++;}::::INSERT::::STATEMENT::::(numDiscarded)++	false
org.jsoup.safety.Cleaner::::100::::4018::::4028::::destination::::root	false
org.jsoup.safety.Cleaner::::128::::5434::::5437::::dest::::root	false
org.jsoup.safety.Cleaner::::122::::5199::::5209::::destination::::root	false
org.jsoup.safety.Cleaner::::103::::4137::::4147::::destination::::root	false
org.jsoup.safety.Whitelist::::621::::23307::::23318::::return true::::INSERT::::STATEMENT::::if (obj == null)    return false;	false
org.jsoup.safety.Cleaner::::122::::5185::::5195::::destination::::root	false
org.jsoup.safety.Whitelist::::513::::20118::::20150::::isSafeAttribute(":all", el, attr)::::INSERT::::PARAMETER::::isSafeAttribute(this.value,":all", el, attr)	false
org.jsoup.nodes.Attributes::::169::::4943::::4949::::return ::::INSERT::::STATEMENT::::if ((attributes) == null)    return 0;	false
org.jsoup.safety.Cleaner::::100::::4018::::4028::::destination::::meta.el	false
org.jsoup.safety.Cleaner::::130::::5538::::5543::::source::::root	false
org.jsoup.safety.Cleaner::::128::::5426::::5431::::source::::this.root	false
org.jsoup.safety.Cleaner::::128::::5426::::5431::::source::::this.el	false
org.jsoup.safety.Cleaner::::128::::5426::::5431::::source::::this.destination	false
org.jsoup.safety.Cleaner::::128::::5426::::5431::::source::::el	false
org.jsoup.safety.Whitelist::::513::::20118::::20150::::isSafeAttribute(":all", el, attr)::::DELETE::::INFIX	false
org.jsoup.safety.Cleaner::::111::::4639::::4685::::whitelist.isSafeTag(source.parent().nodeName())::::DELETE::::INFIX	false
org.jsoup.safety.Whitelist::::254::::9357::::9427::::org.jsoup.helper.Validate.isTrue(((attributes.length) > 0), "No attribute names supplied.")::::DELETE::::STATEMENT	false
org.jsoup.safety.Whitelist::::253::::9319::::9347::::org.jsoup.helper.Validate.notNull(attributes)::::DELETE::::STATEMENT	false
org.jsoup.safety.Cleaner::::131::::5562::::5589::::cleaningVisitor.numDiscarded::::this.numAttribsDiscarded	false
org.jsoup.safety.Cleaner::::131::::5562::::5589::::cleaningVisitor.numDiscarded::::numAttribsDiscarded	false
org.jsoup.safety.Whitelist::::624::::23435::::23470::::org.jsoup.safety.Whitelist.TypedValue other = ((org.jsoup.safety.Whitelist.TypedValue) (obj))::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.safety.Whitelist::::550::::21350::::21385::::org.jsoup.nodes.Attributes attrs = new org.jsoup.nodes.Attributes()::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.safety.Cleaner::::109::::4516::::4521::::source::::destChild	false
org.jsoup.safety.Whitelist::::623::::23393::::23406::::obj.getClass()::::DELETE::::INFIX	false
org.jsoup.safety.Whitelist::::623::::23379::::23388::::getClass()::::DELETE::::INFIX	false
org.jsoup.safety.Cleaner::::121::::5127::::5164::::whitelist.isSafeTag(source.nodeName())::::DELETE::::INFIX	false
org.jsoup.safety.Whitelist::::621::::23307::::23318::::return true::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.safety.Whitelist::::413::::16186::::16213::::org.jsoup.helper.Validate.notNull(protocols)::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.safety.Cleaner::::122::::5185::::5219::::destination = destination.parent()::::INSERT::::STATEMENT::::(numDiscarded)++	false
org.jsoup.safety.Whitelist::::513::::20092::::20098::::tagName::::":"	false
org.jsoup.safety.Cleaner::::110::::4551::::4561::::destination::::meta.el	false
org.jsoup.nodes.Attributes::::169::::4943::::4949::::return ::::INSERT::::STATEMENT::::if ((attributes) == null)    return new org.jsoup.nodes.Attributes();	false
org.jsoup.nodes.Attributes::::168::::4905::::4949::::if ((incoming.size()) == 0)    return ;::::INSERT::::STATEMENT::::if ((attributes) == null)    return false;	false
org.jsoup.safety.Cleaner::::122::::5185::::5219::::destination = destination.parent()::::INSERT::::STATEMENT::::if (source != (root)) {    (numDiscarded)++;}	false
org.jsoup.safety.Whitelist::::616::::23190::::23203::::return result::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.parser.HtmlTreeBuilderState::::1324::::62442::::62447::::org.jsoup.parser.HtmlTreeBuilderState.InBody::::org.jsoup.parser.HtmlTreeBuilderState.BeforeHead	false
org.jsoup.nodes.Attributes::::168::::4905::::4949::::if ((incoming.size()) == 0)    return ;::::INSERT::::STATEMENT::::if ((attributes) == null)    attributes = new java.util.LinkedHashMap<java.lang.String, org.jsoup.nodes.Attribute>(incoming.size());	false
org.jsoup.parser.HtmlTreeBuilderState::::1324::::62442::::62447::::org.jsoup.parser.HtmlTreeBuilderState.InBody::::org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable	false
org.jsoup.nodes.Attributes::::168::::4905::::4949::::if ((incoming.size()) == 0)    return ;::::INSERT::::STATEMENT::::if ((attributes) == null)    attributes = new java.util.LinkedHashMap<java.lang.String, org.jsoup.nodes.Attribute>(2);	false
org.jsoup.safety.Cleaner::::103::::4137::::4160::::destination = destChild::::this.destination = destination	false
org.jsoup.safety.Whitelist::::627::::23584::::23588::::value::::"#"	false
org.jsoup.safety.Cleaner::::110::::4551::::4561::::destination::::this.root	false
org.jsoup.safety.Cleaner::::110::::4551::::4561::::destination::::this.el	false
org.jsoup.safety.Cleaner::::110::::4551::::4561::::destination::::this.destination	false
org.jsoup.safety.Cleaner::::110::::4551::::4561::::destination::::el	false
org.jsoup.safety.Whitelist::::623::::23375::::23421::::if ((getClass()) != (obj.getClass()))    return false;::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.safety.Whitelist::::205::::7659::::7681::::org.jsoup.helper.Validate.notNull(tags)::::DELETE::::STATEMENT	false
org.jsoup.nodes.Attributes::::168::::4909::::4916::::incoming::::new org.jsoup.nodes.Attributes()	false
org.jsoup.safety.Whitelist::::615::::23159::::23163::::value::::"#"	false
org.jsoup.nodes.Attributes::::168::::4905::::4949::::if ((incoming.size()) == 0)    return ;::::INSERT::::STATEMENT::::if ((attributes) == null)    return new org.jsoup.nodes.Attributes();	false
org.jsoup.safety.Cleaner::::100::::4018::::4028::::destination::::this.el	false
org.jsoup.safety.Cleaner::::100::::4018::::4028::::destination::::this.destination	false
org.jsoup.safety.Cleaner::::100::::4018::::4028::::destination::::el	false
org.jsoup.safety.Cleaner::::76::::3074::::3086::::dirtyDocument::::this.root	false
org.jsoup.safety.Cleaner::::76::::3074::::3086::::dirtyDocument::::this.el	false
org.jsoup.safety.Cleaner::::76::::3074::::3086::::dirtyDocument::::this.destination	false
org.jsoup.safety.Cleaner::::76::::3074::::3086::::dirtyDocument::::el	false
org.jsoup.safety.Whitelist::::415::::16258::::16260::::tag::::protocol	false
org.jsoup.safety.Cleaner::::103::::4137::::4147::::destination::::this.el	false
org.jsoup.safety.Cleaner::::103::::4137::::4147::::destination::::el	false
org.jsoup.safety.Cleaner::::122::::5199::::5209::::destination::::this.root	false
org.jsoup.safety.Cleaner::::122::::5199::::5209::::destination::::this.el	false
org.jsoup.safety.Cleaner::::122::::5199::::5209::::destination::::this.destination	false
org.jsoup.safety.Cleaner::::122::::5199::::5209::::destination::::el	false
org.jsoup.safety.Whitelist::::207::::7692::::7822::::for (java.lang.String tagName : tags) {    org.jsoup.helper.Validate.notEmpty(tagName);    tagNames.add(org.jsoup.safety.Whitelist.TagName.valueOf(tagName));}::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.nodes.Document::::41::::1216::::1222::::baseUri::::this.location	false
org.jsoup.safety.Cleaner::::100::::4018::::4028::::destination::::this.root	false
org.jsoup.safety.Cleaner::::103::::4137::::4147::::destination::::this.root	false
org.jsoup.safety.Cleaner::::90::::3609::::3619::::destination::::this.root	false
org.jsoup.safety.Cleaner::::90::::3609::::3619::::destination::::this.el	false
org.jsoup.safety.Cleaner::::90::::3609::::3619::::destination::::el	false
org.jsoup.safety.Cleaner::::122::::5185::::5195::::destination::::this.root	false
org.jsoup.safety.Cleaner::::122::::5185::::5195::::destination::::this.el	false
org.jsoup.safety.Cleaner::::122::::5185::::5195::::destination::::el	false
org.jsoup.safety.Cleaner::::103::::4137::::4147::::destination::::meta.el	false
org.jsoup.safety.Whitelist::::262::::9750::::9752::::key::::this.value	false
org.jsoup.safety.Whitelist::::539::::21097::::21108::::return true::::INSERT::::STATEMENT::::if (prot.equals("#")) {    if (isValidAnchor(value)) {        return true;    }else {        continue;    }}	false
org.jsoup.safety.Cleaner::::107::::4353::::4378::::source instanceof org.jsoup.nodes.TextNode::::source != (root)	false
org.jsoup.safety.Whitelist::::622::::23332::::23361::::if (obj == null)    return false;::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.safety.Whitelist::::261::::9694::::9696::::key::::this.value	false
org.jsoup.safety.Whitelist::::539::::21097::::21108::::return true::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.safety.Cleaner::::102::::4075::::4086::::numDiscarded::::meta.numAttribsDiscarded	false
org.jsoup.nodes.Attributes::::169::::4943::::4949::::return ::::INSERT::::STATEMENT::::if ((attributes) == null)    attributes = new java.util.LinkedHashMap<java.lang.String, org.jsoup.nodes.Attribute>(2);	false
org.jsoup.safety.Cleaner::::97::::3803::::3811::::whitelist::::this.whitelist	false
org.jsoup.safety.Whitelist::::551::::21395::::21433::::org.jsoup.safety.Whitelist.TagName tag = org.jsoup.safety.Whitelist.TagName.valueOf(tagName)::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.nodes.Document::::43::::1263::::1269::::baseUri::::this.location	false
org.jsoup.safety.Cleaner::::143::::6078::::6103::::destAttrs.put(sourceAttr)::::INSERT::::STATEMENT::::numDiscarded++	false
org.jsoup.safety.Whitelist::::614::::23082::::23096::::int result = 1::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.safety.Whitelist::::205::::7659::::7681::::org.jsoup.helper.Validate.notNull(tags)::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.safety.Whitelist::::264::::9779::::9814::::this.attributes.containsKey(tagName)::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.safety.Cleaner::::147::::6199::::6207::::whitelist::::this.whitelist	false
org.jsoup.safety.Cleaner::::111::::4639::::4647::::whitelist::::this.whitelist	false
org.jsoup.safety.Whitelist::::613::::23048::::23068::::final int prime = 31::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.safety.Cleaner::::102::::4091::::4114::::meta.numAttribsDiscarded::::(numDiscarded)++	false
org.jsoup.safety.Cleaner::::77::::3126::::3137::::numDiscarded::::this.numAttribsDiscarded	false
org.jsoup.safety.Cleaner::::77::::3126::::3137::::numDiscarded::::numAttribsDiscarded	false
org.jsoup.safety.Whitelist::::268::::9966::::9980::::this.attributes::::new org.jsoup.nodes.Attributes()	false
org.jsoup.Jsoup::::250::::10780::::10787::::bodyHtml::::org.jsoup.Jsoup.clean(bodyHtml, "", whitelist)	false
org.jsoup.safety.Whitelist::::621::::23290::::23318::::if ((this) == obj)    return true;::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.safety.Whitelist::::411::::16116::::16138::::org.jsoup.helper.Validate.notEmpty(tag)::::DELETE::::STATEMENT	false
org.jsoup.nodes.Attributes::::168::::4905::::4949::::if ((incoming.size()) == 0)    return ;::::INSERT::::STATEMENT::::put(attr)	false
org.jsoup.parser.HtmlTreeBuilderState::::327::::14123::::14176::::org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartToHead)::::INSERT::::STATEMENT::::org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb)	false
org.jsoup.parser.HtmlTreeBuilderState::::1324::::62428::::62429::::tb::::this	false
org.jsoup.safety.Cleaner::::111::::4659::::4664::::source::::root	false
org.jsoup.safety.Whitelist::::412::::16148::::16176::::org.jsoup.helper.Validate.notEmpty(attribute)::::DELETE::::STATEMENT	false
org.jsoup.safety.Cleaner::::121::::5127::::5135::::whitelist::::this.whitelist	false
org.jsoup.safety.Cleaner::::121::::5094::::5283::::if ((source instanceof org.jsoup.nodes.Element) && (whitelist.isSafeTag(source.nodeName()))) {    destination = destination.parent();}::::INSERT::::STATEMENT::::numDiscarded++	false
org.jsoup.safety.Cleaner::::121::::5094::::5283::::if ((source instanceof org.jsoup.nodes.Element) && (whitelist.isSafeTag(source.nodeName()))) {    destination = destination.parent();}::::INSERT::::STATEMENT::::(numDiscarded)++	false
org.jsoup.safety.Cleaner::::150::::6316::::6319::::dest::::this.el	false
org.jsoup.safety.Cleaner::::150::::6316::::6319::::dest::::this.destination	false
org.jsoup.safety.Cleaner::::150::::6316::::6319::::dest::::el	false
org.jsoup.safety.Cleaner::::97::::3803::::3841::::whitelist.isSafeTag(sourceEl.tagName())::::INSERT::::STATEMENT::::if (source != (root)) {    (numDiscarded)++;}	false
org.jsoup.safety.Cleaner::::102::::4075::::4115::::numDiscarded += meta.numAttribsDiscarded::::INSERT::::STATEMENT::::if (source != (root)) {    (numDiscarded)++;}	false
org.jsoup.safety.Whitelist::::622::::23349::::23361::::return false::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.safety.Cleaner::::150::::6316::::6319::::dest::::this.root	false
org.jsoup.nodes.Attributes::::169::::4943::::4949::::return ::::INSERT::::STATEMENT::::if ((attributes) == null)    attributes = new java.util.LinkedHashMap<java.lang.String, org.jsoup.nodes.Attribute>(incoming.size());	false
org.jsoup.safety.Cleaner::::110::::4551::::4584::::destination.appendChild(destText)::::INSERT::::STATEMENT::::if (source != (root)) {    (numDiscarded)++;}	false
org.jsoup.safety.Cleaner::::130::::5538::::5543::::source::::this.root	false
org.jsoup.safety.Cleaner::::130::::5538::::5543::::source::::this.el	false
org.jsoup.safety.Cleaner::::130::::5538::::5543::::source::::this.destination	false
org.jsoup.safety.Cleaner::::130::::5538::::5543::::source::::el	false
org.jsoup.safety.Whitelist::::623::::23409::::23421::::return false::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.safety.Whitelist::::433::::16934::::16941::::protocol::::this.value	false
org.jsoup.safety.Whitelist::::627::::23611::::23623::::return false::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.safety.Cleaner::::135::::5688::::5695::::sourceEl::::root	false
org.jsoup.safety.Whitelist::::628::::23637::::23648::::return true::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.safety.Whitelist::::615::::23110::::23176::::result = (prime * result) + ((value) == null ? 0 : value.hashCode())::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.safety.Cleaner::::140::::5912::::5919::::sourceEl::::root	false
org.jsoup.safety.Cleaner::::109::::4516::::4521::::source::::root	false
org.jsoup.safety.Cleaner::::98::::3938::::3945::::sourceEl::::root	false
org.jsoup.safety.Whitelist::::625::::23484::::23623::::if ((value) == null) {    if ((other.value) != null)        return false;}else    if (!(value.equals(other.value)))        return false;::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.safety.Whitelist::::434::::16990::::16997::::protocol::::this.value	false
org.jsoup.safety.Whitelist::::257::::9490::::9516::::!(tagNames.contains(tagName))::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.safety.Cleaner::::137::::5816::::5823::::sourceEl::::root	false
org.jsoup.parser.HtmlTreeBuilderState::::327::::14119::::26817::::if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartToHead)) {    return tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead);}else    if (name.equals("body")) {        tb.error(this);        java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();        if (((stack.size()) == 1) || (((stack.size()) > 2) && (!(stack.get(1).nodeName().equals("body"))))) {            return false;        }else {            tb.framesetOk(false);            org.jsoup.nodes.Element body = stack.get(1);            for (org.jsoup.nodes.Attribute attribute : startTag.getAttributes()) {                if (!(body.hasAttr(attribute.getKey())))                    body.attributes().put(attribute);            }        }    }else        if (name.equals("frameset")) {            tb.error(this);            java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();            if (((stack.size()) == 1) || (((stack.size()) > 2) && (!(stack.get(1).nodeName().equals("body"))))) {                return false;            }else                if (!(tb.framesetOk())) {                    return false;                }else {                    org.jsoup.nodes.Element second = stack.get(1);                    if ((second.parent()) != null)                        second.remove();                    while ((stack.size()) > 1)                        stack.remove(((stack.size()) - 1));                    tb.insert(startTag);                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InFrameset);                }        }else            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.Headings)) {                if (tb.inButtonScope("p")) {                    tb.processEndTag("p");                }                if (org.jsoup.helper.StringUtil.inSorted(tb.currentElement().nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.Headings)) {                    tb.error(this);                    tb.pop();                }                tb.insert(startTag);            }else                if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartPreListing)) {                    if (tb.inButtonScope("p")) {                        tb.processEndTag("p");                    }                    tb.insert(startTag);                    tb.framesetOk(false);                }else                    if (name.equals("form")) {                        if ((tb.getFormElement()) != null) {                            tb.error(this);                            return false;                        }                        if (tb.inButtonScope("p")) {                            tb.processEndTag("p");                        }                        tb.insertForm(startTag, true);                    }else                        if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.DdDt)) {                            tb.framesetOk(false);                            java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();                            for (int i = (stack.size()) - 1; i > 0; i--) {                                org.jsoup.nodes.Element el = stack.get(i);                                if (org.jsoup.helper.StringUtil.inSorted(el.nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.DdDt)) {                                    tb.processEndTag(el.nodeName());                                    break;                                }                                if ((tb.isSpecial(el)) && (!(org.jsoup.helper.StringUtil.inSorted(el.nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartLiBreakers))))                                    break;                            }                            if (tb.inButtonScope("p")) {                                tb.processEndTag("p");                            }                            tb.insert(startTag);                        }else                            if (name.equals("plaintext")) {                                if (tb.inButtonScope("p")) {                                    tb.processEndTag("p");                                }                                tb.insert(startTag);                                tb.tokeniser.transition(org.jsoup.parser.TokeniserState.PLAINTEXT);                            }else                                if (name.equals("button")) {                                    if (tb.inButtonScope("button")) {                                        tb.error(this);                                        tb.processEndTag("button");                                        tb.process(startTag);                                    }else {                                        tb.reconstructFormattingElements();                                        tb.insert(startTag);                                        tb.framesetOk(false);                                    }                                }else                                    if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.Formatters)) {                                        tb.reconstructFormattingElements();                                        org.jsoup.nodes.Element el = tb.insert(startTag);                                        tb.pushActiveFormattingElements(el);                                    }else                                        if (name.equals("nobr")) {                                            tb.reconstructFormattingElements();                                            if (tb.inScope("nobr")) {                                                tb.error(this);                                                tb.processEndTag("nobr");                                                tb.reconstructFormattingElements();                                            }                                            org.jsoup.nodes.Element el = tb.insert(startTag);                                            tb.pushActiveFormattingElements(el);                                        }else                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartApplets)) {                                                tb.reconstructFormattingElements();                                                tb.insert(startTag);                                                tb.insertMarkerToFormattingElements();                                                tb.framesetOk(false);                                            }else                                                if (name.equals("table")) {                                                    if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                                                        tb.processEndTag("p");                                                    }                                                    tb.insert(startTag);                                                    tb.framesetOk(false);                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                                                }else                                                    if (name.equals("input")) {                                                        tb.reconstructFormattingElements();                                                        org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                                                        if (!(el.attr("type").equalsIgnoreCase("hidden")))                                                            tb.framesetOk(false);                                                    }else                                                        if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartMedia)) {                                                            tb.insertEmpty(startTag);                                                        }else                                                            if (name.equals("hr")) {                                                                if (tb.inButtonScope("p")) {                                                                    tb.processEndTag("p");                                                                }                                                                tb.insertEmpty(startTag);                                                                tb.framesetOk(false);                                                            }else                                                                if (name.equals("image")) {                                                                    if ((tb.getFromStack("svg")) == null)                                                                        return tb.process(startTag.name("img"));                                                                    else                                                                        tb.insert(startTag);                                                                }else                                                                    if (name.equals("isindex")) {                                                                        tb.error(this);                                                                        if ((tb.getFormElement()) != null)                                                                            return false;                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                        tb.processStartTag("form");                                                                        if (startTag.attributes.hasKey("action")) {                                                                            org.jsoup.nodes.Element form = tb.getFormElement();                                                                            form.attr("action", startTag.attributes.get("action"));                                                                        }                                                                        tb.processStartTag("hr");                                                                        tb.processStartTag("label");                                                                        java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                                                        tb.process(new org.jsoup.parser.Token.Character().data(prompt));                                                                        org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                                                        for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                                                            if (!(org.jsoup.helper.StringUtil.inSorted(attr.getKey(), org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartInputAttribs)))                                                                                inputAttribs.put(attr);                                                                        }                                                                        inputAttribs.put("name", "isindex");                                                                        tb.processStartTag("input", inputAttribs);                                                                        tb.processEndTag("label");                                                                        tb.processStartTag("hr");                                                                        tb.processEndTag("form");                                                                    }else                                                                        if (name.equals("textarea")) {                                                                            tb.insert(startTag);                                                                            tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                                                            tb.markInsertionMode();                                                                            tb.framesetOk(false);                                                                            tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                                                        }else                                                                            if (name.equals("xmp")) {                                                                                if (tb.inButtonScope("p")) {                                                                                    tb.processEndTag("p");                                                                                }                                                                                tb.reconstructFormattingElements();                                                                                tb.framesetOk(false);                                                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                                            }else                                                                                if (name.equals("iframe")) {                                                                                    tb.framesetOk(false);                                                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                                                }else                                                                                    if (name.equals("noembed")) {                                                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                                                    }else                                                                                        if (name.equals("select")) {                                                                                            tb.reconstructFormattingElements();                                                                                            tb.insert(startTag);                                                                                            tb.framesetOk(false);                                                                                            org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                                                            if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                                                            else                                                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                                                        }else                                                                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartOptions)) {                                                                                                if (tb.currentElement().nodeName().equals("option"))                                                                                                    tb.processEndTag("option");                                                                                                tb.reconstructFormattingElements();                                                                                                tb.insert(startTag);                                                                                            }else                                                                                                if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartRuby)) {                                                                                                    if (tb.inScope("ruby")) {                                                                                                        tb.generateImpliedEndTags();                                                                                                        if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                                                            tb.error(this);                                                                                                            tb.popStackToBefore("ruby");                                                                                                        }                                                                                                        tb.insert(startTag);                                                                                                    }                                                                                                }else                                                                                                    if (name.equals("math")) {                                                                                                        tb.reconstructFormattingElements();                                                                                                        tb.insert(startTag);                                                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                                    }else                                                                                                        if (name.equals("svg")) {                                                                                                            tb.reconstructFormattingElements();                                                                                                            tb.insert(startTag);                                                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                                        }else                                                                                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartDrop)) {                                                                                                                tb.error(this);                                                                                                                return false;                                                                                                            }else {                                                                                                                tb.reconstructFormattingElements();                                                                                                                tb.insert(startTag);                                                                                                            }::::INSERT::::STATEMENT::::anythingElse(t, tb)	false
org.jsoup.parser.HtmlTreeBuilder::::658::::23374::::23655::::for (int pos = (formattingElements.size()) - 1; pos >= 0; pos--) {    org.jsoup.nodes.Element next = formattingElements.get(pos);    if (next == null)        break;    else        if (next.nodeName().equals(nodeName))            return next;}::::INSERT::::STATEMENT::::resetInsertionMode()	false
org.jsoup.safety.Whitelist::::627::::23584::::23588::::value::::this	false
org.jsoup.safety.Cleaner::::121::::5147::::5152::::source::::root	false
org.jsoup.safety.Cleaner::::111::::4659::::4664::::source::::meta.el	false
org.jsoup.safety.Cleaner::::95::::3745::::3780::::org.jsoup.nodes.Element sourceEl = ((org.jsoup.nodes.Element) (source))::::INSERT::::STATEMENT::::if (source != (root)) {    (numDiscarded)++;}	false
org.jsoup.safety.Cleaner::::97::::3823::::3830::::sourceEl::::root	false
org.jsoup.safety.Cleaner::::103::::4137::::4160::::destination = destChild::::INSERT::::STATEMENT::::if (source != (root)) {    (numDiscarded)++;}	false
org.jsoup.safety.Whitelist::::264::::9775::::10018::::if (this.attributes.containsKey(tagName)) {    java.util.Set<org.jsoup.safety.Whitelist.AttributeKey> currentSet = this.attributes.get(tagName);    currentSet.addAll(attributeSet);}else {    this.attributes.put(tagName, attributeSet);}::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.safety.Cleaner::::128::::5434::::5437::::dest::::this.root	false
org.jsoup.safety.Cleaner::::128::::5434::::5437::::dest::::this.el	false
org.jsoup.safety.Cleaner::::128::::5434::::5437::::dest::::this.destination	false
org.jsoup.safety.Cleaner::::128::::5434::::5437::::dest::::el	false
org.jsoup.safety.Cleaner::::108::::4399::::4438::::org.jsoup.nodes.TextNode sourceText = ((org.jsoup.nodes.TextNode) (source))::::INSERT::::STATEMENT::::if (source != (root)) {    (numDiscarded)++;}	false
org.jsoup.safety.Cleaner::::102::::4075::::4115::::numDiscarded += meta.numAttribsDiscarded::::INSERT::::STATEMENT::::(numDiscarded)++	false
org.jsoup.safety.Cleaner::::94::::3700::::3724::::source instanceof org.jsoup.nodes.Element::::source != (root)	false
org.jsoup.safety.Whitelist::::552::::21443::::21763::::if (enforcedAttributes.containsKey(tag)) {    java.util.Map<org.jsoup.safety.Whitelist.AttributeKey, org.jsoup.safety.Whitelist.AttributeValue> keyVals = enforcedAttributes.get(tag);    for (java.util.Map.Entry<org.jsoup.safety.Whitelist.AttributeKey, org.jsoup.safety.Whitelist.AttributeValue> entry : keyVals.entrySet()) {        attrs.put(entry.getKey().toString(), entry.getValue().toString());    }}::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.safety.Cleaner::::103::::4137::::4160::::destination = destChild::::INSERT::::STATEMENT::::(numDiscarded)++	false
org.jsoup.safety.Cleaner::::100::::4018::::4052::::destination.appendChild(destChild)::::INSERT::::STATEMENT::::if (source != (root)) {    (numDiscarded)++;}	false
org.jsoup.parser.HtmlTreeBuilderState::::1324::::62442::::62447::::org.jsoup.parser.HtmlTreeBuilderState.InBody::::org.jsoup.parser.HtmlTreeBuilderState.InTableText	false
org.jsoup.safety.Whitelist::::551::::21425::::21431::::tagName::::this.value	false
org.jsoup.nodes.Attributes::::168::::4909::::4923::::incoming.size()::::DELETE::::INFIX	false
org.jsoup.safety.Cleaner::::109::::4456::::4533::::org.jsoup.nodes.TextNode destText = new org.jsoup.nodes.TextNode(sourceText.getWholeText(), source.baseUri())::::INSERT::::STATEMENT::::if (source != (root)) {    (numDiscarded)++;}	false
org.jsoup.safety.Cleaner::::98::::3901::::3947::::org.jsoup.safety.Cleaner.ElementMeta meta = createSafeElement(sourceEl)::::INSERT::::STATEMENT::::if (source != (root)) {    (numDiscarded)++;}	false
org.jsoup.safety.Whitelist::::432::::16868::::17040::::for (java.lang.String protocol : protocols) {    org.jsoup.helper.Validate.notEmpty(protocol);    org.jsoup.safety.Whitelist.Protocol prot = org.jsoup.safety.Whitelist.Protocol.valueOf(protocol);    protSet.add(prot);}::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.safety.Cleaner::::99::::3969::::3996::::org.jsoup.nodes.Element destChild = meta.el::::INSERT::::STATEMENT::::if (source != (root)) {    (numDiscarded)++;}	false
org.jsoup.safety.Cleaner::::111::::4605::::5018::::if ((source instanceof org.jsoup.nodes.DataNode) && (whitelist.isSafeTag(source.parent().nodeName()))) {    org.jsoup.nodes.DataNode sourceData = ((org.jsoup.nodes.DataNode) (source));    org.jsoup.nodes.DataNode destData = new org.jsoup.nodes.DataNode(sourceData.getWholeData(), source.baseUri());    destination.appendChild(destData);}else {    (numDiscarded)++;}::::INSERT::::STATEMENT::::if (source != (root)) {    (numDiscarded)++;}	false
org.jsoup.safety.Cleaner::::109::::4516::::4521::::source::::meta.el	false
org.jsoup.nodes.Attributes::::168::::4905::::4949::::if ((incoming.size()) == 0)    return ;::::INSERT::::STATEMENT::::if ((attributes) == null)    return 0;	false
org.jsoup.safety.Whitelist::::426::::16663::::16858::::if (attrMap.containsKey(attrKey)) {    protSet = attrMap.get(attrKey);}else {    protSet = new java.util.HashSet<org.jsoup.safety.Whitelist.Protocol>();    attrMap.put(attrKey, protSet);}::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.safety.Whitelist::::615::::23110::::23176::::result = (prime * result) + ((value) == null ? 0 : value.hashCode())::::this.value = value	false
org.jsoup.safety.Cleaner::::140::::5887::::5933::::org.jsoup.nodes.Attributes sourceAttrs = sourceEl.attributes()::::INSERT::::STATEMENT::::numDiscarded++	false
org.jsoup.safety.Whitelist::::252::::9305::::9307::::tag::::key	false
org.jsoup.safety.Cleaner::::141::::5943::::6162::::for (org.jsoup.nodes.Attribute sourceAttr : sourceAttrs) {    if (whitelist.isSafeAttribute(sourceTag, sourceEl, sourceAttr))        destAttrs.put(sourceAttr);    else        numDiscarded++;}::::INSERT::::STATEMENT::::numDiscarded++	false
org.jsoup.safety.Whitelist::::615::::23159::::23163::::value::::this	false
org.jsoup.safety.Whitelist::::411::::16134::::16136::::tag::::protocol	false
org.jsoup.safety.Whitelist::::209::::7803::::7809::::tagName::::this.value	false
org.jsoup.safety.Whitelist::::420::::16418::::16653::::if (this.protocols.containsKey(tagName)) {    attrMap = this.protocols.get(tagName);}else {    attrMap = new java.util.HashMap<org.jsoup.safety.Whitelist.AttributeKey, java.util.Set<org.jsoup.safety.Whitelist.Protocol>>();    this.protocols.put(tagName, attrMap);}::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.parser.HtmlTreeBuilderState::::1324::::62442::::62447::::org.jsoup.parser.HtmlTreeBuilderState.InBody::::org.jsoup.parser.HtmlTreeBuilderState.InHeadNoscript	false
org.jsoup.parser.HtmlTreeBuilderState::::1324::::62442::::62447::::org.jsoup.parser.HtmlTreeBuilderState.InBody::::org.jsoup.parser.HtmlTreeBuilderState.InColumnGroup	false
org.jsoup.safety.Cleaner::::121::::5094::::5283::::if ((source instanceof org.jsoup.nodes.Element) && (whitelist.isSafeTag(source.nodeName()))) {    destination = destination.parent();}::::INSERT::::STATEMENT::::if (source != (root)) {    (numDiscarded)++;}	false
org.jsoup.safety.Whitelist::::253::::9319::::9347::::org.jsoup.helper.Validate.notNull(attributes)::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.parser.HtmlTreeBuilderState::::327::::14123::::14176::::org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartToHead)::::INSERT::::STATEMENT::::closeCell(tb)	false
org.jsoup.safety.Whitelist::::513::::20092::::20098::::tagName::::this.value	false
org.jsoup.safety.Whitelist::::256::::9472::::9474::::tag::::key	false
org.jsoup.safety.Cleaner::::98::::3901::::3947::::org.jsoup.safety.Cleaner.ElementMeta meta = createSafeElement(sourceEl)::::INSERT::::STATEMENT::::(numDiscarded)++	false
org.jsoup.safety.Cleaner::::150::::6322::::6333::::numDiscarded::::this.numAttribsDiscarded	false
org.jsoup.safety.Cleaner::::150::::6322::::6333::::numDiscarded::::numAttribsDiscarded	false
org.jsoup.safety.Cleaner::::99::::3969::::3996::::org.jsoup.nodes.Element destChild = meta.el::::INSERT::::STATEMENT::::(numDiscarded)++	false
org.jsoup.safety.Cleaner::::104::::4185::::4328::::if (source != (root)) {    (numDiscarded)++;}::::INSERT::::STATEMENT::::numDiscarded++	false
org.jsoup.safety.Whitelist::::254::::9357::::9427::::org.jsoup.helper.Validate.isTrue(((attributes.length) > 0), "No attribute names supplied.")::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.safety.Cleaner::::97::::3803::::3841::::whitelist.isSafeTag(sourceEl.tagName())::::INSERT::::STATEMENT::::(numDiscarded)++	false
org.jsoup.safety.Whitelist::::412::::16148::::16176::::org.jsoup.helper.Validate.notEmpty(attribute)::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.safety.Cleaner::::75::::3007::::3019::::dirtyDocument::::this.root	false
org.jsoup.safety.Cleaner::::75::::3007::::3019::::dirtyDocument::::this.el	false
org.jsoup.safety.Cleaner::::75::::3007::::3019::::dirtyDocument::::this.destination	false
org.jsoup.safety.Cleaner::::75::::3007::::3019::::dirtyDocument::::el	false
org.jsoup.safety.Cleaner::::102::::4075::::4086::::numDiscarded::::this.numAttribsDiscarded	false
org.jsoup.safety.Cleaner::::102::::4075::::4086::::numDiscarded::::numAttribsDiscarded	false
org.jsoup.parser.HtmlTreeBuilderState::::1324::::62442::::62447::::org.jsoup.parser.HtmlTreeBuilderState.InBody::::org.jsoup.parser.HtmlTreeBuilderState.AfterBody	false
org.jsoup.parser.HtmlTreeBuilderState::::327::::14123::::14176::::org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartToHead)::::INSERT::::STATEMENT::::tb.process(startTag)	false
org.jsoup.parser.HtmlTreeBuilderState::::327::::14123::::14176::::org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartToHead)::::INSERT::::STATEMENT::::if (node == formatEl)    break;	false
org.jsoup.safety.Whitelist::::628::::23637::::23648::::return true::::INSERT::::STATEMENT::::if (!(value.equals(other.value)))    return false;	false
org.jsoup.safety.Whitelist::::259::::9562::::9622::::java.util.Set<org.jsoup.safety.Whitelist.AttributeKey> attributeSet = new java.util.HashSet<org.jsoup.safety.Whitelist.AttributeKey>()::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.parser.HtmlTreeBuilderState::::1324::::62442::::62447::::org.jsoup.parser.HtmlTreeBuilderState.InBody::::org.jsoup.parser.HtmlTreeBuilderState.AfterFrameset	false
org.jsoup.safety.Cleaner::::136::::5716::::5755::::org.jsoup.nodes.Attributes destAttrs = new org.jsoup.nodes.Attributes()::::INSERT::::STATEMENT::::numDiscarded++	false
org.jsoup.safety.Cleaner::::111::::4605::::5018::::if ((source instanceof org.jsoup.nodes.DataNode) && (whitelist.isSafeTag(source.parent().nodeName()))) {    org.jsoup.nodes.DataNode sourceData = ((org.jsoup.nodes.DataNode) (source));    org.jsoup.nodes.DataNode destData = new org.jsoup.nodes.DataNode(sourceData.getWholeData(), source.baseUri());    destination.appendChild(destData);}else {    (numDiscarded)++;}::::INSERT::::STATEMENT::::(numDiscarded)++	false
org.jsoup.safety.Whitelist::::208::::7752::::7758::::tagName::::this.value	false
org.jsoup.safety.Cleaner::::135::::5669::::5706::::java.lang.String sourceTag = sourceEl.tagName()::::INSERT::::STATEMENT::::numDiscarded++	false
org.jsoup.safety.Whitelist::::260::::9632::::9765::::for (java.lang.String key : attributes) {    org.jsoup.helper.Validate.notEmpty(key);    attributeSet.add(org.jsoup.safety.Whitelist.AttributeKey.valueOf(key));}::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.parser.HtmlTreeBuilderState::::1324::::62442::::62447::::org.jsoup.parser.HtmlTreeBuilderState.InBody::::org.jsoup.parser.HtmlTreeBuilderState.AfterAfterBody	false
org.jsoup.safety.Cleaner::::121::::5098::::5122::::source instanceof org.jsoup.nodes.Element::::source != (root)	false
org.jsoup.safety.Cleaner::::95::::3745::::3780::::org.jsoup.nodes.Element sourceEl = ((org.jsoup.nodes.Element) (source))::::INSERT::::STATEMENT::::(numDiscarded)++	false
org.jsoup.safety.Cleaner::::137::::5765::::5846::::org.jsoup.nodes.Element dest = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(sourceTag), sourceEl.baseUri(), destAttrs)::::INSERT::::STATEMENT::::numDiscarded++	false
org.jsoup.parser.HtmlTreeBuilderState::::1324::::62442::::62447::::org.jsoup.parser.HtmlTreeBuilderState.InBody::::org.jsoup.parser.HtmlTreeBuilderState.AfterHead	false
org.jsoup.parser.HtmlTreeBuilderState::::1324::::62442::::62447::::org.jsoup.parser.HtmlTreeBuilderState.InBody::::org.jsoup.parser.HtmlTreeBuilderState.AfterAfterFrameset	false
org.jsoup.safety.Cleaner::::100::::4018::::4052::::destination.appendChild(destChild)::::INSERT::::STATEMENT::::(numDiscarded)++	false
org.jsoup.safety.Cleaner::::111::::4659::::4664::::source::::sourceText	false
org.jsoup.safety.Cleaner::::75::::2969::::3031::::org.jsoup.nodes.Document clean = org.jsoup.nodes.Document.createShell(dirtyDocument.baseUri())::::INSERT::::STATEMENT::::numDiscarded++	false
org.jsoup.safety.Cleaner::::109::::4516::::4521::::source::::sourceText	false
org.jsoup.safety.Whitelist::::615::::23159::::23163::::value::::new org.jsoup.nodes.Attributes()	false
org.jsoup.parser.HtmlTreeBuilderState::::320::::13718::::13732::::tb.error(this)::::INSERT::::STATEMENT::::if (lastNode == furthestBlock) {}	false
org.jsoup.safety.Cleaner::::73::::2927::::2958::::org.jsoup.helper.Validate.notNull(dirtyDocument)::::INSERT::::STATEMENT::::numDiscarded++	false
org.jsoup.safety.Cleaner::::109::::4516::::4521::::source::::destText	false
org.jsoup.safety.Whitelist::::523::::20664::::20668::::value::::prot	false
org.jsoup.safety.Cleaner::::135::::5688::::5695::::sourceEl::::this.root	false
org.jsoup.safety.Cleaner::::135::::5688::::5695::::sourceEl::::this.el	false
org.jsoup.safety.Cleaner::::135::::5688::::5695::::sourceEl::::this.destination	false
org.jsoup.safety.Cleaner::::135::::5688::::5695::::sourceEl::::el	false
org.jsoup.safety.Cleaner::::140::::5912::::5919::::sourceEl::::this.root	false
org.jsoup.safety.Cleaner::::140::::5912::::5919::::sourceEl::::this.el	false
org.jsoup.safety.Cleaner::::140::::5912::::5919::::sourceEl::::this.destination	false
org.jsoup.safety.Cleaner::::140::::5912::::5919::::sourceEl::::el	false
org.jsoup.safety.Cleaner::::97::::3799::::4328::::if (whitelist.isSafeTag(sourceEl.tagName())) {    org.jsoup.safety.Cleaner.ElementMeta meta = createSafeElement(sourceEl);    org.jsoup.nodes.Element destChild = meta.el;    destination.appendChild(destChild);    numDiscarded += meta.numAttribsDiscarded;    destination = destChild;}else    if (source != (root)) {        (numDiscarded)++;    }::::INSERT::::STATEMENT::::if (source != (root)) {    (numDiscarded)++;}	false
org.jsoup.safety.Whitelist::::252::::9287::::9309::::org.jsoup.helper.Validate.notEmpty(tag)::::DELETE::::STATEMENT	false
org.jsoup.safety.Whitelist::::416::::16272::::16326::::org.jsoup.safety.Whitelist.AttributeKey attrKey = org.jsoup.safety.Whitelist.AttributeKey.valueOf(attribute)::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.safety.Whitelist::::257::::9486::::9552::::if (!(tagNames.contains(tagName)))    tagNames.add(tagName);::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.safety.Cleaner::::97::::3799::::4328::::if (whitelist.isSafeTag(sourceEl.tagName())) {    org.jsoup.safety.Cleaner.ElementMeta meta = createSafeElement(sourceEl);    org.jsoup.nodes.Element destChild = meta.el;    destination.appendChild(destChild);    numDiscarded += meta.numAttribsDiscarded;    destination = destChild;}else    if (source != (root)) {        (numDiscarded)++;    }::::INSERT::::STATEMENT::::(numDiscarded)++	false
org.jsoup.safety.Cleaner::::111::::4659::::4664::::source::::this.root	false
org.jsoup.safety.Cleaner::::111::::4659::::4664::::source::::this.el	false
org.jsoup.safety.Cleaner::::111::::4659::::4664::::source::::this.destination	false
org.jsoup.safety.Cleaner::::111::::4659::::4664::::source::::el	false
org.jsoup.safety.Cleaner::::137::::5816::::5823::::sourceEl::::this.root	false
org.jsoup.safety.Cleaner::::137::::5816::::5823::::sourceEl::::this.el	false
org.jsoup.safety.Cleaner::::137::::5816::::5823::::sourceEl::::this.destination	false
org.jsoup.safety.Cleaner::::137::::5816::::5823::::sourceEl::::el	false
org.jsoup.safety.Cleaner::::94::::3696::::5018::::if (source instanceof org.jsoup.nodes.Element) {    org.jsoup.nodes.Element sourceEl = ((org.jsoup.nodes.Element) (source));    if (whitelist.isSafeTag(sourceEl.tagName())) {        org.jsoup.safety.Cleaner.ElementMeta meta = createSafeElement(sourceEl);        org.jsoup.nodes.Element destChild = meta.el;        destination.appendChild(destChild);        numDiscarded += meta.numAttribsDiscarded;        destination = destChild;    }else        if (source != (root)) {            (numDiscarded)++;        }}else    if (source instanceof org.jsoup.nodes.TextNode) {        org.jsoup.nodes.TextNode sourceText = ((org.jsoup.nodes.TextNode) (source));        org.jsoup.nodes.TextNode destText = new org.jsoup.nodes.TextNode(sourceText.getWholeText(), source.baseUri());        destination.appendChild(destText);    }else        if ((source instanceof org.jsoup.nodes.DataNode) && (whitelist.isSafeTag(source.parent().nodeName()))) {            org.jsoup.nodes.DataNode sourceData = ((org.jsoup.nodes.DataNode) (source));            org.jsoup.nodes.DataNode destData = new org.jsoup.nodes.DataNode(sourceData.getWholeData(), source.baseUri());            destination.appendChild(destData);        }else {            (numDiscarded)++;        }::::INSERT::::STATEMENT::::(numDiscarded)++	false
org.jsoup.parser.HtmlTreeBuilderState::::320::::13718::::13732::::tb.error(this)::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.safety.Cleaner::::111::::4659::::4664::::source::::destText	false
org.jsoup.safety.Whitelist::::628::::23637::::23648::::return true::::INSERT::::STATEMENT::::if ((other.value) != null)    return false;	false
org.jsoup.safety.Cleaner::::97::::3823::::3830::::sourceEl::::this.root	false
org.jsoup.safety.Cleaner::::97::::3823::::3830::::sourceEl::::this.el	false
org.jsoup.safety.Cleaner::::97::::3823::::3830::::sourceEl::::this.destination	false
org.jsoup.safety.Cleaner::::97::::3823::::3830::::sourceEl::::el	false
org.jsoup.safety.Cleaner::::98::::3938::::3945::::sourceEl::::this.root	false
org.jsoup.safety.Cleaner::::98::::3938::::3945::::sourceEl::::this.el	false
org.jsoup.safety.Cleaner::::98::::3938::::3945::::sourceEl::::this.destination	false
org.jsoup.safety.Cleaner::::98::::3938::::3945::::sourceEl::::el	false
org.jsoup.parser.HtmlTreeBuilder::::658::::23374::::23655::::for (int pos = (formattingElements.size()) - 1; pos >= 0; pos--) {    org.jsoup.nodes.Element next = formattingElements.get(pos);    if (next == null)        break;    else        if (next.nodeName().equals(nodeName))            return next;}::::INSERT::::STATEMENT::::if (baseUriSetFromDoc)    return ;	false
org.jsoup.safety.Cleaner::::111::::4659::::4664::::source::::sourceData	false
org.jsoup.safety.Cleaner::::109::::4516::::4521::::source::::this.root	false
org.jsoup.safety.Cleaner::::109::::4516::::4521::::source::::this.el	false
org.jsoup.safety.Cleaner::::109::::4516::::4521::::source::::this.destination	false
org.jsoup.safety.Cleaner::::109::::4516::::4521::::source::::el	false
org.jsoup.safety.Cleaner::::121::::5147::::5152::::source::::this.root	false
org.jsoup.safety.Cleaner::::121::::5147::::5152::::source::::this.el	false
org.jsoup.safety.Cleaner::::121::::5147::::5152::::source::::this.destination	false
org.jsoup.safety.Cleaner::::121::::5147::::5152::::source::::el	false
org.jsoup.safety.Cleaner::::107::::4349::::5018::::if (source instanceof org.jsoup.nodes.TextNode) {    org.jsoup.nodes.TextNode sourceText = ((org.jsoup.nodes.TextNode) (source));    org.jsoup.nodes.TextNode destText = new org.jsoup.nodes.TextNode(sourceText.getWholeText(), source.baseUri());    destination.appendChild(destText);}else    if ((source instanceof org.jsoup.nodes.DataNode) && (whitelist.isSafeTag(source.parent().nodeName()))) {        org.jsoup.nodes.DataNode sourceData = ((org.jsoup.nodes.DataNode) (source));        org.jsoup.nodes.DataNode destData = new org.jsoup.nodes.DataNode(sourceData.getWholeData(), source.baseUri());        destination.appendChild(destData);    }else {        (numDiscarded)++;    }::::INSERT::::STATEMENT::::if (source != (root)) {    (numDiscarded)++;}	false
org.jsoup.safety.Cleaner::::109::::4516::::4521::::source::::sourceData	false
org.jsoup.safety.Whitelist::::627::::23584::::23588::::value::::new org.jsoup.nodes.Attributes()	false
org.jsoup.safety.Whitelist::::627::::23611::::23623::::return false::::INSERT::::STATEMENT::::if (!(value.equals(other.value)))    return false;	false
org.jsoup.safety.Cleaner::::111::::4659::::4664::::source::::destData	false
org.jsoup.safety.Whitelist::::627::::23584::::23588::::value::::":"	false
org.jsoup.nodes.Document::::43::::1263::::1269::::baseUri::::location	false
org.jsoup.nodes.Document::::41::::1216::::1222::::baseUri::::location	false
org.jsoup.parser.HtmlTreeBuilderState::::327::::14123::::14176::::org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartToHead)::::INSERT::::STATEMENT::::if (notIgnored)    return tb.process(endTag);	false
org.jsoup.safety.Whitelist::::615::::23159::::23163::::value::::":"	false
org.jsoup.safety.Cleaner::::109::::4516::::4521::::source::::destData	false
org.jsoup.parser.HtmlTreeBuilderState::::1324::::62428::::62429::::tb::::org.jsoup.parser.HtmlTreeBuilderState.InBody	false
org.jsoup.safety.Cleaner::::111::::4605::::5018::::if ((source instanceof org.jsoup.nodes.DataNode) && (whitelist.isSafeTag(source.parent().nodeName()))) {    org.jsoup.nodes.DataNode sourceData = ((org.jsoup.nodes.DataNode) (source));    org.jsoup.nodes.DataNode destData = new org.jsoup.nodes.DataNode(sourceData.getWholeData(), source.baseUri());    destination.appendChild(destData);}else {    (numDiscarded)++;}::::INSERT::::STATEMENT::::numDiscarded++	false
org.jsoup.parser.HtmlTreeBuilderState::::327::::14119::::26817::::if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartToHead)) {    return tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead);}else    if (name.equals("body")) {        tb.error(this);        java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();        if (((stack.size()) == 1) || (((stack.size()) > 2) && (!(stack.get(1).nodeName().equals("body"))))) {            return false;        }else {            tb.framesetOk(false);            org.jsoup.nodes.Element body = stack.get(1);            for (org.jsoup.nodes.Attribute attribute : startTag.getAttributes()) {                if (!(body.hasAttr(attribute.getKey())))                    body.attributes().put(attribute);            }        }    }else        if (name.equals("frameset")) {            tb.error(this);            java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();            if (((stack.size()) == 1) || (((stack.size()) > 2) && (!(stack.get(1).nodeName().equals("body"))))) {                return false;            }else                if (!(tb.framesetOk())) {                    return false;                }else {                    org.jsoup.nodes.Element second = stack.get(1);                    if ((second.parent()) != null)                        second.remove();                    while ((stack.size()) > 1)                        stack.remove(((stack.size()) - 1));                    tb.insert(startTag);                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InFrameset);                }        }else            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.Headings)) {                if (tb.inButtonScope("p")) {                    tb.processEndTag("p");                }                if (org.jsoup.helper.StringUtil.inSorted(tb.currentElement().nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.Headings)) {                    tb.error(this);                    tb.pop();                }                tb.insert(startTag);            }else                if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartPreListing)) {                    if (tb.inButtonScope("p")) {                        tb.processEndTag("p");                    }                    tb.insert(startTag);                    tb.framesetOk(false);                }else                    if (name.equals("form")) {                        if ((tb.getFormElement()) != null) {                            tb.error(this);                            return false;                        }                        if (tb.inButtonScope("p")) {                            tb.processEndTag("p");                        }                        tb.insertForm(startTag, true);                    }else                        if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.DdDt)) {                            tb.framesetOk(false);                            java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();                            for (int i = (stack.size()) - 1; i > 0; i--) {                                org.jsoup.nodes.Element el = stack.get(i);                                if (org.jsoup.helper.StringUtil.inSorted(el.nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.DdDt)) {                                    tb.processEndTag(el.nodeName());                                    break;                                }                                if ((tb.isSpecial(el)) && (!(org.jsoup.helper.StringUtil.inSorted(el.nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartLiBreakers))))                                    break;                            }                            if (tb.inButtonScope("p")) {                                tb.processEndTag("p");                            }                            tb.insert(startTag);                        }else                            if (name.equals("plaintext")) {                                if (tb.inButtonScope("p")) {                                    tb.processEndTag("p");                                }                                tb.insert(startTag);                                tb.tokeniser.transition(org.jsoup.parser.TokeniserState.PLAINTEXT);                            }else                                if (name.equals("button")) {                                    if (tb.inButtonScope("button")) {                                        tb.error(this);                                        tb.processEndTag("button");                                        tb.process(startTag);                                    }else {                                        tb.reconstructFormattingElements();                                        tb.insert(startTag);                                        tb.framesetOk(false);                                    }                                }else                                    if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.Formatters)) {                                        tb.reconstructFormattingElements();                                        org.jsoup.nodes.Element el = tb.insert(startTag);                                        tb.pushActiveFormattingElements(el);                                    }else                                        if (name.equals("nobr")) {                                            tb.reconstructFormattingElements();                                            if (tb.inScope("nobr")) {                                                tb.error(this);                                                tb.processEndTag("nobr");                                                tb.reconstructFormattingElements();                                            }                                            org.jsoup.nodes.Element el = tb.insert(startTag);                                            tb.pushActiveFormattingElements(el);                                        }else                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartApplets)) {                                                tb.reconstructFormattingElements();                                                tb.insert(startTag);                                                tb.insertMarkerToFormattingElements();                                                tb.framesetOk(false);                                            }else                                                if (name.equals("table")) {                                                    if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                                                        tb.processEndTag("p");                                                    }                                                    tb.insert(startTag);                                                    tb.framesetOk(false);                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                                                }else                                                    if (name.equals("input")) {                                                        tb.reconstructFormattingElements();                                                        org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                                                        if (!(el.attr("type").equalsIgnoreCase("hidden")))                                                            tb.framesetOk(false);                                                    }else                                                        if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartMedia)) {                                                            tb.insertEmpty(startTag);                                                        }else                                                            if (name.equals("hr")) {                                                                if (tb.inButtonScope("p")) {                                                                    tb.processEndTag("p");                                                                }                                                                tb.insertEmpty(startTag);                                                                tb.framesetOk(false);                                                            }else                                                                if (name.equals("image")) {                                                                    if ((tb.getFromStack("svg")) == null)                                                                        return tb.process(startTag.name("img"));                                                                    else                                                                        tb.insert(startTag);                                                                }else                                                                    if (name.equals("isindex")) {                                                                        tb.error(this);                                                                        if ((tb.getFormElement()) != null)                                                                            return false;                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                        tb.processStartTag("form");                                                                        if (startTag.attributes.hasKey("action")) {                                                                            org.jsoup.nodes.Element form = tb.getFormElement();                                                                            form.attr("action", startTag.attributes.get("action"));                                                                        }                                                                        tb.processStartTag("hr");                                                                        tb.processStartTag("label");                                                                        java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                                                        tb.process(new org.jsoup.parser.Token.Character().data(prompt));                                                                        org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                                                        for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                                                            if (!(org.jsoup.helper.StringUtil.inSorted(attr.getKey(), org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartInputAttribs)))                                                                                inputAttribs.put(attr);                                                                        }                                                                        inputAttribs.put("name", "isindex");                                                                        tb.processStartTag("input", inputAttribs);                                                                        tb.processEndTag("label");                                                                        tb.processStartTag("hr");                                                                        tb.processEndTag("form");                                                                    }else                                                                        if (name.equals("textarea")) {                                                                            tb.insert(startTag);                                                                            tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                                                            tb.markInsertionMode();                                                                            tb.framesetOk(false);                                                                            tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                                                        }else                                                                            if (name.equals("xmp")) {                                                                                if (tb.inButtonScope("p")) {                                                                                    tb.processEndTag("p");                                                                                }                                                                                tb.reconstructFormattingElements();                                                                                tb.framesetOk(false);                                                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                                            }else                                                                                if (name.equals("iframe")) {                                                                                    tb.framesetOk(false);                                                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                                                }else                                                                                    if (name.equals("noembed")) {                                                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                                                    }else                                                                                        if (name.equals("select")) {                                                                                            tb.reconstructFormattingElements();                                                                                            tb.insert(startTag);                                                                                            tb.framesetOk(false);                                                                                            org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                                                            if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                                                            else                                                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                                                        }else                                                                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartOptions)) {                                                                                                if (tb.currentElement().nodeName().equals("option"))                                                                                                    tb.processEndTag("option");                                                                                                tb.reconstructFormattingElements();                                                                                                tb.insert(startTag);                                                                                            }else                                                                                                if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartRuby)) {                                                                                                    if (tb.inScope("ruby")) {                                                                                                        tb.generateImpliedEndTags();                                                                                                        if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                                                            tb.error(this);                                                                                                            tb.popStackToBefore("ruby");                                                                                                        }                                                                                                        tb.insert(startTag);                                                                                                    }                                                                                                }else                                                                                                    if (name.equals("math")) {                                                                                                        tb.reconstructFormattingElements();                                                                                                        tb.insert(startTag);                                                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                                    }else                                                                                                        if (name.equals("svg")) {                                                                                                            tb.reconstructFormattingElements();                                                                                                            tb.insert(startTag);                                                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                                        }else                                                                                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartDrop)) {                                                                                                                tb.error(this);                                                                                                                return false;                                                                                                            }else {                                                                                                                tb.reconstructFormattingElements();                                                                                                                tb.insert(startTag);                                                                                                            }::::INSERT::::STATEMENT::::if (lastNode == furthestBlock) {}	false
org.jsoup.safety.Whitelist::::412::::16166::::16174::::attribute::::this.value	false
org.jsoup.parser.HtmlTreeBuilderState::::327::::14119::::26817::::if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartToHead)) {    return tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead);}else    if (name.equals("body")) {        tb.error(this);        java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();        if (((stack.size()) == 1) || (((stack.size()) > 2) && (!(stack.get(1).nodeName().equals("body"))))) {            return false;        }else {            tb.framesetOk(false);            org.jsoup.nodes.Element body = stack.get(1);            for (org.jsoup.nodes.Attribute attribute : startTag.getAttributes()) {                if (!(body.hasAttr(attribute.getKey())))                    body.attributes().put(attribute);            }        }    }else        if (name.equals("frameset")) {            tb.error(this);            java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();            if (((stack.size()) == 1) || (((stack.size()) > 2) && (!(stack.get(1).nodeName().equals("body"))))) {                return false;            }else                if (!(tb.framesetOk())) {                    return false;                }else {                    org.jsoup.nodes.Element second = stack.get(1);                    if ((second.parent()) != null)                        second.remove();                    while ((stack.size()) > 1)                        stack.remove(((stack.size()) - 1));                    tb.insert(startTag);                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InFrameset);                }        }else            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.Headings)) {                if (tb.inButtonScope("p")) {                    tb.processEndTag("p");                }                if (org.jsoup.helper.StringUtil.inSorted(tb.currentElement().nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.Headings)) {                    tb.error(this);                    tb.pop();                }                tb.insert(startTag);            }else                if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartPreListing)) {                    if (tb.inButtonScope("p")) {                        tb.processEndTag("p");                    }                    tb.insert(startTag);                    tb.framesetOk(false);                }else                    if (name.equals("form")) {                        if ((tb.getFormElement()) != null) {                            tb.error(this);                            return false;                        }                        if (tb.inButtonScope("p")) {                            tb.processEndTag("p");                        }                        tb.insertForm(startTag, true);                    }else                        if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.DdDt)) {                            tb.framesetOk(false);                            java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();                            for (int i = (stack.size()) - 1; i > 0; i--) {                                org.jsoup.nodes.Element el = stack.get(i);                                if (org.jsoup.helper.StringUtil.inSorted(el.nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.DdDt)) {                                    tb.processEndTag(el.nodeName());                                    break;                                }                                if ((tb.isSpecial(el)) && (!(org.jsoup.helper.StringUtil.inSorted(el.nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartLiBreakers))))                                    break;                            }                            if (tb.inButtonScope("p")) {                                tb.processEndTag("p");                            }                            tb.insert(startTag);                        }else                            if (name.equals("plaintext")) {                                if (tb.inButtonScope("p")) {                                    tb.processEndTag("p");                                }                                tb.insert(startTag);                                tb.tokeniser.transition(org.jsoup.parser.TokeniserState.PLAINTEXT);                            }else                                if (name.equals("button")) {                                    if (tb.inButtonScope("button")) {                                        tb.error(this);                                        tb.processEndTag("button");                                        tb.process(startTag);                                    }else {                                        tb.reconstructFormattingElements();                                        tb.insert(startTag);                                        tb.framesetOk(false);                                    }                                }else                                    if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.Formatters)) {                                        tb.reconstructFormattingElements();                                        org.jsoup.nodes.Element el = tb.insert(startTag);                                        tb.pushActiveFormattingElements(el);                                    }else                                        if (name.equals("nobr")) {                                            tb.reconstructFormattingElements();                                            if (tb.inScope("nobr")) {                                                tb.error(this);                                                tb.processEndTag("nobr");                                                tb.reconstructFormattingElements();                                            }                                            org.jsoup.nodes.Element el = tb.insert(startTag);                                            tb.pushActiveFormattingElements(el);                                        }else                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartApplets)) {                                                tb.reconstructFormattingElements();                                                tb.insert(startTag);                                                tb.insertMarkerToFormattingElements();                                                tb.framesetOk(false);                                            }else                                                if (name.equals("table")) {                                                    if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                                                        tb.processEndTag("p");                                                    }                                                    tb.insert(startTag);                                                    tb.framesetOk(false);                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                                                }else                                                    if (name.equals("input")) {                                                        tb.reconstructFormattingElements();                                                        org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                                                        if (!(el.attr("type").equalsIgnoreCase("hidden")))                                                            tb.framesetOk(false);                                                    }else                                                        if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartMedia)) {                                                            tb.insertEmpty(startTag);                                                        }else                                                            if (name.equals("hr")) {                                                                if (tb.inButtonScope("p")) {                                                                    tb.processEndTag("p");                                                                }                                                                tb.insertEmpty(startTag);                                                                tb.framesetOk(false);                                                            }else                                                                if (name.equals("image")) {                                                                    if ((tb.getFromStack("svg")) == null)                                                                        return tb.process(startTag.name("img"));                                                                    else                                                                        tb.insert(startTag);                                                                }else                                                                    if (name.equals("isindex")) {                                                                        tb.error(this);                                                                        if ((tb.getFormElement()) != null)                                                                            return false;                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                        tb.processStartTag("form");                                                                        if (startTag.attributes.hasKey("action")) {                                                                            org.jsoup.nodes.Element form = tb.getFormElement();                                                                            form.attr("action", startTag.attributes.get("action"));                                                                        }                                                                        tb.processStartTag("hr");                                                                        tb.processStartTag("label");                                                                        java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                                                        tb.process(new org.jsoup.parser.Token.Character().data(prompt));                                                                        org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                                                        for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                                                            if (!(org.jsoup.helper.StringUtil.inSorted(attr.getKey(), org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartInputAttribs)))                                                                                inputAttribs.put(attr);                                                                        }                                                                        inputAttribs.put("name", "isindex");                                                                        tb.processStartTag("input", inputAttribs);                                                                        tb.processEndTag("label");                                                                        tb.processStartTag("hr");                                                                        tb.processEndTag("form");                                                                    }else                                                                        if (name.equals("textarea")) {                                                                            tb.insert(startTag);                                                                            tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                                                            tb.markInsertionMode();                                                                            tb.framesetOk(false);                                                                            tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                                                        }else                                                                            if (name.equals("xmp")) {                                                                                if (tb.inButtonScope("p")) {                                                                                    tb.processEndTag("p");                                                                                }                                                                                tb.reconstructFormattingElements();                                                                                tb.framesetOk(false);                                                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                                            }else                                                                                if (name.equals("iframe")) {                                                                                    tb.framesetOk(false);                                                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                                                }else                                                                                    if (name.equals("noembed")) {                                                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                                                    }else                                                                                        if (name.equals("select")) {                                                                                            tb.reconstructFormattingElements();                                                                                            tb.insert(startTag);                                                                                            tb.framesetOk(false);                                                                                            org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                                                            if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                                                            else                                                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                                                        }else                                                                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartOptions)) {                                                                                                if (tb.currentElement().nodeName().equals("option"))                                                                                                    tb.processEndTag("option");                                                                                                tb.reconstructFormattingElements();                                                                                                tb.insert(startTag);                                                                                            }else                                                                                                if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartRuby)) {                                                                                                    if (tb.inScope("ruby")) {                                                                                                        tb.generateImpliedEndTags();                                                                                                        if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                                                            tb.error(this);                                                                                                            tb.popStackToBefore("ruby");                                                                                                        }                                                                                                        tb.insert(startTag);                                                                                                    }                                                                                                }else                                                                                                    if (name.equals("math")) {                                                                                                        tb.reconstructFormattingElements();                                                                                                        tb.insert(startTag);                                                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                                    }else                                                                                                        if (name.equals("svg")) {                                                                                                            tb.reconstructFormattingElements();                                                                                                            tb.insert(startTag);                                                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                                        }else                                                                                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartDrop)) {                                                                                                                tb.error(this);                                                                                                                return false;                                                                                                            }else {                                                                                                                tb.reconstructFormattingElements();                                                                                                                tb.insert(startTag);                                                                                                            }::::INSERT::::STATEMENT::::tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead)	false
org.jsoup.safety.Cleaner::::97::::3803::::3841::::whitelist.isSafeTag(sourceEl.tagName())::::INSERT::::STATEMENT::::numDiscarded++	false
org.jsoup.safety.Cleaner::::107::::4349::::5018::::if (source instanceof org.jsoup.nodes.TextNode) {    org.jsoup.nodes.TextNode sourceText = ((org.jsoup.nodes.TextNode) (source));    org.jsoup.nodes.TextNode destText = new org.jsoup.nodes.TextNode(sourceText.getWholeText(), source.baseUri());    destination.appendChild(destText);}else    if ((source instanceof org.jsoup.nodes.DataNode) && (whitelist.isSafeTag(source.parent().nodeName()))) {        org.jsoup.nodes.DataNode sourceData = ((org.jsoup.nodes.DataNode) (source));        org.jsoup.nodes.DataNode destData = new org.jsoup.nodes.DataNode(sourceData.getWholeData(), source.baseUri());        destination.appendChild(destData);    }else {        (numDiscarded)++;    }::::INSERT::::STATEMENT::::(numDiscarded)++	false
org.jsoup.safety.Cleaner::::95::::3745::::3780::::org.jsoup.nodes.Element sourceEl = ((org.jsoup.nodes.Element) (source))::::INSERT::::STATEMENT::::numDiscarded++	false
org.jsoup.safety.Whitelist::::627::::23584::::23588::::value::::".*\\s.*"	false
org.jsoup.safety.Whitelist::::615::::23159::::23163::::value::::".*\\s.*"	false
org.jsoup.safety.Whitelist::::627::::23611::::23623::::return false::::INSERT::::STATEMENT::::if ((other.value) != null)    return false;	false
org.jsoup.parser.HtmlTreeBuilder::::658::::23374::::23655::::for (int pos = (formattingElements.size()) - 1; pos >= 0; pos--) {    org.jsoup.nodes.Element next = formattingElements.get(pos);    if (next == null)        break;    else        if (next.nodeName().equals(nodeName))            return next;}::::INSERT::::STATEMENT::::pop()	false
org.jsoup.safety.Whitelist::::627::::23584::::23588::::value::::other.value	false
org.jsoup.safety.Whitelist::::627::::23584::::23588::::value::::other	false
org.jsoup.safety.Cleaner::::141::::5943::::6162::::for (org.jsoup.nodes.Attribute sourceAttr : sourceAttrs) {    if (whitelist.isSafeAttribute(sourceTag, sourceEl, sourceAttr))        destAttrs.put(sourceAttr);    else        numDiscarded++;}::::INSERT::::STATEMENT::::(numDiscarded)++	false
org.jsoup.safety.Whitelist::::437::::17050::::17061::::return this::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.safety.Whitelist::::252::::9287::::9309::::org.jsoup.helper.Validate.notEmpty(tag)::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.safety.Whitelist::::411::::16116::::16138::::org.jsoup.helper.Validate.notEmpty(tag)::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.safety.Whitelist::::615::::23159::::23163::::value::::this.value	false
org.jsoup.safety.Whitelist::::416::::16316::::16324::::attribute::::this.value	false
org.jsoup.parser.HtmlTreeBuilder::::658::::23389::::23413::::formattingElements.size()::::DELETE::::INFIX	false
org.jsoup.safety.Whitelist::::627::::23584::::23588::::value::::this.value	false
org.jsoup.parser.HtmlTreeBuilderState::::320::::13718::::13732::::tb.error(this)::::INSERT::::STATEMENT::::org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb)	false
org.jsoup.safety.Whitelist::::211::::7832::::7843::::return this::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.safety.Whitelist::::270::::10028::::10039::::return this::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.safety.Cleaner::::97::::3799::::4328::::if (whitelist.isSafeTag(sourceEl.tagName())) {    org.jsoup.safety.Cleaner.ElementMeta meta = createSafeElement(sourceEl);    org.jsoup.nodes.Element destChild = meta.el;    destination.appendChild(destChild);    numDiscarded += meta.numAttribsDiscarded;    destination = destChild;}else    if (source != (root)) {        (numDiscarded)++;    }::::INSERT::::STATEMENT::::numDiscarded++	false
org.jsoup.parser.HtmlTreeBuilderState::::320::::13718::::13732::::tb.error(this)::::INSERT::::STATEMENT::::if (node == formatEl)    break;	false
org.jsoup.parser.HtmlTreeBuilderState::::327::::14119::::26817::::if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartToHead)) {    return tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead);}else    if (name.equals("body")) {        tb.error(this);        java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();        if (((stack.size()) == 1) || (((stack.size()) > 2) && (!(stack.get(1).nodeName().equals("body"))))) {            return false;        }else {            tb.framesetOk(false);            org.jsoup.nodes.Element body = stack.get(1);            for (org.jsoup.nodes.Attribute attribute : startTag.getAttributes()) {                if (!(body.hasAttr(attribute.getKey())))                    body.attributes().put(attribute);            }        }    }else        if (name.equals("frameset")) {            tb.error(this);            java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();            if (((stack.size()) == 1) || (((stack.size()) > 2) && (!(stack.get(1).nodeName().equals("body"))))) {                return false;            }else                if (!(tb.framesetOk())) {                    return false;                }else {                    org.jsoup.nodes.Element second = stack.get(1);                    if ((second.parent()) != null)                        second.remove();                    while ((stack.size()) > 1)                        stack.remove(((stack.size()) - 1));                    tb.insert(startTag);                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InFrameset);                }        }else            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.Headings)) {                if (tb.inButtonScope("p")) {                    tb.processEndTag("p");                }                if (org.jsoup.helper.StringUtil.inSorted(tb.currentElement().nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.Headings)) {                    tb.error(this);                    tb.pop();                }                tb.insert(startTag);            }else                if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartPreListing)) {                    if (tb.inButtonScope("p")) {                        tb.processEndTag("p");                    }                    tb.insert(startTag);                    tb.framesetOk(false);                }else                    if (name.equals("form")) {                        if ((tb.getFormElement()) != null) {                            tb.error(this);                            return false;                        }                        if (tb.inButtonScope("p")) {                            tb.processEndTag("p");                        }                        tb.insertForm(startTag, true);                    }else                        if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.DdDt)) {                            tb.framesetOk(false);                            java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();                            for (int i = (stack.size()) - 1; i > 0; i--) {                                org.jsoup.nodes.Element el = stack.get(i);                                if (org.jsoup.helper.StringUtil.inSorted(el.nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.DdDt)) {                                    tb.processEndTag(el.nodeName());                                    break;                                }                                if ((tb.isSpecial(el)) && (!(org.jsoup.helper.StringUtil.inSorted(el.nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartLiBreakers))))                                    break;                            }                            if (tb.inButtonScope("p")) {                                tb.processEndTag("p");                            }                            tb.insert(startTag);                        }else                            if (name.equals("plaintext")) {                                if (tb.inButtonScope("p")) {                                    tb.processEndTag("p");                                }                                tb.insert(startTag);                                tb.tokeniser.transition(org.jsoup.parser.TokeniserState.PLAINTEXT);                            }else                                if (name.equals("button")) {                                    if (tb.inButtonScope("button")) {                                        tb.error(this);                                        tb.processEndTag("button");                                        tb.process(startTag);                                    }else {                                        tb.reconstructFormattingElements();                                        tb.insert(startTag);                                        tb.framesetOk(false);                                    }                                }else                                    if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.Formatters)) {                                        tb.reconstructFormattingElements();                                        org.jsoup.nodes.Element el = tb.insert(startTag);                                        tb.pushActiveFormattingElements(el);                                    }else                                        if (name.equals("nobr")) {                                            tb.reconstructFormattingElements();                                            if (tb.inScope("nobr")) {                                                tb.error(this);                                                tb.processEndTag("nobr");                                                tb.reconstructFormattingElements();                                            }                                            org.jsoup.nodes.Element el = tb.insert(startTag);                                            tb.pushActiveFormattingElements(el);                                        }else                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartApplets)) {                                                tb.reconstructFormattingElements();                                                tb.insert(startTag);                                                tb.insertMarkerToFormattingElements();                                                tb.framesetOk(false);                                            }else                                                if (name.equals("table")) {                                                    if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                                                        tb.processEndTag("p");                                                    }                                                    tb.insert(startTag);                                                    tb.framesetOk(false);                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                                                }else                                                    if (name.equals("input")) {                                                        tb.reconstructFormattingElements();                                                        org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                                                        if (!(el.attr("type").equalsIgnoreCase("hidden")))                                                            tb.framesetOk(false);                                                    }else                                                        if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartMedia)) {                                                            tb.insertEmpty(startTag);                                                        }else                                                            if (name.equals("hr")) {                                                                if (tb.inButtonScope("p")) {                                                                    tb.processEndTag("p");                                                                }                                                                tb.insertEmpty(startTag);                                                                tb.framesetOk(false);                                                            }else                                                                if (name.equals("image")) {                                                                    if ((tb.getFromStack("svg")) == null)                                                                        return tb.process(startTag.name("img"));                                                                    else                                                                        tb.insert(startTag);                                                                }else                                                                    if (name.equals("isindex")) {                                                                        tb.error(this);                                                                        if ((tb.getFormElement()) != null)                                                                            return false;                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                        tb.processStartTag("form");                                                                        if (startTag.attributes.hasKey("action")) {                                                                            org.jsoup.nodes.Element form = tb.getFormElement();                                                                            form.attr("action", startTag.attributes.get("action"));                                                                        }                                                                        tb.processStartTag("hr");                                                                        tb.processStartTag("label");                                                                        java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                                                        tb.process(new org.jsoup.parser.Token.Character().data(prompt));                                                                        org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                                                        for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                                                            if (!(org.jsoup.helper.StringUtil.inSorted(attr.getKey(), org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartInputAttribs)))                                                                                inputAttribs.put(attr);                                                                        }                                                                        inputAttribs.put("name", "isindex");                                                                        tb.processStartTag("input", inputAttribs);                                                                        tb.processEndTag("label");                                                                        tb.processStartTag("hr");                                                                        tb.processEndTag("form");                                                                    }else                                                                        if (name.equals("textarea")) {                                                                            tb.insert(startTag);                                                                            tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                                                            tb.markInsertionMode();                                                                            tb.framesetOk(false);                                                                            tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                                                        }else                                                                            if (name.equals("xmp")) {                                                                                if (tb.inButtonScope("p")) {                                                                                    tb.processEndTag("p");                                                                                }                                                                                tb.reconstructFormattingElements();                                                                                tb.framesetOk(false);                                                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                                            }else                                                                                if (name.equals("iframe")) {                                                                                    tb.framesetOk(false);                                                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                                                }else                                                                                    if (name.equals("noembed")) {                                                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                                                    }else                                                                                        if (name.equals("select")) {                                                                                            tb.reconstructFormattingElements();                                                                                            tb.insert(startTag);                                                                                            tb.framesetOk(false);                                                                                            org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                                                            if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                                                            else                                                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                                                        }else                                                                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartOptions)) {                                                                                                if (tb.currentElement().nodeName().equals("option"))                                                                                                    tb.processEndTag("option");                                                                                                tb.reconstructFormattingElements();                                                                                                tb.insert(startTag);                                                                                            }else                                                                                                if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartRuby)) {                                                                                                    if (tb.inScope("ruby")) {                                                                                                        tb.generateImpliedEndTags();                                                                                                        if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                                                            tb.error(this);                                                                                                            tb.popStackToBefore("ruby");                                                                                                        }                                                                                                        tb.insert(startTag);                                                                                                    }                                                                                                }else                                                                                                    if (name.equals("math")) {                                                                                                        tb.reconstructFormattingElements();                                                                                                        tb.insert(startTag);                                                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                                    }else                                                                                                        if (name.equals("svg")) {                                                                                                            tb.reconstructFormattingElements();                                                                                                            tb.insert(startTag);                                                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                                        }else                                                                                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartDrop)) {                                                                                                                tb.error(this);                                                                                                                return false;                                                                                                            }else {                                                                                                                tb.reconstructFormattingElements();                                                                                                                tb.insert(startTag);                                                                                                            }::::INSERT::::STATEMENT::::org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb)	false
org.jsoup.safety.Cleaner::::107::::4349::::5018::::if (source instanceof org.jsoup.nodes.TextNode) {    org.jsoup.nodes.TextNode sourceText = ((org.jsoup.nodes.TextNode) (source));    org.jsoup.nodes.TextNode destText = new org.jsoup.nodes.TextNode(sourceText.getWholeText(), source.baseUri());    destination.appendChild(destText);}else    if ((source instanceof org.jsoup.nodes.DataNode) && (whitelist.isSafeTag(source.parent().nodeName()))) {        org.jsoup.nodes.DataNode sourceData = ((org.jsoup.nodes.DataNode) (source));        org.jsoup.nodes.DataNode destData = new org.jsoup.nodes.DataNode(sourceData.getWholeData(), source.baseUri());        destination.appendChild(destData);    }else {        (numDiscarded)++;    }::::INSERT::::STATEMENT::::numDiscarded++	false
org.jsoup.safety.Whitelist::::256::::9438::::9476::::org.jsoup.safety.Whitelist.TagName tagName = org.jsoup.safety.Whitelist.TagName.valueOf(tag)::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.parser.HtmlTreeBuilderState::::320::::13718::::13732::::tb.error(this)::::INSERT::::STATEMENT::::closeCell(tb)	false
org.jsoup.safety.Cleaner::::94::::3696::::5018::::if (source instanceof org.jsoup.nodes.Element) {    org.jsoup.nodes.Element sourceEl = ((org.jsoup.nodes.Element) (source));    if (whitelist.isSafeTag(sourceEl.tagName())) {        org.jsoup.safety.Cleaner.ElementMeta meta = createSafeElement(sourceEl);        org.jsoup.nodes.Element destChild = meta.el;        destination.appendChild(destChild);        numDiscarded += meta.numAttribsDiscarded;        destination = destChild;    }else        if (source != (root)) {            (numDiscarded)++;        }}else    if (source instanceof org.jsoup.nodes.TextNode) {        org.jsoup.nodes.TextNode sourceText = ((org.jsoup.nodes.TextNode) (source));        org.jsoup.nodes.TextNode destText = new org.jsoup.nodes.TextNode(sourceText.getWholeText(), source.baseUri());        destination.appendChild(destText);    }else        if ((source instanceof org.jsoup.nodes.DataNode) && (whitelist.isSafeTag(source.parent().nodeName()))) {            org.jsoup.nodes.DataNode sourceData = ((org.jsoup.nodes.DataNode) (source));            org.jsoup.nodes.DataNode destData = new org.jsoup.nodes.DataNode(sourceData.getWholeData(), source.baseUri());            destination.appendChild(destData);        }else {            (numDiscarded)++;        }::::INSERT::::STATEMENT::::if (source != (root)) {    (numDiscarded)++;}	false
org.jsoup.safety.Whitelist::::486::::18955::::18957::::tag::::this.value	false
org.jsoup.parser.HtmlTreeBuilderState::::1324::::62428::::62429::::tb::::org.jsoup.parser.HtmlTreeBuilderState.InHead	false
org.jsoup.parser.HtmlTreeBuilderState::::327::::14119::::26817::::if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartToHead)) {    return tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead);}else    if (name.equals("body")) {        tb.error(this);        java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();        if (((stack.size()) == 1) || (((stack.size()) > 2) && (!(stack.get(1).nodeName().equals("body"))))) {            return false;        }else {            tb.framesetOk(false);            org.jsoup.nodes.Element body = stack.get(1);            for (org.jsoup.nodes.Attribute attribute : startTag.getAttributes()) {                if (!(body.hasAttr(attribute.getKey())))                    body.attributes().put(attribute);            }        }    }else        if (name.equals("frameset")) {            tb.error(this);            java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();            if (((stack.size()) == 1) || (((stack.size()) > 2) && (!(stack.get(1).nodeName().equals("body"))))) {                return false;            }else                if (!(tb.framesetOk())) {                    return false;                }else {                    org.jsoup.nodes.Element second = stack.get(1);                    if ((second.parent()) != null)                        second.remove();                    while ((stack.size()) > 1)                        stack.remove(((stack.size()) - 1));                    tb.insert(startTag);                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InFrameset);                }        }else            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.Headings)) {                if (tb.inButtonScope("p")) {                    tb.processEndTag("p");                }                if (org.jsoup.helper.StringUtil.inSorted(tb.currentElement().nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.Headings)) {                    tb.error(this);                    tb.pop();                }                tb.insert(startTag);            }else                if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartPreListing)) {                    if (tb.inButtonScope("p")) {                        tb.processEndTag("p");                    }                    tb.insert(startTag);                    tb.framesetOk(false);                }else                    if (name.equals("form")) {                        if ((tb.getFormElement()) != null) {                            tb.error(this);                            return false;                        }                        if (tb.inButtonScope("p")) {                            tb.processEndTag("p");                        }                        tb.insertForm(startTag, true);                    }else                        if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.DdDt)) {                            tb.framesetOk(false);                            java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();                            for (int i = (stack.size()) - 1; i > 0; i--) {                                org.jsoup.nodes.Element el = stack.get(i);                                if (org.jsoup.helper.StringUtil.inSorted(el.nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.DdDt)) {                                    tb.processEndTag(el.nodeName());                                    break;                                }                                if ((tb.isSpecial(el)) && (!(org.jsoup.helper.StringUtil.inSorted(el.nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartLiBreakers))))                                    break;                            }                            if (tb.inButtonScope("p")) {                                tb.processEndTag("p");                            }                            tb.insert(startTag);                        }else                            if (name.equals("plaintext")) {                                if (tb.inButtonScope("p")) {                                    tb.processEndTag("p");                                }                                tb.insert(startTag);                                tb.tokeniser.transition(org.jsoup.parser.TokeniserState.PLAINTEXT);                            }else                                if (name.equals("button")) {                                    if (tb.inButtonScope("button")) {                                        tb.error(this);                                        tb.processEndTag("button");                                        tb.process(startTag);                                    }else {                                        tb.reconstructFormattingElements();                                        tb.insert(startTag);                                        tb.framesetOk(false);                                    }                                }else                                    if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.Formatters)) {                                        tb.reconstructFormattingElements();                                        org.jsoup.nodes.Element el = tb.insert(startTag);                                        tb.pushActiveFormattingElements(el);                                    }else                                        if (name.equals("nobr")) {                                            tb.reconstructFormattingElements();                                            if (tb.inScope("nobr")) {                                                tb.error(this);                                                tb.processEndTag("nobr");                                                tb.reconstructFormattingElements();                                            }                                            org.jsoup.nodes.Element el = tb.insert(startTag);                                            tb.pushActiveFormattingElements(el);                                        }else                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartApplets)) {                                                tb.reconstructFormattingElements();                                                tb.insert(startTag);                                                tb.insertMarkerToFormattingElements();                                                tb.framesetOk(false);                                            }else                                                if (name.equals("table")) {                                                    if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                                                        tb.processEndTag("p");                                                    }                                                    tb.insert(startTag);                                                    tb.framesetOk(false);                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                                                }else                                                    if (name.equals("input")) {                                                        tb.reconstructFormattingElements();                                                        org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                                                        if (!(el.attr("type").equalsIgnoreCase("hidden")))                                                            tb.framesetOk(false);                                                    }else                                                        if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartMedia)) {                                                            tb.insertEmpty(startTag);                                                        }else                                                            if (name.equals("hr")) {                                                                if (tb.inButtonScope("p")) {                                                                    tb.processEndTag("p");                                                                }                                                                tb.insertEmpty(startTag);                                                                tb.framesetOk(false);                                                            }else                                                                if (name.equals("image")) {                                                                    if ((tb.getFromStack("svg")) == null)                                                                        return tb.process(startTag.name("img"));                                                                    else                                                                        tb.insert(startTag);                                                                }else                                                                    if (name.equals("isindex")) {                                                                        tb.error(this);                                                                        if ((tb.getFormElement()) != null)                                                                            return false;                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                        tb.processStartTag("form");                                                                        if (startTag.attributes.hasKey("action")) {                                                                            org.jsoup.nodes.Element form = tb.getFormElement();                                                                            form.attr("action", startTag.attributes.get("action"));                                                                        }                                                                        tb.processStartTag("hr");                                                                        tb.processStartTag("label");                                                                        java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                                                        tb.process(new org.jsoup.parser.Token.Character().data(prompt));                                                                        org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                                                        for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                                                            if (!(org.jsoup.helper.StringUtil.inSorted(attr.getKey(), org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartInputAttribs)))                                                                                inputAttribs.put(attr);                                                                        }                                                                        inputAttribs.put("name", "isindex");                                                                        tb.processStartTag("input", inputAttribs);                                                                        tb.processEndTag("label");                                                                        tb.processStartTag("hr");                                                                        tb.processEndTag("form");                                                                    }else                                                                        if (name.equals("textarea")) {                                                                            tb.insert(startTag);                                                                            tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                                                            tb.markInsertionMode();                                                                            tb.framesetOk(false);                                                                            tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                                                        }else                                                                            if (name.equals("xmp")) {                                                                                if (tb.inButtonScope("p")) {                                                                                    tb.processEndTag("p");                                                                                }                                                                                tb.reconstructFormattingElements();                                                                                tb.framesetOk(false);                                                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                                            }else                                                                                if (name.equals("iframe")) {                                                                                    tb.framesetOk(false);                                                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                                                }else                                                                                    if (name.equals("noembed")) {                                                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                                                    }else                                                                                        if (name.equals("select")) {                                                                                            tb.reconstructFormattingElements();                                                                                            tb.insert(startTag);                                                                                            tb.framesetOk(false);                                                                                            org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                                                            if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                                                            else                                                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                                                        }else                                                                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartOptions)) {                                                                                                if (tb.currentElement().nodeName().equals("option"))                                                                                                    tb.processEndTag("option");                                                                                                tb.reconstructFormattingElements();                                                                                                tb.insert(startTag);                                                                                            }else                                                                                                if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartRuby)) {                                                                                                    if (tb.inScope("ruby")) {                                                                                                        tb.generateImpliedEndTags();                                                                                                        if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                                                            tb.error(this);                                                                                                            tb.popStackToBefore("ruby");                                                                                                        }                                                                                                        tb.insert(startTag);                                                                                                    }                                                                                                }else                                                                                                    if (name.equals("math")) {                                                                                                        tb.reconstructFormattingElements();                                                                                                        tb.insert(startTag);                                                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                                    }else                                                                                                        if (name.equals("svg")) {                                                                                                            tb.reconstructFormattingElements();                                                                                                            tb.insert(startTag);                                                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                                        }else                                                                                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartDrop)) {                                                                                                                tb.error(this);                                                                                                                return false;                                                                                                            }else {                                                                                                                tb.reconstructFormattingElements();                                                                                                                tb.insert(startTag);                                                                                                            }::::INSERT::::STATEMENT::::if (node == formatEl)    break;	false
org.jsoup.parser.HtmlTreeBuilderState::::320::::13718::::13732::::tb.error(this)::::INSERT::::STATEMENT::::tb.process(startTag)	false
org.jsoup.safety.Cleaner::::94::::3696::::5018::::if (source instanceof org.jsoup.nodes.Element) {    org.jsoup.nodes.Element sourceEl = ((org.jsoup.nodes.Element) (source));    if (whitelist.isSafeTag(sourceEl.tagName())) {        org.jsoup.safety.Cleaner.ElementMeta meta = createSafeElement(sourceEl);        org.jsoup.nodes.Element destChild = meta.el;        destination.appendChild(destChild);        numDiscarded += meta.numAttribsDiscarded;        destination = destChild;    }else        if (source != (root)) {            (numDiscarded)++;        }}else    if (source instanceof org.jsoup.nodes.TextNode) {        org.jsoup.nodes.TextNode sourceText = ((org.jsoup.nodes.TextNode) (source));        org.jsoup.nodes.TextNode destText = new org.jsoup.nodes.TextNode(sourceText.getWholeText(), source.baseUri());        destination.appendChild(destText);    }else        if ((source instanceof org.jsoup.nodes.DataNode) && (whitelist.isSafeTag(source.parent().nodeName()))) {            org.jsoup.nodes.DataNode sourceData = ((org.jsoup.nodes.DataNode) (source));            org.jsoup.nodes.DataNode destData = new org.jsoup.nodes.DataNode(sourceData.getWholeData(), source.baseUri());            destination.appendChild(destData);        }else {            (numDiscarded)++;        }::::INSERT::::STATEMENT::::numDiscarded++	false
org.jsoup.parser.HtmlTreeBuilderState::::327::::14143::::14146::::name::::org.jsoup.parser.HtmlTreeBuilderState.nullString	false
org.jsoup.safety.Whitelist::::415::::16258::::16260::::tag::::this.value	false
org.jsoup.parser.HtmlTreeBuilderState::::1324::::62428::::62429::::tb::::org.jsoup.parser.HtmlTreeBuilderState.InTable	false
org.jsoup.parser.HtmlTreeBuilderState::::327::::14119::::26817::::if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartToHead)) {    return tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead);}else    if (name.equals("body")) {        tb.error(this);        java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();        if (((stack.size()) == 1) || (((stack.size()) > 2) && (!(stack.get(1).nodeName().equals("body"))))) {            return false;        }else {            tb.framesetOk(false);            org.jsoup.nodes.Element body = stack.get(1);            for (org.jsoup.nodes.Attribute attribute : startTag.getAttributes()) {                if (!(body.hasAttr(attribute.getKey())))                    body.attributes().put(attribute);            }        }    }else        if (name.equals("frameset")) {            tb.error(this);            java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();            if (((stack.size()) == 1) || (((stack.size()) > 2) && (!(stack.get(1).nodeName().equals("body"))))) {                return false;            }else                if (!(tb.framesetOk())) {                    return false;                }else {                    org.jsoup.nodes.Element second = stack.get(1);                    if ((second.parent()) != null)                        second.remove();                    while ((stack.size()) > 1)                        stack.remove(((stack.size()) - 1));                    tb.insert(startTag);                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InFrameset);                }        }else            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.Headings)) {                if (tb.inButtonScope("p")) {                    tb.processEndTag("p");                }                if (org.jsoup.helper.StringUtil.inSorted(tb.currentElement().nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.Headings)) {                    tb.error(this);                    tb.pop();                }                tb.insert(startTag);            }else                if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartPreListing)) {                    if (tb.inButtonScope("p")) {                        tb.processEndTag("p");                    }                    tb.insert(startTag);                    tb.framesetOk(false);                }else                    if (name.equals("form")) {                        if ((tb.getFormElement()) != null) {                            tb.error(this);                            return false;                        }                        if (tb.inButtonScope("p")) {                            tb.processEndTag("p");                        }                        tb.insertForm(startTag, true);                    }else                        if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.DdDt)) {                            tb.framesetOk(false);                            java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();                            for (int i = (stack.size()) - 1; i > 0; i--) {                                org.jsoup.nodes.Element el = stack.get(i);                                if (org.jsoup.helper.StringUtil.inSorted(el.nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.DdDt)) {                                    tb.processEndTag(el.nodeName());                                    break;                                }                                if ((tb.isSpecial(el)) && (!(org.jsoup.helper.StringUtil.inSorted(el.nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartLiBreakers))))                                    break;                            }                            if (tb.inButtonScope("p")) {                                tb.processEndTag("p");                            }                            tb.insert(startTag);                        }else                            if (name.equals("plaintext")) {                                if (tb.inButtonScope("p")) {                                    tb.processEndTag("p");                                }                                tb.insert(startTag);                                tb.tokeniser.transition(org.jsoup.parser.TokeniserState.PLAINTEXT);                            }else                                if (name.equals("button")) {                                    if (tb.inButtonScope("button")) {                                        tb.error(this);                                        tb.processEndTag("button");                                        tb.process(startTag);                                    }else {                                        tb.reconstructFormattingElements();                                        tb.insert(startTag);                                        tb.framesetOk(false);                                    }                                }else                                    if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.Formatters)) {                                        tb.reconstructFormattingElements();                                        org.jsoup.nodes.Element el = tb.insert(startTag);                                        tb.pushActiveFormattingElements(el);                                    }else                                        if (name.equals("nobr")) {                                            tb.reconstructFormattingElements();                                            if (tb.inScope("nobr")) {                                                tb.error(this);                                                tb.processEndTag("nobr");                                                tb.reconstructFormattingElements();                                            }                                            org.jsoup.nodes.Element el = tb.insert(startTag);                                            tb.pushActiveFormattingElements(el);                                        }else                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartApplets)) {                                                tb.reconstructFormattingElements();                                                tb.insert(startTag);                                                tb.insertMarkerToFormattingElements();                                                tb.framesetOk(false);                                            }else                                                if (name.equals("table")) {                                                    if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                                                        tb.processEndTag("p");                                                    }                                                    tb.insert(startTag);                                                    tb.framesetOk(false);                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                                                }else                                                    if (name.equals("input")) {                                                        tb.reconstructFormattingElements();                                                        org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                                                        if (!(el.attr("type").equalsIgnoreCase("hidden")))                                                            tb.framesetOk(false);                                                    }else                                                        if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartMedia)) {                                                            tb.insertEmpty(startTag);                                                        }else                                                            if (name.equals("hr")) {                                                                if (tb.inButtonScope("p")) {                                                                    tb.processEndTag("p");                                                                }                                                                tb.insertEmpty(startTag);                                                                tb.framesetOk(false);                                                            }else                                                                if (name.equals("image")) {                                                                    if ((tb.getFromStack("svg")) == null)                                                                        return tb.process(startTag.name("img"));                                                                    else                                                                        tb.insert(startTag);                                                                }else                                                                    if (name.equals("isindex")) {                                                                        tb.error(this);                                                                        if ((tb.getFormElement()) != null)                                                                            return false;                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                        tb.processStartTag("form");                                                                        if (startTag.attributes.hasKey("action")) {                                                                            org.jsoup.nodes.Element form = tb.getFormElement();                                                                            form.attr("action", startTag.attributes.get("action"));                                                                        }                                                                        tb.processStartTag("hr");                                                                        tb.processStartTag("label");                                                                        java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                                                        tb.process(new org.jsoup.parser.Token.Character().data(prompt));                                                                        org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                                                        for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                                                            if (!(org.jsoup.helper.StringUtil.inSorted(attr.getKey(), org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartInputAttribs)))                                                                                inputAttribs.put(attr);                                                                        }                                                                        inputAttribs.put("name", "isindex");                                                                        tb.processStartTag("input", inputAttribs);                                                                        tb.processEndTag("label");                                                                        tb.processStartTag("hr");                                                                        tb.processEndTag("form");                                                                    }else                                                                        if (name.equals("textarea")) {                                                                            tb.insert(startTag);                                                                            tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                                                            tb.markInsertionMode();                                                                            tb.framesetOk(false);                                                                            tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                                                        }else                                                                            if (name.equals("xmp")) {                                                                                if (tb.inButtonScope("p")) {                                                                                    tb.processEndTag("p");                                                                                }                                                                                tb.reconstructFormattingElements();                                                                                tb.framesetOk(false);                                                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                                            }else                                                                                if (name.equals("iframe")) {                                                                                    tb.framesetOk(false);                                                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                                                }else                                                                                    if (name.equals("noembed")) {                                                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                                                    }else                                                                                        if (name.equals("select")) {                                                                                            tb.reconstructFormattingElements();                                                                                            tb.insert(startTag);                                                                                            tb.framesetOk(false);                                                                                            org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                                                            if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                                                            else                                                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                                                        }else                                                                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartOptions)) {                                                                                                if (tb.currentElement().nodeName().equals("option"))                                                                                                    tb.processEndTag("option");                                                                                                tb.reconstructFormattingElements();                                                                                                tb.insert(startTag);                                                                                            }else                                                                                                if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartRuby)) {                                                                                                    if (tb.inScope("ruby")) {                                                                                                        tb.generateImpliedEndTags();                                                                                                        if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                                                            tb.error(this);                                                                                                            tb.popStackToBefore("ruby");                                                                                                        }                                                                                                        tb.insert(startTag);                                                                                                    }                                                                                                }else                                                                                                    if (name.equals("math")) {                                                                                                        tb.reconstructFormattingElements();                                                                                                        tb.insert(startTag);                                                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                                    }else                                                                                                        if (name.equals("svg")) {                                                                                                            tb.reconstructFormattingElements();                                                                                                            tb.insert(startTag);                                                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                                        }else                                                                                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartDrop)) {                                                                                                                tb.error(this);                                                                                                                return false;                                                                                                            }else {                                                                                                                tb.reconstructFormattingElements();                                                                                                                tb.insert(startTag);                                                                                                            }::::INSERT::::STATEMENT::::closeCell(tb)	false
org.jsoup.safety.Whitelist::::411::::16134::::16136::::tag::::this.value	false
org.jsoup.safety.Whitelist::::415::::16224::::16262::::org.jsoup.safety.Whitelist.TagName tagName = org.jsoup.safety.Whitelist.TagName.valueOf(tag)::::INSERT::::STATEMENT::::if (isValidAnchor(value)) {    return true;}else {    continue;}	false
org.jsoup.safety.Whitelist::::256::::9472::::9474::::tag::::this.value	false
org.jsoup.safety.Whitelist::::252::::9305::::9307::::tag::::this.value	false
org.jsoup.parser.HtmlTreeBuilderState::::327::::14119::::26817::::if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartToHead)) {    return tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead);}else    if (name.equals("body")) {        tb.error(this);        java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();        if (((stack.size()) == 1) || (((stack.size()) > 2) && (!(stack.get(1).nodeName().equals("body"))))) {            return false;        }else {            tb.framesetOk(false);            org.jsoup.nodes.Element body = stack.get(1);            for (org.jsoup.nodes.Attribute attribute : startTag.getAttributes()) {                if (!(body.hasAttr(attribute.getKey())))                    body.attributes().put(attribute);            }        }    }else        if (name.equals("frameset")) {            tb.error(this);            java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();            if (((stack.size()) == 1) || (((stack.size()) > 2) && (!(stack.get(1).nodeName().equals("body"))))) {                return false;            }else                if (!(tb.framesetOk())) {                    return false;                }else {                    org.jsoup.nodes.Element second = stack.get(1);                    if ((second.parent()) != null)                        second.remove();                    while ((stack.size()) > 1)                        stack.remove(((stack.size()) - 1));                    tb.insert(startTag);                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InFrameset);                }        }else            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.Headings)) {                if (tb.inButtonScope("p")) {                    tb.processEndTag("p");                }                if (org.jsoup.helper.StringUtil.inSorted(tb.currentElement().nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.Headings)) {                    tb.error(this);                    tb.pop();                }                tb.insert(startTag);            }else                if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartPreListing)) {                    if (tb.inButtonScope("p")) {                        tb.processEndTag("p");                    }                    tb.insert(startTag);                    tb.framesetOk(false);                }else                    if (name.equals("form")) {                        if ((tb.getFormElement()) != null) {                            tb.error(this);                            return false;                        }                        if (tb.inButtonScope("p")) {                            tb.processEndTag("p");                        }                        tb.insertForm(startTag, true);                    }else                        if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.DdDt)) {                            tb.framesetOk(false);                            java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();                            for (int i = (stack.size()) - 1; i > 0; i--) {                                org.jsoup.nodes.Element el = stack.get(i);                                if (org.jsoup.helper.StringUtil.inSorted(el.nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.DdDt)) {                                    tb.processEndTag(el.nodeName());                                    break;                                }                                if ((tb.isSpecial(el)) && (!(org.jsoup.helper.StringUtil.inSorted(el.nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartLiBreakers))))                                    break;                            }                            if (tb.inButtonScope("p")) {                                tb.processEndTag("p");                            }                            tb.insert(startTag);                        }else                            if (name.equals("plaintext")) {                                if (tb.inButtonScope("p")) {                                    tb.processEndTag("p");                                }                                tb.insert(startTag);                                tb.tokeniser.transition(org.jsoup.parser.TokeniserState.PLAINTEXT);                            }else                                if (name.equals("button")) {                                    if (tb.inButtonScope("button")) {                                        tb.error(this);                                        tb.processEndTag("button");                                        tb.process(startTag);                                    }else {                                        tb.reconstructFormattingElements();                                        tb.insert(startTag);                                        tb.framesetOk(false);                                    }                                }else                                    if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.Formatters)) {                                        tb.reconstructFormattingElements();                                        org.jsoup.nodes.Element el = tb.insert(startTag);                                        tb.pushActiveFormattingElements(el);                                    }else                                        if (name.equals("nobr")) {                                            tb.reconstructFormattingElements();                                            if (tb.inScope("nobr")) {                                                tb.error(this);                                                tb.processEndTag("nobr");                                                tb.reconstructFormattingElements();                                            }                                            org.jsoup.nodes.Element el = tb.insert(startTag);                                            tb.pushActiveFormattingElements(el);                                        }else                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartApplets)) {                                                tb.reconstructFormattingElements();                                                tb.insert(startTag);                                                tb.insertMarkerToFormattingElements();                                                tb.framesetOk(false);                                            }else                                                if (name.equals("table")) {                                                    if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                                                        tb.processEndTag("p");                                                    }                                                    tb.insert(startTag);                                                    tb.framesetOk(false);                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                                                }else                                                    if (name.equals("input")) {                                                        tb.reconstructFormattingElements();                                                        org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                                                        if (!(el.attr("type").equalsIgnoreCase("hidden")))                                                            tb.framesetOk(false);                                                    }else                                                        if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartMedia)) {                                                            tb.insertEmpty(startTag);                                                        }else                                                            if (name.equals("hr")) {                                                                if (tb.inButtonScope("p")) {                                                                    tb.processEndTag("p");                                                                }                                                                tb.insertEmpty(startTag);                                                                tb.framesetOk(false);                                                            }else                                                                if (name.equals("image")) {                                                                    if ((tb.getFromStack("svg")) == null)                                                                        return tb.process(startTag.name("img"));                                                                    else                                                                        tb.insert(startTag);                                                                }else                                                                    if (name.equals("isindex")) {                                                                        tb.error(this);                                                                        if ((tb.getFormElement()) != null)                                                                            return false;                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                        tb.processStartTag("form");                                                                        if (startTag.attributes.hasKey("action")) {                                                                            org.jsoup.nodes.Element form = tb.getFormElement();                                                                            form.attr("action", startTag.attributes.get("action"));                                                                        }                                                                        tb.processStartTag("hr");                                                                        tb.processStartTag("label");                                                                        java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                                                        tb.process(new org.jsoup.parser.Token.Character().data(prompt));                                                                        org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                                                        for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                                                            if (!(org.jsoup.helper.StringUtil.inSorted(attr.getKey(), org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartInputAttribs)))                                                                                inputAttribs.put(attr);                                                                        }                                                                        inputAttribs.put("name", "isindex");                                                                        tb.processStartTag("input", inputAttribs);                                                                        tb.processEndTag("label");                                                                        tb.processStartTag("hr");                                                                        tb.processEndTag("form");                                                                    }else                                                                        if (name.equals("textarea")) {                                                                            tb.insert(startTag);                                                                            tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                                                            tb.markInsertionMode();                                                                            tb.framesetOk(false);                                                                            tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                                                        }else                                                                            if (name.equals("xmp")) {                                                                                if (tb.inButtonScope("p")) {                                                                                    tb.processEndTag("p");                                                                                }                                                                                tb.reconstructFormattingElements();                                                                                tb.framesetOk(false);                                                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                                            }else                                                                                if (name.equals("iframe")) {                                                                                    tb.framesetOk(false);                                                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                                                }else                                                                                    if (name.equals("noembed")) {                                                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                                                    }else                                                                                        if (name.equals("select")) {                                                                                            tb.reconstructFormattingElements();                                                                                            tb.insert(startTag);                                                                                            tb.framesetOk(false);                                                                                            org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                                                            if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                                                            else                                                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                                                        }else                                                                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartOptions)) {                                                                                                if (tb.currentElement().nodeName().equals("option"))                                                                                                    tb.processEndTag("option");                                                                                                tb.reconstructFormattingElements();                                                                                                tb.insert(startTag);                                                                                            }else                                                                                                if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartRuby)) {                                                                                                    if (tb.inScope("ruby")) {                                                                                                        tb.generateImpliedEndTags();                                                                                                        if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                                                            tb.error(this);                                                                                                            tb.popStackToBefore("ruby");                                                                                                        }                                                                                                        tb.insert(startTag);                                                                                                    }                                                                                                }else                                                                                                    if (name.equals("math")) {                                                                                                        tb.reconstructFormattingElements();                                                                                                        tb.insert(startTag);                                                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                                    }else                                                                                                        if (name.equals("svg")) {                                                                                                            tb.reconstructFormattingElements();                                                                                                            tb.insert(startTag);                                                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                                        }else                                                                                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartDrop)) {                                                                                                                tb.error(this);                                                                                                                return false;                                                                                                            }else {                                                                                                                tb.reconstructFormattingElements();                                                                                                                tb.insert(startTag);                                                                                                            }::::INSERT::::STATEMENT::::tb.process(startTag)	false
org.jsoup.parser.HtmlTreeBuilderState::::1324::::62428::::62429::::tb::::org.jsoup.parser.HtmlTreeBuilderState.InRow	false
org.jsoup.parser.HtmlTreeBuilderState::::320::::13718::::13732::::tb.error(this)::::INSERT::::STATEMENT::::if (notIgnored)    return tb.process(endTag);	false
org.jsoup.parser.HtmlTreeBuilderState::::1324::::62428::::62429::::tb::::org.jsoup.parser.HtmlTreeBuilderState.InTableBody	false
org.jsoup.parser.HtmlTreeBuilderState::::327::::14119::::26817::::if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartToHead)) {    return tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead);}else    if (name.equals("body")) {        tb.error(this);        java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();        if (((stack.size()) == 1) || (((stack.size()) > 2) && (!(stack.get(1).nodeName().equals("body"))))) {            return false;        }else {            tb.framesetOk(false);            org.jsoup.nodes.Element body = stack.get(1);            for (org.jsoup.nodes.Attribute attribute : startTag.getAttributes()) {                if (!(body.hasAttr(attribute.getKey())))                    body.attributes().put(attribute);            }        }    }else        if (name.equals("frameset")) {            tb.error(this);            java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();            if (((stack.size()) == 1) || (((stack.size()) > 2) && (!(stack.get(1).nodeName().equals("body"))))) {                return false;            }else                if (!(tb.framesetOk())) {                    return false;                }else {                    org.jsoup.nodes.Element second = stack.get(1);                    if ((second.parent()) != null)                        second.remove();                    while ((stack.size()) > 1)                        stack.remove(((stack.size()) - 1));                    tb.insert(startTag);                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InFrameset);                }        }else            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.Headings)) {                if (tb.inButtonScope("p")) {                    tb.processEndTag("p");                }                if (org.jsoup.helper.StringUtil.inSorted(tb.currentElement().nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.Headings)) {                    tb.error(this);                    tb.pop();                }                tb.insert(startTag);            }else                if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartPreListing)) {                    if (tb.inButtonScope("p")) {                        tb.processEndTag("p");                    }                    tb.insert(startTag);                    tb.framesetOk(false);                }else                    if (name.equals("form")) {                        if ((tb.getFormElement()) != null) {                            tb.error(this);                            return false;                        }                        if (tb.inButtonScope("p")) {                            tb.processEndTag("p");                        }                        tb.insertForm(startTag, true);                    }else                        if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.DdDt)) {                            tb.framesetOk(false);                            java.util.ArrayList<org.jsoup.nodes.Element> stack = tb.getStack();                            for (int i = (stack.size()) - 1; i > 0; i--) {                                org.jsoup.nodes.Element el = stack.get(i);                                if (org.jsoup.helper.StringUtil.inSorted(el.nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.DdDt)) {                                    tb.processEndTag(el.nodeName());                                    break;                                }                                if ((tb.isSpecial(el)) && (!(org.jsoup.helper.StringUtil.inSorted(el.nodeName(), org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartLiBreakers))))                                    break;                            }                            if (tb.inButtonScope("p")) {                                tb.processEndTag("p");                            }                            tb.insert(startTag);                        }else                            if (name.equals("plaintext")) {                                if (tb.inButtonScope("p")) {                                    tb.processEndTag("p");                                }                                tb.insert(startTag);                                tb.tokeniser.transition(org.jsoup.parser.TokeniserState.PLAINTEXT);                            }else                                if (name.equals("button")) {                                    if (tb.inButtonScope("button")) {                                        tb.error(this);                                        tb.processEndTag("button");                                        tb.process(startTag);                                    }else {                                        tb.reconstructFormattingElements();                                        tb.insert(startTag);                                        tb.framesetOk(false);                                    }                                }else                                    if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.Formatters)) {                                        tb.reconstructFormattingElements();                                        org.jsoup.nodes.Element el = tb.insert(startTag);                                        tb.pushActiveFormattingElements(el);                                    }else                                        if (name.equals("nobr")) {                                            tb.reconstructFormattingElements();                                            if (tb.inScope("nobr")) {                                                tb.error(this);                                                tb.processEndTag("nobr");                                                tb.reconstructFormattingElements();                                            }                                            org.jsoup.nodes.Element el = tb.insert(startTag);                                            tb.pushActiveFormattingElements(el);                                        }else                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartApplets)) {                                                tb.reconstructFormattingElements();                                                tb.insert(startTag);                                                tb.insertMarkerToFormattingElements();                                                tb.framesetOk(false);                                            }else                                                if (name.equals("table")) {                                                    if (((tb.getDocument().quirksMode()) != (org.jsoup.nodes.Document.QuirksMode.quirks)) && (tb.inButtonScope("p"))) {                                                        tb.processEndTag("p");                                                    }                                                    tb.insert(startTag);                                                    tb.framesetOk(false);                                                    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);                                                }else                                                    if (name.equals("input")) {                                                        tb.reconstructFormattingElements();                                                        org.jsoup.nodes.Element el = tb.insertEmpty(startTag);                                                        if (!(el.attr("type").equalsIgnoreCase("hidden")))                                                            tb.framesetOk(false);                                                    }else                                                        if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartMedia)) {                                                            tb.insertEmpty(startTag);                                                        }else                                                            if (name.equals("hr")) {                                                                if (tb.inButtonScope("p")) {                                                                    tb.processEndTag("p");                                                                }                                                                tb.insertEmpty(startTag);                                                                tb.framesetOk(false);                                                            }else                                                                if (name.equals("image")) {                                                                    if ((tb.getFromStack("svg")) == null)                                                                        return tb.process(startTag.name("img"));                                                                    else                                                                        tb.insert(startTag);                                                                }else                                                                    if (name.equals("isindex")) {                                                                        tb.error(this);                                                                        if ((tb.getFormElement()) != null)                                                                            return false;                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                        tb.processStartTag("form");                                                                        if (startTag.attributes.hasKey("action")) {                                                                            org.jsoup.nodes.Element form = tb.getFormElement();                                                                            form.attr("action", startTag.attributes.get("action"));                                                                        }                                                                        tb.processStartTag("hr");                                                                        tb.processStartTag("label");                                                                        java.lang.String prompt = (startTag.attributes.hasKey("prompt")) ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: ";                                                                        tb.process(new org.jsoup.parser.Token.Character().data(prompt));                                                                        org.jsoup.nodes.Attributes inputAttribs = new org.jsoup.nodes.Attributes();                                                                        for (org.jsoup.nodes.Attribute attr : startTag.attributes) {                                                                            if (!(org.jsoup.helper.StringUtil.inSorted(attr.getKey(), org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartInputAttribs)))                                                                                inputAttribs.put(attr);                                                                        }                                                                        inputAttribs.put("name", "isindex");                                                                        tb.processStartTag("input", inputAttribs);                                                                        tb.processEndTag("label");                                                                        tb.processStartTag("hr");                                                                        tb.processEndTag("form");                                                                    }else                                                                        if (name.equals("textarea")) {                                                                            tb.insert(startTag);                                                                            tb.tokeniser.transition(org.jsoup.parser.TokeniserState.Rcdata);                                                                            tb.markInsertionMode();                                                                            tb.framesetOk(false);                                                                            tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);                                                                        }else                                                                            if (name.equals("xmp")) {                                                                                if (tb.inButtonScope("p")) {                                                                                    tb.processEndTag("p");                                                                                }                                                                                tb.reconstructFormattingElements();                                                                                tb.framesetOk(false);                                                                                org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                                            }else                                                                                if (name.equals("iframe")) {                                                                                    tb.framesetOk(false);                                                                                    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                                                }else                                                                                    if (name.equals("noembed")) {                                                                                        org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);                                                                                    }else                                                                                        if (name.equals("select")) {                                                                                            tb.reconstructFormattingElements();                                                                                            tb.insert(startTag);                                                                                            tb.framesetOk(false);                                                                                            org.jsoup.parser.HtmlTreeBuilderState state = tb.state();                                                                                            if (((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable)) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow))) || (state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)))                                                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);                                                                                            else                                                                                                tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);                                                                                        }else                                                                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartOptions)) {                                                                                                if (tb.currentElement().nodeName().equals("option"))                                                                                                    tb.processEndTag("option");                                                                                                tb.reconstructFormattingElements();                                                                                                tb.insert(startTag);                                                                                            }else                                                                                                if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartRuby)) {                                                                                                    if (tb.inScope("ruby")) {                                                                                                        tb.generateImpliedEndTags();                                                                                                        if (!(tb.currentElement().nodeName().equals("ruby"))) {                                                                                                            tb.error(this);                                                                                                            tb.popStackToBefore("ruby");                                                                                                        }                                                                                                        tb.insert(startTag);                                                                                                    }                                                                                                }else                                                                                                    if (name.equals("math")) {                                                                                                        tb.reconstructFormattingElements();                                                                                                        tb.insert(startTag);                                                                                                        tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                                    }else                                                                                                        if (name.equals("svg")) {                                                                                                            tb.reconstructFormattingElements();                                                                                                            tb.insert(startTag);                                                                                                            tb.tokeniser.acknowledgeSelfClosingFlag();                                                                                                        }else                                                                                                            if (org.jsoup.helper.StringUtil.inSorted(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartDrop)) {                                                                                                                tb.error(this);                                                                                                                return false;                                                                                                            }else {                                                                                                                tb.reconstructFormattingElements();                                                                                                                tb.insert(startTag);                                                                                                            }::::INSERT::::STATEMENT::::if (notIgnored)    return tb.process(endTag);	false
org.jsoup.parser.HtmlTreeBuilderState::::1324::::62428::::62429::::tb::::org.jsoup.parser.HtmlTreeBuilderState.Text	false
org.jsoup.parser.HtmlTreeBuilderState::::327::::14143::::14146::::name::::prompt	false
org.jsoup.parser.HtmlTreeBuilderState::::1324::::62428::::62429::::tb::::org.jsoup.parser.HtmlTreeBuilderState.InCaption	false
org.jsoup.parser.HtmlTreeBuilderState::::1324::::62428::::62429::::tb::::org.jsoup.parser.HtmlTreeBuilderState.InCell	false
org.jsoup.parser.HtmlTreeBuilderState::::320::::13718::::13732::::tb.error(this)::::DELETE::::STATEMENT	false
org.jsoup.parser.HtmlTreeBuilderState::::1324::::62428::::62429::::tb::::org.jsoup.parser.HtmlTreeBuilderState.InSelect	false
org.jsoup.parser.HtmlTreeBuilderState::::1324::::62428::::62429::::tb::::org.jsoup.parser.HtmlTreeBuilderState.InFrameset	false
org.jsoup.parser.HtmlTreeBuilderState::::1324::::62428::::62429::::tb::::org.jsoup.parser.HtmlTreeBuilderState.BeforeHtml	false
org.jsoup.parser.HtmlTreeBuilderState::::1324::::62428::::62429::::tb::::org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable	false
org.jsoup.parser.HtmlTreeBuilderState::::1324::::62428::::62429::::tb::::org.jsoup.parser.HtmlTreeBuilderState.BeforeHead	false
org.jsoup.parser.HtmlTreeBuilderState::::1324::::62428::::62429::::tb::::org.jsoup.parser.HtmlTreeBuilderState.InHeadNoscript	false
org.jsoup.parser.HtmlTreeBuilderState::::1324::::62428::::62429::::tb::::org.jsoup.parser.HtmlTreeBuilderState.InTableText	false
org.jsoup.parser.HtmlTreeBuilderState::::1324::::62428::::62429::::tb::::org.jsoup.parser.HtmlTreeBuilderState.InColumnGroup	false
org.jsoup.parser.HtmlTreeBuilderState::::1324::::62428::::62429::::tb::::org.jsoup.parser.HtmlTreeBuilderState.AfterBody	false
org.jsoup.parser.HtmlTreeBuilderState::::1324::::62428::::62429::::tb::::org.jsoup.parser.HtmlTreeBuilderState.AfterFrameset	false
org.jsoup.parser.HtmlTreeBuilderState::::1324::::62428::::62429::::tb::::org.jsoup.parser.HtmlTreeBuilderState.AfterAfterBody	false
org.jsoup.parser.HtmlTreeBuilderState::::1324::::62428::::62429::::tb::::org.jsoup.parser.HtmlTreeBuilderState.AfterAfterFrameset	false
org.jsoup.parser.HtmlTreeBuilderState::::1324::::62428::::62429::::tb::::org.jsoup.parser.HtmlTreeBuilderState.AfterHead	false
